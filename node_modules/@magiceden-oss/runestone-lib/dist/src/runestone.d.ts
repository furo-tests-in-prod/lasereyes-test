/// <reference types="node" />
import { Edict } from './edict';
import { Etching } from './etching';
import { u128, u32 } from './integer';
import { Option } from './monads';
import { RuneId } from './runeid';
import { Artifact } from './artifact';
import { Flaw } from './flaw';
export declare const MAX_SPACERS = 134217727;
export type RunestoneTx = {
    vout: {
        scriptPubKey: {
            hex: string;
        };
    }[];
};
type Payload = Buffer | Flaw;
export declare function isValidPayload(payload: Payload): payload is Buffer;
export declare class Runestone {
    readonly mint: Option<RuneId>;
    readonly pointer: Option<u32>;
    readonly edicts: Edict[];
    readonly etching: Option<Etching>;
    constructor(mint: Option<RuneId>, pointer: Option<u32>, edicts: Edict[], etching: Option<Etching>);
    static decipher(transaction: RunestoneTx): Option<Artifact>;
    encipher(): Buffer;
    static payload(transaction: RunestoneTx): Option<Payload>;
    static integers(payload: Buffer): Option<u128[]>;
}
export {};
//# sourceMappingURL=runestone.d.ts.map