import { LaserEyesClient, LaserEyesStoreType, NetworkType } from '@omnisat/lasereyes-core';
import { LaserEyesContextType } from './types';
import { MapStore, WritableAtom } from 'nanostores';
export declare const defaultMethods: {
    connect: () => Promise<void>;
    disconnect: () => void;
    getBalance: () => Promise<string>;
    getMetaBalances: () => Promise<never[]>;
    getInscriptions: () => Promise<never[]>;
    getNetwork: () => Promise<string>;
    getPublicKey: () => Promise<string>;
    pushPsbt: () => Promise<string>;
    signMessage: () => Promise<string>;
    requestAccounts: () => Promise<never[]>;
    sendBTC: () => Promise<string>;
    signPsbt: () => Promise<{
        signedPsbtBase64: string;
        signedPsbtHex: string;
    }>;
    switchNetwork: () => Promise<void>;
    inscribe: () => Promise<string>;
    send: () => Promise<string>;
};
export declare const LaserEyesStoreContext: import('react').Context<{
    $store: MapStore<LaserEyesStoreType>;
    $network: WritableAtom<NetworkType>;
    client: LaserEyesClient | null;
    methods: Pick<LaserEyesContextType, "switchNetwork" | "signPsbt" | "signMessage" | "requestAccounts" | "sendBTC" | "inscribe" | "send" | "getPublicKey" | "getNetwork" | "pushPsbt" | "getInscriptions" | "getBalance" | "getMetaBalances" | "disconnect" | "connect">;
}>;
//# sourceMappingURL=context.d.ts.map