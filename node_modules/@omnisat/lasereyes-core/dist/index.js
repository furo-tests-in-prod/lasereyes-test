var i2 = Object.defineProperty;
var s2 = (e, t, r) => t in e ? i2(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r;
var oe = (e, t, r) => s2(e, typeof t != "symbol" ? t + "" : t, r);
function a2(e, t) {
  for (var r = 0; r < t.length; r++) {
    const n = t[r];
    if (typeof n != "string" && !Array.isArray(n)) {
      for (const o in n)
        if (o !== "default" && !(o in e)) {
          const i = Object.getOwnPropertyDescriptor(n, o);
          i && Object.defineProperty(e, o, i.get ? i : {
            enumerable: !0,
            get: () => n[o]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }));
}
let Ff = Symbol("clean"), Ur = [], Gn = 0;
const ec = 4;
let Kf = (e) => {
  let t = [], r = {
    get() {
      return r.lc || r.listen(() => {
      })(), r.value;
    },
    lc: 0,
    listen(n) {
      return r.lc = t.push(n), () => {
        for (let i = Gn + ec; i < Ur.length; )
          Ur[i] === n ? Ur.splice(i, ec) : i += ec;
        let o = t.indexOf(n);
        ~o && (t.splice(o, 1), --r.lc || r.off());
      };
    },
    notify(n, o) {
      let i = !Ur.length;
      for (let s of t)
        Ur.push(
          s,
          r.value,
          n,
          o
        );
      if (i) {
        for (Gn = 0; Gn < Ur.length; Gn += ec)
          Ur[Gn](
            Ur[Gn + 1],
            Ur[Gn + 2],
            Ur[Gn + 3]
          );
        Ur.length = 0;
      }
    },
    /* It will be called on last listener unsubscribing.
       We will redefine it in onMount and onStop. */
    off() {
    },
    set(n) {
      let o = r.value;
      o !== n && (r.value = n, r.notify(o));
    },
    subscribe(n) {
      let o = r.listen(n);
      return n(r.value), o;
    },
    value: e
  };
  return process.env.NODE_ENV !== "production" && (r[Ff] = () => {
    t = [], r.lc = 0, r.off();
  }), r;
};
const c2 = 5, Ii = 6, tc = 10;
let u2 = (e, t, r, n) => (e.events = e.events || {}, e.events[r + tc] || (e.events[r + tc] = n((o) => {
  e.events[r].reduceRight((i, s) => (s(i), i), {
    shared: {},
    ...o
  });
})), e.events[r] = e.events[r] || [], e.events[r].push(t), () => {
  let o = e.events[r], i = o.indexOf(t);
  o.splice(i, 1), o.length || (delete e.events[r], e.events[r + tc](), delete e.events[r + tc]);
}), l2 = 1e3, f2 = (e, t) => u2(e, (n) => {
  let o = t(n);
  o && e.events[Ii].push(o);
}, c2, (n) => {
  let o = e.listen;
  e.listen = (...s) => (!e.lc && !e.active && (e.active = !0, n()), o(...s));
  let i = e.off;
  if (e.events[Ii] = [], e.off = () => {
    i(), setTimeout(() => {
      if (e.active && !e.lc) {
        e.active = !1;
        for (let s of e.events[Ii]) s();
        e.events[Ii] = [];
      }
    }, l2);
  }, process.env.NODE_ENV !== "production") {
    let s = e[Ff];
    e[Ff] = () => {
      for (let a of e.events[Ii]) a();
      e.events[Ii] = [], e.active = !1, s();
    };
  }
  return () => {
    e.listen = o, e.off = i;
  };
}), d2 = (e) => {
  e.listen(() => {
  });
};
function Or(e, t, r) {
  let n = /* @__PURE__ */ new Set([...t, void 0]);
  return e.listen((o, i, s) => {
    n.has(s) && r(o, i, s);
  });
}
let Wg = (e = {}) => {
  let t = Kf(e);
  return t.setKey = function(r, n) {
    let o = t.value;
    typeof n > "u" && r in t.value ? (t.value = { ...t.value }, delete t.value[r], t.notify(o, r)) : t.value[r] !== n && (t.value = {
      ...t.value,
      [r]: n
    }, t.notify(o, r));
  }, t;
};
const js = "oyl", Ci = "unisat", Do = "xverse", Fo = "phantom", Ms = "leather", vo = "magic-eden", Ds = "okx", Hi = "wizz", Ko = "orange", Vo = "op_net", Li = "sparrow", Di = "p2tr", h2 = "p2pkh", p2 = "p2sh-p2wpkh", Vf = "p2wpkh", f7 = "p2psh", g2 = "p2wsh", qd = "p2sh", d7 = {
  leather: {
    name: "leather",
    url: "https://leather.io/install-extension"
  },
  "magic-eden": {
    name: "magic-eden",
    url: "https://wallet.magiceden.io/"
  },
  okx: {
    name: "okx",
    url: "https://chromewebstore.google.com/detail/okx-wallet/mcohilncbfahbmgdjkbpemcciiolgcge"
  },
  op_net: {
    name: "op_net",
    url: "https://opnet.org/"
  },
  orange: {
    name: "orange",
    url: "https://www.orangewallet.com/"
  },
  oyl: {
    name: "oyl",
    url: "https://www.oyl.io/#get-wallet"
  },
  phantom: {
    name: "phantom",
    url: "https://phantom.app/download"
  },
  sparrow: {
    name: "sparrow",
    url: "https://sparrowwallet.com/"
  },
  unisat: {
    name: "unisat",
    url: "https://unisat.io/download"
  },
  wizz: {
    name: "wizz",
    url: "https://wizzwallet.io/#extension"
  },
  xverse: {
    name: "xverse",
    url: "https://www.xverse.app/download"
  }
}, Ml = "defaultWallet", Zr = {
  /**
   * The message prefix used for signing Bitcoin messages.
   */
  messagePrefix: `Bitcoin Signed Message:
`,
  /**
   * The Bech32 prefix used for Bitcoin addresses.
   */
  bech32: "bc",
  /**
   * The BIP32 key prefixes for Bitcoin.
   */
  bip32: {
    /**
     * The public key prefix for BIP32 extended public keys.
     */
    public: 76067358,
    /**
     * The private key prefix for BIP32 extended private keys.
     */
    private: 76066276
  },
  /**
   * The prefix for Bitcoin public key hashes.
   */
  pubKeyHash: 0,
  /**
   * The prefix for Bitcoin script hashes.
   */
  scriptHash: 5,
  /**
   * The prefix for Bitcoin Wallet Import Format (WIF) private keys.
   */
  wif: 128
}, m2 = {
  messagePrefix: `Bitcoin Signed Message:
`,
  bech32: "tb",
  bip32: {
    public: 70617039,
    private: 70615956
  },
  pubKeyHash: 111,
  scriptHash: 196,
  wif: 239
};
function b2(e) {
  if (e.length < 8 || e.length > 72 || e[0] !== 48 || e[1] !== e.length - 2 || e[2] !== 2) return !1;
  const t = e[3];
  if (t === 0 || 5 + t >= e.length || e[4 + t] !== 2) return !1;
  const r = e[5 + t];
  return !(r === 0 || 6 + t + r !== e.length || e[4] & 128 || t > 1 && e[4] === 0 && !(e[5] & 128) || e[t + 6] & 128 || r > 1 && e[t + 6] === 0 && !(e[t + 7] & 128));
}
function y2(e) {
  if (e.length < 8) throw new Error("DER sequence length is too short");
  if (e.length > 72) throw new Error("DER sequence length is too long");
  if (e[0] !== 48) throw new Error("Expected DER sequence");
  if (e[1] !== e.length - 2)
    throw new Error("DER sequence length is invalid");
  if (e[2] !== 2) throw new Error("Expected DER integer");
  const t = e[3];
  if (t === 0) throw new Error("R length is zero");
  if (5 + t >= e.length) throw new Error("R length is too long");
  if (e[4 + t] !== 2) throw new Error("Expected DER integer (2)");
  const r = e[5 + t];
  if (r === 0) throw new Error("S length is zero");
  if (6 + t + r !== e.length) throw new Error("S length is invalid");
  if (e[4] & 128) throw new Error("R value is negative");
  if (t > 1 && e[4] === 0 && !(e[5] & 128))
    throw new Error("R value excessively padded");
  if (e[t + 6] & 128) throw new Error("S value is negative");
  if (r > 1 && e[t + 6] === 0 && !(e[t + 7] & 128))
    throw new Error("S value excessively padded");
  return {
    r: e.slice(4, 4 + t),
    s: e.slice(6 + t)
  };
}
function w2(e, t) {
  const r = e.length, n = t.length;
  if (r === 0) throw new Error("R length is zero");
  if (n === 0) throw new Error("S length is zero");
  if (r > 33) throw new Error("R length is too long");
  if (n > 33) throw new Error("S length is too long");
  if (e[0] & 128) throw new Error("R value is negative");
  if (t[0] & 128) throw new Error("S value is negative");
  if (r > 1 && e[0] === 0 && !(e[1] & 128))
    throw new Error("R value excessively padded");
  if (n > 1 && t[0] === 0 && !(t[1] & 128))
    throw new Error("S value excessively padded");
  const o = new Uint8Array(6 + r + n);
  return o[0] = 48, o[1] = o.length - 2, o[2] = 2, o[3] = e.length, o.set(e, 4), o[4 + r] = 2, o[5 + r] = t.length, o.set(t, 6 + r), o;
}
const Ze = {
  OP_FALSE: 0,
  OP_0: 0,
  OP_PUSHDATA1: 76,
  OP_PUSHDATA2: 77,
  OP_PUSHDATA4: 78,
  OP_1NEGATE: 79,
  OP_RESERVED: 80,
  OP_TRUE: 81,
  OP_1: 81,
  OP_2: 82,
  OP_3: 83,
  OP_4: 84,
  OP_5: 85,
  OP_6: 86,
  OP_7: 87,
  OP_8: 88,
  OP_9: 89,
  OP_10: 90,
  OP_11: 91,
  OP_12: 92,
  OP_13: 93,
  OP_14: 94,
  OP_15: 95,
  OP_16: 96,
  OP_NOP: 97,
  OP_VER: 98,
  OP_IF: 99,
  OP_NOTIF: 100,
  OP_VERIF: 101,
  OP_VERNOTIF: 102,
  OP_ELSE: 103,
  OP_ENDIF: 104,
  OP_VERIFY: 105,
  OP_RETURN: 106,
  OP_TOALTSTACK: 107,
  OP_FROMALTSTACK: 108,
  OP_2DROP: 109,
  OP_2DUP: 110,
  OP_3DUP: 111,
  OP_2OVER: 112,
  OP_2ROT: 113,
  OP_2SWAP: 114,
  OP_IFDUP: 115,
  OP_DEPTH: 116,
  OP_DROP: 117,
  OP_DUP: 118,
  OP_NIP: 119,
  OP_OVER: 120,
  OP_PICK: 121,
  OP_ROLL: 122,
  OP_ROT: 123,
  OP_SWAP: 124,
  OP_TUCK: 125,
  OP_CAT: 126,
  OP_SUBSTR: 127,
  OP_LEFT: 128,
  OP_RIGHT: 129,
  OP_SIZE: 130,
  OP_INVERT: 131,
  OP_AND: 132,
  OP_OR: 133,
  OP_XOR: 134,
  OP_EQUAL: 135,
  OP_EQUALVERIFY: 136,
  OP_RESERVED1: 137,
  OP_RESERVED2: 138,
  OP_1ADD: 139,
  OP_1SUB: 140,
  OP_2MUL: 141,
  OP_2DIV: 142,
  OP_NEGATE: 143,
  OP_ABS: 144,
  OP_NOT: 145,
  OP_0NOTEQUAL: 146,
  OP_ADD: 147,
  OP_SUB: 148,
  OP_MUL: 149,
  OP_DIV: 150,
  OP_MOD: 151,
  OP_LSHIFT: 152,
  OP_RSHIFT: 153,
  OP_BOOLAND: 154,
  OP_BOOLOR: 155,
  OP_NUMEQUAL: 156,
  OP_NUMEQUALVERIFY: 157,
  OP_NUMNOTEQUAL: 158,
  OP_LESSTHAN: 159,
  OP_GREATERTHAN: 160,
  OP_LESSTHANOREQUAL: 161,
  OP_GREATERTHANOREQUAL: 162,
  OP_MIN: 163,
  OP_MAX: 164,
  OP_WITHIN: 165,
  OP_RIPEMD160: 166,
  OP_SHA1: 167,
  OP_SHA256: 168,
  OP_HASH160: 169,
  OP_HASH256: 170,
  OP_CODESEPARATOR: 171,
  OP_CHECKSIG: 172,
  OP_CHECKSIGVERIFY: 173,
  OP_CHECKMULTISIG: 174,
  OP_CHECKMULTISIGVERIFY: 175,
  OP_NOP1: 176,
  OP_NOP2: 177,
  OP_CHECKLOCKTIMEVERIFY: 177,
  OP_NOP3: 178,
  OP_CHECKSEQUENCEVERIFY: 178,
  OP_NOP4: 179,
  OP_NOP5: 180,
  OP_NOP6: 181,
  OP_NOP7: 182,
  OP_NOP8: 183,
  OP_NOP9: 184,
  OP_NOP10: 185,
  OP_CHECKSIGADD: 186,
  OP_PUBKEYHASH: 253,
  OP_PUBKEY: 254,
  OP_INVALIDOPCODE: 255
}, Zg = {};
for (const e of Object.keys(Ze)) {
  const t = Ze[e];
  Zg[t] = e;
}
const Hc = "0123456789abcdefABCDEF", Lc = Hc.split("").map((e) => e.codePointAt(0)), zc = Array(256).fill(!0).map((e, t) => {
  const r = String.fromCodePoint(t), n = Hc.indexOf(r);
  return n < 0 ? void 0 : n < 16 ? n : n - 6;
}), Xg = new TextEncoder(), Yg = new TextDecoder();
function v2(e) {
  return Yg.decode(e);
}
function E2(e) {
  return Xg.encode(e);
}
function dt(e) {
  const t = e.reduce((o, i) => o + i.length, 0), r = new Uint8Array(t);
  let n = 0;
  for (const o of e)
    r.set(o, n), n += o.length;
  return r;
}
function ye(e) {
  const t = e || new Uint8Array();
  return t.length > 512 ? _2(t) : x2(t);
}
function x2(e) {
  let t = "";
  for (let r = 0; r < e.length; ++r)
    t += Hc[zc[Lc[e[r] >> 4]]], t += Hc[zc[Lc[e[r] & 15]]];
  return t;
}
function _2(e) {
  const t = new Uint8Array(e.length * 2);
  for (let r = 0; r < e.length; ++r)
    t[r * 2] = Lc[e[r] >> 4], t[r * 2 + 1] = Lc[e[r] & 15];
  return Yg.decode(t);
}
function Dn(e) {
  const t = Xg.encode(e || ""), r = new Uint8Array(Math.floor(t.length / 2));
  let n;
  for (n = 0; n < r.length; n++) {
    const o = zc[t[n * 2]], i = zc[t[n * 2 + 1]];
    if (o === void 0 || i === void 0)
      break;
    r[n] = o << 4 | i;
  }
  return n === r.length ? r : r.slice(0, n);
}
function S2(e) {
  return btoa(String.fromCharCode(...e));
}
function Jg(e) {
  const t = atob(e), r = new Uint8Array(t.length);
  for (let n = 0; n < t.length; n++)
    r[n] = t.charCodeAt(n);
  return r;
}
function te(e, t) {
  const r = Math.min(e.length, t.length);
  for (let n = 0; n < r; ++n)
    if (e[n] !== t[n])
      return e[n] < t[n] ? -1 : 1;
  return e.length === t.length ? 0 : e.length > t.length ? 1 : -1;
}
function dr(e, t, r) {
  if (t + 1 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r > 255)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= 255. Received ${r}`);
  return e[t] = r, t + 1;
}
function A2(e, t, r, n) {
  if (t + 2 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (n = n.toUpperCase(), r > 65535)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= 65535. Received ${r}`);
  return n === "LE" ? (e[t] = r & 255, e[t + 1] = r >> 8 & 255) : (e[t] = r >> 8 & 255, e[t + 1] = r & 255), t + 2;
}
function Ea(e, t, r, n) {
  if (t + 4 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (n = n.toUpperCase(), r > 4294967295)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= ${4294967295}. Received ${r}`);
  return n === "LE" ? (e[t] = r & 255, e[t + 1] = r >> 8 & 255, e[t + 2] = r >> 16 & 255, e[t + 3] = r >> 24 & 255) : (e[t] = r >> 24 & 255, e[t + 1] = r >> 16 & 255, e[t + 2] = r >> 8 & 255, e[t + 3] = r & 255), t + 4;
}
function k2(e, t, r, n) {
  if (t + 8 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (n = n.toUpperCase(), r > 0xffffffffffffffffn)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= ${0xffffffffffffffffn}. Received ${r}`);
  return n === "LE" ? (e[t] = Number(r & 0xffn), e[t + 1] = Number(r >> 8n & 0xffn), e[t + 2] = Number(r >> 16n & 0xffn), e[t + 3] = Number(r >> 24n & 0xffn), e[t + 4] = Number(r >> 32n & 0xffn), e[t + 5] = Number(r >> 40n & 0xffn), e[t + 6] = Number(r >> 48n & 0xffn), e[t + 7] = Number(r >> 56n & 0xffn)) : (e[t] = Number(r >> 56n & 0xffn), e[t + 1] = Number(r >> 48n & 0xffn), e[t + 2] = Number(r >> 40n & 0xffn), e[t + 3] = Number(r >> 32n & 0xffn), e[t + 4] = Number(r >> 24n & 0xffn), e[t + 5] = Number(r >> 16n & 0xffn), e[t + 6] = Number(r >> 8n & 0xffn), e[t + 7] = Number(r & 0xffn)), t + 8;
}
function Cn(e, t) {
  if (t + 1 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  return e[t];
}
function T2(e, t, r) {
  if (t + 2 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r = r.toUpperCase(), r === "LE") {
    let n = 0;
    return n = (n << 8) + e[t + 1], n = (n << 8) + e[t], n;
  } else {
    let n = 0;
    return n = (n << 8) + e[t], n = (n << 8) + e[t + 1], n;
  }
}
function us(e, t, r) {
  if (t + 4 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r = r.toUpperCase(), r === "LE") {
    let n = 0;
    return n = (n << 8) + e[t + 3] >>> 0, n = (n << 8) + e[t + 2] >>> 0, n = (n << 8) + e[t + 1] >>> 0, n = (n << 8) + e[t] >>> 0, n;
  } else {
    let n = 0;
    return n = (n << 8) + e[t] >>> 0, n = (n << 8) + e[t + 1] >>> 0, n = (n << 8) + e[t + 2] >>> 0, n = (n << 8) + e[t + 3] >>> 0, n;
  }
}
function Qg(e, t, r, n) {
  if (t + 4 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r > 2147483647 || r < -2147483648)
    throw new Error(`The value of "value" is out of range. It must be >= -2147483648 and <= 2147483647. Received ${r}`);
  return n = n.toUpperCase(), n === "LE" ? (e[t] = r & 255, e[t + 1] = r >> 8 & 255, e[t + 2] = r >> 16 & 255, e[t + 3] = r >> 24 & 255) : (e[t] = r >> 24 & 255, e[t + 1] = r >> 16 & 255, e[t + 2] = r >> 8 & 255, e[t + 3] = r & 255), t + 4;
}
function em(e, t, r, n) {
  if (t + 8 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r > 0x7fffffffffffffffn || r < -0x8000000000000000n)
    throw new Error(`The value of "value" is out of range. It must be >= ${-0x8000000000000000n} and <= ${0x7fffffffffffffffn}. Received ${r}`);
  return n = n.toUpperCase(), n === "LE" ? (e[t] = Number(r & 0xffn), e[t + 1] = Number(r >> 8n & 0xffn), e[t + 2] = Number(r >> 16n & 0xffn), e[t + 3] = Number(r >> 24n & 0xffn), e[t + 4] = Number(r >> 32n & 0xffn), e[t + 5] = Number(r >> 40n & 0xffn), e[t + 6] = Number(r >> 48n & 0xffn), e[t + 7] = Number(r >> 56n & 0xffn)) : (e[t] = Number(r >> 56n & 0xffn), e[t + 1] = Number(r >> 48n & 0xffn), e[t + 2] = Number(r >> 40n & 0xffn), e[t + 3] = Number(r >> 32n & 0xffn), e[t + 4] = Number(r >> 24n & 0xffn), e[t + 5] = Number(r >> 16n & 0xffn), e[t + 6] = Number(r >> 8n & 0xffn), e[t + 7] = Number(r & 0xffn)), t + 8;
}
function I2(e, t, r) {
  if (t + 4 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r = r.toUpperCase(), r === "LE") {
    const n = e[t] + (e[t + 1] << 8) + (e[t + 2] << 16) + (e[t + 3] << 24 >>> 0);
    return e[t + 3] <= 127 ? n : n - 4294967296;
  } else {
    const n = (e[t] << 24 >>> 0) + (e[t + 1] << 16) + (e[t + 2] << 8) + e[t + 3];
    return e[t] <= 127 ? n : n - 4294967296;
  }
}
function tm(e, t, r) {
  if (t + 8 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  r = r.toUpperCase();
  let n = 0n;
  if (r === "LE")
    return n = (n << 8n) + BigInt(e[t + 7]), n = (n << 8n) + BigInt(e[t + 6]), n = (n << 8n) + BigInt(e[t + 5]), n = (n << 8n) + BigInt(e[t + 4]), n = (n << 8n) + BigInt(e[t + 3]), n = (n << 8n) + BigInt(e[t + 2]), n = (n << 8n) + BigInt(e[t + 1]), n = (n << 8n) + BigInt(e[t]), e[t + 7] <= 127 ? n : n - 0x10000000000000000n;
  {
    let o = 0n;
    return o = (o << 8n) + BigInt(e[t]), o = (o << 8n) + BigInt(e[t + 1]), o = (o << 8n) + BigInt(e[t + 2]), o = (o << 8n) + BigInt(e[t + 3]), o = (o << 8n) + BigInt(e[t + 4]), o = (o << 8n) + BigInt(e[t + 5]), o = (o << 8n) + BigInt(e[t + 6]), o = (o << 8n) + BigInt(e[t + 7]), e[t] <= 127 ? o : o - 0x10000000000000000n;
  }
}
function rm(e) {
  return e < Ze.OP_PUSHDATA1 ? 1 : e <= 255 ? 2 : e <= 65535 ? 3 : 5;
}
function P2(e, t, r) {
  const n = rm(t);
  return n === 1 ? dr(e, r, t) : n === 2 ? (dr(e, r, Ze.OP_PUSHDATA1), dr(e, r + 1, t)) : n === 3 ? (dr(e, r, Ze.OP_PUSHDATA2), A2(e, r + 1, t, "LE")) : (dr(e, r, Ze.OP_PUSHDATA4), Ea(e, r + 1, t, "LE")), n;
}
function O2(e, t) {
  const r = Cn(e, t);
  let n, o;
  if (r < Ze.OP_PUSHDATA1)
    n = r, o = 1;
  else if (r === Ze.OP_PUSHDATA1) {
    if (t + 2 > e.length) return null;
    n = Cn(e, t + 1), o = 2;
  } else if (r === Ze.OP_PUSHDATA2) {
    if (t + 3 > e.length) return null;
    n = T2(e, t + 1, "LE"), o = 3;
  } else {
    if (t + 5 > e.length) return null;
    if (r !== Ze.OP_PUSHDATA4) throw new Error("Unexpected opcode");
    n = us(e, t + 1, "LE"), o = 5;
  }
  return {
    opcode: r,
    number: n,
    size: o
  };
}
function B2(e) {
  return e > 2147483647 ? 5 : e > 8388607 ? 4 : e > 32767 ? 3 : e > 127 ? 2 : e > 0 ? 1 : 0;
}
function N2(e) {
  let t = Math.abs(e);
  const r = B2(t), n = new Uint8Array(r), o = e < 0;
  for (let i = 0; i < r; ++i)
    dr(n, i, t & 255), t >>= 8;
  return n[r - 1] & 128 ? dr(n, r - 1, o ? 128 : 0) : o && (n[r - 1] |= 128), n;
}
var vn;
function $2(e) {
  return {
    lang: (e == null ? void 0 : e.lang) ?? (vn == null ? void 0 : vn.lang),
    message: e == null ? void 0 : e.message,
    abortEarly: (e == null ? void 0 : e.abortEarly) ?? (vn == null ? void 0 : vn.abortEarly),
    abortPipeEarly: (e == null ? void 0 : e.abortPipeEarly) ?? (vn == null ? void 0 : vn.abortPipeEarly)
  };
}
var Dl;
function U2(e) {
  return Dl == null ? void 0 : Dl.get(e);
}
var Fl;
function R2(e) {
  return Fl == null ? void 0 : Fl.get(e);
}
var Kl;
function C2(e, t) {
  var r;
  return (r = Kl == null ? void 0 : Kl.get(e)) == null ? void 0 : r.get(t);
}
function Xs(e) {
  var r, n;
  const t = typeof e;
  return t === "string" ? `"${e}"` : t === "number" || t === "bigint" || t === "boolean" ? `${e}` : t === "object" || t === "function" ? (e && ((n = (r = Object.getPrototypeOf(e)) == null ? void 0 : r.constructor) == null ? void 0 : n.name)) ?? "null" : t;
}
function Wt(e, t, r, n, o) {
  const i = o && "input" in o ? o.input : r.value, s = (o == null ? void 0 : o.expected) ?? e.expects ?? null, a = (o == null ? void 0 : o.received) ?? Xs(i), c = {
    kind: e.kind,
    type: e.type,
    input: i,
    expected: s,
    received: a,
    message: `Invalid ${t}: ${s ? `Expected ${s} but r` : "R"}eceived ${a}`,
    // @ts-expect-error
    requirement: e.requirement,
    path: o == null ? void 0 : o.path,
    issues: o == null ? void 0 : o.issues,
    lang: n.lang,
    abortEarly: n.abortEarly,
    abortPipeEarly: n.abortPipeEarly
  }, u = e.kind === "schema", f = (o == null ? void 0 : o.message) ?? // @ts-expect-error
  e.message ?? C2(e.reference, c.lang) ?? (u ? R2(c.lang) : null) ?? n.message ?? U2(c.lang);
  f && (c.message = typeof f == "function" ? f(c) : f), u && (r.typed = !1), r.issues ? r.issues.push(c) : r.issues = [c];
}
function H2(e, t) {
  const r = [...new Set(e)];
  return r.length > 1 ? `(${r.join(` ${t} `)})` : r[0] ?? "never";
}
var L2 = class extends Error {
  /**
   * Creates a Valibot error with useful information.
   *
   * @param issues The error issues.
   */
  constructor(r) {
    super(r[0].message);
    /**
     * The error issues.
     */
    oe(this, "issues");
    this.name = "ValiError", this.issues = r;
  }
};
function nm(e, t) {
  return {
    kind: "validation",
    type: "every_item",
    reference: nm,
    async: !1,
    expects: null,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && !r.value.every(this.requirement) && Wt(this, "item", r, n), r;
    }
  };
}
function Gd(e) {
  return {
    kind: "validation",
    type: "integer",
    reference: Gd,
    async: !1,
    expects: null,
    requirement: Number.isInteger,
    message: e,
    _run(t, r) {
      return t.typed && !this.requirement(t.value) && Wt(this, "integer", t, r), t;
    }
  };
}
function om(e, t) {
  return {
    kind: "validation",
    type: "length",
    reference: om,
    async: !1,
    expects: `${e}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && r.value.length !== this.requirement && Wt(this, "length", r, n, {
        received: `${r.value.length}`
      }), r;
    }
  };
}
function Pu(e, t) {
  return {
    kind: "validation",
    type: "max_value",
    reference: Pu,
    async: !1,
    expects: `<=${e instanceof Date ? e.toJSON() : Xs(e)}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && r.value > this.requirement && Wt(this, "value", r, n, {
        received: r.value instanceof Date ? r.value.toJSON() : Xs(r.value)
      }), r;
    }
  };
}
function Ou(e, t) {
  return {
    kind: "validation",
    type: "min_value",
    reference: Ou,
    async: !1,
    expects: `>=${e instanceof Date ? e.toJSON() : Xs(e)}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && r.value < this.requirement && Wt(this, "value", r, n, {
        received: r.value instanceof Date ? r.value.toJSON() : Xs(r.value)
      }), r;
    }
  };
}
function im(e, t) {
  return {
    kind: "validation",
    type: "regex",
    reference: im,
    async: !1,
    expects: `${e}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && !this.requirement.test(r.value) && Wt(this, "format", r, n), r;
    }
  };
}
function Wd(e, t, r) {
  return typeof e.default == "function" ? (
    // @ts-expect-error
    e.default(t, r)
  ) : (
    // @ts-expect-error
    e.default
  );
}
function Bu(e, t) {
  return !e._run({ typed: !1, value: t }, { abortEarly: !0 }).issues;
}
function sm() {
  return {
    kind: "schema",
    type: "any",
    reference: sm,
    expects: "any",
    async: !1,
    _run(e) {
      return e.typed = !0, e;
    }
  };
}
function or(e, t) {
  return {
    kind: "schema",
    type: "array",
    reference: or,
    expects: "Array",
    async: !1,
    item: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (Array.isArray(o)) {
        r.typed = !0, r.value = [];
        for (let s = 0; s < o.length; s++) {
          const a = o[s], c = this.item._run({ typed: !1, value: a }, n);
          if (c.issues) {
            const u = {
              type: "array",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), r.value.push(c.value);
        }
      } else
        Wt(this, "type", r, n);
      return r;
    }
  };
}
function am(e) {
  return {
    kind: "schema",
    type: "bigint",
    reference: am,
    expects: "bigint",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "bigint" ? t.typed = !0 : Wt(this, "type", t, r), t;
    }
  };
}
function Vr(e, t) {
  return {
    kind: "schema",
    type: "custom",
    reference: Vr,
    expects: "unknown",
    async: !1,
    check: e,
    message: t,
    _run(r, n) {
      return this.check(r.value) ? r.typed = !0 : Wt(this, "type", r, n), r;
    }
  };
}
function Nu(e, t) {
  return {
    kind: "schema",
    type: "instance",
    reference: Nu,
    expects: e.name,
    async: !1,
    class: e,
    message: t,
    _run(r, n) {
      return r.value instanceof this.class ? r.typed = !0 : Wt(this, "type", r, n), r;
    }
  };
}
function qf(e, ...t) {
  const r = {
    kind: "schema",
    type: "nullable",
    reference: qf,
    expects: `(${e.expects} | null)`,
    async: !1,
    wrapped: e,
    _run(n, o) {
      return n.value === null && ("default" in this && (n.value = Wd(
        this,
        n,
        o
      )), n.value === null) ? (n.typed = !0, n) : this.wrapped._run(n, o);
    }
  };
  return 0 in t && (r.default = t[0]), r;
}
function cm(e, ...t) {
  const r = {
    kind: "schema",
    type: "nullish",
    reference: cm,
    expects: `(${e.expects} | null | undefined)`,
    async: !1,
    wrapped: e,
    _run(n, o) {
      return (n.value === null || n.value === void 0) && ("default" in this && (n.value = Wd(
        this,
        n,
        o
      )), n.value === null || n.value === void 0) ? (n.typed = !0, n) : this.wrapped._run(n, o);
    }
  };
  return 0 in t && (r.default = t[0]), r;
}
function nr(e) {
  return {
    kind: "schema",
    type: "number",
    reference: nr,
    expects: "number",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "number" && !isNaN(t.value) ? t.typed = !0 : Wt(this, "type", t, r), t;
    }
  };
}
function St(e, t) {
  return {
    kind: "schema",
    type: "object",
    reference: St,
    expects: "Object",
    async: !1,
    entries: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (o && typeof o == "object") {
        r.typed = !0, r.value = {};
        for (const s in this.entries) {
          const a = o[s], c = this.entries[s]._run(
            { typed: !1, value: a },
            n
          );
          if (c.issues) {
            const u = {
              type: "object",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), (c.value !== void 0 || s in o) && (r.value[s] = c.value);
        }
      } else
        Wt(this, "type", r, n);
      return r;
    }
  };
}
function jc(e, ...t) {
  const r = {
    kind: "schema",
    type: "optional",
    reference: jc,
    expects: `(${e.expects} | undefined)`,
    async: !1,
    wrapped: e,
    _run(n, o) {
      return n.value === void 0 && ("default" in this && (n.value = Wd(
        this,
        n,
        o
      )), n.value === void 0) ? (n.typed = !0, n) : this.wrapped._run(n, o);
    }
  };
  return 0 in t && (r.default = t[0]), r;
}
function pi(e) {
  return {
    kind: "schema",
    type: "string",
    reference: pi,
    expects: "string",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "string" ? t.typed = !0 : Wt(this, "type", t, r), t;
    }
  };
}
function un(e, t) {
  return {
    kind: "schema",
    type: "tuple",
    reference: un,
    expects: "Array",
    async: !1,
    items: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (Array.isArray(o)) {
        r.typed = !0, r.value = [];
        for (let s = 0; s < this.items.length; s++) {
          const a = o[s], c = this.items[s]._run(
            { typed: !1, value: a },
            n
          );
          if (c.issues) {
            const u = {
              type: "array",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), r.value.push(c.value);
        }
      } else
        Wt(this, "type", r, n);
      return r;
    }
  };
}
function zp(e) {
  let t;
  if (e)
    for (const r of e)
      t ? t.push(...r.issues) : t = r.issues;
  return t;
}
function Zd(e, t) {
  return {
    kind: "schema",
    type: "union",
    reference: Zd,
    expects: H2(
      e.map((r) => r.expects),
      "|"
    ),
    async: !1,
    options: e,
    message: t,
    _run(r, n) {
      let o, i, s;
      for (const a of this.options) {
        const c = a._run(
          { typed: !1, value: r.value },
          n
        );
        if (c.typed)
          if (c.issues)
            i ? i.push(c) : i = [c];
          else {
            o = c;
            break;
          }
        else
          s ? s.push(c) : s = [c];
      }
      if (o)
        return o;
      if (i) {
        if (i.length === 1)
          return i[0];
        Wt(this, "type", r, n, {
          issues: zp(i)
        }), r.typed = !0;
      } else {
        if ((s == null ? void 0 : s.length) === 1)
          return s[0];
        Wt(this, "type", r, n, {
          issues: zp(s)
        });
      }
      return r;
    }
  };
}
function ct(e, t, r) {
  const n = e._run(
    { typed: !1, value: t },
    $2(r)
  );
  if (n.issues)
    throw new L2(n.issues);
  return n.value;
}
function So(e, t) {
  const r = {};
  for (const n in e.entries)
    r[n] = jc(e.entries[n]);
  return { ...e, entries: r };
}
function ls(...e) {
  return {
    ...e[0],
    pipe: e,
    _run(t, r) {
      for (const n of e)
        if (n.kind !== "metadata") {
          if (t.issues && (n.kind === "schema" || n.kind === "transformation")) {
            t.typed = !1;
            break;
          }
          (!t.issues || !r.abortEarly && !r.abortPipeEarly) && (t = n._run(t, r));
        }
      return t;
    }
  };
}
const jp = new Uint8Array(32), Mp = Dn(
  "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"
), Ot = (e) => ls(Nu(Uint8Array), om(e));
function Ys(e, t) {
  return e.length !== t.length ? !1 : e.every((r, n) => te(r, t[n]) === 0);
}
function jr(e) {
  if (!(e instanceof Uint8Array) || e.length < 33) return !1;
  const t = e[0], r = e.slice(1, 33);
  if (te(jp, r) === 0 || te(r, Mp) >= 0) return !1;
  if ((t === 2 || t === 3) && e.length === 33)
    return !0;
  const n = e.slice(33);
  return te(jp, n) === 0 || te(n, Mp) >= 0 ? !1 : t === 4 && e.length === 65;
}
const Pc = 254;
function Xd(e) {
  return !e || !("output" in e) || !(e.output instanceof Uint8Array) ? !1 : e.version !== void 0 ? (e.version & Pc) === e.version : !0;
}
function um(e) {
  return Array.isArray(e) ? e.length !== 2 ? !1 : e.every((t) => um(t)) : Xd(e);
}
const z2 = Ot(32), j2 = Ot(20), Dp = Ot(32), We = Nu(Uint8Array);
ls(pi(), im(/^([0-9a-f]{2})+$/i));
const M2 = ls(
  nr(),
  Gd(),
  Ou(0),
  Pu(255)
), In = ls(
  nr(),
  Gd(),
  Ou(0),
  Pu(4294967295)
), Vl = ls(
  am(),
  Ou(0n),
  Pu(0x7fffffffffffffffn)
), Fp = (e) => St(
  Object.entries(e).reduce(
    (t, r) => ({ ...t, [r[0]]: cm(r[1]) }),
    {}
  )
), Kp = new Uint8Array(1);
function Vp(e) {
  let t = 0;
  for (; e[t] === 0; ) ++t;
  return t === e.length ? Kp : (e = e.slice(t), e[0] & 128 ? dt([Kp, e]) : e);
}
function qp(e) {
  e[0] === 0 && (e = e.slice(1));
  const t = new Uint8Array(32), r = Math.max(0, 32 - e.length);
  return t.set(e, r), t;
}
function D2(e) {
  const t = Cn(e, e.length - 1);
  if (!Jd(t))
    throw new Error("Invalid hashType " + t);
  const r = y2(e.subarray(0, -1)), n = qp(r.r), o = qp(r.s);
  return { signature: dt([n, o]), hashType: t };
}
function F2(e, t) {
  if (ct(
    St({
      signature: Ot(64),
      hashType: M2
    }),
    { signature: e, hashType: t }
  ), !Jd(t))
    throw new Error("Invalid hashType " + t);
  const r = new Uint8Array(1);
  dr(r, 0, t);
  const n = Vp(e.slice(0, 32)), o = Vp(e.slice(32, 64));
  return dt([w2(n, o), r]);
}
const K2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  decode: D2,
  encode: F2
}, Symbol.toStringTag, { value: "Module" })), lm = Ze.OP_RESERVED, fm = or(Zd([Nu(Uint8Array), nr()]));
function V2(e) {
  return Bu(nr(), e) && (e === Ze.OP_0 || e >= Ze.OP_1 && e <= Ze.OP_16 || e === Ze.OP_1NEGATE);
}
function dm(e) {
  return Bu(We, e) || V2(e);
}
function Yd(e) {
  return Bu(ls(sm(), nm(dm)), e);
}
function hm(e) {
  return e.length - e.filter(dm).length;
}
function Mc(e) {
  if (e.length === 0) return Ze.OP_0;
  if (e.length === 1) {
    if (e[0] >= 1 && e[0] <= 16) return lm + e[0];
    if (e[0] === 129) return Ze.OP_1NEGATE;
  }
}
function pm(e) {
  return e instanceof Uint8Array;
}
function q2(e) {
  return Bu(fm, e);
}
function Dc(e) {
  return e instanceof Uint8Array;
}
function ir(e) {
  if (pm(e)) return e;
  ct(fm, e);
  const t = e.reduce((o, i) => Dc(i) ? i.length === 1 && Mc(i) !== void 0 ? o + 1 : o + rm(i.length) + i.length : o + 1, 0), r = new Uint8Array(t);
  let n = 0;
  if (e.forEach((o) => {
    if (Dc(o)) {
      const i = Mc(o);
      if (i !== void 0) {
        dr(r, n, i), n += 1;
        return;
      }
      n += P2(r, o.length, n), r.set(o, n), n += o.length;
    } else
      dr(r, n, o), n += 1;
  }), n !== r.length) throw new Error("Could not decode chunks");
  return r;
}
function lt(e) {
  if (q2(e)) return e;
  ct(We, e);
  const t = [];
  let r = 0;
  for (; r < e.length; ) {
    const n = e[r];
    if (n > Ze.OP_0 && n <= Ze.OP_PUSHDATA4) {
      const o = O2(e, r);
      if (o === null || (r += o.size, r + o.number > e.length)) return null;
      const i = e.slice(r, r + o.number);
      r += o.number;
      const s = Mc(i);
      s !== void 0 ? t.push(s) : t.push(i);
    } else
      t.push(n), r += 1;
  }
  return t;
}
function G2(e) {
  if (pm(e) && (e = lt(e)), !e)
    throw new Error("Could not convert invalid chunks to ASM");
  return e.map((t) => {
    if (Dc(t)) {
      const r = Mc(t);
      if (r === void 0) return ye(t);
      t = r;
    }
    return Zg[t];
  }).join(" ");
}
function W2(e) {
  return e = lt(e), ct(Vr(Yd), e), e.map((t) => Dc(t) ? t : t === Ze.OP_0 ? new Uint8Array(0) : N2(t - lm));
}
function Z2(e) {
  return jr(e);
}
function Jd(e) {
  const t = e & -129;
  return t > 0 && t < 4;
}
function Hn(e) {
  return !(e instanceof Uint8Array) || !Jd(e[e.length - 1]) ? !1 : b2(e.slice(0, -1));
}
const Fs = K2;
function de(e, t, r) {
  Object.defineProperty(e, t, {
    configurable: !0,
    enumerable: !0,
    get() {
      const n = r.call(this);
      return this[t] = n, n;
    },
    set(n) {
      Object.defineProperty(this, t, {
        configurable: !0,
        enumerable: !0,
        value: n,
        writable: !0
      });
    }
  });
}
function Ir(e) {
  let t;
  return () => (t !== void 0 || (t = e()), t);
}
const $i = Ze, rc = $i.OP_RESERVED;
function $u(e, t) {
  if (!e.input && !e.output && !(e.pubkeys && e.m !== void 0) && !e.signatures)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {});
  function r(c) {
    return Hn(c) || (t.allowIncomplete && c === $i.OP_0) !== void 0;
  }
  ct(
    So(
      St({
        network: St({}),
        m: nr(),
        n: nr(),
        output: We,
        pubkeys: or(Vr(jr), "Received invalid pubkey"),
        signatures: or(
          Vr(r),
          "Expected signature to be of type isAcceptableSignature"
        ),
        input: We
      })
    ),
    e
  );
  const o = { network: e.network || Zr };
  let i = [], s = !1;
  function a(c) {
    s || (s = !0, i = lt(c), o.m = i[0] - rc, o.n = i[i.length - 2] - rc, o.pubkeys = i.slice(1, -2));
  }
  if (de(o, "output", () => {
    if (e.m && o.n && e.pubkeys)
      return ir(
        [].concat(
          rc + e.m,
          e.pubkeys,
          rc + o.n,
          $i.OP_CHECKMULTISIG
        )
      );
  }), de(o, "m", () => {
    if (o.output)
      return a(o.output), o.m;
  }), de(o, "n", () => {
    if (o.pubkeys)
      return o.pubkeys.length;
  }), de(o, "pubkeys", () => {
    if (e.output)
      return a(e.output), o.pubkeys;
  }), de(o, "signatures", () => {
    if (e.input)
      return lt(e.input).slice(1);
  }), de(o, "input", () => {
    if (e.signatures)
      return ir([$i.OP_0].concat(e.signatures));
  }), de(o, "witness", () => {
    if (o.input)
      return [];
  }), de(o, "name", () => {
    if (!(!o.m || !o.n))
      return `p2ms(${o.m} of ${o.n})`;
  }), t.validate) {
    if (e.output) {
      if (a(e.output), ct(nr(), i[0], { message: "Output is invalid" }), ct(nr(), i[i.length - 2], {
        message: "Output is invalid"
      }), i[i.length - 1] !== $i.OP_CHECKMULTISIG)
        throw new TypeError("Output is invalid");
      if (o.m <= 0 || o.n > 16 || o.m > o.n || o.n !== i.length - 3)
        throw new TypeError("Output is invalid");
      if (!o.pubkeys.every((c) => jr(c)))
        throw new TypeError("Output is invalid");
      if (e.m !== void 0 && e.m !== o.m) throw new TypeError("m mismatch");
      if (e.n !== void 0 && e.n !== o.n) throw new TypeError("n mismatch");
      if (e.pubkeys && !Ys(e.pubkeys, o.pubkeys))
        throw new TypeError("Pubkeys mismatch");
    }
    if (e.pubkeys) {
      if (e.n !== void 0 && e.n !== e.pubkeys.length)
        throw new TypeError("Pubkey count mismatch");
      if (o.n = e.pubkeys.length, o.n < o.m) throw new TypeError("Pubkey count cannot be less than m");
    }
    if (e.signatures) {
      if (e.signatures.length < o.m)
        throw new TypeError("Not enough signatures provided");
      if (e.signatures.length > o.m)
        throw new TypeError("Too many signatures provided");
    }
    if (e.input) {
      if (e.input[0] !== $i.OP_0) throw new TypeError("Input is invalid");
      if (o.signatures.length === 0 || !o.signatures.every(r))
        throw new TypeError("Input has invalid signature(s)");
      if (e.signatures && !Ys(e.signatures, o.signatures))
        throw new TypeError("Signature mismatch");
      if (e.m !== void 0 && e.m !== e.signatures.length)
        throw new TypeError("Signature count mismatch");
    }
  }
  return Object.assign(o, e);
}
const Gp = Ze;
function gm(e, t) {
  if (!e.input && !e.output && !e.pubkey && !e.input && !e.signature)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), ct(
    So(
      St({
        network: St({}),
        output: We,
        pubkey: Vr(jr, "invalid pubkey"),
        signature: Vr(
          Hn,
          "Expected signature to be of type isCanonicalScriptSignature"
        ),
        input: We
      })
    ),
    e
  );
  const r = Ir(() => lt(e.input)), o = { name: "p2pk", network: e.network || Zr };
  if (de(o, "output", () => {
    if (e.pubkey)
      return ir([e.pubkey, Gp.OP_CHECKSIG]);
  }), de(o, "pubkey", () => {
    if (e.output)
      return e.output.slice(1, -1);
  }), de(o, "signature", () => {
    if (e.input)
      return r()[0];
  }), de(o, "input", () => {
    if (e.signature)
      return ir([e.signature]);
  }), de(o, "witness", () => {
    if (o.input)
      return [];
  }), t.validate) {
    if (e.output) {
      if (e.output[e.output.length - 1] !== Gp.OP_CHECKSIG)
        throw new TypeError("Output is invalid");
      if (!jr(o.pubkey)) throw new TypeError("Output pubkey is invalid");
      if (e.pubkey && te(e.pubkey, o.pubkey) !== 0)
        throw new TypeError("Pubkey mismatch");
    }
    if (e.signature && e.input && te(e.input, o.input) !== 0)
      throw new TypeError("Signature mismatch");
    if (e.input) {
      if (r().length !== 1) throw new TypeError("Input is invalid");
      if (!Hn(o.signature))
        throw new TypeError("Input has invalid signature");
    }
  }
  return Object.assign(o, e);
}
function Wp(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`positive integer expected, not ${e}`);
}
function X2(e) {
  return e instanceof Uint8Array || e != null && typeof e == "object" && e.constructor.name === "Uint8Array";
}
function Uu(e, ...t) {
  if (!X2(e))
    throw new Error("Uint8Array expected");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error(`Uint8Array expected of length ${t}, not of length=${e.length}`);
}
function Y2(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Wp(e.outputLen), Wp(e.blockLen);
}
function Fc(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function J2(e, t) {
  Uu(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const Pi = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const ql = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), en = (e, t) => e << 32 - t | e >>> t, nc = (e, t) => e << t | e >>> 32 - t >>> 0;
new Uint8Array(new Uint32Array([287454020]).buffer)[0];
function Q2(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
function Qd(e) {
  return typeof e == "string" && (e = Q2(e)), Uu(e), e;
}
function eE(...e) {
  let t = 0;
  for (let n = 0; n < e.length; n++) {
    const o = e[n];
    Uu(o), t += o.length;
  }
  const r = new Uint8Array(t);
  for (let n = 0, o = 0; n < e.length; n++) {
    const i = e[n];
    r.set(i, o), o += i.length;
  }
  return r;
}
let mm = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function eh(e) {
  const t = (n) => e().update(Qd(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function tE(e = 32) {
  if (Pi && typeof Pi.getRandomValues == "function")
    return Pi.getRandomValues(new Uint8Array(e));
  if (Pi && typeof Pi.randomBytes == "function")
    return Pi.randomBytes(e);
  throw new Error("crypto.getRandomValues must be defined");
}
function rE(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
const nE = (e, t, r) => e & t ^ ~e & r, oE = (e, t, r) => e & t ^ e & r ^ t & r;
let th = class extends mm {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = ql(this.buffer);
  }
  update(t) {
    Fc(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = Qd(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = ql(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    Fc(this), J2(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    rE(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = ql(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
};
const iE = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]), bm = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map((e, t) => t)), sE = /* @__PURE__ */ bm.map((e) => (9 * e + 5) % 16);
let rh = [bm], nh = [sE];
for (let e = 0; e < 4; e++)
  for (let t of [rh, nh])
    t.push(t[e].map((r) => iE[r]));
const ym = /* @__PURE__ */ [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((e) => new Uint8Array(e)), aE = /* @__PURE__ */ rh.map((e, t) => e.map((r) => ym[t][r])), cE = /* @__PURE__ */ nh.map((e, t) => e.map((r) => ym[t][r])), uE = /* @__PURE__ */ new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]), lE = /* @__PURE__ */ new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function Zp(e, t, r, n) {
  return e === 0 ? t ^ r ^ n : e === 1 ? t & r | ~t & n : e === 2 ? (t | ~r) ^ n : e === 3 ? t & n | r & ~n : t ^ (r | ~n);
}
const oc = /* @__PURE__ */ new Uint32Array(16);
let fE = class extends th {
  constructor() {
    super(64, 20, 8, !0), this.h0 = 1732584193, this.h1 = -271733879, this.h2 = -1732584194, this.h3 = 271733878, this.h4 = -1009589776;
  }
  get() {
    const { h0: t, h1: r, h2: n, h3: o, h4: i } = this;
    return [t, r, n, o, i];
  }
  set(t, r, n, o, i) {
    this.h0 = t | 0, this.h1 = r | 0, this.h2 = n | 0, this.h3 = o | 0, this.h4 = i | 0;
  }
  process(t, r) {
    for (let m = 0; m < 16; m++, r += 4)
      oc[m] = t.getUint32(r, !0);
    let n = this.h0 | 0, o = n, i = this.h1 | 0, s = i, a = this.h2 | 0, c = a, u = this.h3 | 0, f = u, l = this.h4 | 0, d = l;
    for (let m = 0; m < 5; m++) {
      const g = 4 - m, y = uE[m], b = lE[m], E = rh[m], x = nh[m], w = aE[m], k = cE[m];
      for (let S = 0; S < 16; S++) {
        const I = nc(n + Zp(m, i, a, u) + oc[E[S]] + y, w[S]) + l | 0;
        n = l, l = u, u = nc(a, 10) | 0, a = i, i = I;
      }
      for (let S = 0; S < 16; S++) {
        const I = nc(o + Zp(g, s, c, f) + oc[x[S]] + b, k[S]) + d | 0;
        o = d, d = f, f = nc(c, 10) | 0, c = s, s = I;
      }
    }
    this.set(this.h1 + a + f | 0, this.h2 + u + d | 0, this.h3 + l + o | 0, this.h4 + n + s | 0, this.h0 + i + c | 0);
  }
  roundClean() {
    oc.fill(0);
  }
  destroy() {
    this.destroyed = !0, this.buffer.fill(0), this.set(0, 0, 0, 0, 0);
  }
};
const wm = /* @__PURE__ */ eh(() => new fE()), dE = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), Wn = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Zn = /* @__PURE__ */ new Uint32Array(64);
let hE = class extends th {
  constructor() {
    super(64, 32, 8, !1), this.A = Wn[0] | 0, this.B = Wn[1] | 0, this.C = Wn[2] | 0, this.D = Wn[3] | 0, this.E = Wn[4] | 0, this.F = Wn[5] | 0, this.G = Wn[6] | 0, this.H = Wn[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      Zn[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const d = Zn[l - 15], m = Zn[l - 2], g = en(d, 7) ^ en(d, 18) ^ d >>> 3, y = en(m, 17) ^ en(m, 19) ^ m >>> 10;
      Zn[l] = y + Zn[l - 7] + g + Zn[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const d = en(a, 6) ^ en(a, 11) ^ en(a, 25), m = f + d + nE(a, c, u) + dE[l] + Zn[l] | 0, y = (en(n, 2) ^ en(n, 13) ^ en(n, 22)) + oE(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    Zn.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
const Ut = /* @__PURE__ */ eh(() => new hE());
function $n(e) {
  return wm(Ut(e));
}
function zo(e) {
  return Ut(Ut(e));
}
const pE = {
  "BIP0340/challenge": Uint8Array.from([
    123,
    181,
    45,
    122,
    159,
    239,
    88,
    50,
    62,
    177,
    191,
    122,
    64,
    125,
    179,
    130,
    210,
    243,
    242,
    216,
    27,
    177,
    34,
    79,
    73,
    254,
    81,
    143,
    109,
    72,
    211,
    124,
    123,
    181,
    45,
    122,
    159,
    239,
    88,
    50,
    62,
    177,
    191,
    122,
    64,
    125,
    179,
    130,
    210,
    243,
    242,
    216,
    27,
    177,
    34,
    79,
    73,
    254,
    81,
    143,
    109,
    72,
    211,
    124
  ]),
  "BIP0340/aux": Uint8Array.from([
    241,
    239,
    78,
    94,
    192,
    99,
    202,
    218,
    109,
    148,
    202,
    250,
    157,
    152,
    126,
    160,
    105,
    38,
    88,
    57,
    236,
    193,
    31,
    151,
    45,
    119,
    165,
    46,
    216,
    193,
    204,
    144,
    241,
    239,
    78,
    94,
    192,
    99,
    202,
    218,
    109,
    148,
    202,
    250,
    157,
    152,
    126,
    160,
    105,
    38,
    88,
    57,
    236,
    193,
    31,
    151,
    45,
    119,
    165,
    46,
    216,
    193,
    204,
    144
  ]),
  "BIP0340/nonce": Uint8Array.from([
    7,
    73,
    119,
    52,
    167,
    155,
    203,
    53,
    91,
    155,
    140,
    125,
    3,
    79,
    18,
    28,
    244,
    52,
    215,
    62,
    247,
    45,
    218,
    25,
    135,
    0,
    97,
    251,
    82,
    191,
    235,
    47,
    7,
    73,
    119,
    52,
    167,
    155,
    203,
    53,
    91,
    155,
    140,
    125,
    3,
    79,
    18,
    28,
    244,
    52,
    215,
    62,
    247,
    45,
    218,
    25,
    135,
    0,
    97,
    251,
    82,
    191,
    235,
    47
  ]),
  TapLeaf: Uint8Array.from([
    174,
    234,
    143,
    220,
    66,
    8,
    152,
    49,
    5,
    115,
    75,
    88,
    8,
    29,
    30,
    38,
    56,
    211,
    95,
    28,
    181,
    64,
    8,
    212,
    211,
    87,
    202,
    3,
    190,
    120,
    233,
    238,
    174,
    234,
    143,
    220,
    66,
    8,
    152,
    49,
    5,
    115,
    75,
    88,
    8,
    29,
    30,
    38,
    56,
    211,
    95,
    28,
    181,
    64,
    8,
    212,
    211,
    87,
    202,
    3,
    190,
    120,
    233,
    238
  ]),
  TapBranch: Uint8Array.from([
    25,
    65,
    161,
    242,
    229,
    110,
    185,
    95,
    162,
    169,
    241,
    148,
    190,
    92,
    1,
    247,
    33,
    111,
    51,
    237,
    130,
    176,
    145,
    70,
    52,
    144,
    208,
    91,
    245,
    22,
    160,
    21,
    25,
    65,
    161,
    242,
    229,
    110,
    185,
    95,
    162,
    169,
    241,
    148,
    190,
    92,
    1,
    247,
    33,
    111,
    51,
    237,
    130,
    176,
    145,
    70,
    52,
    144,
    208,
    91,
    245,
    22,
    160,
    21
  ]),
  TapSighash: Uint8Array.from([
    244,
    10,
    72,
    223,
    75,
    42,
    112,
    200,
    180,
    146,
    75,
    242,
    101,
    70,
    97,
    237,
    61,
    149,
    253,
    102,
    163,
    19,
    235,
    135,
    35,
    117,
    151,
    198,
    40,
    228,
    160,
    49,
    244,
    10,
    72,
    223,
    75,
    42,
    112,
    200,
    180,
    146,
    75,
    242,
    101,
    70,
    97,
    237,
    61,
    149,
    253,
    102,
    163,
    19,
    235,
    135,
    35,
    117,
    151,
    198,
    40,
    228,
    160,
    49
  ]),
  TapTweak: Uint8Array.from([
    232,
    15,
    225,
    99,
    156,
    156,
    160,
    80,
    227,
    175,
    27,
    57,
    193,
    67,
    198,
    62,
    66,
    156,
    188,
    235,
    21,
    217,
    64,
    251,
    181,
    197,
    161,
    244,
    175,
    87,
    197,
    233,
    232,
    15,
    225,
    99,
    156,
    156,
    160,
    80,
    227,
    175,
    27,
    57,
    193,
    67,
    198,
    62,
    66,
    156,
    188,
    235,
    21,
    217,
    64,
    251,
    181,
    197,
    161,
    244,
    175,
    87,
    197,
    233
  ]),
  "KeyAgg list": Uint8Array.from([
    72,
    28,
    151,
    28,
    60,
    11,
    70,
    215,
    240,
    178,
    117,
    174,
    89,
    141,
    78,
    44,
    126,
    215,
    49,
    156,
    89,
    74,
    92,
    110,
    199,
    158,
    160,
    212,
    153,
    2,
    148,
    240,
    72,
    28,
    151,
    28,
    60,
    11,
    70,
    215,
    240,
    178,
    117,
    174,
    89,
    141,
    78,
    44,
    126,
    215,
    49,
    156,
    89,
    74,
    92,
    110,
    199,
    158,
    160,
    212,
    153,
    2,
    148,
    240
  ]),
  "KeyAgg coefficient": Uint8Array.from([
    191,
    201,
    4,
    3,
    77,
    28,
    136,
    232,
    200,
    14,
    34,
    229,
    61,
    36,
    86,
    109,
    100,
    130,
    78,
    214,
    66,
    114,
    129,
    192,
    145,
    0,
    249,
    77,
    205,
    82,
    201,
    129,
    191,
    201,
    4,
    3,
    77,
    28,
    136,
    232,
    200,
    14,
    34,
    229,
    61,
    36,
    86,
    109,
    100,
    130,
    78,
    214,
    66,
    114,
    129,
    192,
    145,
    0,
    249,
    77,
    205,
    82,
    201,
    129
  ])
};
function Ru(e, t) {
  return Ut(dt([pE[e], t]));
}
function gE(e) {
  if (e.length >= 255)
    throw new TypeError("Alphabet too long");
  const t = new Uint8Array(256);
  for (let u = 0; u < t.length; u++)
    t[u] = 255;
  for (let u = 0; u < e.length; u++) {
    const f = e.charAt(u), l = f.charCodeAt(0);
    if (t[l] !== 255)
      throw new TypeError(f + " is ambiguous");
    t[l] = u;
  }
  const r = e.length, n = e.charAt(0), o = Math.log(r) / Math.log(256), i = Math.log(256) / Math.log(r);
  function s(u) {
    if (u instanceof Uint8Array || (ArrayBuffer.isView(u) ? u = new Uint8Array(u.buffer, u.byteOffset, u.byteLength) : Array.isArray(u) && (u = Uint8Array.from(u))), !(u instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (u.length === 0)
      return "";
    let f = 0, l = 0, d = 0;
    const m = u.length;
    for (; d !== m && u[d] === 0; )
      d++, f++;
    const g = (m - d) * i + 1 >>> 0, y = new Uint8Array(g);
    for (; d !== m; ) {
      let x = u[d], w = 0;
      for (let k = g - 1; (x !== 0 || w < l) && k !== -1; k--, w++)
        x += 256 * y[k] >>> 0, y[k] = x % r >>> 0, x = x / r >>> 0;
      if (x !== 0)
        throw new Error("Non-zero carry");
      l = w, d++;
    }
    let b = g - l;
    for (; b !== g && y[b] === 0; )
      b++;
    let E = n.repeat(f);
    for (; b < g; ++b)
      E += e.charAt(y[b]);
    return E;
  }
  function a(u) {
    if (typeof u != "string")
      throw new TypeError("Expected String");
    if (u.length === 0)
      return new Uint8Array();
    let f = 0, l = 0, d = 0;
    for (; u[f] === n; )
      l++, f++;
    const m = (u.length - f) * o + 1 >>> 0, g = new Uint8Array(m);
    for (; u[f]; ) {
      let x = t[u.charCodeAt(f)];
      if (x === 255)
        return;
      let w = 0;
      for (let k = m - 1; (x !== 0 || w < d) && k !== -1; k--, w++)
        x += r * g[k] >>> 0, g[k] = x % 256 >>> 0, x = x / 256 >>> 0;
      if (x !== 0)
        throw new Error("Non-zero carry");
      d = w, f++;
    }
    let y = m - d;
    for (; y !== m && g[y] === 0; )
      y++;
    const b = new Uint8Array(l + (m - y));
    let E = l;
    for (; y !== m; )
      b[E++] = g[y++];
    return b;
  }
  function c(u) {
    const f = a(u);
    if (f)
      return f;
    throw new Error("Non-base" + r + " character");
  }
  return {
    encode: s,
    decodeUnsafe: a,
    decode: c
  };
}
var mE = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
const Gl = gE(mE);
function bE(e) {
  function t(i) {
    var s = Uint8Array.from(i), a = e(s), c = s.length + 4, u = new Uint8Array(c);
    return u.set(s, 0), u.set(a.subarray(0, 4), s.length), Gl.encode(u);
  }
  function r(i) {
    var s = i.slice(0, -4), a = i.slice(-4), c = e(s);
    if (!(a[0] ^ c[0] | a[1] ^ c[1] | a[2] ^ c[2] | a[3] ^ c[3]))
      return s;
  }
  function n(i) {
    var s = Gl.decodeUnsafe(i);
    if (s != null)
      return r(s);
  }
  function o(i) {
    var s = Gl.decode(i), a = r(s);
    if (a == null)
      throw new Error("Invalid checksum");
    return a;
  }
  return {
    encode: t,
    decode: o,
    decodeUnsafe: n
  };
}
function yE(e) {
  return Ut(Ut(e));
}
const Wi = bE(yE), Xn = Ze;
function xa(e, t) {
  if (!e.address && !e.hash && !e.output && !e.pubkey && !e.input)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), ct(
    So(
      St({
        network: St({}),
        address: pi(),
        hash: j2,
        output: Ot(25),
        pubkey: Vr(jr),
        signature: Vr(Hn),
        input: We
      })
    ),
    e
  );
  const r = Ir(() => {
    const s = Wi.decode(e.address), a = Cn(s, 0), c = s.slice(1);
    return { version: a, hash: c };
  }), n = Ir(() => lt(e.input)), o = e.network || Zr, i = { name: "p2pkh", network: o };
  if (de(i, "address", () => {
    if (!i.hash) return;
    const s = new Uint8Array(21);
    return dr(s, 0, o.pubKeyHash), s.set(i.hash, 1), Wi.encode(s);
  }), de(i, "hash", () => {
    if (e.output) return e.output.slice(3, 23);
    if (e.address) return r().hash;
    if (e.pubkey || i.pubkey) return $n(e.pubkey || i.pubkey);
  }), de(i, "output", () => {
    if (i.hash)
      return ir([
        Xn.OP_DUP,
        Xn.OP_HASH160,
        i.hash,
        Xn.OP_EQUALVERIFY,
        Xn.OP_CHECKSIG
      ]);
  }), de(i, "pubkey", () => {
    if (e.input)
      return n()[1];
  }), de(i, "signature", () => {
    if (e.input)
      return n()[0];
  }), de(i, "input", () => {
    if (e.pubkey && e.signature)
      return ir([e.signature, e.pubkey]);
  }), de(i, "witness", () => {
    if (i.input)
      return [];
  }), t.validate) {
    let s = Uint8Array.from([]);
    if (e.address) {
      if (r().version !== o.pubKeyHash)
        throw new TypeError("Invalid version or Network mismatch");
      if (r().hash.length !== 20) throw new TypeError("Invalid address");
      s = r().hash;
    }
    if (e.hash) {
      if (s.length > 0 && te(s, e.hash) !== 0)
        throw new TypeError("Hash mismatch");
      s = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 25 || e.output[0] !== Xn.OP_DUP || e.output[1] !== Xn.OP_HASH160 || e.output[2] !== 20 || e.output[23] !== Xn.OP_EQUALVERIFY || e.output[24] !== Xn.OP_CHECKSIG)
        throw new TypeError("Output is invalid");
      const a = e.output.slice(3, 23);
      if (s.length > 0 && te(s, a) !== 0)
        throw new TypeError("Hash mismatch");
      s = a;
    }
    if (e.pubkey) {
      const a = $n(e.pubkey);
      if (s.length > 0 && te(s, a) !== 0)
        throw new TypeError("Hash mismatch");
      s = a;
    }
    if (e.input) {
      const a = n();
      if (a.length !== 2) throw new TypeError("Input is invalid");
      if (!Hn(a[0]))
        throw new TypeError("Input has invalid signature");
      if (!jr(a[1])) throw new TypeError("Input has invalid pubkey");
      if (e.signature && te(e.signature, a[0]) !== 0)
        throw new TypeError("Signature mismatch");
      if (e.pubkey && te(e.pubkey, a[1]) !== 0)
        throw new TypeError("Pubkey mismatch");
      const c = $n(a[1]);
      if (s.length > 0 && te(s, c) !== 0)
        throw new TypeError("Hash mismatch");
    }
  }
  return Object.assign(i, e);
}
const Ts = Ze;
function fs(e, t) {
  if (!e.address && !e.hash && !e.output && !e.redeem && !e.input)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), ct(
    So(
      St({
        network: St({}),
        address: pi(),
        hash: Ot(20),
        output: Ot(23),
        redeem: So(
          St({
            network: St({}),
            output: We,
            input: We,
            witness: or(We)
          })
        ),
        input: We,
        witness: or(We)
      })
    ),
    e
  );
  let r = e.network;
  r || (r = e.redeem && e.redeem.network || Zr);
  const n = { network: r }, o = Ir(() => {
    const a = Wi.decode(e.address), c = Cn(a, 0), u = a.slice(1);
    return { version: c, hash: u };
  }), i = Ir(() => lt(e.input)), s = Ir(() => {
    const a = i(), c = a[a.length - 1];
    return {
      network: r,
      output: c === Ts.OP_FALSE ? Uint8Array.from([]) : c,
      input: ir(a.slice(0, -1)),
      witness: e.witness || []
    };
  });
  if (de(n, "address", () => {
    if (!n.hash) return;
    const a = new Uint8Array(21);
    return dr(a, 0, n.network.scriptHash), a.set(n.hash, 1), Wi.encode(a);
  }), de(n, "hash", () => {
    if (e.output) return e.output.slice(2, 22);
    if (e.address) return o().hash;
    if (n.redeem && n.redeem.output) return $n(n.redeem.output);
  }), de(n, "output", () => {
    if (n.hash)
      return ir([Ts.OP_HASH160, n.hash, Ts.OP_EQUAL]);
  }), de(n, "redeem", () => {
    if (e.input)
      return s();
  }), de(n, "input", () => {
    if (!(!e.redeem || !e.redeem.input || !e.redeem.output))
      return ir(
        [].concat(lt(e.redeem.input), e.redeem.output)
      );
  }), de(n, "witness", () => {
    if (n.redeem && n.redeem.witness) return n.redeem.witness;
    if (n.input) return [];
  }), de(n, "name", () => {
    const a = ["p2sh"];
    return n.redeem !== void 0 && n.redeem.name !== void 0 && a.push(n.redeem.name), a.join("-");
  }), t.validate) {
    let a = Uint8Array.from([]);
    if (e.address) {
      if (o().version !== r.scriptHash)
        throw new TypeError("Invalid version or Network mismatch");
      if (o().hash.length !== 20) throw new TypeError("Invalid address");
      a = o().hash;
    }
    if (e.hash) {
      if (a.length > 0 && te(a, e.hash) !== 0)
        throw new TypeError("Hash mismatch");
      a = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 23 || e.output[0] !== Ts.OP_HASH160 || e.output[1] !== 20 || e.output[22] !== Ts.OP_EQUAL)
        throw new TypeError("Output is invalid");
      const u = e.output.slice(2, 22);
      if (a.length > 0 && te(a, u) !== 0)
        throw new TypeError("Hash mismatch");
      a = u;
    }
    const c = (u) => {
      if (u.output) {
        const f = lt(u.output);
        if (!f || f.length < 1)
          throw new TypeError("Redeem.output too short");
        if (u.output.byteLength > 520)
          throw new TypeError(
            "Redeem.output unspendable if larger than 520 bytes"
          );
        if (hm(f) > 201)
          throw new TypeError(
            "Redeem.output unspendable with more than 201 non-push ops"
          );
        const l = $n(u.output);
        if (a.length > 0 && te(a, l) !== 0)
          throw new TypeError("Hash mismatch");
        a = l;
      }
      if (u.input) {
        const f = u.input.length > 0, l = u.witness && u.witness.length > 0;
        if (!f && !l) throw new TypeError("Empty input");
        if (f && l)
          throw new TypeError("Input and witness provided");
        if (f) {
          const d = lt(u.input);
          if (!Yd(d))
            throw new TypeError("Non push-only scriptSig");
        }
      }
    };
    if (e.input) {
      const u = i();
      if (!u || u.length < 1) throw new TypeError("Input too short");
      if (!(s().output instanceof Uint8Array))
        throw new TypeError("Input is invalid");
      c(s());
    }
    if (e.redeem) {
      if (e.redeem.network && e.redeem.network !== r)
        throw new TypeError("Network mismatch");
      if (e.input) {
        const u = s();
        if (e.redeem.output && te(e.redeem.output, u.output) !== 0)
          throw new TypeError("Redeem.output mismatch");
        if (e.redeem.input && te(e.redeem.input, u.input) !== 0)
          throw new TypeError("Redeem.input mismatch");
      }
      c(e.redeem);
    }
    if (e.witness && e.redeem && e.redeem.witness && !Ys(e.redeem.witness, e.witness))
      throw new TypeError("Witness and redeem.witness mismatch");
  }
  return Object.assign(n, e);
}
var be = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function wE(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function vE(e) {
  if (e.__esModule) return e;
  var t = e.default;
  if (typeof t == "function") {
    var r = function n() {
      return this instanceof n ? Reflect.construct(t, arguments, this.constructor) : t.apply(this, arguments);
    };
    r.prototype = t.prototype;
  } else r = {};
  return Object.defineProperty(r, "__esModule", { value: !0 }), Object.keys(e).forEach(function(n) {
    var o = Object.getOwnPropertyDescriptor(e, n);
    Object.defineProperty(r, n, o.get ? o : {
      enumerable: !0,
      get: function() {
        return e[n];
      }
    });
  }), r;
}
var Js = {};
Object.defineProperty(Js, "__esModule", { value: !0 });
var Qs = Js.bech32m = hr = Js.bech32 = void 0;
const Kc = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", vm = {};
for (let e = 0; e < Kc.length; e++) {
  const t = Kc.charAt(e);
  vm[t] = e;
}
function Fi(e) {
  const t = e >> 25;
  return (e & 33554431) << 5 ^ -(t >> 0 & 1) & 996825010 ^ -(t >> 1 & 1) & 642813549 ^ -(t >> 2 & 1) & 513874426 ^ -(t >> 3 & 1) & 1027748829 ^ -(t >> 4 & 1) & 705979059;
}
function Xp(e) {
  let t = 1;
  for (let r = 0; r < e.length; ++r) {
    const n = e.charCodeAt(r);
    if (n < 33 || n > 126)
      return "Invalid prefix (" + e + ")";
    t = Fi(t) ^ n >> 5;
  }
  t = Fi(t);
  for (let r = 0; r < e.length; ++r) {
    const n = e.charCodeAt(r);
    t = Fi(t) ^ n & 31;
  }
  return t;
}
function oh(e, t, r, n) {
  let o = 0, i = 0;
  const s = (1 << r) - 1, a = [];
  for (let c = 0; c < e.length; ++c)
    for (o = o << t | e[c], i += t; i >= r; )
      i -= r, a.push(o >> i & s);
  if (n)
    i > 0 && a.push(o << r - i & s);
  else {
    if (i >= t)
      return "Excess padding";
    if (o << r - i & s)
      return "Non-zero padding";
  }
  return a;
}
function EE(e) {
  return oh(e, 8, 5, !0);
}
function xE(e) {
  const t = oh(e, 5, 8, !1);
  if (Array.isArray(t))
    return t;
}
function _E(e) {
  const t = oh(e, 5, 8, !1);
  if (Array.isArray(t))
    return t;
  throw new Error(t);
}
function Em(e) {
  let t;
  e === "bech32" ? t = 1 : t = 734539939;
  function r(s, a, c) {
    if (c = c || 90, s.length + 7 + a.length > c)
      throw new TypeError("Exceeds length limit");
    s = s.toLowerCase();
    let u = Xp(s);
    if (typeof u == "string")
      throw new Error(u);
    let f = s + "1";
    for (let l = 0; l < a.length; ++l) {
      const d = a[l];
      if (d >> 5)
        throw new Error("Non 5-bit word");
      u = Fi(u) ^ d, f += Kc.charAt(d);
    }
    for (let l = 0; l < 6; ++l)
      u = Fi(u);
    u ^= t;
    for (let l = 0; l < 6; ++l) {
      const d = u >> (5 - l) * 5 & 31;
      f += Kc.charAt(d);
    }
    return f;
  }
  function n(s, a) {
    if (a = a || 90, s.length < 8)
      return s + " too short";
    if (s.length > a)
      return "Exceeds length limit";
    const c = s.toLowerCase(), u = s.toUpperCase();
    if (s !== c && s !== u)
      return "Mixed-case string " + s;
    s = c;
    const f = s.lastIndexOf("1");
    if (f === -1)
      return "No separator character for " + s;
    if (f === 0)
      return "Missing prefix for " + s;
    const l = s.slice(0, f), d = s.slice(f + 1);
    if (d.length < 6)
      return "Data too short";
    let m = Xp(l);
    if (typeof m == "string")
      return m;
    const g = [];
    for (let y = 0; y < d.length; ++y) {
      const b = d.charAt(y), E = vm[b];
      if (E === void 0)
        return "Unknown character " + b;
      m = Fi(m) ^ E, !(y + 6 >= d.length) && g.push(E);
    }
    return m !== t ? "Invalid checksum for " + s : { prefix: l, words: g };
  }
  function o(s, a) {
    const c = n(s, a);
    if (typeof c == "object")
      return c;
  }
  function i(s, a) {
    const c = n(s, a);
    if (typeof c == "object")
      return c;
    throw new Error(c);
  }
  return {
    decodeUnsafe: o,
    decode: i,
    encode: r,
    toWords: EE,
    fromWordsUnsafe: xE,
    fromWords: _E
  };
}
var hr = Js.bech32 = Em("bech32");
Qs = Js.bech32m = Em("bech32m");
const Yp = Ze, SE = new Uint8Array(0);
function _a(e, t) {
  if (!e.address && !e.hash && !e.output && !e.pubkey && !e.witness)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), ct(
    So(
      St({
        address: pi(),
        hash: Ot(20),
        input: Ot(0),
        network: St({}),
        output: Ot(22),
        pubkey: Vr(jr, "Not a valid pubkey"),
        signature: Vr(Hn),
        witness: or(We)
      })
    ),
    e
  );
  const r = Ir(() => {
    const i = hr.decode(e.address), s = i.words.shift(), a = hr.fromWords(i.words);
    return {
      version: s,
      prefix: i.prefix,
      data: Uint8Array.from(a)
    };
  }), n = e.network || Zr, o = { name: "p2wpkh", network: n };
  if (de(o, "address", () => {
    if (!o.hash) return;
    const i = hr.toWords(o.hash);
    return i.unshift(0), hr.encode(n.bech32, i);
  }), de(o, "hash", () => {
    if (e.output) return e.output.slice(2, 22);
    if (e.address) return r().data;
    if (e.pubkey || o.pubkey) return $n(e.pubkey || o.pubkey);
  }), de(o, "output", () => {
    if (o.hash)
      return ir([Yp.OP_0, o.hash]);
  }), de(o, "pubkey", () => {
    if (e.pubkey) return e.pubkey;
    if (e.witness)
      return e.witness[1];
  }), de(o, "signature", () => {
    if (e.witness)
      return e.witness[0];
  }), de(o, "input", () => {
    if (o.witness)
      return SE;
  }), de(o, "witness", () => {
    if (e.pubkey && e.signature)
      return [e.signature, e.pubkey];
  }), t.validate) {
    let i = Uint8Array.from([]);
    if (e.address) {
      if (n && n.bech32 !== r().prefix)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (r().version !== 0)
        throw new TypeError("Invalid address version");
      if (r().data.length !== 20)
        throw new TypeError("Invalid address data");
      i = r().data;
    }
    if (e.hash) {
      if (i.length > 0 && te(i, e.hash) !== 0)
        throw new TypeError("Hash mismatch");
      i = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 22 || e.output[0] !== Yp.OP_0 || e.output[1] !== 20)
        throw new TypeError("Output is invalid");
      if (i.length > 0 && te(i, e.output.slice(2)) !== 0)
        throw new TypeError("Hash mismatch");
      i = e.output.slice(2);
    }
    if (e.pubkey) {
      const s = $n(e.pubkey);
      if (i.length > 0 && te(i, s) !== 0)
        throw new TypeError("Hash mismatch");
      if (i = s, !jr(e.pubkey) || e.pubkey.length !== 33)
        throw new TypeError("Invalid pubkey for p2wpkh");
    }
    if (e.witness) {
      if (e.witness.length !== 2) throw new TypeError("Witness is invalid");
      if (!Hn(e.witness[0]))
        throw new TypeError("Witness has invalid signature");
      if (!jr(e.witness[1]) || e.witness[1].length !== 33)
        throw new TypeError("Witness has invalid pubkey");
      if (e.signature && te(e.signature, e.witness[0]) !== 0)
        throw new TypeError("Signature mismatch");
      if (e.pubkey && te(e.pubkey, e.witness[1]) !== 0)
        throw new TypeError("Pubkey mismatch");
      const s = $n(e.witness[1]);
      if (i.length > 0 && te(i, s) !== 0)
        throw new TypeError("Hash mismatch");
    }
  }
  return Object.assign(o, e);
}
const Jp = Ze, Wl = new Uint8Array(0);
function ic(e) {
  return !!(e instanceof Uint8Array && e.length === 65 && e[0] === 4 && jr(e));
}
function Sa(e, t) {
  if (!e.address && !e.hash && !e.output && !e.redeem && !e.witness)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), ct(
    Fp({
      network: St({}),
      address: pi(),
      hash: z2,
      output: Ot(34),
      redeem: Fp({
        input: We,
        network: St({}),
        output: We,
        witness: or(We)
      }),
      input: Ot(0),
      witness: or(We)
    }),
    e
  );
  const r = Ir(() => {
    const s = hr.decode(e.address), a = s.words.shift(), c = hr.fromWords(s.words);
    return {
      version: a,
      prefix: s.prefix,
      data: Uint8Array.from(c)
    };
  }), n = Ir(() => lt(e.redeem.input));
  let o = e.network;
  o || (o = e.redeem && e.redeem.network || Zr);
  const i = { network: o };
  if (de(i, "address", () => {
    if (!i.hash) return;
    const s = hr.toWords(i.hash);
    return s.unshift(0), hr.encode(o.bech32, s);
  }), de(i, "hash", () => {
    if (e.output) return e.output.slice(2);
    if (e.address) return r().data;
    if (i.redeem && i.redeem.output) return Ut(i.redeem.output);
  }), de(i, "output", () => {
    if (i.hash)
      return ir([Jp.OP_0, i.hash]);
  }), de(i, "redeem", () => {
    if (e.witness)
      return {
        output: e.witness[e.witness.length - 1],
        input: Wl,
        witness: e.witness.slice(0, -1)
      };
  }), de(i, "input", () => {
    if (i.witness)
      return Wl;
  }), de(i, "witness", () => {
    if (e.redeem && e.redeem.input && e.redeem.input.length > 0 && e.redeem.output && e.redeem.output.length > 0) {
      const s = W2(n());
      return i.redeem = Object.assign({ witness: s }, e.redeem), i.redeem.input = Wl, [].concat(s, e.redeem.output);
    }
    if (e.redeem && e.redeem.output && e.redeem.witness)
      return [].concat(e.redeem.witness, e.redeem.output);
  }), de(i, "name", () => {
    const s = ["p2wsh"];
    return i.redeem !== void 0 && i.redeem.name !== void 0 && s.push(i.redeem.name), s.join("-");
  }), t.validate) {
    let s = Uint8Array.from([]);
    if (e.address) {
      if (r().prefix !== o.bech32)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (r().version !== 0)
        throw new TypeError("Invalid address version");
      if (r().data.length !== 32)
        throw new TypeError("Invalid address data");
      s = r().data;
    }
    if (e.hash) {
      if (s.length > 0 && te(s, e.hash) !== 0)
        throw new TypeError("Hash mismatch");
      s = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 34 || e.output[0] !== Jp.OP_0 || e.output[1] !== 32)
        throw new TypeError("Output is invalid");
      const a = e.output.slice(2);
      if (s.length > 0 && te(s, a) !== 0)
        throw new TypeError("Hash mismatch");
      s = a;
    }
    if (e.redeem) {
      if (e.redeem.network && e.redeem.network !== o)
        throw new TypeError("Network mismatch");
      if (e.redeem.input && e.redeem.input.length > 0 && e.redeem.witness && e.redeem.witness.length > 0)
        throw new TypeError("Ambiguous witness source");
      if (e.redeem.output) {
        const a = lt(e.redeem.output);
        if (!a || a.length < 1)
          throw new TypeError("Redeem.output is invalid");
        if (e.redeem.output.byteLength > 3600)
          throw new TypeError(
            "Redeem.output unspendable if larger than 3600 bytes"
          );
        if (hm(a) > 201)
          throw new TypeError(
            "Redeem.output unspendable with more than 201 non-push ops"
          );
        const c = Ut(e.redeem.output);
        if (s.length > 0 && te(s, c) !== 0)
          throw new TypeError("Hash mismatch");
        s = c;
      }
      if (e.redeem.input && !Yd(n()))
        throw new TypeError("Non push-only scriptSig");
      if (e.witness && e.redeem.witness && !Ys(e.witness, e.redeem.witness))
        throw new TypeError("Witness and redeem.witness mismatch");
      if (e.redeem.input && n().some(ic) || e.redeem.output && (lt(e.redeem.output) || []).some(
        ic
      ))
        throw new TypeError(
          "redeem.input or redeem.output contains uncompressed pubkey"
        );
    }
    if (e.witness && e.witness.length > 0) {
      const a = e.witness[e.witness.length - 1];
      if (e.redeem && e.redeem.output && te(e.redeem.output, a) !== 0)
        throw new TypeError("Witness and redeem.output mismatch");
      if (e.witness.some(ic) || (lt(a) || []).some(ic))
        throw new TypeError("Witness contains uncompressed pubkey");
    }
  }
  return Object.assign(i, e);
}
const Ks = {};
function ih(e) {
  e ? e !== Ks.eccLib && (AE(e), Ks.eccLib = e) : Ks.eccLib = e;
}
function Gf() {
  if (!Ks.eccLib)
    throw new Error(
      "No ECC Library provided. You must call initEccLib() with a valid TinySecp256k1Interface instance"
    );
  return Ks.eccLib;
}
const En = (e) => Dn(e);
function AE(e) {
  xr(typeof e.isXOnlyPoint == "function"), xr(
    e.isXOnlyPoint(
      En("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  ), xr(
    e.isXOnlyPoint(
      En("fffffffffffffffffffffffffffffffffffffffffffffffffffffffeeffffc2e")
    )
  ), xr(
    e.isXOnlyPoint(
      En("f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9")
    )
  ), xr(
    e.isXOnlyPoint(
      En("0000000000000000000000000000000000000000000000000000000000000001")
    )
  ), xr(
    !e.isXOnlyPoint(
      En("0000000000000000000000000000000000000000000000000000000000000000")
    )
  ), xr(
    !e.isXOnlyPoint(
      En("fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f")
    )
  ), xr(typeof e.xOnlyPointAddTweak == "function"), kE.forEach((t) => {
    const r = e.xOnlyPointAddTweak(En(t.pubkey), En(t.tweak));
    t.result === null ? xr(r === null) : (xr(r !== null), xr(r.parity === t.parity), xr(te(r.xOnlyPubkey, En(t.result)) === 0));
  });
}
function xr(e) {
  if (!e) throw new Error("ecc library invalid");
}
const kE = [
  {
    pubkey: "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
    tweak: "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140",
    parity: -1,
    result: null
  },
  {
    pubkey: "1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b",
    tweak: "a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac",
    parity: 1,
    result: "e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf"
  },
  {
    pubkey: "2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991",
    tweak: "823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47",
    parity: 0,
    result: "9534f8dc8c6deda2dc007655981c78b49c5d96c778fbf363462a11ec9dfd948c"
  }
], xm = "0123456789abcdefABCDEF";
xm.split("").map((e) => e.codePointAt(0));
const Qp = Array(256).fill(!0).map((e, t) => {
  const r = String.fromCodePoint(t), n = xm.indexOf(r);
  return n < 0 ? void 0 : n < 16 ? n : n - 6;
}), _m = new TextEncoder();
new TextDecoder();
function TE(e) {
  return _m.encode(e);
}
function IE(e) {
  const t = e.reduce((o, i) => o + i.length, 0), r = new Uint8Array(t);
  let n = 0;
  for (const o of e)
    r.set(o, n), n += o.length;
  return r;
}
function PE(e) {
  const t = _m.encode(e || ""), r = new Uint8Array(Math.floor(t.length / 2));
  let n;
  for (n = 0; n < r.length; n++) {
    const o = Qp[t[n * 2]], i = Qp[t[n * 2 + 1]];
    if (o === void 0 || i === void 0)
      break;
    r[n] = o << 4 | i;
  }
  return n === r.length ? r : r.slice(0, n);
}
function xn(e, t) {
  const r = Math.min(e.length, t.length);
  for (let n = 0; n < r; ++n)
    if (e[n] !== t[n])
      return e[n] < t[n] ? -1 : 1;
  return e.length === t.length ? 0 : e.length > t.length ? 1 : -1;
}
function e0(e, t, r) {
  if (t + 1 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r > 255)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= 255. Received ${r}`);
  e[t] = r;
}
function OE(e, t, r, n) {
  if (t + 2 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (n = n.toUpperCase(), r > 65535)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= 65535. Received ${r}`);
  n === "LE" ? (e[t] = r & 255, e[t + 1] = r >> 8 & 255) : (e[t] = r >> 8 & 255, e[t + 1] = r & 255);
}
function Mo(e, t, r, n) {
  if (t + 4 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (n = n.toUpperCase(), r > 4294967295)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= ${4294967295}. Received ${r}`);
  n === "LE" ? (e[t] = r & 255, e[t + 1] = r >> 8 & 255, e[t + 2] = r >> 16 & 255, e[t + 3] = r >> 24 & 255) : (e[t] = r >> 24 & 255, e[t + 1] = r >> 16 & 255, e[t + 2] = r >> 8 & 255, e[t + 3] = r & 255);
}
function BE(e, t, r, n) {
  if (t + 8 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (n = n.toUpperCase(), r > 0xffffffffffffffffn)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= ${0xffffffffffffffffn}. Received ${r}`);
  n === "LE" ? (e[t] = Number(r & 0xffn), e[t + 1] = Number(r >> 8n & 0xffn), e[t + 2] = Number(r >> 16n & 0xffn), e[t + 3] = Number(r >> 24n & 0xffn), e[t + 4] = Number(r >> 32n & 0xffn), e[t + 5] = Number(r >> 40n & 0xffn), e[t + 6] = Number(r >> 48n & 0xffn), e[t + 7] = Number(r >> 56n & 0xffn)) : (e[t] = Number(r >> 56n & 0xffn), e[t + 1] = Number(r >> 48n & 0xffn), e[t + 2] = Number(r >> 40n & 0xffn), e[t + 3] = Number(r >> 32n & 0xffn), e[t + 4] = Number(r >> 24n & 0xffn), e[t + 5] = Number(r >> 16n & 0xffn), e[t + 6] = Number(r >> 8n & 0xffn), e[t + 7] = Number(r & 0xffn));
}
function NE(e, t, r) {
  if (t + 2 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r = r.toUpperCase(), r === "LE") {
    let n = 0;
    return n = (n << 8) + e[t + 1], n = (n << 8) + e[t], n;
  } else {
    let n = 0;
    return n = (n << 8) + e[t], n = (n << 8) + e[t + 1], n;
  }
}
function Ui(e, t, r) {
  if (t + 4 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r = r.toUpperCase(), r === "LE") {
    let n = 0;
    return n = (n << 8) + e[t + 3] >>> 0, n = (n << 8) + e[t + 2] >>> 0, n = (n << 8) + e[t + 1] >>> 0, n = (n << 8) + e[t] >>> 0, n;
  } else {
    let n = 0;
    return n = (n << 8) + e[t] >>> 0, n = (n << 8) + e[t + 1] >>> 0, n = (n << 8) + e[t + 2] >>> 0, n = (n << 8) + e[t + 3] >>> 0, n;
  }
}
function $E(e, t, r) {
  if (t + 8 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r = r.toUpperCase(), r === "LE") {
    let n = 0n;
    return n = (n << 8n) + BigInt(e[t + 7]), n = (n << 8n) + BigInt(e[t + 6]), n = (n << 8n) + BigInt(e[t + 5]), n = (n << 8n) + BigInt(e[t + 4]), n = (n << 8n) + BigInt(e[t + 3]), n = (n << 8n) + BigInt(e[t + 2]), n = (n << 8n) + BigInt(e[t + 1]), n = (n << 8n) + BigInt(e[t]), n;
  } else {
    let n = 0n;
    return n = (n << 8n) + BigInt(e[t]), n = (n << 8n) + BigInt(e[t + 1]), n = (n << 8n) + BigInt(e[t + 2]), n = (n << 8n) + BigInt(e[t + 3]), n = (n << 8n) + BigInt(e[t + 4]), n = (n << 8n) + BigInt(e[t + 5]), n = (n << 8n) + BigInt(e[t + 6]), n = (n << 8n) + BigInt(e[t + 7]), n;
  }
}
const UE = (e) => {
  if (e < 0 || e > 0xffffffffffffffffn)
    throw new RangeError("value out of range");
};
function RE(e) {
  if (e < 0 || e > Number.MAX_SAFE_INTEGER || e % 1 !== 0)
    throw new RangeError("value out of range");
}
function Sm(e) {
  typeof e == "number" ? RE(e) : UE(e);
}
function Ao(e, t, r) {
  Sm(e), r === void 0 && (r = 0), t === void 0 && (t = new Uint8Array(Pr(e)));
  let n = 0;
  return e < 253 ? (t.set([Number(e)], r), n = 1) : e <= 65535 ? (t.set([253], r), OE(t, r + 1, Number(e), "LE"), n = 3) : e <= 4294967295 ? (t.set([254], r), Mo(t, r + 1, Number(e), "LE"), n = 5) : (t.set([255], r), BE(t, r + 1, BigInt(e), "LE"), n = 9), { buffer: t, bytes: n };
}
function ds(e, t) {
  t === void 0 && (t = 0);
  const r = e.at(t);
  if (r === void 0)
    throw new Error("buffer too small");
  if (r < 253)
    return { numberValue: r, bigintValue: BigInt(r), bytes: 1 };
  if (r === 253) {
    const n = NE(e, t + 1, "LE");
    return {
      numberValue: n,
      bigintValue: BigInt(n),
      bytes: 3
    };
  } else if (r === 254) {
    const n = Ui(e, t + 1, "LE");
    return {
      numberValue: n,
      bigintValue: BigInt(n),
      bytes: 5
    };
  } else {
    const n = $E(e, t + 1, "LE");
    return { numberValue: n <= Number.MAX_SAFE_INTEGER ? Number(n) : null, bigintValue: n, bytes: 9 };
  }
}
function Pr(e) {
  return Sm(e), e < 253 ? 1 : e <= 65535 ? 3 : e <= 4294967295 ? 5 : 9;
}
const CE = 9007199254740991;
function HE(e, t) {
  if (typeof e != "number" && typeof e != "bigint")
    throw new Error("cannot write a non-number as a number");
  if (e < 0 && e < BigInt(0))
    throw new Error("specified a negative value for writing an unsigned value");
  if (e > t && e > BigInt(t))
    throw new Error("RangeError: value out of range");
  if (Math.floor(Number(e)) !== Number(e))
    throw new Error("value has a fractional component");
}
function sh(e) {
  if (e.length < 1) return e;
  let t = e.length - 1, r = 0;
  for (let n = 0; n < e.length / 2; n++)
    r = e[n], e[n] = e[t], e[t] = r, t--;
  return e;
}
function t0(e) {
  const t = new Uint8Array(e.length);
  return t.set(e), t;
}
class qt {
  constructor(t, r = 0) {
    oe(this, "buffer");
    oe(this, "offset");
    this.buffer = t, this.offset = r, ct(un([We, In]), [
      t,
      r
    ]);
  }
  static withCapacity(t) {
    return new qt(new Uint8Array(t));
  }
  writeUInt8(t) {
    this.offset = dr(this.buffer, this.offset, t);
  }
  writeInt32(t) {
    this.offset = Qg(this.buffer, this.offset, t, "LE");
  }
  writeInt64(t) {
    this.offset = em(this.buffer, this.offset, BigInt(t), "LE");
  }
  writeUInt32(t) {
    this.offset = Ea(this.buffer, this.offset, t, "LE");
  }
  writeUInt64(t) {
    this.offset = k2(this.buffer, this.offset, BigInt(t), "LE");
  }
  writeVarInt(t) {
    const { bytes: r } = Ao(t, this.buffer, this.offset);
    this.offset += r;
  }
  writeSlice(t) {
    if (this.buffer.length < this.offset + t.length)
      throw new Error("Cannot write slice out of bounds");
    this.buffer.set(t, this.offset), this.offset += t.length;
  }
  writeVarSlice(t) {
    this.writeVarInt(t.length), this.writeSlice(t);
  }
  writeVector(t) {
    this.writeVarInt(t.length), t.forEach((r) => this.writeVarSlice(r));
  }
  end() {
    if (this.buffer.length === this.offset)
      return this.buffer;
    throw new Error(`buffer size ${this.buffer.length}, offset ${this.offset}`);
  }
}
class LE {
  constructor(t, r = 0) {
    oe(this, "buffer");
    oe(this, "offset");
    this.buffer = t, this.offset = r, ct(un([We, In]), [
      t,
      r
    ]);
  }
  readUInt8() {
    const t = Cn(this.buffer, this.offset);
    return this.offset++, t;
  }
  readInt32() {
    const t = I2(this.buffer, this.offset, "LE");
    return this.offset += 4, t;
  }
  readUInt32() {
    const t = us(this.buffer, this.offset, "LE");
    return this.offset += 4, t;
  }
  readInt64() {
    const t = tm(this.buffer, this.offset, "LE");
    return this.offset += 8, t;
  }
  readVarInt() {
    const { bigintValue: t, bytes: r } = ds(this.buffer, this.offset);
    return this.offset += r, t;
  }
  readSlice(t) {
    HE(t, CE);
    const r = Number(t);
    if (this.buffer.length < this.offset + r)
      throw new Error("Cannot read slice out of bounds");
    const n = this.buffer.slice(this.offset, this.offset + r);
    return this.offset += r, n;
  }
  readVarSlice() {
    return this.readSlice(this.readVarInt());
  }
  readVector() {
    const t = this.readVarInt(), r = [];
    for (let n = 0; n < t; n++) r.push(this.readVarSlice());
    return r;
  }
}
const Am = 192, zE = 128, jE = (e) => "left" in e && "right" in e;
function Wf(e, t) {
  if (e.length < 33)
    throw new TypeError(
      `The control-block length is too small. Got ${e.length}, expected min 33.`
    );
  const r = (e.length - 33) / 32;
  let n = t;
  for (let o = 0; o < r; o++) {
    const i = e.slice(33 + 32 * o, 65 + 32 * o);
    te(n, i) < 0 ? n = Xf(n, i) : n = Xf(i, n);
  }
  return n;
}
function Zf(e) {
  if (Xd(e)) return { hash: Nn(e) };
  const t = [Zf(e[0]), Zf(e[1])];
  t.sort((o, i) => te(o.hash, i.hash));
  const [r, n] = t;
  return {
    hash: Xf(r.hash, n.hash),
    left: r,
    right: n
  };
}
function Vc(e, t) {
  if (jE(e)) {
    const r = Vc(e.left, t);
    if (r !== void 0) return [...r, e.right.hash];
    const n = Vc(e.right, t);
    if (n !== void 0) return [...n, e.left.hash];
  } else if (te(e.hash, t) === 0)
    return [];
}
function Nn(e) {
  const t = e.version || Am;
  return Ru(
    "TapLeaf",
    dt([Uint8Array.from([t]), DE(e.output)])
  );
}
function ME(e, t) {
  return Ru(
    "TapTweak",
    dt(t ? [e, t] : [e])
  );
}
function sc(e, t) {
  if (!(e instanceof Uint8Array) || e.length !== 32 || t && t.length !== 32) return null;
  const r = ME(e, t), n = Gf().xOnlyPointAddTweak(e, r);
  return !n || n.xOnlyPubkey === null ? null : {
    parity: n.parity,
    x: Uint8Array.from(n.xOnlyPubkey)
  };
}
function Xf(e, t) {
  return Ru("TapBranch", dt([e, t]));
}
function DE(e) {
  const t = Pr(e.length), r = new Uint8Array(t);
  return Ao(e.length, r), dt([r, e]);
}
const r0 = Ze, n0 = 1, FE = 80;
function Aa(e, t) {
  if (!e.address && !e.output && !e.pubkey && !e.internalPubkey && !(e.witness && e.witness.length > 1))
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), ct(
    So(
      St({
        address: pi(),
        input: Ot(0),
        network: St({}),
        output: Ot(34),
        internalPubkey: Ot(32),
        hash: Ot(32),
        // merkle root hash, the tweak
        pubkey: Ot(32),
        // tweaked with `hash` from `internalPubkey`
        signature: Zd([
          Ot(64),
          Ot(65)
        ]),
        witness: or(We),
        scriptTree: Vr(um, "Taptree is not of type isTaptree"),
        redeem: So(
          St({
            output: We,
            // tapleaf script
            redeemVersion: nr(),
            // tapleaf version
            witness: or(We)
          })
        ),
        redeemVersion: nr()
      })
    ),
    e
  );
  const r = Ir(() => ah(e.address)), n = Ir(() => {
    if (!(!e.witness || !e.witness.length))
      return e.witness.length >= 2 && e.witness[e.witness.length - 1][0] === FE ? e.witness.slice(0, -1) : e.witness.slice();
  }), o = Ir(() => {
    if (e.scriptTree) return Zf(e.scriptTree);
    if (e.hash) return { hash: e.hash };
  }), i = e.network || Zr, s = { name: "p2tr", network: i };
  if (de(s, "address", () => {
    if (!s.pubkey) return;
    const a = Qs.toWords(s.pubkey);
    return a.unshift(n0), Qs.encode(i.bech32, a);
  }), de(s, "hash", () => {
    const a = o();
    if (a) return a.hash;
    const c = n();
    if (c && c.length > 1) {
      const u = c[c.length - 1], f = u[0] & Pc, l = c[c.length - 2], d = Nn({ output: l, version: f });
      return Wf(u, d);
    }
    return null;
  }), de(s, "output", () => {
    if (s.pubkey)
      return ir([r0.OP_1, s.pubkey]);
  }), de(s, "redeemVersion", () => e.redeemVersion ? e.redeemVersion : e.redeem && e.redeem.redeemVersion !== void 0 && e.redeem.redeemVersion !== null ? e.redeem.redeemVersion : Am), de(s, "redeem", () => {
    const a = n();
    if (!(!a || a.length < 2))
      return {
        output: a[a.length - 2],
        witness: a.slice(0, -2),
        redeemVersion: a[a.length - 1][0] & Pc
      };
  }), de(s, "pubkey", () => {
    if (e.pubkey) return e.pubkey;
    if (e.output) return e.output.slice(2);
    if (e.address) return r().data;
    if (s.internalPubkey) {
      const a = sc(s.internalPubkey, s.hash);
      if (a) return a.x;
    }
  }), de(s, "internalPubkey", () => {
    if (e.internalPubkey) return e.internalPubkey;
    const a = n();
    if (a && a.length > 1)
      return a[a.length - 1].slice(1, 33);
  }), de(s, "signature", () => {
    if (e.signature) return e.signature;
    const a = n();
    if (!(!a || a.length !== 1))
      return a[0];
  }), de(s, "witness", () => {
    if (e.witness) return e.witness;
    const a = o();
    if (a && e.redeem && e.redeem.output && e.internalPubkey) {
      const c = Nn({
        output: e.redeem.output,
        version: s.redeemVersion
      }), u = Vc(a, c);
      if (!u) return;
      const f = sc(e.internalPubkey, a.hash);
      if (!f) return;
      const l = dt(
        [
          Uint8Array.from([s.redeemVersion | f.parity]),
          e.internalPubkey
        ].concat(u)
      );
      return [e.redeem.output, l];
    }
    if (e.signature) return [e.signature];
  }), t.validate) {
    let a = Uint8Array.from([]);
    if (e.address) {
      if (i && i.bech32 !== r().prefix)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (r().version !== n0)
        throw new TypeError("Invalid address version");
      if (r().data.length !== 32)
        throw new TypeError("Invalid address data");
      a = r().data;
    }
    if (e.pubkey) {
      if (a.length > 0 && te(a, e.pubkey) !== 0)
        throw new TypeError("Pubkey mismatch");
      a = e.pubkey;
    }
    if (e.output) {
      if (e.output.length !== 34 || e.output[0] !== r0.OP_1 || e.output[1] !== 32)
        throw new TypeError("Output is invalid");
      if (a.length > 0 && te(a, e.output.slice(2)) !== 0)
        throw new TypeError("Pubkey mismatch");
      a = e.output.slice(2);
    }
    if (e.internalPubkey) {
      const f = sc(e.internalPubkey, s.hash);
      if (a.length > 0 && te(a, f.x) !== 0)
        throw new TypeError("Pubkey mismatch");
      a = f.x;
    }
    if (a && a.length && !Gf().isXOnlyPoint(a))
      throw new TypeError("Invalid pubkey for p2tr");
    const c = o();
    if (e.hash && c && te(e.hash, c.hash) !== 0)
      throw new TypeError("Hash mismatch");
    if (e.redeem && e.redeem.output && c) {
      const f = Nn({
        output: e.redeem.output,
        version: s.redeemVersion
      });
      if (!Vc(c, f))
        throw new TypeError("Redeem script not in tree");
    }
    const u = n();
    if (e.redeem && s.redeem) {
      if (e.redeem.redeemVersion && e.redeem.redeemVersion !== s.redeem.redeemVersion)
        throw new TypeError("Redeem.redeemVersion and witness mismatch");
      if (e.redeem.output) {
        if (lt(e.redeem.output).length === 0)
          throw new TypeError("Redeem.output is invalid");
        if (s.redeem.output && te(e.redeem.output, s.redeem.output) !== 0)
          throw new TypeError("Redeem.output and witness mismatch");
      }
      if (e.redeem.witness && s.redeem.witness && !Ys(e.redeem.witness, s.redeem.witness))
        throw new TypeError("Redeem.witness and witness mismatch");
    }
    if (u && u.length)
      if (u.length === 1) {
        if (e.signature && te(e.signature, u[0]) !== 0)
          throw new TypeError("Signature mismatch");
      } else {
        const f = u[u.length - 1];
        if (f.length < 33)
          throw new TypeError(
            `The control-block length is too small. Got ${f.length}, expected min 33.`
          );
        if ((f.length - 33) % 32 !== 0)
          throw new TypeError(
            `The control-block length of ${f.length} is incorrect!`
          );
        const l = (f.length - 33) / 32;
        if (l > 128)
          throw new TypeError(
            `The script path is too long. Got ${l}, expected max 128.`
          );
        const d = f.slice(1, 33);
        if (e.internalPubkey && te(e.internalPubkey, d) !== 0)
          throw new TypeError("Internal pubkey mismatch");
        if (!Gf().isXOnlyPoint(d))
          throw new TypeError("Invalid internalPubkey for p2tr witness");
        const m = f[0] & Pc, g = u[u.length - 2], y = Nn({ output: g, version: m }), b = Wf(f, y), E = sc(d, b);
        if (!E)
          throw new TypeError("Invalid outputKey for p2tr witness");
        if (a.length && te(a, E.x) !== 0)
          throw new TypeError("Pubkey mismatch for p2tr witness");
        if (E.parity !== (f[0] & 1))
          throw new Error("Incorrect parity");
      }
  }
  return Object.assign(s, e);
}
const km = 40, Tm = 2, Im = 16, Pm = 2, Om = 80, Bm = "WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit.";
function KE(e, t) {
  const r = e.slice(2);
  if (r.length < Tm || r.length > km)
    throw new TypeError("Invalid program length for segwit address");
  const n = e[0] - Om;
  if (n < Pm || n > Im)
    throw new TypeError("Invalid version for segwit address");
  if (e[1] !== r.length)
    throw new TypeError("Invalid script for segwit address");
  return console.warn(Bm), VE(r, n, t.bech32);
}
function Nm(e) {
  const t = Wi.decode(e);
  if (t.length < 21) throw new TypeError(e + " is too short");
  if (t.length > 21) throw new TypeError(e + " is too long");
  const r = Cn(t, 0), n = t.slice(1);
  return { version: r, hash: n };
}
function ah(e) {
  let t, r;
  try {
    t = hr.decode(e);
  } catch {
  }
  if (t) {
    if (r = t.words[0], r !== 0) throw new TypeError(e + " uses wrong encoding");
  } else if (t = Qs.decode(e), r = t.words[0], r === 0) throw new TypeError(e + " uses wrong encoding");
  const n = hr.fromWords(t.words.slice(1));
  return {
    version: r,
    prefix: t.prefix,
    data: Uint8Array.from(n)
  };
}
function VE(e, t, r) {
  const n = hr.toWords(e);
  return n.unshift(t), t === 0 ? hr.encode(r, n) : Qs.encode(r, n);
}
function ka(e, t) {
  t = t || Zr;
  try {
    return xa({ output: e, network: t }).address;
  } catch {
  }
  try {
    return fs({ output: e, network: t }).address;
  } catch {
  }
  try {
    return _a({ output: e, network: t }).address;
  } catch {
  }
  try {
    return Sa({ output: e, network: t }).address;
  } catch {
  }
  try {
    return Aa({ output: e, network: t }).address;
  } catch {
  }
  try {
    return KE(e, t);
  } catch {
  }
  throw new Error(G2(e) + " has no matching Address");
}
function Ta(e, t) {
  t = t || Zr;
  let r, n;
  try {
    r = Nm(e);
  } catch {
  }
  if (r) {
    if (r.version === t.pubKeyHash)
      return xa({ hash: r.hash }).output;
    if (r.version === t.scriptHash)
      return fs({ hash: r.hash }).output;
  } else {
    try {
      n = ah(e);
    } catch {
    }
    if (n) {
      if (n.prefix !== t.bech32)
        throw new Error(e + " has an invalid prefix");
      if (n.version === 0) {
        if (n.data.length === 20)
          return _a({ hash: n.data }).output;
        if (n.data.length === 32)
          return Sa({ hash: n.data }).output;
      } else if (n.version === 1) {
        if (n.data.length === 32)
          return Aa({ pubkey: n.data }).output;
      } else if (n.version >= Pm && n.version <= Im && n.data.length >= Tm && n.data.length <= km)
        return console.warn(Bm), ir([
          n.version + Om,
          n.data
        ]);
    }
  }
  throw new Error(e + " has no matching Script");
}
function cn(e) {
  const t = e.length;
  return Pr(t) + t;
}
function qE(e) {
  const t = e.length;
  return Pr(t) + e.reduce((r, n) => r + cn(n), 0);
}
const yo = new Uint8Array(0), o0 = [], Zl = Dn(
  "0000000000000000000000000000000000000000000000000000000000000000"
), i0 = Dn(
  "0000000000000000000000000000000000000000000000000000000000000001"
), GE = Dn("ffffffffffffffff"), WE = {
  script: yo,
  valueBuffer: GE
};
function ZE(e) {
  return e.value !== void 0;
}
const Re = class Re {
  constructor() {
    oe(this, "version", 1);
    oe(this, "locktime", 0);
    oe(this, "ins", []);
    oe(this, "outs", []);
  }
  static fromBuffer(t, r) {
    const n = new LE(t), o = new Re();
    o.version = n.readInt32();
    const i = n.readUInt8(), s = n.readUInt8();
    let a = !1;
    i === Re.ADVANCED_TRANSACTION_MARKER && s === Re.ADVANCED_TRANSACTION_FLAG ? a = !0 : n.offset -= 2;
    const c = n.readVarInt();
    for (let f = 0; f < c; ++f)
      o.ins.push({
        hash: n.readSlice(32),
        index: n.readUInt32(),
        script: n.readVarSlice(),
        sequence: n.readUInt32(),
        witness: o0
      });
    const u = n.readVarInt();
    for (let f = 0; f < u; ++f)
      o.outs.push({
        value: n.readInt64(),
        script: n.readVarSlice()
      });
    if (a) {
      for (let f = 0; f < c; ++f)
        o.ins[f].witness = n.readVector();
      if (!o.hasWitnesses())
        throw new Error("Transaction has superfluous witness data");
    }
    if (o.locktime = n.readUInt32(), r) return o;
    if (n.offset !== t.length)
      throw new Error("Transaction has unexpected data");
    return o;
  }
  static fromHex(t) {
    return Re.fromBuffer(Dn(t), !1);
  }
  static isCoinbaseHash(t) {
    ct(Dp, t);
    for (let r = 0; r < 32; ++r)
      if (t[r] !== 0) return !1;
    return !0;
  }
  isCoinbase() {
    return this.ins.length === 1 && Re.isCoinbaseHash(this.ins[0].hash);
  }
  addInput(t, r, n, o) {
    return ct(
      un([
        Dp,
        In,
        qf(jc(In)),
        qf(jc(We))
      ]),
      [t, r, n, o]
    ), n == null && (n = Re.DEFAULT_SEQUENCE), this.ins.push({
      hash: t,
      index: r,
      script: o || yo,
      sequence: n,
      witness: o0
    }) - 1;
  }
  addOutput(t, r) {
    return ct(un([We, Vl]), [
      t,
      r
    ]), this.outs.push({
      script: t,
      value: r
    }) - 1;
  }
  hasWitnesses() {
    return this.ins.some((t) => t.witness.length !== 0);
  }
  weight() {
    const t = this.byteLength(!1), r = this.byteLength(!0);
    return t * 3 + r;
  }
  virtualSize() {
    return Math.ceil(this.weight() / 4);
  }
  byteLength(t = !0) {
    const r = t && this.hasWitnesses();
    return (r ? 10 : 8) + Pr(this.ins.length) + Pr(this.outs.length) + this.ins.reduce((n, o) => n + 40 + cn(o.script), 0) + this.outs.reduce((n, o) => n + 8 + cn(o.script), 0) + (r ? this.ins.reduce((n, o) => n + qE(o.witness), 0) : 0);
  }
  clone() {
    const t = new Re();
    return t.version = this.version, t.locktime = this.locktime, t.ins = this.ins.map((r) => ({
      hash: r.hash,
      index: r.index,
      script: r.script,
      sequence: r.sequence,
      witness: r.witness
    })), t.outs = this.outs.map((r) => ({
      script: r.script,
      value: r.value
    })), t;
  }
  /**
   * Hash transaction for signing a specific input.
   *
   * Bitcoin uses a different hash for each signed transaction input.
   * This method copies the transaction, makes the necessary changes based on the
   * hashType, and then hashes the result.
   * This hash can then be used to sign the provided transaction input.
   */
  hashForSignature(t, r, n) {
    if (ct(un([In, We, nr()]), [
      t,
      r,
      n
    ]), t >= this.ins.length) return i0;
    const o = ir(
      lt(r).filter((a) => a !== Ze.OP_CODESEPARATOR)
    ), i = this.clone();
    if ((n & 31) === Re.SIGHASH_NONE)
      i.outs = [], i.ins.forEach((a, c) => {
        c !== t && (a.sequence = 0);
      });
    else if ((n & 31) === Re.SIGHASH_SINGLE) {
      if (t >= this.outs.length) return i0;
      i.outs.length = t + 1;
      for (let a = 0; a < t; a++)
        i.outs[a] = WE;
      i.ins.forEach((a, c) => {
        c !== t && (a.sequence = 0);
      });
    }
    n & Re.SIGHASH_ANYONECANPAY ? (i.ins = [i.ins[t]], i.ins[0].script = o) : (i.ins.forEach((a) => {
      a.script = yo;
    }), i.ins[t].script = o);
    const s = new Uint8Array(i.byteLength(!1) + 4);
    return Qg(s, s.length - 4, n, "LE"), i.__toBuffer(s, 0, !1), zo(s);
  }
  hashForWitnessV1(t, r, n, o, i, s) {
    if (ct(
      un([
        In,
        or(We),
        or(Vl),
        In
      ]),
      [t, r, n, o]
    ), n.length !== this.ins.length || r.length !== this.ins.length)
      throw new Error("Must supply prevout script and value for all inputs");
    const a = o === Re.SIGHASH_DEFAULT ? Re.SIGHASH_ALL : o & Re.SIGHASH_OUTPUT_MASK, u = (o & Re.SIGHASH_INPUT_MASK) === Re.SIGHASH_ANYONECANPAY, f = a === Re.SIGHASH_NONE, l = a === Re.SIGHASH_SINGLE;
    let d = yo, m = yo, g = yo, y = yo, b = yo;
    if (!u) {
      let k = qt.withCapacity(36 * this.ins.length);
      this.ins.forEach((S) => {
        k.writeSlice(S.hash), k.writeUInt32(S.index);
      }), d = Ut(k.end()), k = qt.withCapacity(8 * this.ins.length), n.forEach((S) => k.writeInt64(S)), m = Ut(k.end()), k = qt.withCapacity(
        r.map(cn).reduce((S, I) => S + I)
      ), r.forEach(
        (S) => k.writeVarSlice(S)
      ), g = Ut(k.end()), k = qt.withCapacity(4 * this.ins.length), this.ins.forEach((S) => k.writeUInt32(S.sequence)), y = Ut(k.end());
    }
    if (f || l) {
      if (l && t < this.outs.length) {
        const k = this.outs[t], S = qt.withCapacity(
          8 + cn(k.script)
        );
        S.writeInt64(k.value), S.writeVarSlice(k.script), b = Ut(S.end());
      }
    } else {
      if (!this.outs.length)
        throw new Error("Add outputs to the transaction before signing.");
      const k = this.outs.map((I) => 8 + cn(I.script)).reduce((I, T) => I + T), S = qt.withCapacity(k);
      this.outs.forEach((I) => {
        S.writeInt64(I.value), S.writeVarSlice(I.script);
      }), b = Ut(S.end());
    }
    const E = (i ? 2 : 0) + (s ? 1 : 0), x = 174 - (u ? 49 : 0) - (f ? 32 : 0) + (s ? 32 : 0) + (i ? 37 : 0), w = qt.withCapacity(x);
    if (w.writeUInt8(o), w.writeInt32(this.version), w.writeUInt32(this.locktime), w.writeSlice(d), w.writeSlice(m), w.writeSlice(g), w.writeSlice(y), f || l || w.writeSlice(b), w.writeUInt8(E), u) {
      const k = this.ins[t];
      w.writeSlice(k.hash), w.writeUInt32(k.index), w.writeInt64(n[t]), w.writeVarSlice(r[t]), w.writeUInt32(k.sequence);
    } else
      w.writeUInt32(t);
    if (s) {
      const k = qt.withCapacity(cn(s));
      k.writeVarSlice(s), w.writeSlice(Ut(k.end()));
    }
    return l && w.writeSlice(b), i && (w.writeSlice(i), w.writeUInt8(0), w.writeUInt32(4294967295)), Ru(
      "TapSighash",
      dt([Uint8Array.from([0]), w.end()])
    );
  }
  hashForWitnessV0(t, r, n, o) {
    ct(
      un([
        In,
        We,
        Vl,
        In
      ]),
      [t, r, n, o]
    );
    let i = Uint8Array.from([]), s, a = Zl, c = Zl, u = Zl;
    if (o & Re.SIGHASH_ANYONECANPAY || (i = new Uint8Array(36 * this.ins.length), s = new qt(i, 0), this.ins.forEach((l) => {
      s.writeSlice(l.hash), s.writeUInt32(l.index);
    }), c = zo(i)), !(o & Re.SIGHASH_ANYONECANPAY) && (o & 31) !== Re.SIGHASH_SINGLE && (o & 31) !== Re.SIGHASH_NONE && (i = new Uint8Array(4 * this.ins.length), s = new qt(i, 0), this.ins.forEach((l) => {
      s.writeUInt32(l.sequence);
    }), u = zo(i)), (o & 31) !== Re.SIGHASH_SINGLE && (o & 31) !== Re.SIGHASH_NONE) {
      const l = this.outs.reduce((d, m) => d + 8 + cn(m.script), 0);
      i = new Uint8Array(l), s = new qt(i, 0), this.outs.forEach((d) => {
        s.writeInt64(d.value), s.writeVarSlice(d.script);
      }), a = zo(i);
    } else if ((o & 31) === Re.SIGHASH_SINGLE && t < this.outs.length) {
      const l = this.outs[t];
      i = new Uint8Array(8 + cn(l.script)), s = new qt(i, 0), s.writeInt64(l.value), s.writeVarSlice(l.script), a = zo(i);
    }
    i = new Uint8Array(156 + cn(r)), s = new qt(i, 0);
    const f = this.ins[t];
    return s.writeInt32(this.version), s.writeSlice(c), s.writeSlice(u), s.writeSlice(f.hash), s.writeUInt32(f.index), s.writeVarSlice(r), s.writeInt64(n), s.writeUInt32(f.sequence), s.writeSlice(a), s.writeUInt32(this.locktime), s.writeUInt32(o), zo(i);
  }
  getHash(t) {
    return t && this.isCoinbase() ? new Uint8Array(32) : zo(this.__toBuffer(void 0, void 0, t));
  }
  getId() {
    return ye(sh(this.getHash(!1)));
  }
  toBuffer(t, r) {
    return this.__toBuffer(t, r, !0);
  }
  toHex() {
    return ye(this.toBuffer(void 0, void 0));
  }
  setInputScript(t, r) {
    ct(un([nr(), We]), [t, r]), this.ins[t].script = r;
  }
  setWitness(t, r) {
    ct(un([nr(), or(We)]), [
      t,
      r
    ]), this.ins[t].witness = r;
  }
  __toBuffer(t, r, n = !1) {
    t || (t = new Uint8Array(this.byteLength(n)));
    const o = new qt(t, r || 0);
    o.writeInt32(this.version);
    const i = n && this.hasWitnesses();
    return i && (o.writeUInt8(Re.ADVANCED_TRANSACTION_MARKER), o.writeUInt8(Re.ADVANCED_TRANSACTION_FLAG)), o.writeVarInt(this.ins.length), this.ins.forEach((s) => {
      o.writeSlice(s.hash), o.writeUInt32(s.index), o.writeVarSlice(s.script), o.writeUInt32(s.sequence);
    }), o.writeVarInt(this.outs.length), this.outs.forEach((s) => {
      ZE(s) ? o.writeInt64(s.value) : o.writeSlice(s.valueBuffer), o.writeVarSlice(s.script);
    }), i && this.ins.forEach((s) => {
      o.writeVector(s.witness);
    }), o.writeUInt32(this.locktime), r !== void 0 ? t.slice(r, o.offset) : t;
  }
};
oe(Re, "DEFAULT_SEQUENCE", 4294967295), oe(Re, "SIGHASH_DEFAULT", 0), oe(Re, "SIGHASH_ALL", 1), oe(Re, "SIGHASH_NONE", 2), oe(Re, "SIGHASH_SINGLE", 3), oe(Re, "SIGHASH_ANYONECANPAY", 128), oe(Re, "SIGHASH_OUTPUT_MASK", 3), oe(Re, "SIGHASH_INPUT_MASK", 128), oe(Re, "ADVANCED_TRANSACTION_MARKER", 0), oe(Re, "ADVANCED_TRANSACTION_FLAG", 1);
let ut = Re;
var hn;
(function(e) {
  e[e.UNSIGNED_TX = 0] = "UNSIGNED_TX", e[e.GLOBAL_XPUB = 1] = "GLOBAL_XPUB";
})(hn || (hn = {}));
var se;
(function(e) {
  e[e.NON_WITNESS_UTXO = 0] = "NON_WITNESS_UTXO", e[e.WITNESS_UTXO = 1] = "WITNESS_UTXO", e[e.PARTIAL_SIG = 2] = "PARTIAL_SIG", e[e.SIGHASH_TYPE = 3] = "SIGHASH_TYPE", e[e.REDEEM_SCRIPT = 4] = "REDEEM_SCRIPT", e[e.WITNESS_SCRIPT = 5] = "WITNESS_SCRIPT", e[e.BIP32_DERIVATION = 6] = "BIP32_DERIVATION", e[e.FINAL_SCRIPTSIG = 7] = "FINAL_SCRIPTSIG", e[e.FINAL_SCRIPTWITNESS = 8] = "FINAL_SCRIPTWITNESS", e[e.POR_COMMITMENT = 9] = "POR_COMMITMENT", e[e.TAP_KEY_SIG = 19] = "TAP_KEY_SIG", e[e.TAP_SCRIPT_SIG = 20] = "TAP_SCRIPT_SIG", e[e.TAP_LEAF_SCRIPT = 21] = "TAP_LEAF_SCRIPT", e[e.TAP_BIP32_DERIVATION = 22] = "TAP_BIP32_DERIVATION", e[e.TAP_INTERNAL_KEY = 23] = "TAP_INTERNAL_KEY", e[e.TAP_MERKLE_ROOT = 24] = "TAP_MERKLE_ROOT";
})(se || (se = {}));
var yt;
(function(e) {
  e[e.REDEEM_SCRIPT = 0] = "REDEEM_SCRIPT", e[e.WITNESS_SCRIPT = 1] = "WITNESS_SCRIPT", e[e.BIP32_DERIVATION = 2] = "BIP32_DERIVATION", e[e.TAP_INTERNAL_KEY = 5] = "TAP_INTERNAL_KEY", e[e.TAP_TREE = 6] = "TAP_TREE", e[e.TAP_BIP32_DERIVATION = 7] = "TAP_BIP32_DERIVATION";
})(yt || (yt = {}));
const XE = (e) => [...Array(e).keys()];
function YE(e) {
  if (e.key[0] !== hn.GLOBAL_XPUB)
    throw new Error(
      "Decode Error: could not decode globalXpub with key 0x" + ye(e.key)
    );
  if (e.key.length !== 79 || ![2, 3].includes(e.key[46]))
    throw new Error(
      "Decode Error: globalXpub has invalid extended pubkey in key 0x" + ye(e.key)
    );
  if (e.value.length / 4 % 1 !== 0)
    throw new Error(
      "Decode Error: Global GLOBAL_XPUB value length should be multiple of 4"
    );
  const t = e.key.slice(1), r = {
    masterFingerprint: e.value.slice(0, 4),
    extendedPubkey: t,
    path: "m"
  };
  for (const n of XE(e.value.length / 4 - 1)) {
    const o = us(e.value, n * 4 + 4, "LE"), i = !!(o & 2147483648), s = o & 2147483647;
    r.path += "/" + s.toString(10) + (i ? "'" : "");
  }
  return r;
}
function JE(e) {
  const t = new Uint8Array([hn.GLOBAL_XPUB]), r = dt([t, e.extendedPubkey]), n = e.path.split("/"), o = new Uint8Array(n.length * 4);
  o.set(e.masterFingerprint, 0);
  let i = 4;
  return n.slice(1).forEach((s) => {
    const a = s.slice(-1) === "'";
    let c = 2147483647 & parseInt(a ? s.slice(0, -1) : s, 10);
    a && (c += 2147483648), Ea(o, i, c, "LE"), i += 4;
  }), {
    key: r,
    value: o
  };
}
const QE = "{ masterFingerprint: Uint8Array; extendedPubkey: Uint8Array; path: string; }";
function ex(e) {
  const t = e.extendedPubkey, r = e.masterFingerprint, n = e.path;
  return t instanceof Uint8Array && t.length === 78 && [2, 3].indexOf(t[45]) > -1 && r instanceof Uint8Array && r.length === 4 && typeof n == "string" && !!n.match(/^m(\/\d+'?)*$/);
}
function tx(e, t, r) {
  const n = ye(t.extendedPubkey);
  return r.has(n) ? !1 : (r.add(n), e.filter((o) => te(o.extendedPubkey, t.extendedPubkey)).length === 0);
}
const rx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAddToArray: tx,
  check: ex,
  decode: YE,
  encode: JE,
  expected: QE
}, Symbol.toStringTag, { value: "Module" }));
function nx(e) {
  return {
    key: new Uint8Array([hn.UNSIGNED_TX]),
    value: e.toBuffer()
  };
}
const ox = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  encode: nx
}, Symbol.toStringTag, { value: "Module" }));
function ix(e) {
  if (e.key[0] !== se.FINAL_SCRIPTSIG)
    throw new Error(
      "Decode Error: could not decode finalScriptSig with key 0x" + ye(e.key)
    );
  return e.value;
}
function sx(e) {
  return {
    key: new Uint8Array([se.FINAL_SCRIPTSIG]),
    value: e
  };
}
const ax = "Uint8Array";
function cx(e) {
  return e instanceof Uint8Array;
}
function ux(e, t) {
  return !!e && !!t && e.finalScriptSig === void 0;
}
const lx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: ux,
  check: cx,
  decode: ix,
  encode: sx,
  expected: ax
}, Symbol.toStringTag, { value: "Module" }));
function fx(e) {
  if (e.key[0] !== se.FINAL_SCRIPTWITNESS)
    throw new Error(
      "Decode Error: could not decode finalScriptWitness with key 0x" + ye(e.key)
    );
  return e.value;
}
function dx(e) {
  return {
    key: new Uint8Array([se.FINAL_SCRIPTWITNESS]),
    value: e
  };
}
const hx = "Uint8Array";
function px(e) {
  return e instanceof Uint8Array;
}
function gx(e, t) {
  return !!e && !!t && e.finalScriptWitness === void 0;
}
const mx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: gx,
  check: px,
  decode: fx,
  encode: dx,
  expected: hx
}, Symbol.toStringTag, { value: "Module" }));
function bx(e) {
  if (e.key[0] !== se.NON_WITNESS_UTXO)
    throw new Error(
      "Decode Error: could not decode nonWitnessUtxo with key 0x" + ye(e.key)
    );
  return e.value;
}
function yx(e) {
  return {
    key: new Uint8Array([se.NON_WITNESS_UTXO]),
    value: e
  };
}
const wx = "Uint8Array";
function vx(e) {
  return e instanceof Uint8Array;
}
function Ex(e, t) {
  return !!e && !!t && e.nonWitnessUtxo === void 0;
}
const xx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: Ex,
  check: vx,
  decode: bx,
  encode: yx,
  expected: wx
}, Symbol.toStringTag, { value: "Module" }));
function _x(e) {
  if (e.key[0] !== se.PARTIAL_SIG)
    throw new Error(
      "Decode Error: could not decode partialSig with key 0x" + ye(e.key)
    );
  if (!(e.key.length === 34 || e.key.length === 66) || ![2, 3, 4].includes(e.key[1]))
    throw new Error(
      "Decode Error: partialSig has invalid pubkey in key 0x" + ye(e.key)
    );
  return {
    pubkey: e.key.slice(1),
    signature: e.value
  };
}
function Sx(e) {
  const t = new Uint8Array([se.PARTIAL_SIG]);
  return {
    key: dt([t, e.pubkey]),
    value: e.signature
  };
}
const Ax = "{ pubkey: Uint8Array; signature: Uint8Array; }";
function kx(e) {
  return e.pubkey instanceof Uint8Array && e.signature instanceof Uint8Array && [33, 65].includes(e.pubkey.length) && [2, 3, 4].includes(e.pubkey[0]) && Tx(e.signature);
}
function Tx(e) {
  if (!(e instanceof Uint8Array) || e.length < 9 || e[0] !== 48 || e.length !== e[1] + 3 || e[2] !== 2) return !1;
  const t = e[3];
  if (t > 33 || t < 1 || e[3 + t + 1] !== 2) return !1;
  const r = e[3 + t + 2];
  return !(r > 33 || r < 1 || e.length !== 3 + t + 2 + r + 2);
}
function Ix(e, t, r) {
  const n = ye(t.pubkey);
  return r.has(n) ? !1 : (r.add(n), e.filter((o) => te(o.pubkey, t.pubkey) === 0).length === 0);
}
const Px = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAddToArray: Ix,
  check: kx,
  decode: _x,
  encode: Sx,
  expected: Ax
}, Symbol.toStringTag, { value: "Module" }));
function Ox(e) {
  if (e.key[0] !== se.POR_COMMITMENT)
    throw new Error(
      "Decode Error: could not decode porCommitment with key 0x" + ye(e.key)
    );
  return v2(e.value);
}
function Bx(e) {
  return {
    key: new Uint8Array([se.POR_COMMITMENT]),
    value: E2(e)
  };
}
const Nx = "string";
function $x(e) {
  return typeof e == "string";
}
function Ux(e, t) {
  return !!e && !!t && e.porCommitment === void 0;
}
const Rx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: Ux,
  check: $x,
  decode: Ox,
  encode: Bx,
  expected: Nx
}, Symbol.toStringTag, { value: "Module" }));
function Cx(e) {
  if (e.key[0] !== se.SIGHASH_TYPE)
    throw new Error(
      "Decode Error: could not decode sighashType with key 0x" + ye(e.key)
    );
  return Number(us(e.value, 0, "LE"));
}
function Hx(e) {
  const t = Uint8Array.from([se.SIGHASH_TYPE]), r = new Uint8Array(4);
  return Ea(r, 0, e, "LE"), {
    key: t,
    value: r
  };
}
const Lx = "number";
function zx(e) {
  return typeof e == "number";
}
function jx(e, t) {
  return !!e && !!t && e.sighashType === void 0;
}
const Mx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: jx,
  check: zx,
  decode: Cx,
  encode: Hx,
  expected: Lx
}, Symbol.toStringTag, { value: "Module" }));
function Dx(e) {
  if (e.key[0] !== se.TAP_KEY_SIG || e.key.length !== 1)
    throw new Error(
      "Decode Error: could not decode tapKeySig with key 0x" + ye(e.key)
    );
  if (!$m(e.value))
    throw new Error(
      "Decode Error: tapKeySig not a valid 64-65-byte BIP340 signature"
    );
  return e.value;
}
function Fx(e) {
  return { key: Uint8Array.from([se.TAP_KEY_SIG]), value: e };
}
const Kx = "Uint8Array";
function $m(e) {
  return e instanceof Uint8Array && (e.length === 64 || e.length === 65);
}
function Vx(e, t) {
  return !!e && !!t && e.tapKeySig === void 0;
}
const qx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: Vx,
  check: $m,
  decode: Dx,
  encode: Fx,
  expected: Kx
}, Symbol.toStringTag, { value: "Module" }));
function Gx(e) {
  if (e.key[0] !== se.TAP_LEAF_SCRIPT)
    throw new Error(
      "Decode Error: could not decode tapLeafScript with key 0x" + ye(e.key)
    );
  if ((e.key.length - 2) % 32 !== 0)
    throw new Error(
      "Decode Error: tapLeafScript has invalid control block in key 0x" + ye(e.key)
    );
  const t = e.value[e.value.length - 1];
  if ((e.key[1] & 254) !== t)
    throw new Error(
      "Decode Error: tapLeafScript bad leaf version in key 0x" + ye(e.key)
    );
  const r = e.value.slice(0, -1);
  return { controlBlock: e.key.slice(1), script: r, leafVersion: t };
}
function Wx(e) {
  const t = Uint8Array.from([se.TAP_LEAF_SCRIPT]), r = Uint8Array.from([e.leafVersion]);
  return {
    key: dt([t, e.controlBlock]),
    value: dt([e.script, r])
  };
}
const Zx = "{ controlBlock: Uint8Array; leafVersion: number, script: Uint8Array; }";
function Xx(e) {
  return e.controlBlock instanceof Uint8Array && (e.controlBlock.length - 1) % 32 === 0 && (e.controlBlock[0] & 254) === e.leafVersion && e.script instanceof Uint8Array;
}
function Yx(e, t, r) {
  const n = ye(t.controlBlock);
  return r.has(n) ? !1 : (r.add(n), e.filter((o) => te(o.controlBlock, t.controlBlock) === 0).length === 0);
}
const Jx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAddToArray: Yx,
  check: Xx,
  decode: Gx,
  encode: Wx,
  expected: Zx
}, Symbol.toStringTag, { value: "Module" }));
function Qx(e) {
  if (e.key[0] !== se.TAP_MERKLE_ROOT || e.key.length !== 1)
    throw new Error(
      "Decode Error: could not decode tapMerkleRoot with key 0x" + ye(e.key)
    );
  if (!Um(e.value))
    throw new Error("Decode Error: tapMerkleRoot not a 32-byte hash");
  return e.value;
}
function e_(e) {
  return { key: Uint8Array.from([se.TAP_MERKLE_ROOT]), value: e };
}
const t_ = "Uint8Array";
function Um(e) {
  return e instanceof Uint8Array && e.length === 32;
}
function r_(e, t) {
  return !!e && !!t && e.tapMerkleRoot === void 0;
}
const n_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: r_,
  check: Um,
  decode: Qx,
  encode: e_,
  expected: t_
}, Symbol.toStringTag, { value: "Module" }));
function o_(e) {
  if (e.key[0] !== se.TAP_SCRIPT_SIG)
    throw new Error(
      "Decode Error: could not decode tapScriptSig with key 0x" + ye(e.key)
    );
  if (e.key.length !== 65)
    throw new Error(
      "Decode Error: tapScriptSig has invalid key 0x" + ye(e.key)
    );
  if (e.value.length !== 64 && e.value.length !== 65)
    throw new Error(
      "Decode Error: tapScriptSig has invalid signature in key 0x" + ye(e.key)
    );
  const t = e.key.slice(1, 33), r = e.key.slice(33);
  return {
    pubkey: t,
    leafHash: r,
    signature: e.value
  };
}
function i_(e) {
  const t = Uint8Array.from([se.TAP_SCRIPT_SIG]);
  return {
    key: dt([t, e.pubkey, e.leafHash]),
    value: e.signature
  };
}
const s_ = "{ pubkey: Uint8Array; leafHash: Uint8Array; signature: Uint8Array; }";
function a_(e) {
  return e.pubkey instanceof Uint8Array && e.leafHash instanceof Uint8Array && e.signature instanceof Uint8Array && e.pubkey.length === 32 && e.leafHash.length === 32 && (e.signature.length === 64 || e.signature.length === 65);
}
function c_(e, t, r) {
  const n = ye(t.pubkey) + ye(t.leafHash);
  return r.has(n) ? !1 : (r.add(n), e.filter(
    (o) => te(o.pubkey, t.pubkey) === 0 && te(o.leafHash, t.leafHash) === 0
  ).length === 0);
}
const u_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAddToArray: c_,
  check: a_,
  decode: o_,
  encode: i_,
  expected: s_
}, Symbol.toStringTag, { value: "Module" }));
function l_(e) {
  if (e.key[0] !== se.WITNESS_UTXO)
    throw new Error(
      "Decode Error: could not decode witnessUtxo with key 0x" + ye(e.key)
    );
  const t = tm(e.value, 0, "LE");
  let r = 8;
  const { numberValue: n, bytes: o } = ds(
    e.value,
    r
  );
  r += o;
  const i = e.value.slice(r);
  if (i.length !== n)
    throw new Error("Decode Error: WITNESS_UTXO script is not proper length");
  return {
    script: i,
    value: t
  };
}
function f_(e) {
  const { script: t, value: r } = e, n = Pr(t.length), o = new Uint8Array(8 + n + t.length);
  return em(o, 0, BigInt(r), "LE"), Ao(t.length, o, 8), o.set(t, 8 + n), {
    key: Uint8Array.from([se.WITNESS_UTXO]),
    value: o
  };
}
const d_ = "{ script: Uint8Array; value: bigint; }";
function h_(e) {
  return e.script instanceof Uint8Array && typeof e.value == "bigint";
}
function p_(e, t) {
  return !!e && !!t && e.witnessUtxo === void 0;
}
const g_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: p_,
  check: h_,
  decode: l_,
  encode: f_,
  expected: d_
}, Symbol.toStringTag, { value: "Module" }));
function m_(e) {
  if (e.key[0] !== yt.TAP_TREE || e.key.length !== 1)
    throw new Error(
      "Decode Error: could not decode tapTree with key 0x" + ye(e.key)
    );
  let t = 0;
  const r = [];
  for (; t < e.value.length; ) {
    const n = e.value[t++], o = e.value[t++], { numberValue: i, bytes: s } = ds(
      e.value,
      t
    );
    t += s, r.push({
      depth: n,
      leafVersion: o,
      script: e.value.slice(t, t + i)
    }), t += i;
  }
  return { leaves: r };
}
function b_(e) {
  const t = Uint8Array.from([yt.TAP_TREE]), r = [].concat(
    ...e.leaves.map((n) => [
      Uint8Array.of(n.depth, n.leafVersion),
      Ao(BigInt(n.script.length)).buffer,
      n.script
    ])
  );
  return {
    key: t,
    value: dt(r)
  };
}
const y_ = "{ leaves: [{ depth: number; leafVersion: number, script: Uint8Array; }] }";
function w_(e) {
  return Array.isArray(e.leaves) && e.leaves.every(
    (t) => t.depth >= 0 && t.depth <= 128 && (t.leafVersion & 254) === t.leafVersion && t.script instanceof Uint8Array
  );
}
function v_(e, t) {
  return !!e && !!t && e.tapTree === void 0;
}
const E_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: v_,
  check: w_,
  decode: m_,
  encode: b_,
  expected: y_
}, Symbol.toStringTag, { value: "Module" })), x_ = (e) => [...Array(e).keys()], __ = (e) => e.length === 33 && [2, 3].includes(e[0]) || e.length === 65 && e[0] === 4;
function ch(e, t = __) {
  function r(a) {
    if (a.key[0] !== e)
      throw new Error(
        "Decode Error: could not decode bip32Derivation with key 0x" + ye(a.key)
      );
    const c = a.key.slice(1);
    if (!t(c))
      throw new Error(
        "Decode Error: bip32Derivation has invalid pubkey in key 0x" + ye(a.key)
      );
    if (a.value.length / 4 % 1 !== 0)
      throw new Error(
        "Decode Error: Input BIP32_DERIVATION value length should be multiple of 4"
      );
    const u = {
      masterFingerprint: a.value.slice(0, 4),
      pubkey: c,
      path: "m"
    };
    for (const f of x_(a.value.length / 4 - 1)) {
      const l = us(a.value, f * 4 + 4, "LE"), d = !!(l & 2147483648), m = l & 2147483647;
      u.path += "/" + m.toString(10) + (d ? "'" : "");
    }
    return u;
  }
  function n(a) {
    const c = Uint8Array.from([e]), u = dt([c, a.pubkey]), f = a.path.split("/"), l = new Uint8Array(f.length * 4);
    l.set(a.masterFingerprint, 0);
    let d = 4;
    return f.slice(1).forEach((m) => {
      const g = m.slice(-1) === "'";
      let y = 2147483647 & parseInt(g ? m.slice(0, -1) : m, 10);
      g && (y += 2147483648), Ea(l, d, y, "LE"), d += 4;
    }), {
      key: u,
      value: l
    };
  }
  const o = "{ masterFingerprint: Uint8Array; pubkey: Uint8Array; path: string; }";
  function i(a) {
    return a.pubkey instanceof Uint8Array && a.masterFingerprint instanceof Uint8Array && typeof a.path == "string" && t(a.pubkey) && a.masterFingerprint.length === 4;
  }
  function s(a, c, u) {
    const f = ye(c.pubkey);
    return u.has(f) ? !1 : (u.add(f), a.filter((l) => te(l.pubkey, c.pubkey) === 0).length === 0);
  }
  return {
    decode: r,
    encode: n,
    check: i,
    expected: o,
    canAddToArray: s
  };
}
function uh(e) {
  return t;
  function t(r) {
    let n;
    if (e.includes(r.key[0]) && (n = r.key.slice(1), !(n.length === 33 || n.length === 65) || ![2, 3, 4].includes(n[0])))
      throw new Error(
        "Format Error: invalid pubkey in key 0x" + ye(r.key)
      );
    return n;
  }
}
function Rm(e) {
  function t(s) {
    if (s.key[0] !== e)
      throw new Error(
        "Decode Error: could not decode redeemScript with key 0x" + ye(s.key)
      );
    return s.value;
  }
  function r(s) {
    return {
      key: Uint8Array.from([e]),
      value: s
    };
  }
  const n = "Uint8Array";
  function o(s) {
    return s instanceof Uint8Array;
  }
  function i(s, a) {
    return !!s && !!a && s.redeemScript === void 0;
  }
  return {
    decode: t,
    encode: r,
    check: o,
    expected: n,
    canAdd: i
  };
}
const S_ = (e) => e.length === 32;
function Cm(e) {
  const t = ch(e, S_);
  function r(s) {
    const { numberValue: a, bytes: c } = ds(
      s.value
    ), u = t.decode({
      key: s.key,
      value: s.value.slice(c + Number(a) * 32)
    }), f = new Array(Number(a));
    for (let l = 0, d = c; l < a; l++, d += 32)
      f[l] = s.value.slice(d, d + 32);
    return { ...u, leafHashes: f };
  }
  function n(s) {
    const a = t.encode(s), c = Pr(s.leafHashes.length), u = new Uint8Array(c);
    Ao(s.leafHashes.length, u);
    const f = dt([u, ...s.leafHashes, a.value]);
    return { ...a, value: f };
  }
  const o = "{ masterFingerprint: Uint8Array; pubkey: Uint8Array; path: string; leafHashes: Uint8Array[]; }";
  function i(s) {
    return Array.isArray(s.leafHashes) && s.leafHashes.every(
      (a) => a instanceof Uint8Array && a.length === 32
    ) && t.check(s);
  }
  return {
    decode: r,
    encode: n,
    check: i,
    expected: o,
    canAddToArray: t.canAddToArray
  };
}
function Hm(e) {
  function t(s) {
    if (s.key[0] !== e || s.key.length !== 1)
      throw new Error(
        "Decode Error: could not decode tapInternalKey with key 0x" + ye(s.key)
      );
    if (s.value.length !== 32)
      throw new Error(
        "Decode Error: tapInternalKey not a 32-byte x-only pubkey"
      );
    return s.value;
  }
  function r(s) {
    return { key: Uint8Array.from([e]), value: s };
  }
  const n = "Uint8Array";
  function o(s) {
    return s instanceof Uint8Array && s.length === 32;
  }
  function i(s, a) {
    return !!s && !!a && s.tapInternalKey === void 0;
  }
  return {
    decode: t,
    encode: r,
    check: o,
    expected: n,
    canAdd: i
  };
}
function Lm(e) {
  function t(s) {
    if (s.key[0] !== e)
      throw new Error(
        "Decode Error: could not decode witnessScript with key 0x" + ye(s.key)
      );
    return s.value;
  }
  function r(s) {
    return {
      key: Uint8Array.from([e]),
      value: s
    };
  }
  const n = "Uint8Array";
  function o(s) {
    return s instanceof Uint8Array;
  }
  function i(s, a) {
    return !!s && !!a && s.witnessScript === void 0;
  }
  return {
    decode: t,
    encode: r,
    check: o,
    expected: n,
    canAdd: i
  };
}
const lh = {
  unsignedTx: ox,
  globalXpub: rx,
  // pass an Array of key bytes that require pubkey beside the key
  checkPubkey: uh([])
}, It = {
  nonWitnessUtxo: xx,
  partialSig: Px,
  sighashType: Mx,
  finalScriptSig: lx,
  finalScriptWitness: mx,
  porCommitment: Rx,
  witnessUtxo: g_,
  bip32Derivation: ch(se.BIP32_DERIVATION),
  redeemScript: Rm(se.REDEEM_SCRIPT),
  witnessScript: Lm(se.WITNESS_SCRIPT),
  checkPubkey: uh([
    se.PARTIAL_SIG,
    se.BIP32_DERIVATION
  ]),
  tapKeySig: qx,
  tapScriptSig: u_,
  tapLeafScript: Jx,
  tapBip32Derivation: Cm(
    se.TAP_BIP32_DERIVATION
  ),
  tapInternalKey: Hm(se.TAP_INTERNAL_KEY),
  tapMerkleRoot: n_
}, Pn = {
  bip32Derivation: ch(yt.BIP32_DERIVATION),
  redeemScript: Rm(yt.REDEEM_SCRIPT),
  witnessScript: Lm(yt.WITNESS_SCRIPT),
  checkPubkey: uh([yt.BIP32_DERIVATION]),
  tapBip32Derivation: Cm(
    yt.TAP_BIP32_DERIVATION
  ),
  tapTree: E_,
  tapInternalKey: Hm(yt.TAP_INTERNAL_KEY)
}, A_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  globals: lh,
  inputs: It,
  outputs: Pn
}, Symbol.toStringTag, { value: "Module" })), qc = (e) => [...Array(e).keys()];
function s0(e) {
  const t = e.map(k_);
  return t.push(Uint8Array.from([0])), dt(t);
}
function k_(e) {
  const t = e.key.length, r = e.value.length, n = Pr(t), o = Pr(r), i = new Uint8Array(n + t + o + r);
  return Ao(t, i, 0), i.set(e.key, n), Ao(r, i, n + t), i.set(e.value, n + t + o), i;
}
function T_(e, t) {
  let r = 0;
  function n() {
    const { numberValue: b, bytes: E } = ds(e, r);
    r += E;
    const x = e.slice(r, r + Number(b));
    return r += Number(b), x;
  }
  function o() {
    const b = us(e, r, "BE");
    return r += 4, b;
  }
  function i() {
    const b = Cn(e, r);
    return r += 1, b;
  }
  function s() {
    const b = n(), E = n();
    return {
      key: b,
      value: E
    };
  }
  function a() {
    if (r >= e.length)
      throw new Error("Format Error: Unexpected End of PSBT");
    const b = Cn(e, r) === 0;
    return b && r++, b;
  }
  if (o() !== 1886610036)
    throw new Error("Format Error: Invalid Magic Number");
  if (i() !== 255)
    throw new Error(
      "Format Error: Magic Number must be followed by 0xff separator"
    );
  const c = [], u = {};
  for (; !a(); ) {
    const b = s(), E = ye(b.key);
    if (u[E])
      throw new Error(
        "Format Error: Keys must be unique for global keymap: key " + E
      );
    u[E] = 1, c.push(b);
  }
  const f = c.filter(
    (b) => b.key[0] === hn.UNSIGNED_TX
  );
  if (f.length !== 1)
    throw new Error("Format Error: Only one UNSIGNED_TX allowed");
  const l = t(f[0].value), { inputCount: d, outputCount: m } = l.getInputOutputCounts(), g = [], y = [];
  for (const b of qc(d)) {
    const E = {}, x = [];
    for (; !a(); ) {
      const w = s(), k = ye(w.key);
      if (E[k])
        throw new Error(
          "Format Error: Keys must be unique for each input: input index " + b + " key " + k
        );
      E[k] = 1, x.push(w);
    }
    g.push(x);
  }
  for (const b of qc(m)) {
    const E = {}, x = [];
    for (; !a(); ) {
      const w = s(), k = ye(w.key);
      if (E[k])
        throw new Error(
          "Format Error: Keys must be unique for each output: output index " + b + " key " + k
        );
      E[k] = 1, x.push(w);
    }
    y.push(x);
  }
  return zm(l, {
    globalMapKeyVals: c,
    inputKeyVals: g,
    outputKeyVals: y
  });
}
function Kt(e, t, r) {
  if (te(t, Uint8Array.from([r])))
    throw new Error(
      // `Format Error: Invalid ${type} key: ${keyBuf.toString('hex')}`,
      `Format Error: Invalid ${e} key: ${ye(t)}`
    );
}
function zm(e, { globalMapKeyVals: t, inputKeyVals: r, outputKeyVals: n }) {
  const o = {
    unsignedTx: e
  };
  let i = 0;
  for (const f of t)
    switch (f.key[0]) {
      case hn.UNSIGNED_TX:
        if (Kt("global", f.key, hn.UNSIGNED_TX), i > 0)
          throw new Error("Format Error: GlobalMap has multiple UNSIGNED_TX");
        i++;
        break;
      case hn.GLOBAL_XPUB:
        o.globalXpub === void 0 && (o.globalXpub = []), o.globalXpub.push(lh.globalXpub.decode(f));
        break;
      default:
        o.unknownKeyVals || (o.unknownKeyVals = []), o.unknownKeyVals.push(f);
    }
  const s = r.length, a = n.length, c = [], u = [];
  for (const f of qc(s)) {
    const l = {};
    for (const d of r[f])
      switch (It.checkPubkey(d), d.key[0]) {
        case se.NON_WITNESS_UTXO:
          if (Kt("input", d.key, se.NON_WITNESS_UTXO), l.nonWitnessUtxo !== void 0)
            throw new Error(
              "Format Error: Input has multiple NON_WITNESS_UTXO"
            );
          l.nonWitnessUtxo = It.nonWitnessUtxo.decode(d);
          break;
        case se.WITNESS_UTXO:
          if (Kt("input", d.key, se.WITNESS_UTXO), l.witnessUtxo !== void 0)
            throw new Error("Format Error: Input has multiple WITNESS_UTXO");
          l.witnessUtxo = It.witnessUtxo.decode(d);
          break;
        case se.PARTIAL_SIG:
          l.partialSig === void 0 && (l.partialSig = []), l.partialSig.push(It.partialSig.decode(d));
          break;
        case se.SIGHASH_TYPE:
          if (Kt("input", d.key, se.SIGHASH_TYPE), l.sighashType !== void 0)
            throw new Error("Format Error: Input has multiple SIGHASH_TYPE");
          l.sighashType = It.sighashType.decode(d);
          break;
        case se.REDEEM_SCRIPT:
          if (Kt("input", d.key, se.REDEEM_SCRIPT), l.redeemScript !== void 0)
            throw new Error("Format Error: Input has multiple REDEEM_SCRIPT");
          l.redeemScript = It.redeemScript.decode(d);
          break;
        case se.WITNESS_SCRIPT:
          if (Kt("input", d.key, se.WITNESS_SCRIPT), l.witnessScript !== void 0)
            throw new Error("Format Error: Input has multiple WITNESS_SCRIPT");
          l.witnessScript = It.witnessScript.decode(d);
          break;
        case se.BIP32_DERIVATION:
          l.bip32Derivation === void 0 && (l.bip32Derivation = []), l.bip32Derivation.push(
            It.bip32Derivation.decode(d)
          );
          break;
        case se.FINAL_SCRIPTSIG:
          Kt("input", d.key, se.FINAL_SCRIPTSIG), l.finalScriptSig = It.finalScriptSig.decode(d);
          break;
        case se.FINAL_SCRIPTWITNESS:
          Kt("input", d.key, se.FINAL_SCRIPTWITNESS), l.finalScriptWitness = It.finalScriptWitness.decode(
            d
          );
          break;
        case se.POR_COMMITMENT:
          Kt("input", d.key, se.POR_COMMITMENT), l.porCommitment = It.porCommitment.decode(d);
          break;
        case se.TAP_KEY_SIG:
          Kt("input", d.key, se.TAP_KEY_SIG), l.tapKeySig = It.tapKeySig.decode(d);
          break;
        case se.TAP_SCRIPT_SIG:
          l.tapScriptSig === void 0 && (l.tapScriptSig = []), l.tapScriptSig.push(It.tapScriptSig.decode(d));
          break;
        case se.TAP_LEAF_SCRIPT:
          l.tapLeafScript === void 0 && (l.tapLeafScript = []), l.tapLeafScript.push(It.tapLeafScript.decode(d));
          break;
        case se.TAP_BIP32_DERIVATION:
          l.tapBip32Derivation === void 0 && (l.tapBip32Derivation = []), l.tapBip32Derivation.push(
            It.tapBip32Derivation.decode(d)
          );
          break;
        case se.TAP_INTERNAL_KEY:
          Kt("input", d.key, se.TAP_INTERNAL_KEY), l.tapInternalKey = It.tapInternalKey.decode(d);
          break;
        case se.TAP_MERKLE_ROOT:
          Kt("input", d.key, se.TAP_MERKLE_ROOT), l.tapMerkleRoot = It.tapMerkleRoot.decode(d);
          break;
        default:
          l.unknownKeyVals || (l.unknownKeyVals = []), l.unknownKeyVals.push(d);
      }
    c.push(l);
  }
  for (const f of qc(a)) {
    const l = {};
    for (const d of n[f])
      switch (Pn.checkPubkey(d), d.key[0]) {
        case yt.REDEEM_SCRIPT:
          if (Kt("output", d.key, yt.REDEEM_SCRIPT), l.redeemScript !== void 0)
            throw new Error("Format Error: Output has multiple REDEEM_SCRIPT");
          l.redeemScript = Pn.redeemScript.decode(d);
          break;
        case yt.WITNESS_SCRIPT:
          if (Kt("output", d.key, yt.WITNESS_SCRIPT), l.witnessScript !== void 0)
            throw new Error("Format Error: Output has multiple WITNESS_SCRIPT");
          l.witnessScript = Pn.witnessScript.decode(d);
          break;
        case yt.BIP32_DERIVATION:
          l.bip32Derivation === void 0 && (l.bip32Derivation = []), l.bip32Derivation.push(
            Pn.bip32Derivation.decode(d)
          );
          break;
        case yt.TAP_INTERNAL_KEY:
          Kt("output", d.key, yt.TAP_INTERNAL_KEY), l.tapInternalKey = Pn.tapInternalKey.decode(d);
          break;
        case yt.TAP_TREE:
          Kt("output", d.key, yt.TAP_TREE), l.tapTree = Pn.tapTree.decode(d);
          break;
        case yt.TAP_BIP32_DERIVATION:
          l.tapBip32Derivation === void 0 && (l.tapBip32Derivation = []), l.tapBip32Derivation.push(
            Pn.tapBip32Derivation.decode(d)
          );
          break;
        default:
          l.unknownKeyVals || (l.unknownKeyVals = []), l.unknownKeyVals.push(d);
      }
    u.push(l);
  }
  return { globalMap: o, inputs: c, outputs: u };
}
function I_({ globalMap: e, inputs: t, outputs: r }) {
  const { globalKeyVals: n, inputKeyVals: o, outputKeyVals: i } = Yf({
    globalMap: e,
    inputs: t,
    outputs: r
  }), s = s0(n), a = (l) => l.length === 0 ? [Uint8Array.from([0])] : l.map(s0), c = a(o), u = a(i), f = new Uint8Array(5);
  return f.set([112, 115, 98, 116, 255], 0), dt(
    [f, s].concat(c, u)
  );
}
const P_ = (e, t) => te(e.key, t.key);
function Xl(e, t) {
  const r = /* @__PURE__ */ new Set(), n = Object.entries(e).reduce((i, [s, a]) => {
    if (s === "unknownKeyVals") return i;
    const c = t[s];
    if (c === void 0) return i;
    const u = (Array.isArray(a) ? a : [a]).map(
      c.encode
    );
    return u.map((l) => ye(l.key)).forEach((l) => {
      if (r.has(l))
        throw new Error("Serialize Error: Duplicate key: " + l);
      r.add(l);
    }), i.concat(u);
  }, []), o = e.unknownKeyVals ? e.unknownKeyVals.filter((i) => !r.has(ye(i.key))) : [];
  return n.concat(o).sort(P_);
}
function Yf({ globalMap: e, inputs: t, outputs: r }) {
  return {
    globalKeyVals: Xl(e, lh),
    inputKeyVals: t.map((n) => Xl(n, It)),
    outputKeyVals: r.map((n) => Xl(n, Pn))
  };
}
function O_(e) {
  const t = e[0], r = Yf(t), n = e.slice(1);
  if (n.length === 0) throw new Error("Combine: Nothing to combine");
  const o = a0(t);
  if (o === void 0)
    throw new Error("Combine: Self missing transaction");
  const i = Oi(r.globalKeyVals), s = r.inputKeyVals.map(Oi), a = r.outputKeyVals.map(Oi);
  for (const c of n) {
    const u = a0(c);
    if (u === void 0 || te(u.toBuffer(), o.toBuffer()) !== 0)
      throw new Error(
        "Combine: One of the Psbts does not have the same transaction."
      );
    const f = Yf(c);
    Oi(f.globalKeyVals).forEach(
      Yl(
        i,
        r.globalKeyVals,
        f.globalKeyVals
      )
    ), f.inputKeyVals.map(Oi).forEach(
      (g, y) => g.forEach(
        Yl(
          s[y],
          r.inputKeyVals[y],
          f.inputKeyVals[y]
        )
      )
    ), f.outputKeyVals.map(Oi).forEach(
      (g, y) => g.forEach(
        Yl(
          a[y],
          r.outputKeyVals[y],
          f.outputKeyVals[y]
        )
      )
    );
  }
  return zm(o, {
    globalMapKeyVals: r.globalKeyVals,
    inputKeyVals: r.inputKeyVals,
    outputKeyVals: r.outputKeyVals
  });
}
function Yl(e, t, r) {
  return (n) => {
    if (e.has(n)) return;
    const o = r.filter((i) => ye(i.key) === n)[0];
    t.push(o), e.add(n);
  };
}
function a0(e) {
  return e.globalMap.unsignedTx;
}
function Oi(e) {
  const t = /* @__PURE__ */ new Set();
  return e.forEach((r) => {
    const n = ye(r.key);
    if (t.has(n))
      throw new Error("Combine: KeyValue Map keys should be unique");
    t.add(n);
  }), t;
}
function jt(e, t) {
  const r = e[t];
  if (r === void 0) throw new Error(`No input #${t}`);
  return r;
}
function ea(e, t) {
  const r = e[t];
  if (r === void 0) throw new Error(`No output #${t}`);
  return r;
}
function Jl(e, t, r) {
  if (e.key[0] < r)
    throw new Error(
      "Use the method for your specific key instead of addUnknownKeyVal*"
    );
  if (t && t.filter((n) => te(n.key, e.key) === 0).length !== 0)
    throw new Error(`Duplicate Key: ${ye(e.key)}`);
}
function Ql(e) {
  let t = 0;
  return Object.keys(e).forEach((r) => {
    Number(isNaN(Number(r))) && t++;
  }), t;
}
function B_(e, t) {
  let r = !1;
  if (t.nonWitnessUtxo || t.witnessUtxo) {
    const n = !!t.redeemScript, o = !!t.witnessScript, i = !n || !!t.finalScriptSig, s = !o || !!t.finalScriptWitness, a = !!t.finalScriptSig || !!t.finalScriptWitness;
    r = i && s && a;
  }
  if (r === !1)
    throw new Error(
      `Input #${e} has too much or too little data to clean`
    );
}
function c0(e, t, r, n) {
  throw new Error(
    `Data for ${e} key ${t} is incorrect: Expected ${r} and got ${JSON.stringify(n)}`
  );
}
function fh(e) {
  return (t, r) => {
    for (const n of Object.keys(t)) {
      const o = t[n], { canAdd: i, canAddToArray: s, check: a, expected: c } = (
        // @ts-ignore
        A_[e + "s"][n] || {}
      ), u = !!s;
      if (a)
        if (u) {
          if (!Array.isArray(o) || // @ts-ignore
          r[n] && !Array.isArray(r[n]))
            throw new Error(`Key type ${n} must be an array`);
          o.every(a) || c0(e, n, c, o);
          const f = r[n] || [], l = /* @__PURE__ */ new Set();
          if (!o.every((d) => s(f, d, l)))
            throw new Error("Can not add duplicate data to array");
          r[n] = f.concat(o);
        } else {
          if (a(o) || c0(e, n, c, o), !i(r, o))
            throw new Error(`Can not add duplicate data to ${e}`);
          r[n] = o;
        }
    }
  };
}
const N_ = fh("global"), jm = fh("input"), Mm = fh("output");
function $_(e, t) {
  const r = e.length - 1, n = jt(e, r);
  jm(t, n);
}
function U_(e, t) {
  const r = e.length - 1, n = ea(e, r);
  Mm(t, n);
}
let u0 = class {
  constructor(t) {
    this.inputs = [], this.outputs = [], this.globalMap = {
      unsignedTx: t
    };
  }
  static fromBase64(t, r) {
    const n = Jg(t);
    return this.fromBuffer(n, r);
  }
  static fromHex(t, r) {
    const n = Dn(t);
    return this.fromBuffer(n, r);
  }
  static fromBuffer(t, r) {
    const n = T_(t, r), o = new this(n.globalMap.unsignedTx);
    return Object.assign(o, n), o;
  }
  toBase64() {
    const t = this.toBuffer();
    return S2(t);
  }
  toHex() {
    const t = this.toBuffer();
    return ye(t);
  }
  toBuffer() {
    return I_(this);
  }
  updateGlobal(t) {
    return N_(t, this.globalMap), this;
  }
  updateInput(t, r) {
    const n = jt(this.inputs, t);
    return jm(r, n), this;
  }
  updateOutput(t, r) {
    const n = ea(this.outputs, t);
    return Mm(r, n), this;
  }
  addUnknownKeyValToGlobal(t) {
    return Jl(
      t,
      this.globalMap.unknownKeyVals,
      Ql(hn)
    ), this.globalMap.unknownKeyVals || (this.globalMap.unknownKeyVals = []), this.globalMap.unknownKeyVals.push(t), this;
  }
  addUnknownKeyValToInput(t, r) {
    const n = jt(this.inputs, t);
    return Jl(r, n.unknownKeyVals, Ql(se)), n.unknownKeyVals || (n.unknownKeyVals = []), n.unknownKeyVals.push(r), this;
  }
  addUnknownKeyValToOutput(t, r) {
    const n = ea(this.outputs, t);
    return Jl(r, n.unknownKeyVals, Ql(yt)), n.unknownKeyVals || (n.unknownKeyVals = []), n.unknownKeyVals.push(r), this;
  }
  addInput(t) {
    this.globalMap.unsignedTx.addInput(t), this.inputs.push({
      unknownKeyVals: []
    });
    const r = t.unknownKeyVals || [], n = this.inputs.length - 1;
    if (!Array.isArray(r))
      throw new Error("unknownKeyVals must be an Array");
    return r.forEach(
      (o) => this.addUnknownKeyValToInput(n, o)
    ), $_(this.inputs, t), this;
  }
  addOutput(t) {
    this.globalMap.unsignedTx.addOutput(t), this.outputs.push({
      unknownKeyVals: []
    });
    const r = t.unknownKeyVals || [], n = this.outputs.length - 1;
    if (!Array.isArray(r))
      throw new Error("unknownKeyVals must be an Array");
    return r.forEach(
      (o) => this.addUnknownKeyValToOutput(n, o)
    ), U_(this.outputs, t), this;
  }
  clearFinalizedInput(t) {
    const r = jt(this.inputs, t);
    B_(t, r);
    for (const n of Object.keys(r))
      [
        "witnessUtxo",
        "nonWitnessUtxo",
        "finalScriptSig",
        "finalScriptWitness",
        "unknownKeyVals"
      ].includes(n) || delete r[n];
    return this;
  }
  combine(...t) {
    const r = O_([this].concat(t));
    return Object.assign(this, r), this;
  }
  getTransaction() {
    return this.globalMap.unsignedTx.toBuffer();
  }
};
function gi(e) {
  return (t) => {
    try {
      return e({ output: t }), !0;
    } catch {
      return !1;
    }
  };
}
const R_ = gi($u), C_ = gi(gm), H_ = gi(xa), Cu = gi(_a), l0 = gi(Sa), Dm = gi(fs), Fm = gi(Aa);
function Gc(e) {
  let t = new Uint8Array(0);
  function r(s) {
    t = dt([t, s]);
  }
  function n(s) {
    const a = t.length, c = Pr(s);
    t = dt([t, new Uint8Array(c)]), Ao(s, t, a);
  }
  function o(s) {
    n(s.length), r(s);
  }
  function i(s) {
    n(s.length), s.forEach(o);
  }
  return i(e), t;
}
function Km(e, t) {
  const r = $n(e), n = e.slice(1, 33), o = lt(t);
  if (o === null) throw new Error("Unknown script error");
  return o.findIndex((i) => typeof i == "number" ? !1 : te(e, i) === 0 || te(r, i) === 0 || te(n, i) === 0);
}
function Hu(e, t) {
  return Km(e, t) !== -1;
}
function L_(e, t) {
  return z_(e).some(
    (n) => Vm(n, Fs.decode, t)
  );
}
function Vm(e, t, r) {
  const { hashType: n } = t(e), o = [];
  switch (n & ut.SIGHASH_ANYONECANPAY && o.push("addInput"), n & 31) {
    case ut.SIGHASH_ALL:
      break;
    case ut.SIGHASH_SINGLE:
    case ut.SIGHASH_NONE:
      o.push("addOutput"), o.push("setInputSequence");
      break;
  }
  return o.indexOf(r) === -1;
}
function z_(e) {
  let t = [];
  if ((e.partialSig || []).length === 0) {
    if (!e.finalScriptSig && !e.finalScriptWitness) return [];
    t = j_(e);
  } else
    t = e.partialSig;
  return t.map((r) => r.signature);
}
function j_(e) {
  const t = e.finalScriptSig ? lt(e.finalScriptSig) || [] : [], r = e.finalScriptWitness ? lt(e.finalScriptWitness) || [] : [];
  return t.concat(r).filter((n) => n instanceof Uint8Array && Hn(n)).map((n) => ({ signature: n }));
}
const Jo = (e) => e.length === 32 ? e : e.slice(1, 33);
function f0(e, t, r) {
  const n = eS(
    t,
    e,
    r
  );
  try {
    const i = J_(t, n).concat(n.script).concat(n.controlBlock);
    return { finalScriptWitness: Gc(i) };
  } catch (o) {
    throw new Error(`Can not finalize taproot input #${e}: ${o}`);
  }
}
function ac(e, t) {
  const r = t ? Uint8Array.from([t]) : Uint8Array.from([]);
  return dt([e, r]);
}
function Hr(e) {
  return e && !!(e.tapInternalKey || e.tapMerkleRoot || e.tapLeafScript && e.tapLeafScript.length || e.tapBip32Derivation && e.tapBip32Derivation.length || e.witnessUtxo && Fm(e.witnessUtxo.script));
}
function ef(e, t) {
  return e && !!(e.tapInternalKey || e.tapTree || e.tapBip32Derivation && e.tapBip32Derivation.length || t);
}
function d0(e, t, r) {
  Z_(e, t, r), Y_(e, t, r);
}
function h0(e, t, r) {
  X_(e, t, r), M_(e, t);
}
function M_(e, t) {
  if (!t.tapTree && !t.tapInternalKey) return;
  const r = t.tapInternalKey || e.tapInternalKey, n = t.tapTree || e.tapTree;
  if (r) {
    const { script: o } = e, i = D_(r, n);
    if (o && te(i, o) !== 0)
      throw new Error("Error adding output. Script or address mismatch.");
  }
}
function D_(e, t) {
  const r = t && F_(t.leaves), { output: n } = Aa({
    internalPubkey: e,
    scriptTree: r
  });
  return n;
}
function F_(e = []) {
  return e.length === 1 && e[0].depth === 0 ? {
    output: e[0].script,
    version: e[0].leafVersion
  } : W_(e);
}
function K_(e, t) {
  return q_(e).some(
    (n) => Vm(n, V_, t)
  );
}
function V_(e) {
  return {
    signature: e.slice(0, 64),
    hashType: e.slice(64)[0] || ut.SIGHASH_DEFAULT
  };
}
function q_(e) {
  const t = [];
  if (e.tapKeySig && t.push(e.tapKeySig), e.tapScriptSig && t.push(...e.tapScriptSig.map((r) => r.signature)), !t.length) {
    const r = G_(e.finalScriptWitness);
    r && t.push(r);
  }
  return t;
}
function G_(e) {
  if (!e) return;
  const t = e.slice(2);
  if (t.length === 64 || t.length === 65) return t;
}
function W_(e) {
  let t;
  for (const r of e)
    if (t = Jf(r, t), !t) throw new Error("No room left to insert tapleaf in tree");
  return t;
}
function Jf(e, t, r = 0) {
  if (r > zE) throw new Error("Max taptree depth exceeded.");
  if (e.depth === r)
    return t ? void 0 : {
      output: e.script,
      version: e.leafVersion
    };
  if (Xd(t)) return;
  const n = Jf(e, t && t[0], r + 1);
  if (n) return [n, t && t[1]];
  const o = Jf(e, t && t[1], r + 1);
  if (o) return [t && t[0], o];
}
function Z_(e, t, r) {
  const n = Hr(e) && Ki(t), o = Ki(e) && Hr(t), i = e === t && Hr(t) && Ki(t);
  if (n || o || i)
    throw new Error(
      `Invalid arguments for Psbt.${r}. Cannot use both taproot and non-taproot fields.`
    );
}
function X_(e, t, r) {
  const n = ef(e) && Ki(t), o = Ki(e) && ef(t), i = e === t && ef(t) && Ki(t);
  if (n || o || i)
    throw new Error(
      `Invalid arguments for Psbt.${r}. Cannot use both taproot and non-taproot fields.`
    );
}
function Y_(e, t, r) {
  if (t.tapMerkleRoot) {
    const n = (t.tapLeafScript || []).every(
      (i) => tf(i, t.tapMerkleRoot)
    ), o = (e.tapLeafScript || []).every(
      (i) => tf(i, t.tapMerkleRoot)
    );
    if (!n || !o)
      throw new Error(
        `Invalid arguments for Psbt.${r}. Tapleaf not part of taptree.`
      );
  } else if (e.tapMerkleRoot && !(t.tapLeafScript || []).every(
    (o) => tf(o, e.tapMerkleRoot)
  ))
    throw new Error(
      `Invalid arguments for Psbt.${r}. Tapleaf not part of taptree.`
    );
}
function tf(e, t) {
  if (!t) return !0;
  const r = Nn({
    output: e.script,
    version: e.leafVersion
  }), n = Wf(e.controlBlock, r);
  return te(n, t) === 0;
}
function J_(e, t) {
  const r = Nn({
    output: t.script,
    version: t.leafVersion
  });
  return (e.tapScriptSig || []).filter((n) => te(n.leafHash, r) === 0).map((n) => Q_(t.script, n)).sort((n, o) => o.positionInScript - n.positionInScript).map((n) => n.signature);
}
function Q_(e, t) {
  return Object.assign(
    {
      positionInScript: Km(t.pubkey, e)
    },
    t
  );
}
function eS(e, t, r) {
  if (!e.tapScriptSig || !e.tapScriptSig.length)
    throw new Error(
      `Can not finalize taproot input #${t}. No tapleaf script signature provided.`
    );
  const n = (e.tapLeafScript || []).sort((o, i) => o.controlBlock.length - i.controlBlock.length).find(
    (o) => tS(o, e.tapScriptSig, r)
  );
  if (!n)
    throw new Error(
      `Can not finalize taproot input #${t}. Signature for tapleaf script not found.`
    );
  return n;
}
function tS(e, t, r) {
  const n = Nn({
    output: e.script,
    version: e.leafVersion
  });
  return (!r || te(n, r) === 0) && t.find((i) => te(i.leafHash, n) === 0) !== void 0;
}
function Ki(e) {
  return e && !!(e.redeemScript || e.witnessScript || e.bip32Derivation && e.bip32Derivation.length);
}
const rS = {
  /**
   * A bitcoinjs Network object. This is only used if you pass an `address`
   * parameter to addOutput. Otherwise it is not needed and can be left default.
   */
  network: Zr,
  /**
   * When extractTransaction is called, the fee rate is checked.
   * THIS IS NOT TO BE RELIED ON.
   * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.
   */
  maximumFeeRate: 5e3
  // satoshi per byte
};
class Qe {
  constructor(t = {}, r = new u0(new qm())) {
    oe(this, "data");
    oe(this, "__CACHE");
    oe(this, "opts");
    this.data = r, this.opts = Object.assign({}, rS, t), this.__CACHE = {
      __NON_WITNESS_UTXO_TX_CACHE: [],
      __NON_WITNESS_UTXO_BUF_CACHE: [],
      __TX_IN_CACHE: {},
      __TX: this.data.globalMap.unsignedTx.tx,
      // Psbt's predecessor (TransactionBuilder - now removed) behavior
      // was to not confirm input values  before signing.
      // Even though we highly encourage people to get
      // the full parent transaction to verify values, the ability to
      // sign non-segwit inputs without the full transaction was often
      // requested. So the only way to activate is to use @ts-ignore.
      // We will disable exporting the Psbt when unsafe sign is active.
      // because it is not BIP174 compliant.
      __UNSAFE_SIGN_NONSEGWIT: !1
    }, this.data.inputs.length === 0 && this.setVersion(2);
    const n = (o, i, s, a) => Object.defineProperty(o, i, {
      enumerable: s,
      writable: a
    });
    n(this, "__CACHE", !1, !0), n(this, "opts", !1, !0);
  }
  static fromBase64(t, r = {}) {
    const n = Jg(t);
    return this.fromBuffer(n, r);
  }
  static fromHex(t, r = {}) {
    const n = Dn(t);
    return this.fromBuffer(n, r);
  }
  static fromBuffer(t, r = {}) {
    const n = u0.fromBuffer(t, nS), o = new Qe(r, n);
    return cS(o.__CACHE.__TX, o.__CACHE), o;
  }
  get inputCount() {
    return this.data.inputs.length;
  }
  get version() {
    return this.__CACHE.__TX.version;
  }
  set version(t) {
    this.setVersion(t);
  }
  get locktime() {
    return this.__CACHE.__TX.locktime;
  }
  set locktime(t) {
    this.setLocktime(t);
  }
  get txInputs() {
    return this.__CACHE.__TX.ins.map((t) => ({
      hash: t0(t.hash),
      index: t.index,
      sequence: t.sequence
    }));
  }
  get txOutputs() {
    return this.__CACHE.__TX.outs.map((t) => {
      let r;
      try {
        r = ka(t.script, this.opts.network);
      } catch {
      }
      return {
        script: t0(t.script),
        value: t.value,
        address: r
      };
    });
  }
  combine(...t) {
    return this.data.combine(...t.map((r) => r.data)), this;
  }
  clone() {
    const t = Qe.fromBuffer(this.data.toBuffer());
    return t.opts = JSON.parse(JSON.stringify(this.opts)), t;
  }
  setMaximumFeeRate(t) {
    cc(t), this.opts.maximumFeeRate = t;
  }
  setVersion(t) {
    cc(t), Is(this.data.inputs, "setVersion");
    const r = this.__CACHE;
    return r.__TX.version = t, r.__EXTRACTED_TX = void 0, this;
  }
  setLocktime(t) {
    cc(t), Is(this.data.inputs, "setLocktime");
    const r = this.__CACHE;
    return r.__TX.locktime = t, r.__EXTRACTED_TX = void 0, this;
  }
  setInputSequence(t, r) {
    cc(r), Is(this.data.inputs, "setInputSequence");
    const n = this.__CACHE;
    if (n.__TX.ins.length <= t)
      throw new Error("Input index too high");
    return n.__TX.ins[t].sequence = r, n.__EXTRACTED_TX = void 0, this;
  }
  addInputs(t) {
    return t.forEach((r) => this.addInput(r)), this;
  }
  addInput(t) {
    if (arguments.length > 1 || !t || t.hash === void 0 || t.index === void 0)
      throw new Error(
        "Invalid arguments for Psbt.addInput. Requires single object with at least [hash] and [index]"
      );
    d0(t, t, "addInput"), Is(this.data.inputs, "addInput"), t.witnessScript && Wc(t.witnessScript);
    const r = this.__CACHE;
    this.data.addInput(t);
    const n = r.__TX.ins[r.__TX.ins.length - 1];
    Zm(r, n);
    const o = this.data.inputs.length - 1, i = this.data.inputs[o];
    return i.nonWitnessUtxo && ed(this.__CACHE, i, o), r.__FEE = void 0, r.__FEE_RATE = void 0, r.__EXTRACTED_TX = void 0, this;
  }
  addOutputs(t) {
    return t.forEach((r) => this.addOutput(r)), this;
  }
  addOutput(t) {
    if (arguments.length > 1 || !t || t.value === void 0 || t.address === void 0 && t.script === void 0)
      throw new Error(
        "Invalid arguments for Psbt.addOutput. Requires single object with at least [script or address] and [value]"
      );
    Is(this.data.inputs, "addOutput");
    const { address: r } = t;
    if (typeof r == "string") {
      const { network: o } = this.opts, i = Ta(r, o);
      t = Object.assign({}, t, { script: i });
    }
    h0(t, t, "addOutput");
    const n = this.__CACHE;
    return this.data.addOutput(t), n.__FEE = void 0, n.__FEE_RATE = void 0, n.__EXTRACTED_TX = void 0, this;
  }
  extractTransaction(t) {
    if (!this.data.inputs.every(Gm)) throw new Error("Not finalized");
    const r = this.__CACHE;
    if (t || iS(this, r, this.opts), r.__EXTRACTED_TX) return r.__EXTRACTED_TX;
    const n = r.__TX.clone();
    return tb(this.data.inputs, n, r, !0), n;
  }
  getFeeRate() {
    return y0(
      "__FEE_RATE",
      "fee rate",
      this.data.inputs,
      this.__CACHE
    );
  }
  getFee() {
    return y0("__FEE", "fee", this.data.inputs, this.__CACHE);
  }
  finalizeAllInputs() {
    return jt(this.data.inputs, 0), Ps(this.data.inputs.length).forEach((t) => this.finalizeInput(t)), this;
  }
  finalizeInput(t, r) {
    const n = jt(this.data.inputs, t);
    return Hr(n) ? this._finalizeTaprootInput(
      t,
      n,
      void 0,
      r
    ) : this._finalizeInput(t, n, r);
  }
  finalizeTaprootInput(t, r, n = f0) {
    const o = jt(this.data.inputs, t);
    if (Hr(o))
      return this._finalizeTaprootInput(
        t,
        o,
        r,
        n
      );
    throw new Error(`Cannot finalize input #${t}. Not Taproot.`);
  }
  _finalizeInput(t, r, n = uS) {
    const { script: o, isP2SH: i, isP2WSH: s, isSegwit: a } = hS(
      t,
      r,
      this.__CACHE
    );
    if (!o) throw new Error(`No script found for input #${t}`);
    sS(r);
    const { finalScriptSig: c, finalScriptWitness: u } = n(
      t,
      r,
      o,
      a,
      i,
      s
    );
    if (c && this.data.updateInput(t, { finalScriptSig: c }), u && this.data.updateInput(t, { finalScriptWitness: u }), !c && !u)
      throw new Error(`Unknown error finalizing input #${t}`);
    return this.data.clearFinalizedInput(t), this;
  }
  _finalizeTaprootInput(t, r, n, o = f0) {
    if (!r.witnessUtxo)
      throw new Error(
        `Cannot finalize input #${t}. Missing withness utxo.`
      );
    if (r.tapKeySig) {
      const i = Aa({
        output: r.witnessUtxo.script,
        signature: r.tapKeySig
      }), s = Gc(i.witness);
      this.data.updateInput(t, { finalScriptWitness: s });
    } else {
      const { finalScriptWitness: i } = o(
        t,
        r,
        n
      );
      this.data.updateInput(t, { finalScriptWitness: i });
    }
    return this.data.clearFinalizedInput(t), this;
  }
  getInputType(t) {
    const r = jt(this.data.inputs, t), n = rb(t, r, this.__CACHE), o = zu(
      n,
      t,
      "input",
      r.redeemScript || yS(r.finalScriptSig),
      r.witnessScript || wS(r.finalScriptWitness)
    ), i = o.type === "raw" ? "" : o.type + "-", s = ob(o.meaningfulScript);
    return i + s;
  }
  inputHasPubkey(t, r) {
    const n = jt(this.data.inputs, t);
    return mS(r, n, t, this.__CACHE);
  }
  inputHasHDKey(t, r) {
    const n = jt(this.data.inputs, t), o = g0(r);
    return !!n.bip32Derivation && n.bip32Derivation.some(o);
  }
  outputHasPubkey(t, r) {
    const n = ea(this.data.outputs, t);
    return bS(r, n, t, this.__CACHE);
  }
  outputHasHDKey(t, r) {
    const n = ea(this.data.outputs, t), o = g0(r);
    return !!n.bip32Derivation && n.bip32Derivation.some(o);
  }
  validateSignaturesOfAllInputs(t) {
    return jt(this.data.inputs, 0), Ps(this.data.inputs.length).map(
      (n) => this.validateSignaturesOfInput(n, t)
    ).reduce((n, o) => o === !0 && n, !0);
  }
  validateSignaturesOfInput(t, r, n) {
    const o = this.data.inputs[t];
    return Hr(o) ? this.validateSignaturesOfTaprootInput(
      t,
      r,
      n
    ) : this._validateSignaturesOfInput(t, r, n);
  }
  _validateSignaturesOfInput(t, r, n) {
    const o = this.data.inputs[t], i = (o || {}).partialSig;
    if (!o || !i || i.length < 1)
      throw new Error("No signatures to validate");
    if (typeof r != "function")
      throw new Error("Need validator function to validate signatures");
    const s = n ? i.filter((l) => te(l.pubkey, n) === 0) : i;
    if (s.length < 1) throw new Error("No signatures for this pubkey");
    const a = [];
    let c, u, f;
    for (const l of s) {
      const d = Fs.decode(l.signature), { hash: m, script: g } = f !== d.hashType ? Ym(
        t,
        Object.assign({}, o, { sighashType: d.hashType }),
        this.__CACHE,
        !0
      ) : { hash: c, script: u };
      f = d.hashType, c = m, u = g, Wm(l.pubkey, g, "verify"), a.push(r(l.pubkey, m, d.signature));
    }
    return a.every((l) => l === !0);
  }
  validateSignaturesOfTaprootInput(t, r, n) {
    const o = this.data.inputs[t], i = (o || {}).tapKeySig, s = (o || {}).tapScriptSig;
    if (!o && !i && !(s && !s.length))
      throw new Error("No signatures to validate");
    if (typeof r != "function")
      throw new Error("Need validator function to validate signatures");
    n = n && Jo(n);
    const a = n ? Qf(
      t,
      o,
      this.data.inputs,
      n,
      this.__CACHE
    ) : fS(
      t,
      o,
      this.data.inputs,
      this.__CACHE
    );
    if (!a.length) throw new Error("No signatures for this pubkey");
    const c = a.find((f) => !f.leafHash);
    let u = 0;
    if (i && c) {
      if (!r(
        c.pubkey,
        c.hash,
        v0(i)
      )) return !1;
      u++;
    }
    if (s)
      for (const f of s) {
        const l = a.find(
          (d) => te(d.pubkey, f.pubkey) === 0
        );
        if (l) {
          if (!r(
            f.pubkey,
            l.hash,
            v0(f.signature)
          )) return !1;
          u++;
        }
      }
    return u > 0;
  }
  signAllInputsHD(t, r = [ut.SIGHASH_ALL]) {
    if (!t || !t.publicKey || !t.fingerprint)
      throw new Error("Need HDSigner to sign input");
    const n = [];
    for (const o of Ps(this.data.inputs.length))
      try {
        this.signInputHD(o, t, r), n.push(!0);
      } catch {
        n.push(!1);
      }
    if (n.every((o) => o === !1))
      throw new Error("No inputs were signed");
    return this;
  }
  signAllInputsHDAsync(t, r = [ut.SIGHASH_ALL]) {
    return new Promise((n, o) => {
      if (!t || !t.publicKey || !t.fingerprint)
        return o(new Error("Need HDSigner to sign input"));
      const i = [], s = [];
      for (const a of Ps(this.data.inputs.length))
        s.push(
          this.signInputHDAsync(a, t, r).then(
            () => {
              i.push(!0);
            },
            () => {
              i.push(!1);
            }
          )
        );
      return Promise.all(s).then(() => {
        if (i.every((a) => a === !1))
          return o(new Error("No inputs were signed"));
        n();
      });
    });
  }
  signInputHD(t, r, n = [ut.SIGHASH_ALL]) {
    if (!r || !r.publicKey || !r.fingerprint)
      throw new Error("Need HDSigner to sign input");
    return E0(t, this.data.inputs, r).forEach((i) => this.signInput(t, i, n)), this;
  }
  signInputHDAsync(t, r, n = [ut.SIGHASH_ALL]) {
    return new Promise((o, i) => {
      if (!r || !r.publicKey || !r.fingerprint)
        return i(new Error("Need HDSigner to sign input"));
      const a = E0(t, this.data.inputs, r).map(
        (c) => this.signInputAsync(t, c, n)
      );
      return Promise.all(a).then(() => {
        o();
      }).catch(i);
    });
  }
  signAllInputs(t, r) {
    if (!t || !t.publicKey)
      throw new Error("Need Signer to sign input");
    const n = [];
    for (const o of Ps(this.data.inputs.length))
      try {
        this.signInput(o, t, r), n.push(!0);
      } catch {
        n.push(!1);
      }
    if (n.every((o) => o === !1))
      throw new Error("No inputs were signed");
    return this;
  }
  signAllInputsAsync(t, r) {
    return new Promise((n, o) => {
      if (!t || !t.publicKey)
        return o(new Error("Need Signer to sign input"));
      const i = [], s = [];
      for (const [a] of this.data.inputs.entries())
        s.push(
          this.signInputAsync(a, t, r).then(
            () => {
              i.push(!0);
            },
            () => {
              i.push(!1);
            }
          )
        );
      return Promise.all(s).then(() => {
        if (i.every((a) => a === !1))
          return o(new Error("No inputs were signed"));
        n();
      });
    });
  }
  signInput(t, r, n) {
    if (!r || !r.publicKey)
      throw new Error("Need Signer to sign input");
    const o = jt(this.data.inputs, t);
    return Hr(o) ? this._signTaprootInput(
      t,
      o,
      r,
      void 0,
      n
    ) : this._signInput(t, r, n);
  }
  signTaprootInput(t, r, n, o) {
    if (!r || !r.publicKey)
      throw new Error("Need Signer to sign input");
    const i = jt(this.data.inputs, t);
    if (Hr(i))
      return this._signTaprootInput(
        t,
        i,
        r,
        n,
        o
      );
    throw new Error(`Input #${t} is not of type Taproot.`);
  }
  _signInput(t, r, n = [ut.SIGHASH_ALL]) {
    const { hash: o, sighashType: i } = w0(
      this.data.inputs,
      t,
      r.publicKey,
      this.__CACHE,
      n
    ), s = [
      {
        pubkey: r.publicKey,
        signature: Fs.encode(r.sign(o), i)
      }
    ];
    return this.data.updateInput(t, { partialSig: s }), this;
  }
  _signTaprootInput(t, r, n, o, i = [ut.SIGHASH_DEFAULT]) {
    const s = this.checkTaprootHashesForSig(
      t,
      r,
      n,
      o,
      i
    ), a = s.filter((u) => !u.leafHash).map(
      (u) => ac(
        n.signSchnorr(u.hash),
        r.sighashType
      )
    )[0], c = s.filter((u) => !!u.leafHash).map((u) => ({
      pubkey: Jo(n.publicKey),
      signature: ac(
        n.signSchnorr(u.hash),
        r.sighashType
      ),
      leafHash: u.leafHash
    }));
    return a && this.data.updateInput(t, { tapKeySig: a }), c.length && this.data.updateInput(t, { tapScriptSig: c }), this;
  }
  signInputAsync(t, r, n) {
    return Promise.resolve().then(() => {
      if (!r || !r.publicKey)
        throw new Error("Need Signer to sign input");
      const o = jt(this.data.inputs, t);
      return Hr(o) ? this._signTaprootInputAsync(
        t,
        o,
        r,
        void 0,
        n
      ) : this._signInputAsync(t, r, n);
    });
  }
  signTaprootInputAsync(t, r, n, o) {
    return Promise.resolve().then(() => {
      if (!r || !r.publicKey)
        throw new Error("Need Signer to sign input");
      const i = jt(this.data.inputs, t);
      if (Hr(i))
        return this._signTaprootInputAsync(
          t,
          i,
          r,
          n,
          o
        );
      throw new Error(`Input #${t} is not of type Taproot.`);
    });
  }
  _signInputAsync(t, r, n = [ut.SIGHASH_ALL]) {
    const { hash: o, sighashType: i } = w0(
      this.data.inputs,
      t,
      r.publicKey,
      this.__CACHE,
      n
    );
    return Promise.resolve(r.sign(o)).then((s) => {
      const a = [
        {
          pubkey: r.publicKey,
          signature: Fs.encode(s, i)
        }
      ];
      this.data.updateInput(t, { partialSig: a });
    });
  }
  async _signTaprootInputAsync(t, r, n, o, i = [ut.SIGHASH_DEFAULT]) {
    const s = this.checkTaprootHashesForSig(
      t,
      r,
      n,
      o,
      i
    ), a = [], c = s.filter((f) => !f.leafHash)[0];
    if (c) {
      const f = Promise.resolve(
        n.signSchnorr(c.hash)
      ).then((l) => ({ tapKeySig: ac(l, r.sighashType) }));
      a.push(f);
    }
    const u = s.filter((f) => !!f.leafHash);
    if (u.length) {
      const f = u.map((l) => Promise.resolve(n.signSchnorr(l.hash)).then(
        (d) => ({ tapScriptSig: [
          {
            pubkey: Jo(n.publicKey),
            signature: ac(
              d,
              r.sighashType
            ),
            leafHash: l.leafHash
          }
        ] })
      ));
      a.push(...f);
    }
    return Promise.all(a).then((f) => {
      f.forEach((l) => this.data.updateInput(t, l));
    });
  }
  checkTaprootHashesForSig(t, r, n, o, i) {
    if (typeof n.signSchnorr != "function")
      throw new Error(
        `Need Schnorr Signer to sign taproot input #${t}.`
      );
    const s = Qf(
      t,
      r,
      this.data.inputs,
      n.publicKey,
      this.__CACHE,
      o,
      i
    );
    if (!s || !s.length)
      throw new Error(
        `Can not sign for input #${t} with the key ${ye(n.publicKey)}`
      );
    return s;
  }
  toBuffer() {
    return rf(this.__CACHE), this.data.toBuffer();
  }
  toHex() {
    return rf(this.__CACHE), this.data.toHex();
  }
  toBase64() {
    return rf(this.__CACHE), this.data.toBase64();
  }
  updateGlobal(t) {
    return this.data.updateGlobal(t), this;
  }
  updateInput(t, r) {
    return r.witnessScript && Wc(r.witnessScript), d0(
      this.data.inputs[t],
      r,
      "updateInput"
    ), this.data.updateInput(t, r), r.nonWitnessUtxo && ed(
      this.__CACHE,
      this.data.inputs[t],
      t
    ), this;
  }
  updateOutput(t, r) {
    const n = this.data.outputs[t];
    return h0(n, r, "updateOutput"), this.data.updateOutput(t, r), this;
  }
  addUnknownKeyValToGlobal(t) {
    return this.data.addUnknownKeyValToGlobal(t), this;
  }
  addUnknownKeyValToInput(t, r) {
    return this.data.addUnknownKeyValToInput(t, r), this;
  }
  addUnknownKeyValToOutput(t, r) {
    return this.data.addUnknownKeyValToOutput(t, r), this;
  }
  clearFinalizedInput(t) {
    return this.data.clearFinalizedInput(t), this;
  }
}
const nS = (e) => new qm(e);
class qm {
  constructor(t = Uint8Array.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0])) {
    oe(this, "tx");
    this.tx = ut.fromBuffer(t), aS(this.tx), Object.defineProperty(this, "tx", {
      enumerable: !1,
      writable: !0
    });
  }
  getInputOutputCounts() {
    return {
      inputCount: this.tx.ins.length,
      outputCount: this.tx.outs.length
    };
  }
  addInput(t) {
    if (t.hash === void 0 || t.index === void 0 || !(t.hash instanceof Uint8Array) && typeof t.hash != "string" || typeof t.index != "number")
      throw new Error("Error adding input.");
    const r = typeof t.hash == "string" ? sh(Dn(t.hash)) : t.hash;
    this.tx.addInput(r, t.index, t.sequence);
  }
  addOutput(t) {
    if (t.script === void 0 || t.value === void 0 || !(t.script instanceof Uint8Array) || typeof t.value != "bigint")
      throw new Error("Error adding output.");
    this.tx.addOutput(t.script, t.value);
  }
  toBuffer() {
    return this.tx.toBuffer();
  }
}
function oS(e, t, r) {
  switch (r) {
    case "pubkey":
    case "pubkeyhash":
    case "witnesspubkeyhash":
      return p0(1, e.partialSig);
    case "multisig":
      const n = $u({ output: t });
      return p0(n.m, e.partialSig, n.pubkeys);
    default:
      return !1;
  }
}
function rf(e) {
  if (e.__UNSAFE_SIGN_NONSEGWIT !== !1)
    throw new Error("Not BIP174 compliant, can not export");
}
function p0(e, t, r) {
  if (!t) return !1;
  let n;
  if (r ? n = r.map((o) => {
    const i = vS(o);
    return t.find(
      (s) => te(s.pubkey, i) === 0
    );
  }).filter((o) => !!o) : n = t, n.length > e) throw new Error("Too many signatures");
  return n.length === e;
}
function Gm(e) {
  return !!e.finalScriptSig || !!e.finalScriptWitness;
}
function g0(e) {
  return (t) => !(te(e.fingerprint, t.masterFingerprint) || te(e.derivePath(t.path).publicKey, t.pubkey));
}
function cc(e) {
  if (typeof e != "number" || e !== Math.floor(e) || e > 4294967295 || e < 0)
    throw new Error("Invalid 32 bit integer");
}
function iS(e, t, r) {
  const n = t.__FEE_RATE || e.getFeeRate(), o = t.__EXTRACTED_TX.virtualSize(), i = n * o;
  if (n >= r.maximumFeeRate)
    throw new Error(
      `Warning: You are paying around ${(i / 1e8).toFixed(8)} in fees, which is ${n} satoshi per byte for a transaction with a VSize of ${o} bytes (segwit counted as 0.25 byte per byte). Use setMaximumFeeRate method to raise your threshold, or pass true to the first arg of extractTransaction.`
    );
}
function Is(e, t) {
  e.forEach((r) => {
    if (Hr(r) ? K_(r, t) : L_(r, t))
      throw new Error("Can not modify transaction, signatures exist.");
  });
}
function sS(e) {
  if (!e.sighashType || !e.partialSig) return;
  const { partialSig: t, sighashType: r } = e;
  t.forEach((n) => {
    const { hashType: o } = Fs.decode(n.signature);
    if (r !== o)
      throw new Error("Signature sighash does not match input sighash type");
  });
}
function Wm(e, t, r) {
  if (!Hu(e, t))
    throw new Error(
      `Can not ${r} for this input with the key ${ye(e)}`
    );
}
function aS(e) {
  if (!e.ins.every(
    (r) => r.script && r.script.length === 0 && r.witness && r.witness.length === 0
  ))
    throw new Error("Format Error: Transaction ScriptSigs are not empty");
}
function cS(e, t) {
  e.ins.forEach((r) => {
    Zm(t, r);
  });
}
function Zm(e, t) {
  const r = ye(sh(Uint8Array.from(t.hash))) + ":" + t.index;
  if (e.__TX_IN_CACHE[r]) throw new Error("Duplicate input detected.");
  e.__TX_IN_CACHE[r] = 1;
}
function Xm(e, t) {
  return (r, n, o, i) => {
    const s = e({
      redeem: { output: o }
    }).output;
    if (te(n, s))
      throw new Error(
        `${t} for ${i} #${r} doesn't match the scriptPubKey in the prevout`
      );
  };
}
const m0 = Xm(fs, "Redeem script"), b0 = Xm(
  Sa,
  "Witness script"
);
function y0(e, t, r, n) {
  if (!r.every(Gm))
    throw new Error(`PSBT must be finalized to calculate ${t}`);
  if (e === "__FEE_RATE" && n.__FEE_RATE) return n.__FEE_RATE;
  if (e === "__FEE" && n.__FEE) return n.__FEE;
  let o, i = !0;
  if (n.__EXTRACTED_TX ? (o = n.__EXTRACTED_TX, i = !1) : o = n.__TX.clone(), tb(r, o, n, i), e === "__FEE_RATE") return n.__FEE_RATE;
  if (e === "__FEE") return n.__FEE;
}
function uS(e, t, r, n, o, i) {
  const s = ob(r);
  if (!oS(t, r, s))
    throw new Error(`Can not finalize input #${e}`);
  return lS(
    r,
    s,
    t.partialSig,
    n,
    o,
    i
  );
}
function lS(e, t, r, n, o, i) {
  let s, a;
  const c = dS(e, t, r), u = i ? Sa({ redeem: c }) : null, f = o ? fs({ redeem: u || c }) : null;
  return n ? (u ? a = Gc(u.witness) : a = Gc(c.witness), f && (s = f.input)) : f ? s = f.input : s = c.input, {
    finalScriptSig: s,
    finalScriptWitness: a
  };
}
function w0(e, t, r, n, o) {
  const i = jt(e, t), { hash: s, sighashType: a, script: c } = Ym(
    t,
    i,
    n,
    !1,
    o
  );
  return Wm(r, c, "sign"), {
    hash: s,
    sighashType: a
  };
}
function Ym(e, t, r, n, o) {
  const i = r.__TX, s = t.sighashType || ut.SIGHASH_ALL;
  Qm(s, o);
  let a, c;
  if (t.nonWitnessUtxo) {
    const l = Lu(
      r,
      t,
      e
    ), d = i.ins[e].hash, m = l.getHash();
    if (te(d, m) !== 0)
      throw new Error(
        `Non-witness UTXO hash for input #${e} doesn't match the hash specified in the prevout`
      );
    const g = i.ins[e].index;
    c = l.outs[g];
  } else if (t.witnessUtxo)
    c = t.witnessUtxo;
  else
    throw new Error("Need a Utxo input item for signing");
  const { meaningfulScript: u, type: f } = zu(
    c.script,
    e,
    "input",
    t.redeemScript,
    t.witnessScript
  );
  if (["p2sh-p2wsh", "p2wsh"].indexOf(f) >= 0)
    a = i.hashForWitnessV0(
      e,
      u,
      c.value,
      s
    );
  else if (Cu(u)) {
    const l = xa({
      hash: u.slice(2)
    }).output;
    a = i.hashForWitnessV0(
      e,
      l,
      c.value,
      s
    );
  } else {
    if (t.nonWitnessUtxo === void 0 && r.__UNSAFE_SIGN_NONSEGWIT === !1)
      throw new Error(
        `Input #${e} has witnessUtxo but non-segwit script: ${ye(u)}`
      );
    !n && r.__UNSAFE_SIGN_NONSEGWIT !== !1 && console.warn(
      `Warning: Signing non-segwit inputs without the full parent transaction means there is a chance that a miner could feed you incorrect information to trick you into paying large fees. This behavior is the same as Psbt's predecessor (TransactionBuilder - now removed) when signing non-segwit scripts. You are not able to export this Psbt with toBuffer|toBase64|toHex since it is not BIP174 compliant.
*********************
PROCEED WITH CAUTION!
*********************`
    ), a = i.hashForSignature(
      e,
      u,
      s
    );
  }
  return {
    script: u,
    sighashType: s,
    hash: a
  };
}
function fS(e, t, r, n) {
  const o = [];
  if (t.tapInternalKey) {
    const s = Jm(e, t, n);
    s && o.push(s);
  }
  if (t.tapScriptSig) {
    const s = t.tapScriptSig.map((a) => a.pubkey);
    o.push(...s);
  }
  return o.map(
    (s) => Qf(e, t, r, s, n)
  ).flat();
}
function Jm(e, t, r) {
  const { script: n } = dh(e, t, r);
  return Fm(n) ? n.subarray(2, 34) : null;
}
function v0(e) {
  return e.length === 64 ? e : e.subarray(0, 64);
}
function Qf(e, t, r, n, o, i, s) {
  const a = o.__TX, c = t.sighashType || ut.SIGHASH_DEFAULT;
  Qm(c, s);
  const u = r.map(
    (g, y) => dh(y, g, o)
  ), f = u.map((g) => g.script), l = u.map((g) => g.value), d = [];
  if (t.tapInternalKey && !i) {
    const g = Jm(e, t, o) || Uint8Array.from([]);
    if (te(Jo(n), g) === 0) {
      const y = a.hashForWitnessV1(
        e,
        f,
        l,
        c
      );
      d.push({ pubkey: n, hash: y });
    }
  }
  const m = (t.tapLeafScript || []).filter((g) => Hu(n, g.script)).map((g) => {
    const y = Nn({
      output: g.script,
      version: g.leafVersion
    });
    return Object.assign({ hash: y }, g);
  }).filter(
    (g) => !i || te(i, g.hash) === 0
  ).map((g) => {
    const y = a.hashForWitnessV1(
      e,
      f,
      l,
      c,
      g.hash
    );
    return {
      pubkey: n,
      hash: y,
      leafHash: g.hash
    };
  });
  return d.concat(m);
}
function Qm(e, t) {
  if (t && t.indexOf(e) < 0) {
    const r = gS(e);
    throw new Error(
      `Sighash type is not allowed. Retry the sign method passing the sighashTypes array of whitelisted types. Sighash type: ${r}`
    );
  }
}
function dS(e, t, r) {
  let n;
  switch (t) {
    case "multisig":
      const o = pS(e, r);
      n = $u({
        output: e,
        signatures: o
      });
      break;
    case "pubkey":
      n = gm({
        output: e,
        signature: r[0].signature
      });
      break;
    case "pubkeyhash":
      n = xa({
        output: e,
        pubkey: r[0].pubkey,
        signature: r[0].signature
      });
      break;
    case "witnesspubkeyhash":
      n = _a({
        output: e,
        pubkey: r[0].pubkey,
        signature: r[0].signature
      });
      break;
  }
  return n;
}
function hS(e, t, r) {
  const n = r.__TX, o = {
    script: null,
    isSegwit: !1,
    isP2SH: !1,
    isP2WSH: !1
  };
  if (o.isP2SH = !!t.redeemScript, o.isP2WSH = !!t.witnessScript, t.witnessScript)
    o.script = t.witnessScript;
  else if (t.redeemScript)
    o.script = t.redeemScript;
  else if (t.nonWitnessUtxo) {
    const i = Lu(
      r,
      t,
      e
    ), s = n.ins[e].index;
    o.script = i.outs[s].script;
  } else t.witnessUtxo && (o.script = t.witnessUtxo.script);
  return (t.witnessScript || Cu(o.script)) && (o.isSegwit = !0), o;
}
function E0(e, t, r) {
  const n = jt(t, e);
  if (!n.bip32Derivation || n.bip32Derivation.length === 0)
    throw new Error("Need bip32Derivation to sign with HD");
  const o = n.bip32Derivation.map((s) => {
    if (te(s.masterFingerprint, r.fingerprint) === 0)
      return s;
  }).filter((s) => !!s);
  if (o.length === 0)
    throw new Error(
      "Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint"
    );
  return o.map((s) => {
    const a = r.derivePath(s.path);
    if (te(s.pubkey, a.publicKey) !== 0)
      throw new Error("pubkey did not match bip32Derivation");
    return a;
  });
}
function pS(e, t) {
  return $u({ output: e }).pubkeys.map((n) => (t.filter((o) => te(o.pubkey, n) === 0)[0] || {}).signature).filter((n) => !!n);
}
function eb(e) {
  let t = 0;
  function r(s) {
    return t += s, e.slice(t - s, t);
  }
  function n() {
    const s = ds(e, t);
    return t += Pr(s.bigintValue), s.numberValue;
  }
  function o() {
    return r(n());
  }
  function i() {
    const s = n(), a = [];
    for (let c = 0; c < s; c++) a.push(o());
    return a;
  }
  return i();
}
function gS(e) {
  let t = e & ut.SIGHASH_ANYONECANPAY ? "SIGHASH_ANYONECANPAY | " : "";
  switch (e & 31) {
    case ut.SIGHASH_ALL:
      t += "SIGHASH_ALL";
      break;
    case ut.SIGHASH_SINGLE:
      t += "SIGHASH_SINGLE";
      break;
    case ut.SIGHASH_NONE:
      t += "SIGHASH_NONE";
      break;
  }
  return t;
}
function ed(e, t, r) {
  e.__NON_WITNESS_UTXO_BUF_CACHE[r] = t.nonWitnessUtxo;
  const n = ut.fromBuffer(t.nonWitnessUtxo);
  e.__NON_WITNESS_UTXO_TX_CACHE[r] = n;
  const o = e, i = r;
  delete t.nonWitnessUtxo, Object.defineProperty(t, "nonWitnessUtxo", {
    enumerable: !0,
    get() {
      const s = o.__NON_WITNESS_UTXO_BUF_CACHE[i], a = o.__NON_WITNESS_UTXO_TX_CACHE[i];
      if (s !== void 0)
        return s;
      {
        const c = a.toBuffer();
        return o.__NON_WITNESS_UTXO_BUF_CACHE[i] = c, c;
      }
    },
    set(s) {
      o.__NON_WITNESS_UTXO_BUF_CACHE[i] = s;
    }
  });
}
function tb(e, t, r, n) {
  let o = 0n;
  e.forEach((c, u) => {
    if (n && c.finalScriptSig && (t.ins[u].script = c.finalScriptSig), n && c.finalScriptWitness && (t.ins[u].witness = eb(
      c.finalScriptWitness
    )), c.witnessUtxo)
      o += c.witnessUtxo.value;
    else if (c.nonWitnessUtxo) {
      const f = Lu(r, c, u), l = t.ins[u].index, d = f.outs[l];
      o += d.value;
    }
  });
  const i = t.outs.reduce((c, u) => c + u.value, 0n), s = o - i;
  if (s < 0)
    throw new Error("Outputs are spending more than Inputs");
  const a = t.virtualSize();
  r.__FEE = s, r.__EXTRACTED_TX = t, r.__FEE_RATE = Math.floor(Number(s / BigInt(a)));
}
function Lu(e, t, r) {
  const n = e.__NON_WITNESS_UTXO_TX_CACHE;
  return n[r] || ed(e, t, r), n[r];
}
function rb(e, t, r) {
  const { script: n } = dh(e, t, r);
  return n;
}
function dh(e, t, r) {
  if (t.witnessUtxo !== void 0)
    return {
      script: t.witnessUtxo.script,
      value: t.witnessUtxo.value
    };
  if (t.nonWitnessUtxo !== void 0) {
    const o = Lu(
      r,
      t,
      e
    ).outs[r.__TX.ins[e].index];
    return { script: o.script, value: o.value };
  } else
    throw new Error("Can't find pubkey in input without Utxo data");
}
function mS(e, t, r, n) {
  const o = rb(r, t, n), { meaningfulScript: i } = zu(
    o,
    r,
    "input",
    t.redeemScript,
    t.witnessScript
  );
  return Hu(e, i);
}
function bS(e, t, r, n) {
  const o = n.__TX.outs[r].script, { meaningfulScript: i } = zu(
    o,
    r,
    "output",
    t.redeemScript,
    t.witnessScript
  );
  return Hu(e, i);
}
function yS(e) {
  if (!e) return;
  const t = lt(e);
  if (!t) return;
  const r = t[t.length - 1];
  if (!(!(r instanceof Uint8Array) || nb(r) || ES(r) || !lt(r)))
    return r;
}
function wS(e) {
  if (!e) return;
  const t = eb(e), r = t[t.length - 1];
  if (!(nb(r) || !lt(r)))
    return r;
}
function vS(e) {
  if (e.length === 65) {
    const t = e[64] & 1, r = e.slice(0, 33);
    return r[0] = 2 | t, r;
  }
  return e.slice();
}
function nb(e) {
  return e.length === 33 && Z2(e);
}
function ES(e) {
  return Hn(e);
}
function zu(e, t, r, n, o) {
  const i = Dm(e), s = i && n && l0(n), a = l0(e);
  if (i && n === void 0)
    throw new Error("scriptPubkey is P2SH but redeemScript missing");
  if ((a || s) && o === void 0)
    throw new Error(
      "scriptPubkey or redeemScript is P2WSH but witnessScript missing"
    );
  let c;
  return s ? (c = o, m0(t, e, n, r), b0(t, n, o, r), Wc(c)) : a ? (c = o, b0(t, e, o, r), Wc(c)) : i ? (c = n, m0(t, e, n, r)) : c = e, {
    meaningfulScript: c,
    type: s ? "p2sh-p2wsh" : i ? "p2sh" : a ? "p2wsh" : "raw"
  };
}
function Wc(e) {
  if (Cu(e) || Dm(e))
    throw new Error("P2WPKH or P2SH can not be contained within P2WSH");
}
function ob(e) {
  return Cu(e) ? "witnesspubkeyhash" : H_(e) ? "pubkeyhash" : R_(e) ? "multisig" : C_(e) ? "pubkey" : "nonstandard";
}
function Ps(e) {
  return [...Array(e).keys()];
}
let ib = class extends mm {
  constructor(t, r) {
    super(), this.finished = !1, this.destroyed = !1, Y2(t);
    const n = Qd(r);
    if (this.iHash = t.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o = this.blockLen, i = new Uint8Array(o);
    i.set(n.length > o ? t.create().update(n).digest() : n);
    for (let s = 0; s < i.length; s++)
      i[s] ^= 54;
    this.iHash.update(i), this.oHash = t.create();
    for (let s = 0; s < i.length; s++)
      i[s] ^= 106;
    this.oHash.update(i), i.fill(0);
  }
  update(t) {
    return Fc(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    Fc(this), Uu(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: r, iHash: n, finished: o, destroyed: i, blockLen: s, outputLen: a } = this;
    return t = t, t.finished = o, t.destroyed = i, t.blockLen = s, t.outputLen = a, t.oHash = r._cloneInto(t.oHash), t.iHash = n._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const hh = (e, t, r) => new ib(e, t).update(r).digest();
hh.create = (e, t) => new ib(e, t);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const ph = /* @__PURE__ */ BigInt(0), ju = /* @__PURE__ */ BigInt(1), xS = /* @__PURE__ */ BigInt(2);
function oi(e) {
  return e instanceof Uint8Array || e != null && typeof e == "object" && e.constructor.name === "Uint8Array";
}
function Ia(e) {
  if (!oi(e))
    throw new Error("Uint8Array expected");
}
function Zi(e, t) {
  if (typeof t != "boolean")
    throw new Error(`${e} must be valid boolean, got "${t}".`);
}
const _S = /* @__PURE__ */ Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function Xi(e) {
  Ia(e);
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += _S[e[r]];
  return t;
}
function zi(e) {
  const t = e.toString(16);
  return t.length & 1 ? `0${t}` : t;
}
function gh(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  return BigInt(e === "" ? "0" : `0x${e}`);
}
const _n = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
function x0(e) {
  if (e >= _n._0 && e <= _n._9)
    return e - _n._0;
  if (e >= _n._A && e <= _n._F)
    return e - (_n._A - 10);
  if (e >= _n._a && e <= _n._f)
    return e - (_n._a - 10);
}
function Yi(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  const t = e.length, r = t / 2;
  if (t % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + t);
  const n = new Uint8Array(r);
  for (let o = 0, i = 0; o < r; o++, i += 2) {
    const s = x0(e.charCodeAt(i)), a = x0(e.charCodeAt(i + 1));
    if (s === void 0 || a === void 0) {
      const c = e[i] + e[i + 1];
      throw new Error('hex string expected, got non-hex character "' + c + '" at index ' + i);
    }
    n[o] = s * 16 + a;
  }
  return n;
}
function Qo(e) {
  return gh(Xi(e));
}
function mh(e) {
  return Ia(e), gh(Xi(Uint8Array.from(e).reverse()));
}
function Ji(e, t) {
  return Yi(e.toString(16).padStart(t * 2, "0"));
}
function bh(e, t) {
  return Ji(e, t).reverse();
}
function SS(e) {
  return Yi(zi(e));
}
function Rr(e, t, r) {
  let n;
  if (typeof t == "string")
    try {
      n = Yi(t);
    } catch (i) {
      throw new Error(`${e} must be valid hex string, got "${t}". Cause: ${i}`);
    }
  else if (oi(t))
    n = Uint8Array.from(t);
  else
    throw new Error(`${e} must be hex string or Uint8Array`);
  const o = n.length;
  if (typeof r == "number" && o !== r)
    throw new Error(`${e} expected ${r} bytes, got ${o}`);
  return n;
}
function ta(...e) {
  let t = 0;
  for (let n = 0; n < e.length; n++) {
    const o = e[n];
    Ia(o), t += o.length;
  }
  const r = new Uint8Array(t);
  for (let n = 0, o = 0; n < e.length; n++) {
    const i = e[n];
    r.set(i, o), o += i.length;
  }
  return r;
}
function AS(e, t) {
  if (e.length !== t.length)
    return !1;
  let r = 0;
  for (let n = 0; n < e.length; n++)
    r |= e[n] ^ t[n];
  return r === 0;
}
function kS(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
const nf = (e) => typeof e == "bigint" && ph <= e;
function Mu(e, t, r) {
  return nf(e) && nf(t) && nf(r) && t <= e && e < r;
}
function ei(e, t, r, n) {
  if (!Mu(t, r, n))
    throw new Error(`expected valid ${e}: ${r} <= n < ${n}, got ${typeof t} ${t}`);
}
function sb(e) {
  let t;
  for (t = 0; e > ph; e >>= ju, t += 1)
    ;
  return t;
}
function TS(e, t) {
  return e >> BigInt(t) & ju;
}
function IS(e, t, r) {
  return e | (r ? ju : ph) << BigInt(t);
}
const yh = (e) => (xS << BigInt(e - 1)) - ju, of = (e) => new Uint8Array(e), _0 = (e) => Uint8Array.from(e);
function ab(e, t, r) {
  if (typeof e != "number" || e < 2)
    throw new Error("hashLen must be a number");
  if (typeof t != "number" || t < 2)
    throw new Error("qByteLen must be a number");
  if (typeof r != "function")
    throw new Error("hmacFn must be a function");
  let n = of(e), o = of(e), i = 0;
  const s = () => {
    n.fill(1), o.fill(0), i = 0;
  }, a = (...l) => r(o, n, ...l), c = (l = of()) => {
    o = a(_0([0]), l), n = a(), l.length !== 0 && (o = a(_0([1]), l), n = a());
  }, u = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let l = 0;
    const d = [];
    for (; l < t; ) {
      n = a();
      const m = n.slice();
      d.push(m), l += n.length;
    }
    return ta(...d);
  };
  return (l, d) => {
    s(), c(l);
    let m;
    for (; !(m = d(u())); )
      c();
    return s(), m;
  };
}
const PS = {
  bigint: (e) => typeof e == "bigint",
  function: (e) => typeof e == "function",
  boolean: (e) => typeof e == "boolean",
  string: (e) => typeof e == "string",
  stringOrUint8Array: (e) => typeof e == "string" || oi(e),
  isSafeInteger: (e) => Number.isSafeInteger(e),
  array: (e) => Array.isArray(e),
  field: (e, t) => t.Fp.isValid(e),
  hash: (e) => typeof e == "function" && Number.isSafeInteger(e.outputLen)
};
function Pa(e, t, r = {}) {
  const n = (o, i, s) => {
    const a = PS[i];
    if (typeof a != "function")
      throw new Error(`Invalid validator "${i}", expected function`);
    const c = e[o];
    if (!(s && c === void 0) && !a(c, e))
      throw new Error(`Invalid param ${String(o)}=${c} (${typeof c}), expected ${i}`);
  };
  for (const [o, i] of Object.entries(t))
    n(o, i, !1);
  for (const [o, i] of Object.entries(r))
    n(o, i, !0);
  return e;
}
const OS = () => {
  throw new Error("not implemented");
};
function td(e) {
  const t = /* @__PURE__ */ new WeakMap();
  return (r, ...n) => {
    const o = t.get(r);
    if (o !== void 0)
      return o;
    const i = e(r, ...n);
    return t.set(r, i), i;
  };
}
const BS = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  aInRange: ei,
  abool: Zi,
  abytes: Ia,
  bitGet: TS,
  bitLen: sb,
  bitMask: yh,
  bitSet: IS,
  bytesToHex: Xi,
  bytesToNumberBE: Qo,
  bytesToNumberLE: mh,
  concatBytes: ta,
  createHmacDrbg: ab,
  ensureBytes: Rr,
  equalBytes: AS,
  hexToBytes: Yi,
  hexToNumber: gh,
  inRange: Mu,
  isBytes: oi,
  memoized: td,
  notImplemented: OS,
  numberToBytesBE: Ji,
  numberToBytesLE: bh,
  numberToHexUnpadded: zi,
  numberToVarBytesBE: SS,
  utf8ToBytes: kS,
  validateObject: Pa
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Rt = BigInt(0), wt = BigInt(1), qo = BigInt(2), NS = BigInt(3), rd = BigInt(4), S0 = BigInt(5), A0 = BigInt(8);
BigInt(9);
BigInt(16);
function Xt(e, t) {
  const r = e % t;
  return r >= Rt ? r : t + r;
}
function $S(e, t, r) {
  if (r <= Rt || t < Rt)
    throw new Error("Expected power/modulo > 0");
  if (r === wt)
    return Rt;
  let n = wt;
  for (; t > Rt; )
    t & wt && (n = n * e % r), e = e * e % r, t >>= wt;
  return n;
}
function _r(e, t, r) {
  let n = e;
  for (; t-- > Rt; )
    n *= n, n %= r;
  return n;
}
function nd(e, t) {
  if (e === Rt || t <= Rt)
    throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);
  let r = Xt(e, t), n = t, o = Rt, i = wt;
  for (; r !== Rt; ) {
    const a = n / r, c = n % r, u = o - i * a;
    n = r, r = c, o = i, i = u;
  }
  if (n !== wt)
    throw new Error("invert: does not exist");
  return Xt(o, t);
}
function US(e) {
  const t = (e - wt) / qo;
  let r, n, o;
  for (r = e - wt, n = 0; r % qo === Rt; r /= qo, n++)
    ;
  for (o = qo; o < e && $S(o, t, e) !== e - wt; o++)
    ;
  if (n === 1) {
    const s = (e + wt) / rd;
    return function(c, u) {
      const f = c.pow(u, s);
      if (!c.eql(c.sqr(f), u))
        throw new Error("Cannot find square root");
      return f;
    };
  }
  const i = (r + wt) / qo;
  return function(a, c) {
    if (a.pow(c, t) === a.neg(a.ONE))
      throw new Error("Cannot find square root");
    let u = n, f = a.pow(a.mul(a.ONE, o), r), l = a.pow(c, i), d = a.pow(c, r);
    for (; !a.eql(d, a.ONE); ) {
      if (a.eql(d, a.ZERO))
        return a.ZERO;
      let m = 1;
      for (let y = a.sqr(d); m < u && !a.eql(y, a.ONE); m++)
        y = a.sqr(y);
      const g = a.pow(f, wt << BigInt(u - m - 1));
      f = a.sqr(g), l = a.mul(l, g), d = a.mul(d, f), u = m;
    }
    return l;
  };
}
function RS(e) {
  if (e % rd === NS) {
    const t = (e + wt) / rd;
    return function(n, o) {
      const i = n.pow(o, t);
      if (!n.eql(n.sqr(i), o))
        throw new Error("Cannot find square root");
      return i;
    };
  }
  if (e % A0 === S0) {
    const t = (e - S0) / A0;
    return function(n, o) {
      const i = n.mul(o, qo), s = n.pow(i, t), a = n.mul(o, s), c = n.mul(n.mul(a, qo), s), u = n.mul(a, n.sub(c, n.ONE));
      if (!n.eql(n.sqr(u), o))
        throw new Error("Cannot find square root");
      return u;
    };
  }
  return US(e);
}
const CS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function HS(e) {
  const t = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, r = CS.reduce((n, o) => (n[o] = "function", n), t);
  return Pa(e, r);
}
function LS(e, t, r) {
  if (r < Rt)
    throw new Error("Expected power > 0");
  if (r === Rt)
    return e.ONE;
  if (r === wt)
    return t;
  let n = e.ONE, o = t;
  for (; r > Rt; )
    r & wt && (n = e.mul(n, o)), o = e.sqr(o), r >>= wt;
  return n;
}
function zS(e, t) {
  const r = new Array(t.length), n = t.reduce((i, s, a) => e.is0(s) ? i : (r[a] = i, e.mul(i, s)), e.ONE), o = e.inv(n);
  return t.reduceRight((i, s, a) => e.is0(s) ? i : (r[a] = e.mul(i, r[a]), e.mul(i, s)), o), r;
}
function cb(e, t) {
  const r = t !== void 0 ? t : e.toString(2).length, n = Math.ceil(r / 8);
  return { nBitLength: r, nByteLength: n };
}
function wh(e, t, r = !1, n = {}) {
  if (e <= Rt)
    throw new Error(`Expected Field ORDER > 0, got ${e}`);
  const { nBitLength: o, nByteLength: i } = cb(e, t);
  if (i > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const s = RS(e), a = Object.freeze({
    ORDER: e,
    BITS: o,
    BYTES: i,
    MASK: yh(o),
    ZERO: Rt,
    ONE: wt,
    create: (c) => Xt(c, e),
    isValid: (c) => {
      if (typeof c != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof c}`);
      return Rt <= c && c < e;
    },
    is0: (c) => c === Rt,
    isOdd: (c) => (c & wt) === wt,
    neg: (c) => Xt(-c, e),
    eql: (c, u) => c === u,
    sqr: (c) => Xt(c * c, e),
    add: (c, u) => Xt(c + u, e),
    sub: (c, u) => Xt(c - u, e),
    mul: (c, u) => Xt(c * u, e),
    pow: (c, u) => LS(a, c, u),
    div: (c, u) => Xt(c * nd(u, e), e),
    // Same as above, but doesn't normalize
    sqrN: (c) => c * c,
    addN: (c, u) => c + u,
    subN: (c, u) => c - u,
    mulN: (c, u) => c * u,
    inv: (c) => nd(c, e),
    sqrt: n.sqrt || ((c) => s(a, c)),
    invertBatch: (c) => zS(a, c),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (c, u, f) => f ? u : c,
    toBytes: (c) => r ? bh(c, i) : Ji(c, i),
    fromBytes: (c) => {
      if (c.length !== i)
        throw new Error(`Fp.fromBytes: expected ${i}, got ${c.length}`);
      return r ? mh(c) : Qo(c);
    }
  });
  return Object.freeze(a);
}
function ub(e) {
  if (typeof e != "bigint")
    throw new Error("field order must be bigint");
  const t = e.toString(2).length;
  return Math.ceil(t / 8);
}
function lb(e) {
  const t = ub(e);
  return t + Math.ceil(t / 2);
}
function jS(e, t, r = !1) {
  const n = e.length, o = ub(t), i = lb(t);
  if (n < 16 || n < i || n > 1024)
    throw new Error(`expected ${i}-1024 bytes of input, got ${n}`);
  const s = r ? Qo(e) : mh(e), a = Xt(s, t - wt) + wt;
  return r ? bh(a, o) : Ji(a, o);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const MS = BigInt(0), sf = BigInt(1), af = /* @__PURE__ */ new WeakMap(), k0 = /* @__PURE__ */ new WeakMap();
function DS(e, t) {
  const r = (i, s) => {
    const a = s.negate();
    return i ? a : s;
  }, n = (i) => {
    if (!Number.isSafeInteger(i) || i <= 0 || i > t)
      throw new Error(`Wrong window size=${i}, should be [1..${t}]`);
  }, o = (i) => {
    n(i);
    const s = Math.ceil(t / i) + 1, a = 2 ** (i - 1);
    return { windows: s, windowSize: a };
  };
  return {
    constTimeNegate: r,
    // non-const time multiplication ladder
    unsafeLadder(i, s) {
      let a = e.ZERO, c = i;
      for (; s > MS; )
        s & sf && (a = a.add(c)), c = c.double(), s >>= sf;
      return a;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(i, s) {
      const { windows: a, windowSize: c } = o(s), u = [];
      let f = i, l = f;
      for (let d = 0; d < a; d++) {
        l = f, u.push(l);
        for (let m = 1; m < c; m++)
          l = l.add(f), u.push(l);
        f = l.double();
      }
      return u;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(i, s, a) {
      const { windows: c, windowSize: u } = o(i);
      let f = e.ZERO, l = e.BASE;
      const d = BigInt(2 ** i - 1), m = 2 ** i, g = BigInt(i);
      for (let y = 0; y < c; y++) {
        const b = y * u;
        let E = Number(a & d);
        a >>= g, E > u && (E -= m, a += sf);
        const x = b, w = b + Math.abs(E) - 1, k = y % 2 !== 0, S = E < 0;
        E === 0 ? l = l.add(r(k, s[x])) : f = f.add(r(S, s[w]));
      }
      return { p: f, f: l };
    },
    wNAFCached(i, s, a) {
      const c = k0.get(i) || 1;
      let u = af.get(i);
      return u || (u = this.precomputeWindow(i, c), c !== 1 && af.set(i, a(u))), this.wNAF(c, u, s);
    },
    // We calculate precomputes for elliptic curve point multiplication
    // using windowed method. This specifies window size and
    // stores precomputed values. Usually only base point would be precomputed.
    setWindowSize(i, s) {
      n(s), k0.set(i, s), af.delete(i);
    }
  };
}
function FS(e, t, r, n) {
  if (!Array.isArray(r) || !Array.isArray(n) || n.length !== r.length)
    throw new Error("arrays of points and scalars must have equal length");
  n.forEach((f, l) => {
    if (!t.isValid(f))
      throw new Error(`wrong scalar at index ${l}`);
  }), r.forEach((f, l) => {
    if (!(f instanceof e))
      throw new Error(`wrong point at index ${l}`);
  });
  const o = sb(BigInt(r.length)), i = o > 12 ? o - 3 : o > 4 ? o - 2 : o ? 2 : 1, s = (1 << i) - 1, a = new Array(s + 1).fill(e.ZERO), c = Math.floor((t.BITS - 1) / i) * i;
  let u = e.ZERO;
  for (let f = c; f >= 0; f -= i) {
    a.fill(e.ZERO);
    for (let d = 0; d < n.length; d++) {
      const m = n[d], g = Number(m >> BigInt(f) & BigInt(s));
      a[g] = a[g].add(r[d]);
    }
    let l = e.ZERO;
    for (let d = a.length - 1, m = e.ZERO; d > 0; d--)
      m = m.add(a[d]), l = l.add(m);
    if (u = u.add(l), f !== 0)
      for (let d = 0; d < i; d++)
        u = u.double();
  }
  return u;
}
function fb(e) {
  return HS(e.Fp), Pa(e, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...cb(e.n, e.nBitLength),
    ...e,
    p: e.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function T0(e) {
  e.lowS !== void 0 && Zi("lowS", e.lowS), e.prehash !== void 0 && Zi("prehash", e.prehash);
}
function KS(e) {
  const t = fb(e);
  Pa(t, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: r, Fp: n, a: o } = t;
  if (r) {
    if (!n.eql(o, n.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof r != "object" || typeof r.beta != "bigint" || typeof r.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...t });
}
const { bytesToNumberBE: VS, hexToBytes: qS } = BS, On = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(t = "") {
      super(t);
    }
  },
  // Basic building block is TLV (Tag-Length-Value)
  _tlv: {
    encode: (e, t) => {
      const { Err: r } = On;
      if (e < 0 || e > 256)
        throw new r("tlv.encode: wrong tag");
      if (t.length & 1)
        throw new r("tlv.encode: unpadded data");
      const n = t.length / 2, o = zi(n);
      if (o.length / 2 & 128)
        throw new r("tlv.encode: long form length too big");
      const i = n > 127 ? zi(o.length / 2 | 128) : "";
      return `${zi(e)}${i}${o}${t}`;
    },
    // v - value, l - left bytes (unparsed)
    decode(e, t) {
      const { Err: r } = On;
      let n = 0;
      if (e < 0 || e > 256)
        throw new r("tlv.encode: wrong tag");
      if (t.length < 2 || t[n++] !== e)
        throw new r("tlv.decode: wrong tlv");
      const o = t[n++], i = !!(o & 128);
      let s = 0;
      if (!i)
        s = o;
      else {
        const c = o & 127;
        if (!c)
          throw new r("tlv.decode(long): indefinite length not supported");
        if (c > 4)
          throw new r("tlv.decode(long): byte length is too big");
        const u = t.subarray(n, n + c);
        if (u.length !== c)
          throw new r("tlv.decode: length bytes not complete");
        if (u[0] === 0)
          throw new r("tlv.decode(long): zero leftmost byte");
        for (const f of u)
          s = s << 8 | f;
        if (n += c, s < 128)
          throw new r("tlv.decode(long): not minimal encoding");
      }
      const a = t.subarray(n, n + s);
      if (a.length !== s)
        throw new r("tlv.decode: wrong value length");
      return { v: a, l: t.subarray(n + s) };
    }
  },
  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
  // since we always use positive integers here. It must always be empty:
  // - add zero byte if exists
  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
  _int: {
    encode(e) {
      const { Err: t } = On;
      if (e < Bn)
        throw new t("integer: negative integers are not allowed");
      let r = zi(e);
      if (Number.parseInt(r[0], 16) & 8 && (r = "00" + r), r.length & 1)
        throw new t("unexpected assertion");
      return r;
    },
    decode(e) {
      const { Err: t } = On;
      if (e[0] & 128)
        throw new t("Invalid signature integer: negative");
      if (e[0] === 0 && !(e[1] & 128))
        throw new t("Invalid signature integer: unnecessary leading zero");
      return VS(e);
    }
  },
  toSig(e) {
    const { Err: t, _int: r, _tlv: n } = On, o = typeof e == "string" ? qS(e) : e;
    Ia(o);
    const { v: i, l: s } = n.decode(48, o);
    if (s.length)
      throw new t("Invalid signature: left bytes after parsing");
    const { v: a, l: c } = n.decode(2, i), { v: u, l: f } = n.decode(2, c);
    if (f.length)
      throw new t("Invalid signature: left bytes after parsing");
    return { r: r.decode(a), s: r.decode(u) };
  },
  hexFromSig(e) {
    const { _tlv: t, _int: r } = On, n = `${t.encode(2, r.encode(e.r))}${t.encode(2, r.encode(e.s))}`;
    return t.encode(48, n);
  }
}, Bn = BigInt(0), Nt = BigInt(1);
BigInt(2);
const I0 = BigInt(3);
BigInt(4);
function GS(e) {
  const t = KS(e), { Fp: r } = t, n = wh(t.n, t.nBitLength), o = t.toBytes || ((y, b, E) => {
    const x = b.toAffine();
    return ta(Uint8Array.from([4]), r.toBytes(x.x), r.toBytes(x.y));
  }), i = t.fromBytes || ((y) => {
    const b = y.subarray(1), E = r.fromBytes(b.subarray(0, r.BYTES)), x = r.fromBytes(b.subarray(r.BYTES, 2 * r.BYTES));
    return { x: E, y: x };
  });
  function s(y) {
    const { a: b, b: E } = t, x = r.sqr(y), w = r.mul(x, y);
    return r.add(r.add(w, r.mul(y, b)), E);
  }
  if (!r.eql(r.sqr(t.Gy), s(t.Gx)))
    throw new Error("bad generator point: equation left != right");
  function a(y) {
    return Mu(y, Nt, t.n);
  }
  function c(y) {
    const { allowedPrivateKeyLengths: b, nByteLength: E, wrapPrivateKey: x, n: w } = t;
    if (b && typeof y != "bigint") {
      if (oi(y) && (y = Xi(y)), typeof y != "string" || !b.includes(y.length))
        throw new Error("Invalid key");
      y = y.padStart(E * 2, "0");
    }
    let k;
    try {
      k = typeof y == "bigint" ? y : Qo(Rr("private key", y, E));
    } catch {
      throw new Error(`private key must be ${E} bytes, hex or bigint, not ${typeof y}`);
    }
    return x && (k = Xt(k, w)), ei("private key", k, Nt, w), k;
  }
  function u(y) {
    if (!(y instanceof d))
      throw new Error("ProjectivePoint expected");
  }
  const f = td((y, b) => {
    const { px: E, py: x, pz: w } = y;
    if (r.eql(w, r.ONE))
      return { x: E, y: x };
    const k = y.is0();
    b == null && (b = k ? r.ONE : r.inv(w));
    const S = r.mul(E, b), I = r.mul(x, b), T = r.mul(w, b);
    if (k)
      return { x: r.ZERO, y: r.ZERO };
    if (!r.eql(T, r.ONE))
      throw new Error("invZ was invalid");
    return { x: S, y: I };
  }), l = td((y) => {
    if (y.is0()) {
      if (t.allowInfinityPoint && !r.is0(y.py))
        return;
      throw new Error("bad point: ZERO");
    }
    const { x: b, y: E } = y.toAffine();
    if (!r.isValid(b) || !r.isValid(E))
      throw new Error("bad point: x or y not FE");
    const x = r.sqr(E), w = s(b);
    if (!r.eql(x, w))
      throw new Error("bad point: equation left != right");
    if (!y.isTorsionFree())
      throw new Error("bad point: not in prime-order subgroup");
    return !0;
  });
  class d {
    constructor(b, E, x) {
      if (this.px = b, this.py = E, this.pz = x, b == null || !r.isValid(b))
        throw new Error("x required");
      if (E == null || !r.isValid(E))
        throw new Error("y required");
      if (x == null || !r.isValid(x))
        throw new Error("z required");
      Object.freeze(this);
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(b) {
      const { x: E, y: x } = b || {};
      if (!b || !r.isValid(E) || !r.isValid(x))
        throw new Error("invalid affine point");
      if (b instanceof d)
        throw new Error("projective point not allowed");
      const w = (k) => r.eql(k, r.ZERO);
      return w(E) && w(x) ? d.ZERO : new d(E, x, r.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(b) {
      const E = r.invertBatch(b.map((x) => x.pz));
      return b.map((x, w) => x.toAffine(E[w])).map(d.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(b) {
      const E = d.fromAffine(i(Rr("pointHex", b)));
      return E.assertValidity(), E;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(b) {
      return d.BASE.multiply(c(b));
    }
    // Multiscalar Multiplication
    static msm(b, E) {
      return FS(d, n, b, E);
    }
    // "Private method", don't use it directly
    _setWindowSize(b) {
      g.setWindowSize(this, b);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      l(this);
    }
    hasEvenY() {
      const { y: b } = this.toAffine();
      if (r.isOdd)
        return !r.isOdd(b);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(b) {
      u(b);
      const { px: E, py: x, pz: w } = this, { px: k, py: S, pz: I } = b, T = r.eql(r.mul(E, I), r.mul(k, w)), B = r.eql(r.mul(x, I), r.mul(S, w));
      return T && B;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new d(this.px, r.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: b, b: E } = t, x = r.mul(E, I0), { px: w, py: k, pz: S } = this;
      let I = r.ZERO, T = r.ZERO, B = r.ZERO, C = r.mul(w, w), F = r.mul(k, k), V = r.mul(S, S), R = r.mul(w, k);
      return R = r.add(R, R), B = r.mul(w, S), B = r.add(B, B), I = r.mul(b, B), T = r.mul(x, V), T = r.add(I, T), I = r.sub(F, T), T = r.add(F, T), T = r.mul(I, T), I = r.mul(R, I), B = r.mul(x, B), V = r.mul(b, V), R = r.sub(C, V), R = r.mul(b, R), R = r.add(R, B), B = r.add(C, C), C = r.add(B, C), C = r.add(C, V), C = r.mul(C, R), T = r.add(T, C), V = r.mul(k, S), V = r.add(V, V), C = r.mul(V, R), I = r.sub(I, C), B = r.mul(V, F), B = r.add(B, B), B = r.add(B, B), new d(I, T, B);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(b) {
      u(b);
      const { px: E, py: x, pz: w } = this, { px: k, py: S, pz: I } = b;
      let T = r.ZERO, B = r.ZERO, C = r.ZERO;
      const F = t.a, V = r.mul(t.b, I0);
      let R = r.mul(E, k), G = r.mul(x, S), K = r.mul(w, I), N = r.add(E, x), L = r.add(k, S);
      N = r.mul(N, L), L = r.add(R, G), N = r.sub(N, L), L = r.add(E, w);
      let q = r.add(k, I);
      return L = r.mul(L, q), q = r.add(R, K), L = r.sub(L, q), q = r.add(x, w), T = r.add(S, I), q = r.mul(q, T), T = r.add(G, K), q = r.sub(q, T), C = r.mul(F, L), T = r.mul(V, K), C = r.add(T, C), T = r.sub(G, C), C = r.add(G, C), B = r.mul(T, C), G = r.add(R, R), G = r.add(G, R), K = r.mul(F, K), L = r.mul(V, L), G = r.add(G, K), K = r.sub(R, K), K = r.mul(F, K), L = r.add(L, K), R = r.mul(G, L), B = r.add(B, R), R = r.mul(q, L), T = r.mul(N, T), T = r.sub(T, R), R = r.mul(N, G), C = r.mul(q, C), C = r.add(C, R), new d(T, B, C);
    }
    subtract(b) {
      return this.add(b.negate());
    }
    is0() {
      return this.equals(d.ZERO);
    }
    wNAF(b) {
      return g.wNAFCached(this, b, d.normalizeZ);
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(b) {
      ei("scalar", b, Bn, t.n);
      const E = d.ZERO;
      if (b === Bn)
        return E;
      if (b === Nt)
        return this;
      const { endo: x } = t;
      if (!x)
        return g.unsafeLadder(this, b);
      let { k1neg: w, k1: k, k2neg: S, k2: I } = x.splitScalar(b), T = E, B = E, C = this;
      for (; k > Bn || I > Bn; )
        k & Nt && (T = T.add(C)), I & Nt && (B = B.add(C)), C = C.double(), k >>= Nt, I >>= Nt;
      return w && (T = T.negate()), S && (B = B.negate()), B = new d(r.mul(B.px, x.beta), B.py, B.pz), T.add(B);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(b) {
      const { endo: E, n: x } = t;
      ei("scalar", b, Nt, x);
      let w, k;
      if (E) {
        const { k1neg: S, k1: I, k2neg: T, k2: B } = E.splitScalar(b);
        let { p: C, f: F } = this.wNAF(I), { p: V, f: R } = this.wNAF(B);
        C = g.constTimeNegate(S, C), V = g.constTimeNegate(T, V), V = new d(r.mul(V.px, E.beta), V.py, V.pz), w = C.add(V), k = F.add(R);
      } else {
        const { p: S, f: I } = this.wNAF(b);
        w = S, k = I;
      }
      return d.normalizeZ([w, k])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(b, E, x) {
      const w = d.BASE, k = (I, T) => T === Bn || T === Nt || !I.equals(w) ? I.multiplyUnsafe(T) : I.multiply(T), S = k(this, E).add(k(b, x));
      return S.is0() ? void 0 : S;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(b) {
      return f(this, b);
    }
    isTorsionFree() {
      const { h: b, isTorsionFree: E } = t;
      if (b === Nt)
        return !0;
      if (E)
        return E(d, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: b, clearCofactor: E } = t;
      return b === Nt ? this : E ? E(d, this) : this.multiplyUnsafe(t.h);
    }
    toRawBytes(b = !0) {
      return Zi("isCompressed", b), this.assertValidity(), o(d, this, b);
    }
    toHex(b = !0) {
      return Zi("isCompressed", b), Xi(this.toRawBytes(b));
    }
  }
  d.BASE = new d(t.Gx, t.Gy, r.ONE), d.ZERO = new d(r.ZERO, r.ONE, r.ZERO);
  const m = t.nBitLength, g = DS(d, t.endo ? Math.ceil(m / 2) : m);
  return {
    CURVE: t,
    ProjectivePoint: d,
    normPrivateKeyToScalar: c,
    weierstrassEquation: s,
    isWithinCurveOrder: a
  };
}
function WS(e) {
  const t = fb(e);
  return Pa(t, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...t });
}
function ZS(e) {
  const t = WS(e), { Fp: r, n } = t, o = r.BYTES + 1, i = 2 * r.BYTES + 1;
  function s(K) {
    return Xt(K, n);
  }
  function a(K) {
    return nd(K, n);
  }
  const { ProjectivePoint: c, normPrivateKeyToScalar: u, weierstrassEquation: f, isWithinCurveOrder: l } = GS({
    ...t,
    toBytes(K, N, L) {
      const q = N.toAffine(), ee = r.toBytes(q.x), Y = ta;
      return Zi("isCompressed", L), L ? Y(Uint8Array.from([N.hasEvenY() ? 2 : 3]), ee) : Y(Uint8Array.from([4]), ee, r.toBytes(q.y));
    },
    fromBytes(K) {
      const N = K.length, L = K[0], q = K.subarray(1);
      if (N === o && (L === 2 || L === 3)) {
        const ee = Qo(q);
        if (!Mu(ee, Nt, r.ORDER))
          throw new Error("Point is not on curve");
        const Y = f(ee);
        let ae;
        try {
          ae = r.sqrt(Y);
        } catch (W) {
          const He = W instanceof Error ? ": " + W.message : "";
          throw new Error("Point is not on curve" + He);
        }
        const ie = (ae & Nt) === Nt;
        return (L & 1) === 1 !== ie && (ae = r.neg(ae)), { x: ee, y: ae };
      } else if (N === i && L === 4) {
        const ee = r.fromBytes(q.subarray(0, r.BYTES)), Y = r.fromBytes(q.subarray(r.BYTES, 2 * r.BYTES));
        return { x: ee, y: Y };
      } else
        throw new Error(`Point of length ${N} was invalid. Expected ${o} compressed bytes or ${i} uncompressed bytes`);
    }
  }), d = (K) => Xi(Ji(K, t.nByteLength));
  function m(K) {
    const N = n >> Nt;
    return K > N;
  }
  function g(K) {
    return m(K) ? s(-K) : K;
  }
  const y = (K, N, L) => Qo(K.slice(N, L));
  class b {
    constructor(N, L, q) {
      this.r = N, this.s = L, this.recovery = q, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(N) {
      const L = t.nByteLength;
      return N = Rr("compactSignature", N, L * 2), new b(y(N, 0, L), y(N, L, 2 * L));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(N) {
      const { r: L, s: q } = On.toSig(Rr("DER", N));
      return new b(L, q);
    }
    assertValidity() {
      ei("r", this.r, Nt, n), ei("s", this.s, Nt, n);
    }
    addRecoveryBit(N) {
      return new b(this.r, this.s, N);
    }
    recoverPublicKey(N) {
      const { r: L, s: q, recovery: ee } = this, Y = I(Rr("msgHash", N));
      if (ee == null || ![0, 1, 2, 3].includes(ee))
        throw new Error("recovery id invalid");
      const ae = ee === 2 || ee === 3 ? L + t.n : L;
      if (ae >= r.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const ie = ee & 1 ? "03" : "02", ve = c.fromHex(ie + d(ae)), W = a(ae), He = s(-Y * W), Ge = s(q * W), Le = c.BASE.multiplyAndAddUnsafe(ve, He, Ge);
      if (!Le)
        throw new Error("point at infinify");
      return Le.assertValidity(), Le;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return m(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new b(this.r, s(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return Yi(this.toDERHex());
    }
    toDERHex() {
      return On.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return Yi(this.toCompactHex());
    }
    toCompactHex() {
      return d(this.r) + d(this.s);
    }
  }
  const E = {
    isValidPrivateKey(K) {
      try {
        return u(K), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: u,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const K = lb(t.n);
      return jS(t.randomBytes(K), t.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(K = 8, N = c.BASE) {
      return N._setWindowSize(K), N.multiply(BigInt(3)), N;
    }
  };
  function x(K, N = !0) {
    return c.fromPrivateKey(K).toRawBytes(N);
  }
  function w(K) {
    const N = oi(K), L = typeof K == "string", q = (N || L) && K.length;
    return N ? q === o || q === i : L ? q === 2 * o || q === 2 * i : K instanceof c;
  }
  function k(K, N, L = !0) {
    if (w(K))
      throw new Error("first arg must be private key");
    if (!w(N))
      throw new Error("second arg must be public key");
    return c.fromHex(N).multiply(u(K)).toRawBytes(L);
  }
  const S = t.bits2int || function(K) {
    const N = Qo(K), L = K.length * 8 - t.nBitLength;
    return L > 0 ? N >> BigInt(L) : N;
  }, I = t.bits2int_modN || function(K) {
    return s(S(K));
  }, T = yh(t.nBitLength);
  function B(K) {
    return ei(`num < 2^${t.nBitLength}`, K, Bn, T), Ji(K, t.nByteLength);
  }
  function C(K, N, L = F) {
    if (["recovered", "canonical"].some((gt) => gt in L))
      throw new Error("sign() legacy options not supported");
    const { hash: q, randomBytes: ee } = t;
    let { lowS: Y, prehash: ae, extraEntropy: ie } = L;
    Y == null && (Y = !0), K = Rr("msgHash", K), T0(L), ae && (K = Rr("prehashed msgHash", q(K)));
    const ve = I(K), W = u(N), He = [B(W), B(ve)];
    if (ie != null && ie !== !1) {
      const gt = ie === !0 ? ee(r.BYTES) : ie;
      He.push(Rr("extraEntropy", gt));
    }
    const Ge = ta(...He), Le = ve;
    function Et(gt) {
      const ze = S(gt);
      if (!l(ze))
        return;
      const At = a(ze), zt = c.BASE.multiply(ze).toAffine(), rt = s(zt.x);
      if (rt === Bn)
        return;
      const Fe = s(At * s(Le + rt * W));
      if (Fe === Bn)
        return;
      let xt = (zt.x === rt ? 0 : 2) | Number(zt.y & Nt), Qr = Fe;
      return Y && m(Fe) && (Qr = g(Fe), xt ^= 1), new b(rt, Qr, xt);
    }
    return { seed: Ge, k2sig: Et };
  }
  const F = { lowS: t.lowS, prehash: !1 }, V = { lowS: t.lowS, prehash: !1 };
  function R(K, N, L = F) {
    const { seed: q, k2sig: ee } = C(K, N, L), Y = t;
    return ab(Y.hash.outputLen, Y.nByteLength, Y.hmac)(q, ee);
  }
  c.BASE._setWindowSize(8);
  function G(K, N, L, q = V) {
    var zt;
    const ee = K;
    if (N = Rr("msgHash", N), L = Rr("publicKey", L), "strict" in q)
      throw new Error("options.strict was renamed to lowS");
    T0(q);
    const { lowS: Y, prehash: ae } = q;
    let ie, ve;
    try {
      if (typeof ee == "string" || oi(ee))
        try {
          ie = b.fromDER(ee);
        } catch (rt) {
          if (!(rt instanceof On.Err))
            throw rt;
          ie = b.fromCompact(ee);
        }
      else if (typeof ee == "object" && typeof ee.r == "bigint" && typeof ee.s == "bigint") {
        const { r: rt, s: Fe } = ee;
        ie = new b(rt, Fe);
      } else
        throw new Error("PARSE");
      ve = c.fromHex(L);
    } catch (rt) {
      if (rt.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (Y && ie.hasHighS())
      return !1;
    ae && (N = t.hash(N));
    const { r: W, s: He } = ie, Ge = I(N), Le = a(He), Et = s(Ge * Le), gt = s(W * Le), ze = (zt = c.BASE.multiplyAndAddUnsafe(ve, Et, gt)) == null ? void 0 : zt.toAffine();
    return ze ? s(ze.x) === W : !1;
  }
  return {
    CURVE: t,
    getPublicKey: x,
    getSharedSecret: k,
    sign: R,
    verify: G,
    ProjectivePoint: c,
    Signature: b,
    utils: E
  };
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function XS(e) {
  return {
    hash: e,
    hmac: (t, ...r) => hh(e, t, eE(...r)),
    randomBytes: tE
  };
}
function YS(e, t) {
  const r = (n) => ZS({ ...e, ...XS(n) });
  return Object.freeze({ ...r(t), create: r });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const db = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), P0 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), JS = BigInt(1), od = BigInt(2), O0 = (e, t) => (e + t / od) / t;
function QS(e) {
  const t = db, r = BigInt(3), n = BigInt(6), o = BigInt(11), i = BigInt(22), s = BigInt(23), a = BigInt(44), c = BigInt(88), u = e * e * e % t, f = u * u * e % t, l = _r(f, r, t) * f % t, d = _r(l, r, t) * f % t, m = _r(d, od, t) * u % t, g = _r(m, o, t) * m % t, y = _r(g, i, t) * g % t, b = _r(y, a, t) * y % t, E = _r(b, c, t) * b % t, x = _r(E, a, t) * y % t, w = _r(x, r, t) * f % t, k = _r(w, s, t) * g % t, S = _r(k, n, t) * u % t, I = _r(S, od, t);
  if (!id.eql(id.sqr(I), e))
    throw new Error("Cannot find square root");
  return I;
}
const id = wh(db, void 0, void 0, { sqrt: QS }), ii = YS({
  a: BigInt(0),
  // equation params: a, b
  b: BigInt(7),
  // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
  Fp: id,
  // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
  n: P0,
  // Curve order, total count of valid points in the field
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  // Cofactor
  lowS: !0,
  // Allow only low-S signatures by default in sign() and verify()
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (e) => {
      const t = P0, r = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), n = -JS * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), o = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), i = r, s = BigInt("0x100000000000000000000000000000000"), a = O0(i * e, t), c = O0(-n * e, t);
      let u = Xt(e - a * r - c * o, t), f = Xt(-a * n - c * i, t);
      const l = u > s, d = f > s;
      if (l && (u = t - u), d && (f = t - f), u > s || f > s)
        throw new Error("splitScalar: Endomorphism failed, k=" + e);
      return { k1neg: l, k1: u, k2neg: d, k2: f };
    }
  }
}, Ut);
BigInt(0);
ii.ProjectivePoint;
function eA(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function B0(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function tA(e, t) {
  eA(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const rA = (e) => e instanceof Uint8Array, cf = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), tn = (e, t) => e << 32 - t | e >>> t, nA = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!nA)
  throw new Error("Non little-endian hardware is not supported");
function oA(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
function hb(e) {
  if (typeof e == "string" && (e = oA(e)), !rA(e))
    throw new Error(`expected Uint8Array, got ${typeof e}`);
  return e;
}
let iA = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function sA(e) {
  const t = (n) => e().update(hb(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function aA(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
let cA = class extends iA {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = cf(this.buffer);
  }
  update(t) {
    B0(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = hb(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = cf(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    B0(this), tA(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    aA(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = cf(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
};
const uA = (e, t, r) => e & t ^ ~e & r, lA = (e, t, r) => e & t ^ e & r ^ t & r, fA = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), Yn = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Jn = /* @__PURE__ */ new Uint32Array(64);
let dA = class extends cA {
  constructor() {
    super(64, 32, 8, !1), this.A = Yn[0] | 0, this.B = Yn[1] | 0, this.C = Yn[2] | 0, this.D = Yn[3] | 0, this.E = Yn[4] | 0, this.F = Yn[5] | 0, this.G = Yn[6] | 0, this.H = Yn[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      Jn[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const d = Jn[l - 15], m = Jn[l - 2], g = tn(d, 7) ^ tn(d, 18) ^ d >>> 3, y = tn(m, 17) ^ tn(m, 19) ^ m >>> 10;
      Jn[l] = y + Jn[l - 7] + g + Jn[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const d = tn(a, 6) ^ tn(a, 11) ^ tn(a, 25), m = f + d + uA(a, c, u) + fA[l] + Jn[l] | 0, y = (tn(n, 2) ^ tn(n, 13) ^ tn(n, 22)) + lA(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    Jn.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
const sd = /* @__PURE__ */ sA(() => new dA());
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// @__NO_SIDE_EFFECTS__
function Oa(...e) {
  const t = (o, i) => (s) => o(i(s)), r = Array.from(e).reverse().reduce((o, i) => o ? t(o, i.encode) : i.encode, void 0), n = e.reduce((o, i) => o ? t(o, i.decode) : i.decode, void 0);
  return { encode: r, decode: n };
}
// @__NO_SIDE_EFFECTS__
function Du(e) {
  return {
    encode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return t.map((r) => {
        if (r < 0 || r >= e.length)
          throw new Error(`Digit index outside alphabet: ${r} (alphabet: ${e.length})`);
        return e[r];
      });
    },
    decode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "string")
        throw new Error("alphabet.decode input should be array of strings");
      return t.map((r) => {
        if (typeof r != "string")
          throw new Error(`alphabet.decode: not string element=${r}`);
        const n = e.indexOf(r);
        if (n === -1)
          throw new Error(`Unknown letter: "${r}". Allowed: ${e}`);
        return n;
      });
    }
  };
}
// @__NO_SIDE_EFFECTS__
function Fu(e = "") {
  if (typeof e != "string")
    throw new Error("join separator should be string");
  return {
    encode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "string")
        throw new Error("join.encode input should be array of strings");
      for (let r of t)
        if (typeof r != "string")
          throw new Error(`join.encode: non-string input=${r}`);
      return t.join(e);
    },
    decode: (t) => {
      if (typeof t != "string")
        throw new Error("join.decode input should be string");
      return t.split(e);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function pb(e, t = "=") {
  if (typeof t != "string")
    throw new Error("padding chr should be string");
  return {
    encode(r) {
      if (!Array.isArray(r) || r.length && typeof r[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let n of r)
        if (typeof n != "string")
          throw new Error(`padding.encode: non-string input=${n}`);
      for (; r.length * e % 8; )
        r.push(t);
      return r;
    },
    decode(r) {
      if (!Array.isArray(r) || r.length && typeof r[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let o of r)
        if (typeof o != "string")
          throw new Error(`padding.decode: non-string input=${o}`);
      let n = r.length;
      if (n * e % 8)
        throw new Error("Invalid padding: string should have whole number of bytes");
      for (; n > 0 && r[n - 1] === t; n--)
        if (!((n - 1) * e % 8))
          throw new Error("Invalid padding: string has too much padding");
      return r.slice(0, n);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function N0(e, t, r) {
  if (t < 2)
    throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);
  if (r < 2)
    throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);
  if (!Array.isArray(e))
    throw new Error("convertRadix: data should be array");
  if (!e.length)
    return [];
  let n = 0;
  const o = [], i = Array.from(e);
  for (i.forEach((s) => {
    if (s < 0 || s >= t)
      throw new Error(`Wrong integer: ${s}`);
  }); ; ) {
    let s = 0, a = !0;
    for (let c = n; c < i.length; c++) {
      const u = i[c], f = t * s + u;
      if (!Number.isSafeInteger(f) || t * s / t !== s || f - u !== t * s)
        throw new Error("convertRadix: carry overflow");
      s = f % r;
      const l = Math.floor(f / r);
      if (i[c] = l, !Number.isSafeInteger(l) || l * r + s !== f)
        throw new Error("convertRadix: carry overflow");
      if (a)
        l ? a = !1 : n = c;
      else continue;
    }
    if (o.push(s), a)
      break;
  }
  for (let s = 0; s < e.length - 1 && e[s] === 0; s++)
    o.push(0);
  return o.reverse();
}
const gb = /* @__NO_SIDE_EFFECTS__ */ (e, t) => t ? /* @__PURE__ */ gb(t, e % t) : e, Zc = /* @__NO_SIDE_EFFECTS__ */ (e, t) => e + (t - /* @__PURE__ */ gb(e, t));
// @__NO_SIDE_EFFECTS__
function ad(e, t, r, n) {
  if (!Array.isArray(e))
    throw new Error("convertRadix2: data should be array");
  if (t <= 0 || t > 32)
    throw new Error(`convertRadix2: wrong from=${t}`);
  if (r <= 0 || r > 32)
    throw new Error(`convertRadix2: wrong to=${r}`);
  if (/* @__PURE__ */ Zc(t, r) > 32)
    throw new Error(`convertRadix2: carry overflow from=${t} to=${r} carryBits=${/* @__PURE__ */ Zc(t, r)}`);
  let o = 0, i = 0;
  const s = 2 ** r - 1, a = [];
  for (const c of e) {
    if (c >= 2 ** t)
      throw new Error(`convertRadix2: invalid data word=${c} from=${t}`);
    if (o = o << t | c, i + t > 32)
      throw new Error(`convertRadix2: carry overflow pos=${i} from=${t}`);
    for (i += t; i >= r; i -= r)
      a.push((o >> i - r & s) >>> 0);
    o &= 2 ** i - 1;
  }
  if (o = o << r - i & s, !n && i >= t)
    throw new Error("Excess padding");
  if (!n && o)
    throw new Error(`Non-zero padding: ${o}`);
  return n && i > 0 && a.push(o >>> 0), a;
}
// @__NO_SIDE_EFFECTS__
function hA(e) {
  return {
    encode: (t) => {
      if (!(t instanceof Uint8Array))
        throw new Error("radix.encode input should be Uint8Array");
      return /* @__PURE__ */ N0(Array.from(t), 2 ** 8, e);
    },
    decode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "number")
        throw new Error("radix.decode input should be array of strings");
      return Uint8Array.from(/* @__PURE__ */ N0(t, e, 2 ** 8));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function vh(e, t = !1) {
  if (e <= 0 || e > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (/* @__PURE__ */ Zc(8, e) > 32 || /* @__PURE__ */ Zc(e, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (r) => {
      if (!(r instanceof Uint8Array))
        throw new Error("radix2.encode input should be Uint8Array");
      return /* @__PURE__ */ ad(Array.from(r), 8, e, !t);
    },
    decode: (r) => {
      if (!Array.isArray(r) || r.length && typeof r[0] != "number")
        throw new Error("radix2.decode input should be array of strings");
      return Uint8Array.from(/* @__PURE__ */ ad(r, e, 8, t));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function $0(e) {
  if (typeof e != "function")
    throw new Error("unsafeWrapper fn should be function");
  return function(...t) {
    try {
      return e.apply(null, t);
    } catch {
    }
  };
}
// @__NO_SIDE_EFFECTS__
function pA(e, t) {
  if (typeof t != "function")
    throw new Error("checksum fn should be function");
  return {
    encode(r) {
      if (!(r instanceof Uint8Array))
        throw new Error("checksum.encode: input should be Uint8Array");
      const n = t(r).slice(0, e), o = new Uint8Array(r.length + e);
      return o.set(r), o.set(n, r.length), o;
    },
    decode(r) {
      if (!(r instanceof Uint8Array))
        throw new Error("checksum.decode: input should be Uint8Array");
      const n = r.slice(0, -e), o = t(n).slice(0, e), i = r.slice(-e);
      for (let s = 0; s < e; s++)
        if (o[s] !== i[s])
          throw new Error("Invalid checksum");
      return n;
    }
  };
}
const U0 = /* @__PURE__ */ Oa(/* @__PURE__ */ vh(6), /* @__PURE__ */ Du("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ pb(6), /* @__PURE__ */ Fu("")), R0 = /* @__PURE__ */ Oa(/* @__PURE__ */ vh(6), /* @__PURE__ */ Du("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ pb(6), /* @__PURE__ */ Fu("")), gA = (e) => /* @__PURE__ */ Oa(/* @__PURE__ */ hA(58), /* @__PURE__ */ Du(e), /* @__PURE__ */ Fu("")), mA = /* @__PURE__ */ gA("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"), C0 = (e) => /* @__PURE__ */ Oa(/* @__PURE__ */ pA(4, (t) => e(e(t))), mA), cd = /* @__PURE__ */ Oa(/* @__PURE__ */ Du("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), /* @__PURE__ */ Fu("")), H0 = [996825010, 642813549, 513874426, 1027748829, 705979059];
// @__NO_SIDE_EFFECTS__
function Os(e) {
  const t = e >> 25;
  let r = (e & 33554431) << 5;
  for (let n = 0; n < H0.length; n++)
    (t >> n & 1) === 1 && (r ^= H0[n]);
  return r;
}
// @__NO_SIDE_EFFECTS__
function L0(e, t, r = 1) {
  const n = e.length;
  let o = 1;
  for (let i = 0; i < n; i++) {
    const s = e.charCodeAt(i);
    if (s < 33 || s > 126)
      throw new Error(`Invalid prefix (${e})`);
    o = /* @__PURE__ */ Os(o) ^ s >> 5;
  }
  o = /* @__PURE__ */ Os(o);
  for (let i = 0; i < n; i++)
    o = /* @__PURE__ */ Os(o) ^ e.charCodeAt(i) & 31;
  for (let i of t)
    o = /* @__PURE__ */ Os(o) ^ i;
  for (let i = 0; i < 6; i++)
    o = /* @__PURE__ */ Os(o);
  return o ^= r, cd.encode(/* @__PURE__ */ ad([o % 2 ** 30], 30, 5, !1));
}
// @__NO_SIDE_EFFECTS__
function mb(e) {
  const t = e === "bech32" ? 1 : 734539939, r = /* @__PURE__ */ vh(5), n = r.decode, o = r.encode, i = /* @__PURE__ */ $0(n);
  function s(f, l, d = 90) {
    if (typeof f != "string")
      throw new Error(`bech32.encode prefix should be string, not ${typeof f}`);
    if (!Array.isArray(l) || l.length && typeof l[0] != "number")
      throw new Error(`bech32.encode words should be array of numbers, not ${typeof l}`);
    const m = f.length + 7 + l.length;
    if (d !== !1 && m > d)
      throw new TypeError(`Length ${m} exceeds limit ${d}`);
    const g = f.toLowerCase(), y = /* @__PURE__ */ L0(g, l, t);
    return `${g}1${cd.encode(l)}${y}`;
  }
  function a(f, l = 90) {
    if (typeof f != "string")
      throw new Error(`bech32.decode input should be string, not ${typeof f}`);
    if (f.length < 8 || l !== !1 && f.length > l)
      throw new TypeError(`Wrong string length: ${f.length} (${f}). Expected (8..${l})`);
    const d = f.toLowerCase();
    if (f !== d && f !== f.toUpperCase())
      throw new Error("String must be lowercase or uppercase");
    f = d;
    const m = f.lastIndexOf("1");
    if (m === 0 || m === -1)
      throw new Error('Letter "1" must be present between prefix and data only');
    const g = f.slice(0, m), y = f.slice(m + 1);
    if (y.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const b = cd.decode(y).slice(0, -6), E = /* @__PURE__ */ L0(g, b, t);
    if (!y.endsWith(E))
      throw new Error(`Invalid checksum in ${f}: expected "${E}"`);
    return { prefix: g, words: b };
  }
  const c = /* @__PURE__ */ $0(a);
  function u(f) {
    const { prefix: l, words: d } = a(f, !1);
    return { prefix: l, words: d, bytes: n(d) };
  }
  return { encode: s, decode: a, decodeToBytes: u, decodeUnsafe: c, fromWords: n, fromWordsUnsafe: i, toWords: o };
}
const uc = /* @__PURE__ */ mb("bech32"), lc = /* @__PURE__ */ mb("bech32m"), ln = {
  b58chk: {
    encode: (e) => C0(sd).encode(e),
    decode: (e) => C0(sd).decode(e)
  },
  base64: {
    encode: (e) => U0.encode(e),
    decode: (e) => U0.decode(e)
  },
  b64url: {
    encode: (e) => R0.encode(e),
    decode: (e) => R0.decode(e)
  },
  bech32: {
    to_words: uc.toWords,
    to_bytes: uc.fromWords,
    encode: (e, t, r = !1) => uc.encode(e, t, r),
    decode: (e, t = !1) => {
      const { prefix: r, words: n } = uc.decode(e, t);
      return { prefix: r, words: n };
    }
  },
  bech32m: {
    to_words: lc.toWords,
    to_bytes: lc.fromWords,
    encode: (e, t, r = !1) => lc.encode(e, t, r),
    decode: (e, t = !1) => {
      const { prefix: r, words: n } = lc.decode(e, t);
      return { prefix: r, words: n };
    }
  }
};
function bA(e, t) {
  if (e.length > t)
    throw new TypeError(`Data is larger than array size: ${e.length} > ${t}`);
}
function yA(e) {
  if (e.match(/[^a-fA-f0-9]/) !== null)
    throw new TypeError("Invalid characters in hex string: " + e);
  if (e.length % 2 !== 0)
    throw new Error(`Length of hex string is invalid: ${e.length}`);
}
function wA(e) {
  if (e > Number.MAX_SAFE_INTEGER)
    throw new TypeError("Number exceeds safe bounds!");
}
function bb(e, t) {
  if (e !== t)
    throw new TypeError(`Bech32 prefix does not match: ${e} !== ${t}`);
}
const vA = BigInt(0), EA = BigInt(255), yb = BigInt(256);
function xA(e) {
  if (e <= 0xffn)
    return 1;
  if (e <= 0xffffn)
    return 2;
  if (e <= 0xffffffffn)
    return 4;
  if (e <= 0xffffffffffffffffn)
    return 8;
  if (e <= 0xffffffffffffffffffffffffffffffffn)
    return 16;
  if (e <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn)
    return 32;
  throw new TypeError("Must specify a fixed buffer size for bigints greater than 32 bytes.");
}
function _A(e, t, r = "be") {
  t === void 0 && (t = xA(e));
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (; e > vA; ) {
    const a = e & EA, c = Number(a);
    n ? i.setUint8(s++, c) : i.setUint8(s--, c), e = (e - a) / yb;
  }
  return new Uint8Array(o);
}
function SA(e) {
  let t = BigInt(0);
  for (let r = e.length - 1; r >= 0; r--)
    t = t * yb + BigInt(e[r]);
  return BigInt(t);
}
function AA(e) {
  const t = e.split("").map(Number);
  if (t.length % 8 !== 0)
    throw new Error(`Binary array is invalid length: ${e.length}`);
  const r = new Uint8Array(t.length / 8);
  for (let n = 0, o = 0; n < t.length; n += 8, o++) {
    let i = 0;
    for (let s = 0; s < 8; s++)
      i |= t[n + s] << 7 - s;
    r[o] = i;
  }
  return r;
}
function kA(e) {
  const t = new Array(e.length * 8);
  let r = 0;
  for (const n of e) {
    if (n > 255)
      throw new Error(`Invalid byte value: ${n}. Byte values must be between 0 and 255.`);
    for (let o = 7; o >= 0; o--, r++)
      t[r] = n >> o & 1;
  }
  return t.join("");
}
function TA(e) {
  if (e <= 255)
    return 1;
  if (e <= 65535)
    return 2;
  if (e <= 4294967295)
    return 4;
  throw new TypeError("Numbers larger than 4 bytes must specify a fixed size!");
}
function IA(e, t, r = "be") {
  t === void 0 && (t = TA(e));
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (; e > 0; ) {
    const a = e & 255;
    n ? i.setUint8(s++, e) : i.setUint8(s--, e), e = (e - a) / 256;
  }
  return new Uint8Array(o);
}
function PA(e) {
  let t = 0;
  for (let r = e.length - 1; r >= 0; r--)
    t = t * 256 + e[r], wA(t);
  return t;
}
const OA = new TextEncoder(), BA = new TextDecoder();
function Eh(e) {
  return OA.encode(e);
}
function uf(e) {
  return BA.decode(e);
}
function NA(e, t) {
  yA(e);
  const r = e.length / 2;
  if (t === void 0 && (t = r), r > t)
    throw new TypeError(`Hex string is larger than array size: ${r} > ${t}`);
  return t;
}
function $A(e, t, r = "le") {
  t = NA(e, t);
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (let a = 0; a < e.length; a += 2) {
    const c = e.substring(a, a + 2), u = parseInt(c, 16);
    n ? i.setUint8(s++, u) : i.setUint8(s--, u);
  }
  return new Uint8Array(o);
}
function UA(e) {
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += e[r].toString(16).padStart(2, "0");
  return t;
}
const { getRandomValues: RA } = crypto ?? globalThis.crypto ?? window.crypto;
function CA(e = 32) {
  if (typeof RA == "function")
    return crypto.getRandomValues(new Uint8Array(e));
  throw new Error("Crypto module missing getRandomValues!");
}
function wb(e) {
  return e.match(/[^a-fA-f0-9]/) === null && e.length % 2 === 0;
}
function HA(e) {
  return typeof e == "string" && wb(e) || typeof e == "number" || typeof e == "bigint" || e instanceof Uint8Array ? !0 : !!(Array.isArray(e) && e.every((t) => typeof t == "number"));
}
function LA(e, t, r = "be") {
  t === void 0 && (t = e.length), bA(e, t);
  const n = new Uint8Array(t).fill(0), o = r === "be" ? 0 : t - e.length;
  return n.set(e, o), n;
}
function vb(e) {
  let t, r = 0;
  const n = e.reduce((i, s) => i + s.length, 0), o = new Uint8Array(n);
  for (t = 0; t < e.length; t++) {
    const i = e[t];
    o.set(i, r), r += i.length;
  }
  return o;
}
function zA(e, t) {
  return typeof t == "bigint" ? `${t}n` : t;
}
function jA(e, t) {
  return typeof t == "string" && /n$/.test(t) ? BigInt(t.slice(0, -1)) : t;
}
function MA(e, t, r) {
  const n = e.length, o = r / t;
  if (r % t !== 0)
    throw new TypeError(`Invalid parameters: ${r} % ${t} !== 0`);
  if (n !== r)
    throw new TypeError(`Invalid data stream: ${n} !== ${r}`);
  if (n % t !== 0)
    throw new TypeError(`Invalid data stream: ${n} % ${t} !== 0`);
  const i = new Array(o);
  for (let s = 0; s < o; s++) {
    const a = s * t;
    i[s] = e.subarray(a, a + t);
  }
  return i;
}
function xh(e, t, r) {
  if (e instanceof ArrayBuffer)
    return new Uint8Array(e);
  if (e instanceof Uint8Array)
    return LA(e, t, r);
  if (Array.isArray(e)) {
    const n = e.map((o) => xh(o, t, r));
    return vb(n);
  } else {
    if (typeof e == "string")
      return $A(e, t, r);
    if (typeof e == "bigint")
      return _A(e, t, r);
    if (typeof e == "number")
      return IA(e, t, r);
    if (typeof e == "boolean")
      return Uint8Array.of(e ? 1 : 0);
  }
  throw new TypeError("Unsupported format:" + typeof e);
}
var ge;
let Xe = (ge = class extends Uint8Array {
  static random(t = 32) {
    const r = CA(t);
    return new ge(r, t);
  }
  static now(t = 4) {
    const r = Math.floor(Date.now() / 1e3);
    return new ge(r, t);
  }
  constructor(t, r, n) {
    if (t instanceof ge && r === void 0)
      return t;
    const o = xh(t, r, n);
    super(o);
  }
  get arr() {
    return [...this];
  }
  get num() {
    return this.to_num();
  }
  get big() {
    return this.to_big();
  }
  get str() {
    return this.to_str();
  }
  get hex() {
    return this.to_hex();
  }
  get raw() {
    return new Uint8Array(this);
  }
  get bin() {
    return this.to_bin();
  }
  get b58chk() {
    return this.to_b58chk();
  }
  get base64() {
    return this.to_base64();
  }
  get b64url() {
    return this.to_b64url();
  }
  get digest() {
    return this.to_hash();
  }
  get id() {
    return this.to_hash().hex;
  }
  get stream() {
    return new t8(this);
  }
  to_num(t = "be") {
    const r = t === "be" ? this.reverse() : this;
    return PA(r);
  }
  to_big(t = "be") {
    const r = t === "be" ? this.reverse() : this;
    return SA(r);
  }
  to_bin() {
    return kA(this);
  }
  to_hash() {
    const t = sd(this);
    return new ge(t);
  }
  to_json(t) {
    t === void 0 && (t = jA);
    const r = uf(this);
    return JSON.parse(r, t);
  }
  to_bech32(t, r) {
    const { encode: n, to_words: o } = ln.bech32, i = o(this);
    return n(t, i, r);
  }
  to_bech32m(t, r) {
    const { encode: n, to_words: o } = ln.bech32m, i = o(this);
    return n(t, i, r);
  }
  to_str() {
    return uf(this);
  }
  to_hex() {
    return UA(this);
  }
  to_bytes() {
    return new Uint8Array(this);
  }
  to_b58chk() {
    return ln.b58chk.encode(this);
  }
  to_base64() {
    return ln.base64.encode(this);
  }
  to_b64url() {
    return ln.b64url.encode(this);
  }
  append(t) {
    return ge.join([this, ge.bytes(t)]);
  }
  prepend(t) {
    return ge.join([ge.bytes(t), this]);
  }
  reverse() {
    const t = new Uint8Array(this).reverse();
    return new ge(t);
  }
  slice(t, r) {
    const n = new Uint8Array(this).slice(t, r);
    return new ge(n);
  }
  set(t, r) {
    this.set(t, r);
  }
  subarray(t, r) {
    const n = new Uint8Array(this).subarray(t, r);
    return new ge(n);
  }
  write(t, r) {
    const n = ge.bytes(t);
    this.set(n, r);
  }
  add_varint(t) {
    const r = ge.calc_varint(this.length, t);
    return ge.join([r, this]);
  }
  static from(t) {
    return new ge(Uint8Array.from(t));
  }
  static of(...t) {
    return new ge(Uint8Array.of(...t));
  }
  static join(t) {
    const r = t.map((o) => ge.bytes(o)), n = vb(r);
    return new ge(n);
  }
  static sort(t, r) {
    const n = t.map((o) => z0(o, r).hex);
    return n.sort(), n.map((o) => ge.hex(o, r));
  }
  static calc_varint(t, r) {
    if (t < 253)
      return ge.num(t, 1);
    if (t < 65536)
      return ge.of(253, ...ge.num(t, 2, r));
    if (t < 4294967296)
      return ge.of(254, ...ge.num(t, 4, r));
    if (BigInt(t) < 0x10000000000000000n)
      return ge.of(255, ...ge.num(t, 8, r));
    throw new Error(`Value is too large: ${t}`);
  }
}, ge.num = DA, ge.big = KA, ge.bin = FA, ge.raw = VA, ge.str = qA, ge.hex = GA, ge.bytes = z0, ge.json = WA, ge.base64 = ZA, ge.b64url = XA, ge.bech32 = YA, ge.bech32m = JA, ge.b58chk = QA, ge.encode = Eh, ge.decode = uf, ge.parse = e8, ge.is_bytes = HA, ge.is_hex = wb, ge);
function DA(e, t, r) {
  return new Xe(e, t, r);
}
function FA(e, t, r) {
  return new Xe(AA(e), t, r);
}
function KA(e, t, r) {
  return new Xe(e, t, r);
}
function VA(e, t, r) {
  return new Xe(e, t, r);
}
function qA(e, t, r) {
  return new Xe(Eh(e), t, r);
}
function GA(e, t, r) {
  return new Xe(e, t, r);
}
function WA(e, t) {
  t === void 0 && (t = zA);
  const r = JSON.stringify(e, t);
  return new Xe(Eh(r));
}
function ZA(e) {
  return new Xe(ln.base64.decode(e));
}
function XA(e) {
  return new Xe(ln.b64url.decode(e));
}
function YA(e, t, r) {
  const { decode: n, to_bytes: o } = ln.bech32, { prefix: i, words: s } = n(e, t), a = o(s);
  return typeof r == "string" && bb(i, r), new Xe(a);
}
function JA(e, t, r) {
  const { decode: n, to_bytes: o } = ln.bech32m, { prefix: i, words: s } = n(e, t), a = o(s);
  return typeof r == "string" && bb(i, r), new Xe(a);
}
function QA(e) {
  return new Xe(ln.b58chk.decode(e));
}
function e8(e, t, r) {
  const n = xh(e);
  return MA(n, t, r).map((i) => Xe.bytes(i));
}
let t8 = class {
  constructor(t) {
    this.data = Xe.bytes(t), this.size = this.data.length;
  }
  peek(t) {
    if (t > this.size)
      throw new Error(`Size greater than stream: ${t} > ${this.size}`);
    return new Xe(this.data.slice(0, t));
  }
  read(t) {
    const r = this.peek(t);
    return this.data = this.data.slice(t), this.size = this.data.length, r;
  }
  read_varint(t) {
    const r = this.read(1).num;
    switch (!0) {
      case (r >= 0 && r < 253):
        return r;
      case r === 253:
        return this.read(2).to_num(t);
      case r === 254:
        return this.read(4).to_num(t);
      case r === 255:
        return this.read(8).to_num(t);
      default:
        throw new Error(`Varint is out of range: ${r}`);
    }
  }
};
function z0(e, t, r) {
  return new Xe(e, t, r);
}
const Xc = ii.CURVE, Ku = Xc.n, r8 = Xc.p, j0 = { x: Xc.Gx, y: Xc.Gy }, n8 = BigInt(0);
BigInt(1);
BigInt(2);
BigInt(3);
BigInt(4);
const o8 = (e) => Xt(e, Ku);
function Eb(e, t = !1) {
  if (!t)
    return !1;
  throw new Error(e);
}
function i8(e, t, r) {
  const n = Xe.bytes(e);
  return n.length !== t ? Eb(`Invalid byte size: ${n.hex} !== ${t}`, r) : !0;
}
function s8(e, t) {
  return typeof e == "bigint" && n8 < e && e < Ku || Eb("x value is not in the field!", t), !0;
}
const a8 = wh(Ku, 32, !0), M0 = ii.ProjectivePoint, Bs = a8;
var Je;
let Qi = (Je = class extends Uint8Array {
  static add(t) {
    return t.map((r) => Je.mod(r)).reduce((r, n) => r.add(n));
  }
  static mod(t) {
    return new Je(t);
  }
  static mul(t) {
    return t.map((r) => Je.mod(r)).reduce((r, n) => r.mul(n));
  }
  static is_valid(t, r) {
    const n = Xe.bytes(t, 32).big;
    return s8(n, r);
  }
  constructor(t) {
    const r = o8(c8(t));
    Je.is_valid(r, !0), super(Xe.big(r, 32), 32);
  }
  get buff() {
    return new Xe(this);
  }
  get raw() {
    return this.buff.raw;
  }
  get big() {
    return this.buff.big;
  }
  get hex() {
    return this.buff.hex;
  }
  get point() {
    return this.generate();
  }
  get hasOddY() {
    return this.point.hasOddY;
  }
  get negated() {
    return this.hasOddY ? this.negate() : this;
  }
  gt(t) {
    return new Je(t).big > this.big;
  }
  lt(t) {
    return new Je(t).big < this.big;
  }
  eq(t) {
    return new Je(t).big === this.big;
  }
  ne(t) {
    return new Je(t).big !== this.big;
  }
  add(t) {
    const r = Je.mod(t), n = Bs.add(this.big, r.big);
    return new Je(n);
  }
  sub(t) {
    const r = Je.mod(t), n = Bs.sub(this.big, r.big);
    return new Je(n);
  }
  mul(t) {
    const r = Je.mod(t), n = Bs.mul(this.big, r.big);
    return new Je(n);
  }
  pow(t) {
    const r = Je.mod(t), n = Bs.pow(this.big, r.big);
    return new Je(n);
  }
  div(t) {
    const r = Je.mod(t), n = Bs.div(this.big, r.big);
    return new Je(n);
  }
  negate() {
    return new Je(Je.N - this.big);
  }
  generate() {
    const r = ii.ProjectivePoint.BASE.multiply(this.big);
    return _h.import(r);
  }
}, Je.N = Ku, Je);
var Ve;
let _h = (Ve = class {
  static from_x(t, r = !1) {
    let n = u8(t);
    n.length === 32 ? n = n.prepend(2) : r && (n[0] = 2), i8(n, 33);
    const o = M0.fromHex(n.hex);
    return o.assertValidity(), new Ve(o.x, o.y);
  }
  static generate(t) {
    const r = Qi.mod(t), n = Ve.base.multiply(r.big);
    return Ve.import(n);
  }
  static import(t) {
    const r = t instanceof Ve ? { x: t.x.big, y: t.y.big } : { x: t.x, y: t.y };
    return new Ve(r.x, r.y);
  }
  constructor(t, r) {
    this._p = new M0(t, r, 1n), this.p.assertValidity();
  }
  get p() {
    return this._p;
  }
  get x() {
    return Xe.big(this.p.x, 32);
  }
  get y() {
    return Xe.big(this.p.y, 32);
  }
  get buff() {
    return Xe.raw(this.p.toRawBytes(!0));
  }
  get raw() {
    return this.buff.raw;
  }
  get hex() {
    return this.buff.hex;
  }
  get hasEvenY() {
    return this.p.hasEvenY();
  }
  get hasOddY() {
    return !this.p.hasEvenY();
  }
  get negated() {
    return this.hasOddY ? this.negate() : this;
  }
  eq(t) {
    const r = t instanceof Ve ? t : Ve.from_x(t);
    return this.x.big === r.x.big && this.y.big === r.y.big;
  }
  add(t) {
    return t instanceof Ve ? Ve.import(this.p.add(t.p)) : Ve.import(this.p.add(Ve.generate(t).p));
  }
  sub(t) {
    return t instanceof Ve ? Ve.import(this.p.subtract(t.p)) : Ve.import(this.p.subtract(Ve.generate(t).p));
  }
  mul(t) {
    return t instanceof Ve ? Ve.import(this.p.multiply(t.x.big)) : Ve.import(this.p.multiply(Qi.mod(t).big));
  }
  negate() {
    return Ve.import(this.p.negate());
  }
}, Ve.P = r8, Ve.G = new Ve(j0.x, j0.y), Ve.curve = ii.CURVE, Ve.base = ii.ProjectivePoint.BASE, Ve.mul = Ve.generate, Ve);
function c8(e) {
  if (e instanceof Qi)
    return e.big;
  if (e instanceof _h)
    return e.x.big;
  if (e instanceof Uint8Array)
    return Xe.raw(e).big;
  if (typeof e == "string")
    return Xe.hex(e).big;
  if (typeof e == "number")
    return Xe.num(e).big;
  if (typeof e == "bigint")
    return BigInt(e);
  throw TypeError("Invalid input type:" + typeof e);
}
function u8(e) {
  if (e instanceof Qi)
    return e.point.buff;
  if (e instanceof _h)
    return e.buff;
  if (e instanceof Uint8Array || typeof e == "string")
    return Xe.bytes(e);
  if (typeof e == "number" || typeof e == "bigint")
    return Xe.bytes(e, 32);
  throw new TypeError(`Unknown type: ${typeof e}`);
}
const fc = /* @__PURE__ */ BigInt(2 ** 32 - 1), ud = /* @__PURE__ */ BigInt(32);
function xb(e, t = !1) {
  return t ? { h: Number(e & fc), l: Number(e >> ud & fc) } : { h: Number(e >> ud & fc) | 0, l: Number(e & fc) | 0 };
}
function l8(e, t = !1) {
  let r = new Uint32Array(e.length), n = new Uint32Array(e.length);
  for (let o = 0; o < e.length; o++) {
    const { h: i, l: s } = xb(e[o], t);
    [r[o], n[o]] = [i, s];
  }
  return [r, n];
}
const f8 = (e, t) => BigInt(e >>> 0) << ud | BigInt(t >>> 0), d8 = (e, t, r) => e >>> r, h8 = (e, t, r) => e << 32 - r | t >>> r, p8 = (e, t, r) => e >>> r | t << 32 - r, g8 = (e, t, r) => e << 32 - r | t >>> r, m8 = (e, t, r) => e << 64 - r | t >>> r - 32, b8 = (e, t, r) => e >>> r - 32 | t << 64 - r, y8 = (e, t) => t, w8 = (e, t) => e, v8 = (e, t, r) => e << r | t >>> 32 - r, E8 = (e, t, r) => t << r | e >>> 32 - r, x8 = (e, t, r) => t << r - 32 | e >>> 64 - r, _8 = (e, t, r) => e << r - 32 | t >>> 64 - r;
function S8(e, t, r, n) {
  const o = (t >>> 0) + (n >>> 0);
  return { h: e + r + (o / 2 ** 32 | 0) | 0, l: o | 0 };
}
const A8 = (e, t, r) => (e >>> 0) + (t >>> 0) + (r >>> 0), k8 = (e, t, r, n) => t + r + n + (e / 2 ** 32 | 0) | 0, T8 = (e, t, r, n) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0), I8 = (e, t, r, n, o) => t + r + n + o + (e / 2 ** 32 | 0) | 0, P8 = (e, t, r, n, o) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0) + (o >>> 0), O8 = (e, t, r, n, o, i) => t + r + n + o + i + (e / 2 ** 32 | 0) | 0, Pe = {
  fromBig: xb,
  split: l8,
  toBig: f8,
  shrSH: d8,
  shrSL: h8,
  rotrSH: p8,
  rotrSL: g8,
  rotrBH: m8,
  rotrBL: b8,
  rotr32H: y8,
  rotr32L: w8,
  rotlSH: v8,
  rotlSL: E8,
  rotlBH: x8,
  rotlBL: _8,
  add: S8,
  add3L: A8,
  add3H: k8,
  add4L: T8,
  add4H: I8,
  add5H: O8,
  add5L: P8
}, [B8, N8] = Pe.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((e) => BigInt(e))), Qn = /* @__PURE__ */ new Uint32Array(80), eo = /* @__PURE__ */ new Uint32Array(80);
let $8 = class extends th {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: t, Al: r, Bh: n, Bl: o, Ch: i, Cl: s, Dh: a, Dl: c, Eh: u, El: f, Fh: l, Fl: d, Gh: m, Gl: g, Hh: y, Hl: b } = this;
    return [t, r, n, o, i, s, a, c, u, f, l, d, m, g, y, b];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c, u, f, l, d, m, g, y, b) {
    this.Ah = t | 0, this.Al = r | 0, this.Bh = n | 0, this.Bl = o | 0, this.Ch = i | 0, this.Cl = s | 0, this.Dh = a | 0, this.Dl = c | 0, this.Eh = u | 0, this.El = f | 0, this.Fh = l | 0, this.Fl = d | 0, this.Gh = m | 0, this.Gl = g | 0, this.Hh = y | 0, this.Hl = b | 0;
  }
  process(t, r) {
    for (let w = 0; w < 16; w++, r += 4)
      Qn[w] = t.getUint32(r), eo[w] = t.getUint32(r += 4);
    for (let w = 16; w < 80; w++) {
      const k = Qn[w - 15] | 0, S = eo[w - 15] | 0, I = Pe.rotrSH(k, S, 1) ^ Pe.rotrSH(k, S, 8) ^ Pe.shrSH(k, S, 7), T = Pe.rotrSL(k, S, 1) ^ Pe.rotrSL(k, S, 8) ^ Pe.shrSL(k, S, 7), B = Qn[w - 2] | 0, C = eo[w - 2] | 0, F = Pe.rotrSH(B, C, 19) ^ Pe.rotrBH(B, C, 61) ^ Pe.shrSH(B, C, 6), V = Pe.rotrSL(B, C, 19) ^ Pe.rotrBL(B, C, 61) ^ Pe.shrSL(B, C, 6), R = Pe.add4L(T, V, eo[w - 7], eo[w - 16]), G = Pe.add4H(R, I, F, Qn[w - 7], Qn[w - 16]);
      Qn[w] = G | 0, eo[w] = R | 0;
    }
    let { Ah: n, Al: o, Bh: i, Bl: s, Ch: a, Cl: c, Dh: u, Dl: f, Eh: l, El: d, Fh: m, Fl: g, Gh: y, Gl: b, Hh: E, Hl: x } = this;
    for (let w = 0; w < 80; w++) {
      const k = Pe.rotrSH(l, d, 14) ^ Pe.rotrSH(l, d, 18) ^ Pe.rotrBH(l, d, 41), S = Pe.rotrSL(l, d, 14) ^ Pe.rotrSL(l, d, 18) ^ Pe.rotrBL(l, d, 41), I = l & m ^ ~l & y, T = d & g ^ ~d & b, B = Pe.add5L(x, S, T, N8[w], eo[w]), C = Pe.add5H(B, E, k, I, B8[w], Qn[w]), F = B | 0, V = Pe.rotrSH(n, o, 28) ^ Pe.rotrBH(n, o, 34) ^ Pe.rotrBH(n, o, 39), R = Pe.rotrSL(n, o, 28) ^ Pe.rotrBL(n, o, 34) ^ Pe.rotrBL(n, o, 39), G = n & i ^ n & a ^ i & a, K = o & s ^ o & c ^ s & c;
      E = y | 0, x = b | 0, y = m | 0, b = g | 0, m = l | 0, g = d | 0, { h: l, l: d } = Pe.add(u | 0, f | 0, C | 0, F | 0), u = a | 0, f = c | 0, a = i | 0, c = s | 0, i = n | 0, s = o | 0;
      const N = Pe.add3L(F, R, K);
      n = Pe.add3H(N, C, V, G), o = N | 0;
    }
    ({ h: n, l: o } = Pe.add(this.Ah | 0, this.Al | 0, n | 0, o | 0)), { h: i, l: s } = Pe.add(this.Bh | 0, this.Bl | 0, i | 0, s | 0), { h: a, l: c } = Pe.add(this.Ch | 0, this.Cl | 0, a | 0, c | 0), { h: u, l: f } = Pe.add(this.Dh | 0, this.Dl | 0, u | 0, f | 0), { h: l, l: d } = Pe.add(this.Eh | 0, this.El | 0, l | 0, d | 0), { h: m, l: g } = Pe.add(this.Fh | 0, this.Fl | 0, m | 0, g | 0), { h: y, l: b } = Pe.add(this.Gh | 0, this.Gl | 0, y | 0, b | 0), { h: E, l: x } = Pe.add(this.Hh | 0, this.Hl | 0, E | 0, x | 0), this.set(n, o, i, s, a, c, u, f, l, d, m, g, y, b, E, x);
  }
  roundClean() {
    Qn.fill(0), eo.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
const U8 = /* @__PURE__ */ eh(() => new $8());
function R8(e, t = !1) {
  const r = Qi.mod(e);
  return t ? r.negated.buff : r.buff;
}
function _b(e, t = !1) {
  const r = Qi.mod(e).point;
  return t ? r.x : r.buff;
}
ii.ProjectivePoint;
function ld(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
function C8(e) {
  if (typeof e != "boolean")
    throw new Error(`Expected boolean, not ${e}`);
}
function Sb(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new TypeError("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function H8(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  ld(e.outputLen), ld(e.blockLen);
}
function L8(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function z8(e, t) {
  Sb(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const j8 = {
  number: ld,
  bool: C8,
  bytes: Sb,
  hash: H8,
  exists: L8,
  output: z8
};
var lf = j8;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const ff = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), rn = (e, t) => e << 32 - t | e >>> t, M8 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!M8)
  throw new Error("Non little-endian hardware is not supported");
Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function D8(e) {
  if (typeof e != "string")
    throw new TypeError(`utf8ToBytes expected string, got ${typeof e}`);
  return new TextEncoder().encode(e);
}
function Ab(e) {
  if (typeof e == "string" && (e = D8(e)), !(e instanceof Uint8Array))
    throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);
  return e;
}
let F8 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function kb(e) {
  const t = (n) => e().update(Ab(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function K8(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
let V8 = class extends F8 {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = ff(this.buffer);
  }
  update(t) {
    lf.exists(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = Ab(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = ff(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    lf.exists(this), lf.output(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    K8(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = ff(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
};
const q8 = (e, t, r) => e & t ^ ~e & r, G8 = (e, t, r) => e & t ^ e & r ^ t & r, W8 = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), to = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), ro = new Uint32Array(64);
let Tb = class extends V8 {
  constructor() {
    super(64, 32, 8, !1), this.A = to[0] | 0, this.B = to[1] | 0, this.C = to[2] | 0, this.D = to[3] | 0, this.E = to[4] | 0, this.F = to[5] | 0, this.G = to[6] | 0, this.H = to[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      ro[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const d = ro[l - 15], m = ro[l - 2], g = rn(d, 7) ^ rn(d, 18) ^ d >>> 3, y = rn(m, 17) ^ rn(m, 19) ^ m >>> 10;
      ro[l] = y + ro[l - 7] + g + ro[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const d = rn(a, 6) ^ rn(a, 11) ^ rn(a, 25), m = f + d + q8(a, c, u) + W8[l] + ro[l] | 0, y = (rn(n, 2) ^ rn(n, 13) ^ rn(n, 22)) + G8(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    ro.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}, Z8 = class extends Tb {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
};
const fd = kb(() => new Tb());
kb(() => new Z8());
function X8(e, t) {
  if (e.length > t)
    throw new TypeError(`Data is larger than array size: ${e.length} > ${t}`);
}
function Y8(e) {
  if (e.match(/[^a-fA-f0-9]/) !== null)
    throw new TypeError("Invalid characters in hex string: " + e);
  if (e.length % 2 !== 0)
    throw new Error(`Length of hex string is invalid: ${e.length}`);
}
function J8(e) {
  if (e > Number.MAX_SAFE_INTEGER)
    throw new TypeError("Number exceeds safe bounds!");
}
const { getRandomValues: Q8 } = crypto ?? globalThis.crypto ?? window.crypto;
function ek(e = 32) {
  if (typeof Q8 == "function")
    return crypto.getRandomValues(new Uint8Array(e));
  throw new Error("Crypto module missing getRandomValues!");
}
function tk(e, t, r = "be") {
  t === void 0 && (t = e.length), X8(e, t);
  const n = new Uint8Array(t).fill(0), o = r === "be" ? 0 : t - e.length;
  return n.set(e, o), n;
}
function Ib(e) {
  let t, r = 0;
  const n = e.reduce((i, s) => i + s.length, 0), o = new Uint8Array(n);
  for (t = 0; t < e.length; t++) {
    const i = e[t];
    o.set(i, r), r += i.length;
  }
  return o;
}
const rk = new TextEncoder(), nk = [
  {
    name: "base58",
    charset: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
  }
];
function Pb(e) {
  for (const t of nk)
    if (t.name === e)
      return t.charset;
  throw TypeError("Charset does not exist: " + e);
}
function ok(e, t, r = !1) {
  typeof e == "string" && (e = rk.encode(e));
  const n = Pb(t), o = n.length, i = [];
  let s = "", a, c = 0, u, f;
  for (a = 0; a < e.length; a++)
    for (c = 0, u = e[a], s += u > 0 || (s.length ^ a) > 0 ? "" : "1"; c in i || u > 0; )
      f = i[c], f = f > 0 ? f * 256 + u : u, u = f / o | 0, i[c] = f % o, c++;
  for (; c-- > 0; )
    s += n[i[c]];
  return r && s.length % 4 > 0 ? s + "=".repeat(4 - s.length % 4) : s;
}
function ik(e, t) {
  const r = Pb(t), n = r.length, o = [], i = [];
  e = e.replace("=", "");
  let s, a = 0, c, u;
  for (s = 0; s < e.length; s++) {
    if (a = 0, c = r.indexOf(e[s]), c < 0)
      throw new Error(`Character range out of bounds: ${c}`);
    for (c > 0 || (i.length ^ s) > 0 || i.push(0); a in o || c > 0; )
      u = o[a], u = u > 0 ? u * n + c : c, c = u >> 8, o[a] = u % 256, a++;
  }
  for (; a-- > 0; )
    i.push(o[a]);
  return new Uint8Array(i);
}
function Ob(e) {
  return fd(fd(e));
}
function sk(e) {
  const t = Ob(e);
  return Ib([e, t.slice(0, 4)]);
}
function ak(e) {
  const t = e.slice(0, -4), r = e.slice(-4);
  if (Ob(t).slice(0, 4).toString() !== r.toString())
    throw new Error("Invalid checksum!");
  return t;
}
const D0 = {
  encode: ok,
  decode: ik
}, Bb = {
  encode: (e) => {
    const t = sk(e);
    return D0.encode(t, "base58");
  },
  decode: (e) => {
    const t = D0.decode(e, "base58");
    return ak(t);
  }
}, Nb = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", ck = [996825010, 642813549, 513874426, 1027748829, 705979059], Yc = [
  { version: 0, name: "bech32", const: 1 },
  { version: 1, name: "bech32m", const: 734539939 }
];
function $b(e) {
  let t = 1;
  for (let r = 0; r < e.length; ++r) {
    const n = t >> 25;
    t = (t & 33554431) << 5 ^ e[r];
    for (let o = 0; o < 5; ++o)
      n >> o & 1 && (t ^= ck[o]);
  }
  return t;
}
function Ub(e) {
  const t = [];
  let r;
  for (r = 0; r < e.length; ++r)
    t.push(e.charCodeAt(r) >> 5);
  for (t.push(0), r = 0; r < e.length; ++r)
    t.push(e.charCodeAt(r) & 31);
  return t;
}
function uk(e, t, r) {
  const n = Ub(e).concat(t);
  return $b(n) === r.const;
}
function lk(e, t, r) {
  const n = Ub(e).concat(t).concat([0, 0, 0, 0, 0, 0]), o = $b(n) ^ r.const, i = [];
  for (let s = 0; s < 6; ++s)
    i.push(o >> 5 * (5 - s) & 31);
  return i;
}
function Rb(e, t, r, n = !0) {
  const o = [];
  let i = 0, s = 0;
  const a = (1 << r) - 1, c = (1 << t + r - 1) - 1;
  for (const u of e) {
    if (u < 0 || u >> t > 0)
      throw new Error("Failed to perform base conversion. Invalid value: " + String(u));
    for (i = (i << t | u) & c, s += t; s >= r; )
      s -= r, o.push(i >> s & a);
  }
  if (n)
    s > 0 && o.push(i << r - s & a);
  else if (s >= t || (i << r - s & a) > 0)
    throw new Error("Failed to perform base conversion. Invalid Size!");
  return o;
}
function fk(e, t, r) {
  const n = t.concat(lk(e, t, r));
  let o = e + "1";
  for (let i = 0; i < n.length; ++i)
    o += Nb.charAt(n[i]);
  return o;
}
function Cb(e) {
  if (!dk(e))
    throw new Error("Encoded string goes out of bounds!");
  if (e = e.toLowerCase(), !hk(e))
    throw new Error("Encoded string has invalid separator!");
  const t = [], r = e.lastIndexOf("1"), n = e.substring(0, r);
  for (let i = r + 1; i < e.length; ++i) {
    const s = Nb.indexOf(e.charAt(i));
    if (s === -1)
      throw new Error("Character idx out of bounds: " + String(i));
    t.push(s);
  }
  const o = Yc.find((i) => i.version === t[0]) ?? Yc[0];
  if (!uk(n, t, o))
    throw new Error("Checksum verification failed!");
  return [n, t.slice(0, t.length - 6)];
}
function dk(e) {
  let t, r, n = !1, o = !1;
  for (t = 0; t < e.length; ++t) {
    if (r = e.charCodeAt(t), r < 33 || r > 126)
      return !1;
    r >= 97 && r <= 122 && (n = !0), r >= 65 && r <= 90 && (o = !0);
  }
  return !(n && o);
}
function hk(e) {
  const t = e.lastIndexOf("1");
  return !(t < 1 || t + 7 > e.length || e.length > 90);
}
function pk(e, t = "bc", r = 0) {
  const n = [r, ...Rb([...e], 8, 5)], o = Yc.find((s) => s.version === r) ?? Yc[0], i = fk(t, n, o);
  return Hb(i), i;
}
function Hb(e) {
  e = e.toLowerCase();
  const t = e.split("1", 1)[0], [r, n] = Cb(e), o = Rb(n.slice(1), 5, 8, !1), i = o.length;
  switch (!0) {
    case t !== r:
      throw new Error("Returned hrp string is invalid.");
    case (o === null || i < 2 || i > 40):
      throw new Error("Decoded string is invalid or out of spec.");
    case n[0] > 16:
      throw new Error("Returned version bit is out of range.");
    default:
      return Uint8Array.from(o);
  }
}
function gk(e) {
  e = e.toLowerCase();
  const [t, r] = Cb(e);
  return r[0];
}
const Lb = {
  encode: pk,
  decode: Hb,
  version: gk
}, zb = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", jb = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", mk = new TextEncoder();
function Mb(e, t = !1, r = !0) {
  typeof e == "string" && (e = mk.encode(e));
  const n = t ? jb : zb;
  let o = "", i = 0, s = 0;
  for (let a = 0; a < e.length; a++)
    for (s = s << 8 | e[a], i += 8; i >= 6; )
      i -= 6, o += n[s >> i & 63];
  if (i > 0)
    for (s <<= 6 - i, o += n[s & 63]; i < 6; )
      o += r ? "=" : "", i += 2;
  return o;
}
function Db(e, t = !1) {
  const r = t || e.includes("-") || e.includes("_") ? jb.split("") : zb.split("");
  e = e.replace(/=+$/, "");
  const n = e.split("");
  let o = 0, i = 0;
  const s = [];
  for (let a = 0; a < n.length; a++) {
    const c = n[a], u = r.indexOf(c);
    if (u === -1)
      throw new Error("Invalid character: " + c);
    o += 6, i <<= 6, i |= u, o >= 8 && (o -= 8, s.push(i >>> o & 255));
  }
  return new Uint8Array(s);
}
const Fb = {
  encode: Mb,
  decode: Db
}, Kb = {
  encode: (e) => Mb(e, !0, !1),
  decode: (e) => Db(e, !0)
}, bk = BigInt(0), yk = BigInt(255), Vb = BigInt(256);
function wk(e) {
  if (e <= 0xffn)
    return 1;
  if (e <= 0xffffn)
    return 2;
  if (e <= 0xffffffffn)
    return 4;
  if (e <= 0xffffffffffffffffn)
    return 8;
  if (e <= 0xffffffffffffffffffffffffffffffffn)
    return 16;
  if (e <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn)
    return 32;
  throw new TypeError("Must specify a fixed buffer size for bigints greater than 32 bytes.");
}
function vk(e, t, r = "be") {
  t === void 0 && (t = wk(e));
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (; e > bk; ) {
    const a = e & yk, c = Number(a);
    n ? i.setUint8(s++, c) : i.setUint8(s--, c), e = (e - a) / Vb;
  }
  return new Uint8Array(o);
}
function Ek(e) {
  let t = BigInt(0);
  for (let r = e.length - 1; r >= 0; r--)
    t = t * Vb + BigInt(e[r]);
  return BigInt(t);
}
function xk(e) {
  const t = e.split("").map(Number);
  if (t.length % 8 !== 0)
    throw new Error(`Binary array is invalid length: ${e.length}`);
  const r = new Uint8Array(t.length / 8);
  for (let n = 0, o = 0; n < t.length; n += 8, o++) {
    let i = 0;
    for (let s = 0; s < 8; s++)
      i |= t[n + s] << 7 - s;
    r[o] = i;
  }
  return r;
}
function _k(e) {
  const t = new Array(e.length * 8);
  let r = 0;
  for (const n of e) {
    if (n > 255)
      throw new Error(`Invalid byte value: ${n}. Byte values must be between 0 and 255.`);
    for (let o = 7; o >= 0; o--, r++)
      t[r] = n >> o & 1;
  }
  return t.join("");
}
function Sk(e) {
  if (e <= 255)
    return 1;
  if (e <= 65535)
    return 2;
  if (e <= 4294967295)
    return 4;
  throw new TypeError("Numbers larger than 4 bytes must specify a fixed size!");
}
function Ak(e, t, r = "be") {
  t === void 0 && (t = Sk(e));
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (; e > 0; ) {
    const a = e & 255;
    n ? i.setUint8(s++, e) : i.setUint8(s--, e), e = (e - a) / 256;
  }
  return new Uint8Array(o);
}
function kk(e) {
  let t = 0;
  for (let r = e.length - 1; r >= 0; r--)
    t = t * 256 + e[r], J8(t);
  return t;
}
const Tk = new TextEncoder(), Ik = new TextDecoder();
function Sh(e) {
  return Tk.encode(e);
}
function df(e) {
  return Ik.decode(e);
}
function Pk(e, t) {
  Y8(e);
  const r = e.length / 2;
  if (t === void 0 && (t = r), r > t)
    throw new TypeError(`Hex string is larger than array size: ${r} > ${t}`);
  return t;
}
function Ok(e, t, r = "le") {
  t = Pk(e, t);
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (let a = 0; a < e.length; a += 2) {
    const c = e.substring(a, a + 2), u = parseInt(c, 16);
    n ? i.setUint8(s++, u) : i.setUint8(s--, u);
  }
  return new Uint8Array(o);
}
function Bk(e) {
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += e[r].toString(16).padStart(2, "0");
  return t;
}
function Nk(e) {
  const t = JSON.stringify(e, (r, n) => typeof n == "bigint" ? `${n}n` : n);
  return Sh(t);
}
function $k(e, t, r) {
  if (e instanceof ArrayBuffer)
    return new Uint8Array(e);
  if (e instanceof Uint8Array)
    return tk(e, t, r);
  if (typeof e == "string")
    return Ok(e, t, r);
  if (typeof e == "bigint")
    return vk(e, t, r);
  if (typeof e == "number")
    return Ak(e, t, r);
  if (typeof e == "boolean")
    return Uint8Array.of(e ? 1 : 0);
  throw TypeError("Unsupported format:" + typeof e);
}
var Se;
let H = (Se = class extends Uint8Array {
  static random(t = 32) {
    const r = ek(t);
    return new Se(r, t);
  }
  constructor(t, r, n) {
    const o = $k(t, r, n);
    super(o);
  }
  get arr() {
    return [...this];
  }
  get num() {
    return this.toNum();
  }
  get big() {
    return this.toBig();
  }
  get str() {
    return this.toStr();
  }
  get hex() {
    return this.toHex();
  }
  get raw() {
    return new Uint8Array(this);
  }
  get bin() {
    return this.toBin();
  }
  get b58chk() {
    return this.tob58chk();
  }
  get base64() {
    return this.toBase64();
  }
  get b64url() {
    return this.toB64url();
  }
  get digest() {
    return this.toHash();
  }
  get id() {
    return this.toHash().hex;
  }
  get stream() {
    return new hs(this);
  }
  toNum(t = "be") {
    const r = t === "be" ? this.reverse() : this;
    return kk(r);
  }
  toBin() {
    return _k(this);
  }
  toBig(t = "be") {
    const r = t === "be" ? this.reverse() : this;
    return Ek(r);
  }
  toHash() {
    const t = fd(this);
    return new Se(t);
  }
  toJson() {
    const t = df(this);
    return JSON.parse(t);
  }
  toBech32(t, r = 0) {
    return Lb.encode(this, t, r);
  }
  toStr() {
    return df(this);
  }
  toHex() {
    return Bk(this);
  }
  toBytes() {
    return new Uint8Array(this);
  }
  tob58chk() {
    return Bb.encode(this);
  }
  toBase64() {
    return Fb.encode(this);
  }
  toB64url() {
    return Kb.encode(this);
  }
  prepend(t) {
    return Se.join([Se.bytes(t), this]);
  }
  append(t) {
    return Se.join([this, Se.bytes(t)]);
  }
  slice(t, r) {
    const n = new Uint8Array(this).slice(t, r);
    return new Se(n);
  }
  subarray(t, r) {
    const n = new Uint8Array(this).subarray(t, r);
    return new Se(n);
  }
  reverse() {
    const t = new Uint8Array(this).reverse();
    return new Se(t);
  }
  write(t, r) {
    const n = Se.bytes(t);
    this.set(n, r);
  }
  prefixSize(t) {
    const r = Se.varInt(this.length, t);
    return Se.join([r, this]);
  }
  static from(t) {
    return new Se(Uint8Array.from(t));
  }
  static of(...t) {
    return new Se(Uint8Array.of(...t));
  }
  static join(t) {
    const r = t.map((o) => Se.bytes(o)), n = Ib(r);
    return new Se(n);
  }
  static varInt(t, r) {
    if (t < 253)
      return Se.num(t, 1);
    if (t < 65536)
      return Se.of(253, ...Se.num(t, 2, r));
    if (t < 4294967296)
      return Se.of(254, ...Se.num(t, 4, r));
    if (BigInt(t) < 0x10000000000000000n)
      return Se.of(255, ...Se.num(t, 8, r));
    throw new Error(`Value is too large: ${t}`);
  }
}, Se.num = Uk, Se.big = Ck, Se.bin = Rk, Se.raw = Hk, Se.str = Lk, Se.hex = zk, Se.bytes = jk, Se.json = Mk, Se.base64 = Dk, Se.b64url = Fk, Se.bech32 = Kk, Se.b58chk = Vk, Se.encode = Sh, Se.decode = df, Se);
function Uk(e, t, r) {
  return new H(e, t, r);
}
function Rk(e, t, r) {
  return new H(xk(e), t, r);
}
function Ck(e, t, r) {
  return new H(e, t, r);
}
function Hk(e, t, r) {
  return new H(e, t, r);
}
function Lk(e, t, r) {
  return new H(Sh(e), t, r);
}
function zk(e, t, r) {
  return new H(e, t, r);
}
function jk(e, t, r) {
  return new H(e, t, r);
}
function Mk(e) {
  return new H(Nk(e));
}
function Dk(e) {
  return new H(Fb.decode(e));
}
function Fk(e) {
  return new H(Kb.decode(e));
}
function Kk(e) {
  return new H(Lb.decode(e));
}
function Vk(e) {
  return new H(Bb.decode(e));
}
let hs = class {
  constructor(t) {
    this.data = H.bytes(t), this.size = this.data.length;
  }
  peek(t) {
    if (t > this.size)
      throw new Error(`Size greater than stream: ${t} > ${this.size}`);
    return new H(this.data.slice(0, t));
  }
  read(t) {
    t = t ?? this.readSize();
    const r = this.peek(t);
    return this.data = this.data.slice(t), this.size = this.data.length, r;
  }
  readSize(t) {
    const r = this.read(1).num;
    switch (!0) {
      case (r >= 0 && r < 253):
        return r;
      case r === 253:
        return this.read(2).toNum(t);
      case r === 254:
        return this.read(4).toNum(t);
      case r === 255:
        return this.read(8).toNum(t);
      default:
        throw new Error(`Varint is out of range: ${r}`);
    }
  }
};
function bn(e, t) {
  const r = H.bytes(e);
  if (r.length !== t)
    throw new Error(`Invalid input size: ${r.hex} !== ${t}`);
}
function Gt(e, t) {
  if (t)
    throw new Error(e);
  return !1;
}
function Oc(e, ...t) {
  const r = H.str(e).digest.raw, n = t.map((o) => H.bytes(o));
  return H.join([r, r, H.join(n)]).digest;
}
const qb = {
  OP_0: 0,
  OP_PUSHDATA1: 76,
  OP_PUSHDATA2: 77,
  OP_PUSHDATA4: 78,
  OP_1NEGATE: 79,
  OP_SUCCESS80: 80,
  OP_1: 81,
  OP_2: 82,
  OP_3: 83,
  OP_4: 84,
  OP_5: 85,
  OP_6: 86,
  OP_7: 87,
  OP_8: 88,
  OP_9: 89,
  OP_10: 90,
  OP_11: 91,
  OP_12: 92,
  OP_13: 93,
  OP_14: 94,
  OP_15: 95,
  OP_16: 96,
  OP_NOP: 97,
  OP_SUCCESS98: 98,
  OP_IF: 99,
  OP_NOTIF: 100,
  OP_ELSE: 103,
  OP_ENDIF: 104,
  OP_VERIFY: 105,
  OP_RETURN: 106,
  OP_TOALTSTACK: 107,
  OP_FROMALTSTACK: 108,
  OP_2DROP: 109,
  OP_2DUP: 110,
  OP_3DUP: 111,
  OP_2OVER: 112,
  OP_2ROT: 113,
  OP_2SWAP: 114,
  OP_IFDUP: 115,
  OP_DEPTH: 116,
  OP_DROP: 117,
  OP_DUP: 118,
  OP_NIP: 119,
  OP_OVER: 120,
  OP_PICK: 121,
  OP_ROLL: 122,
  OP_ROT: 123,
  OP_SWAP: 124,
  OP_TUCK: 125,
  OP_SUCCESS126: 126,
  OP_SUCCESS127: 127,
  OP_SUCCESS128: 128,
  OP_SUCCESS129: 129,
  OP_SIZE: 130,
  OP_SUCCESS131: 131,
  OP_SUCCESS132: 132,
  OP_SUCCESS133: 133,
  OP_SUCCESS134: 134,
  OP_EQUAL: 135,
  OP_EQUALVERIFY: 136,
  OP_SUCCESS137: 137,
  OP_SUCCESS138: 138,
  OP_1ADD: 139,
  OP_1SUB: 140,
  OP_SUCCESS141: 141,
  OP_SUCCESS142: 142,
  OP_NEGATE: 143,
  OP_ABS: 144,
  OP_NOT: 145,
  OP_0NOTEQUAL: 146,
  OP_ADD: 147,
  OP_SUB: 148,
  OP_SUCCESS149: 149,
  OP_SUCCESS150: 150,
  OP_SUCCESS151: 151,
  OP_SUCCESS152: 152,
  OP_SUCCESS153: 153,
  OP_BOOLAND: 154,
  OP_BOOLOR: 155,
  OP_NUMEQUAL: 156,
  OP_NUMEQUALVERIFY: 157,
  OP_NUMNOTEQUAL: 158,
  OP_LESSTHAN: 159,
  OP_GREATERTHAN: 160,
  OP_LESSTHANOREQUAL: 161,
  OP_GREATERTHANOREQUAL: 162,
  OP_MIN: 163,
  OP_MAX: 164,
  OP_WITHIN: 165,
  OP_RIPEMD160: 166,
  OP_SHA1: 167,
  OP_SHA256: 168,
  OP_HASH160: 169,
  OP_HASH256: 170,
  OP_CODESEPARATOR: 171,
  OP_CHECKSIG: 172,
  OP_CHECKSIGVERIFY: 173,
  OP_CHECKMULTISIG: 174,
  OP_CHECKMULTISIGVERIFY: 175,
  OP_NOP1: 176,
  OP_CHECKLOCKTIMEVERIFY: 177,
  OP_CHECKSEQUENCEVERIFY: 178,
  OP_NOP4: 179,
  OP_NOP5: 180,
  OP_NOP6: 181,
  OP_NOP7: 182,
  OP_NOP8: 183,
  OP_NOP9: 184,
  OP_NOP10: 185,
  OP_CHECKSIGADD: 186
};
function qk(e) {
  if (e > 186 && e < 255)
    return "OP_SUCCESS" + String(e);
  for (const [t, r] of Object.entries(qb))
    if (r === e)
      return t;
  throw new Error("OPCODE not found:" + String(e));
}
function Gk(e) {
  for (const [t, r] of Object.entries(qb))
    if (t === e)
      return Number(r);
  throw new Error("OPCODE not found:" + e);
}
function Wk(e) {
  switch (!0) {
    case e === 0:
      return "opcode";
    case (e >= 1 && e <= 75):
      return "varint";
    case e === 76:
      return "pushdata1";
    case e === 77:
      return "pushdata2";
    case e === 78:
      return "pushdata4";
    case e <= 254:
      return "opcode";
    default:
      throw new Error(`Invalid word range: ${e}`);
  }
}
function Zk(e) {
  const n = [];
  switch (!0) {
    case typeof e != "number":
      return !1;
    case e === 0:
      return !0;
    case n.includes(e):
      return !1;
    case (75 < e && e < 254):
      return !0;
    default:
      return !1;
  }
}
function Fn(e) {
  return typeof e == "string" && e.length % 2 === 0 && /[0-9a-fA-F]/.test(e);
}
function Gb(e) {
  return Fn(e) || e instanceof Uint8Array;
}
const Jc = 520;
function mi(e = [], t = !0) {
  let r = H.num(0);
  return Array.isArray(e) && (r = H.raw(Wb(e))), Fn(e) && (r = H.hex(e)), e instanceof Uint8Array && (r = H.raw(e)), t && (r = r.prefixSize("le")), r;
}
function Wb(e) {
  const t = [];
  for (const r of e)
    t.push(Xk(r));
  return t.length > 0 ? H.join(t) : new Uint8Array();
}
function Xk(e) {
  let t = new Uint8Array();
  if (typeof e == "string") {
    if (e.startsWith("OP_"))
      return H.num(Gk(e), 1);
    Fn(e) ? t = H.hex(e) : t = H.str(e);
  } else if (t = H.bytes(e), t.length === 1 && t[0] <= 16)
    return t[0] !== 0 && (t[0] += 80), t;
  if (t.length > Jc) {
    const r = Jk(t);
    return Wb(r);
  }
  return H.join([Yk(t.length), t]);
}
function Yk(e) {
  const t = H.num(76, 1), r = H.num(77, 1);
  switch (!0) {
    case e <= 75:
      return H.num(e);
    case (e > 75 && e < 256):
      return H.join([t, H.num(e, 1, "le")]);
    case (e >= 256 && e <= Jc):
      return H.join([r, H.num(e, 2, "le")]);
    default:
      throw new Error("Invalid word size:" + e.toString());
  }
}
function Jk(e) {
  const t = [], r = new hs(e);
  for (; r.size > Jc; )
    t.push(r.read(Jc));
  return t.push(r.read(r.size)), t;
}
function Ah(e, t = !1) {
  let r = H.bytes(e);
  if (t) {
    const o = r.stream.readSize("le");
    if (r = r.slice(1), r.length !== o)
      throw new Error(`Varint does not match stream size: ${o} !== ${r.length}`);
  }
  return Qk(r);
}
function Qk(e) {
  const t = new hs(e), r = [], n = t.size;
  let o, i, s, a = 0;
  for (; a < n; )
    switch (o = t.read(1).num, i = Wk(o), a++, i) {
      case "varint":
        r.push(t.read(o).hex), a += o;
        break;
      case "pushdata1":
        s = t.read(1).reverse().num, r.push(t.read(s).hex), a += s + 1;
        break;
      case "pushdata2":
        s = t.read(2).reverse().num, r.push(t.read(s).hex), a += s + 2;
        break;
      case "pushdata4":
        s = t.read(4).reverse().num, r.push(t.read(s).hex), a += s + 4;
        break;
      case "opcode":
        if (!Zk(o))
          throw new Error(`Invalid OPCODE: ${o}`);
        r.push(qk(o));
        break;
      default:
        throw new Error(`Word type undefined: ${o}`);
    }
  return r;
}
function eT(e, t) {
  if (Array.isArray(e) && (e = mi(e, t)), e instanceof Uint8Array || Fn(e))
    return Ah(e, t);
  throw new Error("Invalid format: " + typeof e);
}
function tT(e, t) {
  if ((e instanceof Uint8Array || Fn(e)) && (e = Ah(e, t)), Array.isArray(e))
    return mi(e, t);
  throw new Error("Invalid format: " + typeof e);
}
function rT(e) {
  if (!Array.isArray(e))
    return H.bytes(e);
  throw new Error("Invalid format: " + typeof e);
}
const nT = {
  toAsm: eT,
  toBytes: tT,
  toParam: rT
}, er = {
  encode: mi,
  decode: Ah,
  fmt: nT
};
function dd(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
function oT(e) {
  if (typeof e != "boolean")
    throw new Error(`Expected boolean, not ${e}`);
}
function Zb(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new TypeError("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function iT(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  dd(e.outputLen), dd(e.blockLen);
}
function sT(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function aT(e, t) {
  Zb(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const cT = {
  number: dd,
  bool: oT,
  bytes: Zb,
  hash: iT,
  exists: sT,
  output: aT
};
var Wo = cT;
const hf = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const pf = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), nn = (e, t) => e << 32 - t | e >>> t, uT = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!uT)
  throw new Error("Non little-endian hardware is not supported");
Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function lT(e) {
  if (typeof e != "string")
    throw new TypeError(`utf8ToBytes expected string, got ${typeof e}`);
  return new TextEncoder().encode(e);
}
function kh(e) {
  if (typeof e == "string" && (e = lT(e)), !(e instanceof Uint8Array))
    throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);
  return e;
}
function fT(...e) {
  if (!e.every((n) => n instanceof Uint8Array))
    throw new Error("Uint8Array list expected");
  if (e.length === 1)
    return e[0];
  const t = e.reduce((n, o) => n + o.length, 0), r = new Uint8Array(t);
  for (let n = 0, o = 0; n < e.length; n++) {
    const i = e[n];
    r.set(i, o), o += i.length;
  }
  return r;
}
let Xb = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function Yb(e) {
  const t = (n) => e().update(kh(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function Jb(e = 32) {
  if (hf && typeof hf.getRandomValues == "function")
    return hf.getRandomValues(new Uint8Array(e));
  throw new Error("crypto.getRandomValues must be defined");
}
function dT(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
let hT = class extends Xb {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = pf(this.buffer);
  }
  update(t) {
    Wo.exists(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = kh(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = pf(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    Wo.exists(this), Wo.output(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    dT(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = pf(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
};
const pT = (e, t, r) => e & t ^ ~e & r, gT = (e, t, r) => e & t ^ e & r ^ t & r, mT = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), no = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), oo = new Uint32Array(64);
let Qb = class extends hT {
  constructor() {
    super(64, 32, 8, !1), this.A = no[0] | 0, this.B = no[1] | 0, this.C = no[2] | 0, this.D = no[3] | 0, this.E = no[4] | 0, this.F = no[5] | 0, this.G = no[6] | 0, this.H = no[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      oo[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const d = oo[l - 15], m = oo[l - 2], g = nn(d, 7) ^ nn(d, 18) ^ d >>> 3, y = nn(m, 17) ^ nn(m, 19) ^ m >>> 10;
      oo[l] = y + oo[l - 7] + g + oo[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const d = nn(a, 6) ^ nn(a, 11) ^ nn(a, 25), m = f + d + pT(a, c, u) + mT[l] + oo[l] | 0, y = (nn(n, 2) ^ nn(n, 13) ^ nn(n, 22)) + gT(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    oo.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}, bT = class extends Qb {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
};
const Qc = Yb(() => new Qb());
Yb(() => new bT());
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const yT = BigInt(0), Th = BigInt(1), wT = BigInt(2), Vu = (e) => e instanceof Uint8Array, vT = Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function es(e) {
  if (!Vu(e))
    throw new Error("Uint8Array expected");
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += vT[e[r]];
  return t;
}
function ey(e) {
  const t = e.toString(16);
  return t.length & 1 ? `0${t}` : t;
}
function Ih(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  return BigInt(e === "" ? "0" : `0x${e}`);
}
function ts(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  if (e.length % 2)
    throw new Error("hex string is invalid: unpadded " + e.length);
  const t = new Uint8Array(e.length / 2);
  for (let r = 0; r < t.length; r++) {
    const n = r * 2, o = e.slice(n, n + 2), i = Number.parseInt(o, 16);
    if (Number.isNaN(i) || i < 0)
      throw new Error("invalid byte sequence");
    t[r] = i;
  }
  return t;
}
function Jt(e) {
  return Ih(es(e));
}
function Ph(e) {
  if (!Vu(e))
    throw new Error("Uint8Array expected");
  return Ih(es(Uint8Array.from(e).reverse()));
}
const _o = (e, t) => ts(e.toString(16).padStart(t * 2, "0")), ty = (e, t) => _o(e, t).reverse(), ET = (e) => ts(ey(e));
function Mt(e, t, r) {
  let n;
  if (typeof t == "string")
    try {
      n = ts(t);
    } catch (i) {
      throw new Error(`${e} must be valid hex string, got "${t}". Cause: ${i}`);
    }
  else if (Vu(t))
    n = Uint8Array.from(t);
  else
    throw new Error(`${e} must be hex string or Uint8Array`);
  const o = n.length;
  if (typeof r == "number" && o !== r)
    throw new Error(`${e} expected ${r} bytes, got ${o}`);
  return n;
}
function fr(...e) {
  const t = new Uint8Array(e.reduce((n, o) => n + o.length, 0));
  let r = 0;
  return e.forEach((n) => {
    if (!Vu(n))
      throw new Error("Uint8Array expected");
    t.set(n, r), r += n.length;
  }), t;
}
function xT(e, t) {
  if (e.length !== t.length)
    return !1;
  for (let r = 0; r < e.length; r++)
    if (e[r] !== t[r])
      return !1;
  return !0;
}
function qu(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new TextEncoder().encode(e);
}
function _T(e) {
  let t;
  for (t = 0; e > 0n; e >>= Th, t += 1)
    ;
  return t;
}
const ST = (e, t) => e >> BigInt(t) & 1n, AT = (e, t, r) => e | (r ? Th : yT) << BigInt(t), Oh = (e) => (wT << BigInt(e - 1)) - Th, gf = (e) => new Uint8Array(e), F0 = (e) => Uint8Array.from(e);
function ry(e, t, r) {
  if (typeof e != "number" || e < 2)
    throw new Error("hashLen must be a number");
  if (typeof t != "number" || t < 2)
    throw new Error("qByteLen must be a number");
  if (typeof r != "function")
    throw new Error("hmacFn must be a function");
  let n = gf(e), o = gf(e), i = 0;
  const s = () => {
    n.fill(1), o.fill(0), i = 0;
  }, a = (...l) => r(o, n, ...l), c = (l = gf()) => {
    o = a(F0([0]), l), n = a(), l.length !== 0 && (o = a(F0([1]), l), n = a());
  }, u = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let l = 0;
    const d = [];
    for (; l < t; ) {
      n = a();
      const m = n.slice();
      d.push(m), l += n.length;
    }
    return fr(...d);
  };
  return (l, d) => {
    s(), c(l);
    let m;
    for (; !(m = d(u())); )
      c();
    return s(), m;
  };
}
const kT = {
  bigint: (e) => typeof e == "bigint",
  function: (e) => typeof e == "function",
  boolean: (e) => typeof e == "boolean",
  string: (e) => typeof e == "string",
  isSafeInteger: (e) => Number.isSafeInteger(e),
  array: (e) => Array.isArray(e),
  field: (e, t) => t.Fp.isValid(e),
  hash: (e) => typeof e == "function" && Number.isSafeInteger(e.outputLen)
};
function ps(e, t, r = {}) {
  const n = (o, i, s) => {
    const a = kT[i];
    if (typeof a != "function")
      throw new Error(`Invalid validator "${i}", expected function`);
    const c = e[o];
    if (!(s && c === void 0) && !a(c, e))
      throw new Error(`Invalid param ${String(o)}=${c} (${typeof c}), expected ${i}`);
  };
  for (const [o, i] of Object.entries(t))
    n(o, i, !1);
  for (const [o, i] of Object.entries(r))
    n(o, i, !0);
  return e;
}
var TT = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  bitGet: ST,
  bitLen: _T,
  bitMask: Oh,
  bitSet: AT,
  bytesToHex: es,
  bytesToNumberBE: Jt,
  bytesToNumberLE: Ph,
  concatBytes: fr,
  createHmacDrbg: ry,
  ensureBytes: Mt,
  equalBytes: xT,
  hexToBytes: ts,
  hexToNumber: Ih,
  numberToBytesBE: _o,
  numberToBytesLE: ty,
  numberToHexUnpadded: ey,
  numberToVarBytesBE: ET,
  utf8ToBytes: qu,
  validateObject: ps
});
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Ct = BigInt(0), vt = BigInt(1), Go = BigInt(2), IT = BigInt(3), hd = BigInt(4), K0 = BigInt(5), V0 = BigInt(8);
BigInt(9);
BigInt(16);
function Bt(e, t) {
  const r = e % t;
  return r >= Ct ? r : t + r;
}
function PT(e, t, r) {
  if (r <= Ct || t < Ct)
    throw new Error("Expected power/modulo > 0");
  if (r === vt)
    return Ct;
  let n = vt;
  for (; t > Ct; )
    t & vt && (n = n * e % r), e = e * e % r, t >>= vt;
  return n;
}
function Sr(e, t, r) {
  let n = e;
  for (; t-- > Ct; )
    n *= n, n %= r;
  return n;
}
function pd(e, t) {
  if (e === Ct || t <= Ct)
    throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);
  let r = Bt(e, t), n = t, o = Ct, i = vt;
  for (; r !== Ct; ) {
    const a = n / r, c = n % r, u = o - i * a;
    n = r, r = c, o = i, i = u;
  }
  if (n !== vt)
    throw new Error("invert: does not exist");
  return Bt(o, t);
}
function OT(e) {
  const t = (e - vt) / Go;
  let r, n, o;
  for (r = e - vt, n = 0; r % Go === Ct; r /= Go, n++)
    ;
  for (o = Go; o < e && PT(o, t, e) !== e - vt; o++)
    ;
  if (n === 1) {
    const s = (e + vt) / hd;
    return function(c, u) {
      const f = c.pow(u, s);
      if (!c.eql(c.sqr(f), u))
        throw new Error("Cannot find square root");
      return f;
    };
  }
  const i = (r + vt) / Go;
  return function(a, c) {
    if (a.pow(c, t) === a.neg(a.ONE))
      throw new Error("Cannot find square root");
    let u = n, f = a.pow(a.mul(a.ONE, o), r), l = a.pow(c, i), d = a.pow(c, r);
    for (; !a.eql(d, a.ONE); ) {
      if (a.eql(d, a.ZERO))
        return a.ZERO;
      let m = 1;
      for (let y = a.sqr(d); m < u && !a.eql(y, a.ONE); m++)
        y = a.sqr(y);
      const g = a.pow(f, vt << BigInt(u - m - 1));
      f = a.sqr(g), l = a.mul(l, g), d = a.mul(d, f), u = m;
    }
    return l;
  };
}
function BT(e) {
  if (e % hd === IT) {
    const t = (e + vt) / hd;
    return function(n, o) {
      const i = n.pow(o, t);
      if (!n.eql(n.sqr(i), o))
        throw new Error("Cannot find square root");
      return i;
    };
  }
  if (e % V0 === K0) {
    const t = (e - K0) / V0;
    return function(n, o) {
      const i = n.mul(o, Go), s = n.pow(i, t), a = n.mul(o, s), c = n.mul(n.mul(a, Go), s), u = n.mul(a, n.sub(c, n.ONE));
      if (!n.eql(n.sqr(u), o))
        throw new Error("Cannot find square root");
      return u;
    };
  }
  return OT(e);
}
const NT = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function ny(e) {
  const t = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, r = NT.reduce((n, o) => (n[o] = "function", n), t);
  return ps(e, r);
}
function $T(e, t, r) {
  if (r < Ct)
    throw new Error("Expected power > 0");
  if (r === Ct)
    return e.ONE;
  if (r === vt)
    return t;
  let n = e.ONE, o = t;
  for (; r > Ct; )
    r & vt && (n = e.mul(n, o)), o = e.sqr(o), r >>= vt;
  return n;
}
function UT(e, t) {
  const r = new Array(t.length), n = t.reduce((i, s, a) => e.is0(s) ? i : (r[a] = i, e.mul(i, s)), e.ONE), o = e.inv(n);
  return t.reduceRight((i, s, a) => e.is0(s) ? i : (r[a] = e.mul(i, r[a]), e.mul(i, s)), o), r;
}
function Bh(e, t) {
  const r = t !== void 0 ? t : e.toString(2).length, n = Math.ceil(r / 8);
  return { nBitLength: r, nByteLength: n };
}
function oy(e, t, r = !1, n = {}) {
  if (e <= Ct)
    throw new Error(`Expected Fp ORDER > 0, got ${e}`);
  const { nBitLength: o, nByteLength: i } = Bh(e, t);
  if (i > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const s = BT(e), a = Object.freeze({
    ORDER: e,
    BITS: o,
    BYTES: i,
    MASK: Oh(o),
    ZERO: Ct,
    ONE: vt,
    create: (c) => Bt(c, e),
    isValid: (c) => {
      if (typeof c != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof c}`);
      return Ct <= c && c < e;
    },
    is0: (c) => c === Ct,
    isOdd: (c) => (c & vt) === vt,
    neg: (c) => Bt(-c, e),
    eql: (c, u) => c === u,
    sqr: (c) => Bt(c * c, e),
    add: (c, u) => Bt(c + u, e),
    sub: (c, u) => Bt(c - u, e),
    mul: (c, u) => Bt(c * u, e),
    pow: (c, u) => $T(a, c, u),
    div: (c, u) => Bt(c * pd(u, e), e),
    // Same as above, but doesn't normalize
    sqrN: (c) => c * c,
    addN: (c, u) => c + u,
    subN: (c, u) => c - u,
    mulN: (c, u) => c * u,
    inv: (c) => pd(c, e),
    sqrt: n.sqrt || ((c) => s(a, c)),
    invertBatch: (c) => UT(a, c),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (c, u, f) => f ? u : c,
    toBytes: (c) => r ? ty(c, i) : _o(c, i),
    fromBytes: (c) => {
      if (c.length !== i)
        throw new Error(`Fp.fromBytes: expected ${i}, got ${c.length}`);
      return r ? Ph(c) : Jt(c);
    }
  });
  return Object.freeze(a);
}
function RT(e, t, r = !1) {
  e = Mt("privateHash", e);
  const n = e.length, o = Bh(t).nByteLength + 8;
  if (o < 24 || n < o || n > 1024)
    throw new Error(`hashToPrivateScalar: expected ${o}-1024 bytes of input, got ${n}`);
  const i = r ? Ph(e) : Jt(e);
  return Bt(i, t - vt) + vt;
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const CT = BigInt(0), mf = BigInt(1);
function HT(e, t) {
  const r = (o, i) => {
    const s = i.negate();
    return o ? s : i;
  }, n = (o) => {
    const i = Math.ceil(t / o) + 1, s = 2 ** (o - 1);
    return { windows: i, windowSize: s };
  };
  return {
    constTimeNegate: r,
    // non-const time multiplication ladder
    unsafeLadder(o, i) {
      let s = e.ZERO, a = o;
      for (; i > CT; )
        i & mf && (s = s.add(a)), a = a.double(), i >>= mf;
      return s;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(o, i) {
      const { windows: s, windowSize: a } = n(i), c = [];
      let u = o, f = u;
      for (let l = 0; l < s; l++) {
        f = u, c.push(f);
        for (let d = 1; d < a; d++)
          f = f.add(u), c.push(f);
        u = f.double();
      }
      return c;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(o, i, s) {
      const { windows: a, windowSize: c } = n(o);
      let u = e.ZERO, f = e.BASE;
      const l = BigInt(2 ** o - 1), d = 2 ** o, m = BigInt(o);
      for (let g = 0; g < a; g++) {
        const y = g * c;
        let b = Number(s & l);
        s >>= m, b > c && (b -= d, s += mf);
        const E = y, x = y + Math.abs(b) - 1, w = g % 2 !== 0, k = b < 0;
        b === 0 ? f = f.add(r(w, i[E])) : u = u.add(r(k, i[x]));
      }
      return { p: u, f };
    },
    wNAFCached(o, i, s, a) {
      const c = o._WINDOW_SIZE || 1;
      let u = i.get(o);
      return u || (u = this.precomputeWindow(o, c), c !== 1 && i.set(o, a(u))), this.wNAF(c, u, s);
    }
  };
}
function iy(e) {
  return ny(e.Fp), ps(e, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...Bh(e.n, e.nBitLength),
    ...e,
    p: e.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function LT(e) {
  const t = iy(e);
  ps(t, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: r, Fp: n, a: o } = t;
  if (r) {
    if (!n.eql(o, n.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof r != "object" || typeof r.beta != "bigint" || typeof r.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...t });
}
const { bytesToNumberBE: zT, hexToBytes: jT } = TT, Zo = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(t = "") {
      super(t);
    }
  },
  _parseInt(e) {
    const { Err: t } = Zo;
    if (e.length < 2 || e[0] !== 2)
      throw new t("Invalid signature integer tag");
    const r = e[1], n = e.subarray(2, r + 2);
    if (!r || n.length !== r)
      throw new t("Invalid signature integer: wrong length");
    if (n[0] === 0 && n[1] <= 127)
      throw new t("Invalid signature integer: trailing length");
    return { d: zT(n), l: e.subarray(r + 2) };
  },
  toSig(e) {
    const { Err: t } = Zo, r = typeof e == "string" ? jT(e) : e;
    if (!(r instanceof Uint8Array))
      throw new Error("ui8a expected");
    let n = r.length;
    if (n < 2 || r[0] != 48)
      throw new t("Invalid signature tag");
    if (r[1] !== n - 2)
      throw new t("Invalid signature: incorrect length");
    const { d: o, l: i } = Zo._parseInt(r.subarray(2)), { d: s, l: a } = Zo._parseInt(i);
    if (a.length)
      throw new t("Invalid signature: left bytes after parsing");
    return { r: o, s };
  },
  hexFromSig(e) {
    const t = (u) => Number.parseInt(u[0], 16) >= 8 ? "00" + u : u, r = (u) => {
      const f = u.toString(16);
      return f.length & 1 ? `0${f}` : f;
    }, n = t(r(e.s)), o = t(r(e.r)), i = n.length / 2, s = o.length / 2, a = r(i), c = r(s);
    return `30${r(s + i + 4)}02${c}${o}02${a}${n}`;
  }
}, Lr = BigInt(0), Pt = BigInt(1), Sn = BigInt(2), eu = BigInt(3), q0 = BigInt(4);
function MT(e) {
  const t = LT(e), { Fp: r } = t, n = t.toBytes || ((g, y, b) => {
    const E = y.toAffine();
    return fr(Uint8Array.from([4]), r.toBytes(E.x), r.toBytes(E.y));
  }), o = t.fromBytes || ((g) => {
    const y = g.subarray(1), b = r.fromBytes(y.subarray(0, r.BYTES)), E = r.fromBytes(y.subarray(r.BYTES, 2 * r.BYTES));
    return { x: b, y: E };
  });
  function i(g) {
    const { a: y, b } = t, E = r.sqr(g), x = r.mul(E, g);
    return r.add(r.add(x, r.mul(g, y)), b);
  }
  function s(g) {
    return typeof g == "bigint" && Lr < g && g < t.n;
  }
  function a(g) {
    if (!s(g))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function c(g) {
    const { allowedPrivateKeyLengths: y, nByteLength: b, wrapPrivateKey: E, n: x } = t;
    if (y && typeof g != "bigint") {
      if (g instanceof Uint8Array && (g = es(g)), typeof g != "string" || !y.includes(g.length))
        throw new Error("Invalid key");
      g = g.padStart(b * 2, "0");
    }
    let w;
    try {
      w = typeof g == "bigint" ? g : Jt(Mt("private key", g, b));
    } catch {
      throw new Error(`private key must be ${b} bytes, hex or bigint, not ${typeof g}`);
    }
    return E && (w = Bt(w, x)), a(w), w;
  }
  const u = /* @__PURE__ */ new Map();
  function f(g) {
    if (!(g instanceof l))
      throw new Error("ProjectivePoint expected");
  }
  class l {
    constructor(y, b, E) {
      if (this.px = y, this.py = b, this.pz = E, y == null || !r.isValid(y))
        throw new Error("x required");
      if (b == null || !r.isValid(b))
        throw new Error("y required");
      if (E == null || !r.isValid(E))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(y) {
      const { x: b, y: E } = y || {};
      if (!y || !r.isValid(b) || !r.isValid(E))
        throw new Error("invalid affine point");
      if (y instanceof l)
        throw new Error("projective point not allowed");
      const x = (w) => r.eql(w, r.ZERO);
      return x(b) && x(E) ? l.ZERO : new l(b, E, r.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(y) {
      const b = r.invertBatch(y.map((E) => E.pz));
      return y.map((E, x) => E.toAffine(b[x])).map(l.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(y) {
      const b = l.fromAffine(o(Mt("pointHex", y)));
      return b.assertValidity(), b;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(y) {
      return l.BASE.multiply(c(y));
    }
    // "Private method", don't use it directly
    _setWindowSize(y) {
      this._WINDOW_SIZE = y, u.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (t.allowInfinityPoint)
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: y, y: b } = this.toAffine();
      if (!r.isValid(y) || !r.isValid(b))
        throw new Error("bad point: x or y not FE");
      const E = r.sqr(b), x = i(y);
      if (!r.eql(E, x))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y } = this.toAffine();
      if (r.isOdd)
        return !r.isOdd(y);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(y) {
      f(y);
      const { px: b, py: E, pz: x } = this, { px: w, py: k, pz: S } = y, I = r.eql(r.mul(b, S), r.mul(w, x)), T = r.eql(r.mul(E, S), r.mul(k, x));
      return I && T;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new l(this.px, r.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: y, b } = t, E = r.mul(b, eu), { px: x, py: w, pz: k } = this;
      let S = r.ZERO, I = r.ZERO, T = r.ZERO, B = r.mul(x, x), C = r.mul(w, w), F = r.mul(k, k), V = r.mul(x, w);
      return V = r.add(V, V), T = r.mul(x, k), T = r.add(T, T), S = r.mul(y, T), I = r.mul(E, F), I = r.add(S, I), S = r.sub(C, I), I = r.add(C, I), I = r.mul(S, I), S = r.mul(V, S), T = r.mul(E, T), F = r.mul(y, F), V = r.sub(B, F), V = r.mul(y, V), V = r.add(V, T), T = r.add(B, B), B = r.add(T, B), B = r.add(B, F), B = r.mul(B, V), I = r.add(I, B), F = r.mul(w, k), F = r.add(F, F), B = r.mul(F, V), S = r.sub(S, B), T = r.mul(F, C), T = r.add(T, T), T = r.add(T, T), new l(S, I, T);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(y) {
      f(y);
      const { px: b, py: E, pz: x } = this, { px: w, py: k, pz: S } = y;
      let I = r.ZERO, T = r.ZERO, B = r.ZERO;
      const C = t.a, F = r.mul(t.b, eu);
      let V = r.mul(b, w), R = r.mul(E, k), G = r.mul(x, S), K = r.add(b, E), N = r.add(w, k);
      K = r.mul(K, N), N = r.add(V, R), K = r.sub(K, N), N = r.add(b, x);
      let L = r.add(w, S);
      return N = r.mul(N, L), L = r.add(V, G), N = r.sub(N, L), L = r.add(E, x), I = r.add(k, S), L = r.mul(L, I), I = r.add(R, G), L = r.sub(L, I), B = r.mul(C, N), I = r.mul(F, G), B = r.add(I, B), I = r.sub(R, B), B = r.add(R, B), T = r.mul(I, B), R = r.add(V, V), R = r.add(R, V), G = r.mul(C, G), N = r.mul(F, N), R = r.add(R, G), G = r.sub(V, G), G = r.mul(C, G), N = r.add(N, G), V = r.mul(R, N), T = r.add(T, V), V = r.mul(L, N), I = r.mul(K, I), I = r.sub(I, V), V = r.mul(K, R), B = r.mul(L, B), B = r.add(B, V), new l(I, T, B);
    }
    subtract(y) {
      return this.add(y.negate());
    }
    is0() {
      return this.equals(l.ZERO);
    }
    wNAF(y) {
      return m.wNAFCached(this, u, y, (b) => {
        const E = r.invertBatch(b.map((x) => x.pz));
        return b.map((x, w) => x.toAffine(E[w])).map(l.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(y) {
      const b = l.ZERO;
      if (y === Lr)
        return b;
      if (a(y), y === Pt)
        return this;
      const { endo: E } = t;
      if (!E)
        return m.unsafeLadder(this, y);
      let { k1neg: x, k1: w, k2neg: k, k2: S } = E.splitScalar(y), I = b, T = b, B = this;
      for (; w > Lr || S > Lr; )
        w & Pt && (I = I.add(B)), S & Pt && (T = T.add(B)), B = B.double(), w >>= Pt, S >>= Pt;
      return x && (I = I.negate()), k && (T = T.negate()), T = new l(r.mul(T.px, E.beta), T.py, T.pz), I.add(T);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(y) {
      a(y);
      let b = y, E, x;
      const { endo: w } = t;
      if (w) {
        const { k1neg: k, k1: S, k2neg: I, k2: T } = w.splitScalar(b);
        let { p: B, f: C } = this.wNAF(S), { p: F, f: V } = this.wNAF(T);
        B = m.constTimeNegate(k, B), F = m.constTimeNegate(I, F), F = new l(r.mul(F.px, w.beta), F.py, F.pz), E = B.add(F), x = C.add(V);
      } else {
        const { p: k, f: S } = this.wNAF(b);
        E = k, x = S;
      }
      return l.normalizeZ([E, x])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(y, b, E) {
      const x = l.BASE, w = (S, I) => I === Lr || I === Pt || !S.equals(x) ? S.multiplyUnsafe(I) : S.multiply(I), k = w(this, b).add(w(y, E));
      return k.is0() ? void 0 : k;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(y) {
      const { px: b, py: E, pz: x } = this, w = this.is0();
      y == null && (y = w ? r.ONE : r.inv(x));
      const k = r.mul(b, y), S = r.mul(E, y), I = r.mul(x, y);
      if (w)
        return { x: r.ZERO, y: r.ZERO };
      if (!r.eql(I, r.ONE))
        throw new Error("invZ was invalid");
      return { x: k, y: S };
    }
    isTorsionFree() {
      const { h: y, isTorsionFree: b } = t;
      if (y === Pt)
        return !0;
      if (b)
        return b(l, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: y, clearCofactor: b } = t;
      return y === Pt ? this : b ? b(l, this) : this.multiplyUnsafe(t.h);
    }
    toRawBytes(y = !0) {
      return this.assertValidity(), n(l, this, y);
    }
    toHex(y = !0) {
      return es(this.toRawBytes(y));
    }
  }
  l.BASE = new l(t.Gx, t.Gy, r.ONE), l.ZERO = new l(r.ZERO, r.ONE, r.ZERO);
  const d = t.nBitLength, m = HT(l, t.endo ? Math.ceil(d / 2) : d);
  return {
    CURVE: t,
    ProjectivePoint: l,
    normPrivateKeyToScalar: c,
    weierstrassEquation: i,
    isWithinCurveOrder: s
  };
}
function DT(e) {
  const t = iy(e);
  return ps(t, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...t });
}
function FT(e) {
  const t = DT(e), { Fp: r, n } = t, o = r.BYTES + 1, i = 2 * r.BYTES + 1;
  function s(N) {
    return Lr < N && N < r.ORDER;
  }
  function a(N) {
    return Bt(N, n);
  }
  function c(N) {
    return pd(N, n);
  }
  const { ProjectivePoint: u, normPrivateKeyToScalar: f, weierstrassEquation: l, isWithinCurveOrder: d } = MT({
    ...t,
    toBytes(N, L, q) {
      const ee = L.toAffine(), Y = r.toBytes(ee.x), ae = fr;
      return q ? ae(Uint8Array.from([L.hasEvenY() ? 2 : 3]), Y) : ae(Uint8Array.from([4]), Y, r.toBytes(ee.y));
    },
    fromBytes(N) {
      const L = N.length, q = N[0], ee = N.subarray(1);
      if (L === o && (q === 2 || q === 3)) {
        const Y = Jt(ee);
        if (!s(Y))
          throw new Error("Point is not on curve");
        const ae = l(Y);
        let ie = r.sqrt(ae);
        const ve = (ie & Pt) === Pt;
        return (q & 1) === 1 !== ve && (ie = r.neg(ie)), { x: Y, y: ie };
      } else if (L === i && q === 4) {
        const Y = r.fromBytes(ee.subarray(0, r.BYTES)), ae = r.fromBytes(ee.subarray(r.BYTES, 2 * r.BYTES));
        return { x: Y, y: ae };
      } else
        throw new Error(`Point of length ${L} was invalid. Expected ${o} compressed bytes or ${i} uncompressed bytes`);
    }
  }), m = (N) => es(_o(N, t.nByteLength));
  function g(N) {
    const L = n >> Pt;
    return N > L;
  }
  function y(N) {
    return g(N) ? a(-N) : N;
  }
  const b = (N, L, q) => Jt(N.slice(L, q));
  class E {
    constructor(L, q, ee) {
      this.r = L, this.s = q, this.recovery = ee, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(L) {
      const q = t.nByteLength;
      return L = Mt("compactSignature", L, q * 2), new E(b(L, 0, q), b(L, q, 2 * q));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(L) {
      const { r: q, s: ee } = Zo.toSig(Mt("DER", L));
      return new E(q, ee);
    }
    assertValidity() {
      if (!d(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!d(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(L) {
      return new E(this.r, this.s, L);
    }
    recoverPublicKey(L) {
      const { r: q, s: ee, recovery: Y } = this, ae = T(Mt("msgHash", L));
      if (Y == null || ![0, 1, 2, 3].includes(Y))
        throw new Error("recovery id invalid");
      const ie = Y === 2 || Y === 3 ? q + t.n : q;
      if (ie >= r.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const ve = Y & 1 ? "03" : "02", W = u.fromHex(ve + m(ie)), He = c(ie), Ge = a(-ae * He), Le = a(ee * He), Et = u.BASE.multiplyAndAddUnsafe(W, Ge, Le);
      if (!Et)
        throw new Error("point at infinify");
      return Et.assertValidity(), Et;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return g(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new E(this.r, a(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return ts(this.toDERHex());
    }
    toDERHex() {
      return Zo.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return ts(this.toCompactHex());
    }
    toCompactHex() {
      return m(this.r) + m(this.s);
    }
  }
  const x = {
    isValidPrivateKey(N) {
      try {
        return f(N), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: f,
    /**
     * Produces cryptographically secure private key from random of size (nBitLength+64)
     * as per FIPS 186 B.4.1 with modulo bias being neglible.
     */
    randomPrivateKey: () => {
      const N = t.randomBytes(r.BYTES + 8), L = RT(N, n);
      return _o(L, t.nByteLength);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(N = 8, L = u.BASE) {
      return L._setWindowSize(N), L.multiply(BigInt(3)), L;
    }
  };
  function w(N, L = !0) {
    return u.fromPrivateKey(N).toRawBytes(L);
  }
  function k(N) {
    const L = N instanceof Uint8Array, q = typeof N == "string", ee = (L || q) && N.length;
    return L ? ee === o || ee === i : q ? ee === 2 * o || ee === 2 * i : N instanceof u;
  }
  function S(N, L, q = !0) {
    if (k(N))
      throw new Error("first arg must be private key");
    if (!k(L))
      throw new Error("second arg must be public key");
    return u.fromHex(L).multiply(f(N)).toRawBytes(q);
  }
  const I = t.bits2int || function(N) {
    const L = Jt(N), q = N.length * 8 - t.nBitLength;
    return q > 0 ? L >> BigInt(q) : L;
  }, T = t.bits2int_modN || function(N) {
    return a(I(N));
  }, B = Oh(t.nBitLength);
  function C(N) {
    if (typeof N != "bigint")
      throw new Error("bigint expected");
    if (!(Lr <= N && N < B))
      throw new Error(`bigint expected < 2^${t.nBitLength}`);
    return _o(N, t.nByteLength);
  }
  function F(N, L, q = V) {
    if (["recovered", "canonical"].some((ze) => ze in q))
      throw new Error("sign() legacy options not supported");
    const { hash: ee, randomBytes: Y } = t;
    let { lowS: ae, prehash: ie, extraEntropy: ve } = q;
    ae == null && (ae = !0), N = Mt("msgHash", N), ie && (N = Mt("prehashed msgHash", ee(N)));
    const W = T(N), He = f(L), Ge = [C(He), C(W)];
    if (ve != null) {
      const ze = ve === !0 ? Y(r.BYTES) : ve;
      Ge.push(Mt("extraEntropy", ze, r.BYTES));
    }
    const Le = fr(...Ge), Et = W;
    function gt(ze) {
      const At = I(ze);
      if (!d(At))
        return;
      const zt = c(At), rt = u.BASE.multiply(At).toAffine(), Fe = a(rt.x);
      if (Fe === Lr)
        return;
      const xt = a(zt * a(Et + Fe * He));
      if (xt === Lr)
        return;
      let Qr = (rt.x === Fe ? 0 : 2) | Number(rt.y & Pt), vr = xt;
      return ae && g(xt) && (vr = y(xt), Qr ^= 1), new E(Fe, vr, Qr);
    }
    return { seed: Le, k2sig: gt };
  }
  const V = { lowS: t.lowS, prehash: !1 }, R = { lowS: t.lowS, prehash: !1 };
  function G(N, L, q = V) {
    const { seed: ee, k2sig: Y } = F(N, L, q);
    return ry(t.hash.outputLen, t.nByteLength, t.hmac)(ee, Y);
  }
  u.BASE._setWindowSize(8);
  function K(N, L, q, ee = R) {
    var rt;
    const Y = N;
    if (L = Mt("msgHash", L), q = Mt("publicKey", q), "strict" in ee)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: ae, prehash: ie } = ee;
    let ve, W;
    try {
      if (typeof Y == "string" || Y instanceof Uint8Array)
        try {
          ve = E.fromDER(Y);
        } catch (Fe) {
          if (!(Fe instanceof Zo.Err))
            throw Fe;
          ve = E.fromCompact(Y);
        }
      else if (typeof Y == "object" && typeof Y.r == "bigint" && typeof Y.s == "bigint") {
        const { r: Fe, s: xt } = Y;
        ve = new E(Fe, xt);
      } else
        throw new Error("PARSE");
      W = u.fromHex(q);
    } catch (Fe) {
      if (Fe.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (ae && ve.hasHighS())
      return !1;
    ie && (L = t.hash(L));
    const { r: He, s: Ge } = ve, Le = T(L), Et = c(Ge), gt = a(Le * Et), ze = a(He * Et), At = (rt = u.BASE.multiplyAndAddUnsafe(W, gt, ze)) == null ? void 0 : rt.toAffine();
    return At ? a(At.x) === He : !1;
  }
  return {
    CURVE: t,
    getPublicKey: w,
    getSharedSecret: S,
    sign: G,
    verify: K,
    ProjectivePoint: u,
    Signature: E,
    utils: x
  };
}
function KT(e, t) {
  const r = e.ORDER;
  let n = Lr;
  for (let d = r - Pt; d % Sn === Lr; d /= Sn)
    n += Pt;
  const o = n, i = (r - Pt) / Sn ** o, s = (i - Pt) / Sn, a = Sn ** o - Pt, c = Sn ** (o - Pt), u = e.pow(t, i), f = e.pow(t, (i + Pt) / Sn);
  let l = (d, m) => {
    let g = u, y = e.pow(m, a), b = e.sqr(y);
    b = e.mul(b, m);
    let E = e.mul(d, b);
    E = e.pow(E, s), E = e.mul(E, y), y = e.mul(E, m), b = e.mul(E, d);
    let x = e.mul(b, y);
    E = e.pow(x, c);
    let w = e.eql(E, e.ONE);
    y = e.mul(b, f), E = e.mul(x, g), b = e.cmov(y, b, w), x = e.cmov(E, x, w);
    for (let k = o; k > 1; k--) {
      let S = Sn ** (k - Sn), I = e.pow(x, S);
      const T = e.eql(I, e.ONE);
      y = e.mul(b, g), g = e.mul(g, g), I = e.mul(x, g), b = e.cmov(y, b, T), x = e.cmov(I, x, T);
    }
    return { isValid: w, value: b };
  };
  if (e.ORDER % q0 === eu) {
    const d = (e.ORDER - eu) / q0, m = e.sqrt(e.neg(t));
    l = (g, y) => {
      let b = e.sqr(y);
      const E = e.mul(g, y);
      b = e.mul(b, E);
      let x = e.pow(b, d);
      x = e.mul(x, E);
      const w = e.mul(x, m), k = e.mul(e.sqr(x), y), S = e.eql(k, g);
      let I = e.cmov(w, x, S);
      return { isValid: S, value: I };
    };
  }
  return l;
}
function VT(e, t) {
  if (ny(e), !e.isValid(t.A) || !e.isValid(t.B) || !e.isValid(t.Z))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const r = KT(e, t.Z);
  if (!e.isOdd)
    throw new Error("Fp.isOdd is not implemented!");
  return (n) => {
    let o, i, s, a, c, u, f, l;
    o = e.sqr(n), o = e.mul(o, t.Z), i = e.sqr(o), i = e.add(i, o), s = e.add(i, e.ONE), s = e.mul(s, t.B), a = e.cmov(t.Z, e.neg(i), !e.eql(i, e.ZERO)), a = e.mul(a, t.A), i = e.sqr(s), u = e.sqr(a), c = e.mul(u, t.A), i = e.add(i, c), i = e.mul(i, s), u = e.mul(u, a), c = e.mul(u, t.B), i = e.add(i, c), f = e.mul(o, s);
    const { isValid: d, value: m } = r(i, u);
    l = e.mul(o, n), l = e.mul(l, m), f = e.cmov(f, s, d), l = e.cmov(l, m, d);
    const g = e.isOdd(n) === e.isOdd(l);
    return l = e.cmov(e.neg(l), l, g), f = e.div(f, a), { x: f, y: l };
  };
}
function qT(e) {
  if (e instanceof Uint8Array)
    return e;
  if (typeof e == "string")
    return qu(e);
  throw new Error("DST must be Uint8Array or string");
}
const GT = Jt;
function Eo(e, t) {
  if (e < 0 || e >= 1 << 8 * t)
    throw new Error(`bad I2OSP call: value=${e} length=${t}`);
  const r = Array.from({ length: t }).fill(0);
  for (let n = t - 1; n >= 0; n--)
    r[n] = e & 255, e >>>= 8;
  return new Uint8Array(r);
}
function WT(e, t) {
  const r = new Uint8Array(e.length);
  for (let n = 0; n < e.length; n++)
    r[n] = e[n] ^ t[n];
  return r;
}
function ra(e) {
  if (!(e instanceof Uint8Array))
    throw new Error("Uint8Array expected");
}
function Nh(e) {
  if (!Number.isSafeInteger(e))
    throw new Error("number expected");
}
function ZT(e, t, r, n) {
  ra(e), ra(t), Nh(r), t.length > 255 && (t = n(fr(qu("H2C-OVERSIZE-DST-"), t)));
  const { outputLen: o, blockLen: i } = n, s = Math.ceil(r / o);
  if (s > 255)
    throw new Error("Invalid xmd length");
  const a = fr(t, Eo(t.length, 1)), c = Eo(0, i), u = Eo(r, 2), f = new Array(s), l = n(fr(c, e, u, Eo(0, 1), a));
  f[0] = n(fr(l, Eo(1, 1), a));
  for (let m = 1; m <= s; m++) {
    const g = [WT(l, f[m - 1]), Eo(m + 1, 1), a];
    f[m] = n(fr(...g));
  }
  return fr(...f).slice(0, r);
}
function XT(e, t, r, n, o) {
  if (ra(e), ra(t), Nh(r), t.length > 255) {
    const i = Math.ceil(2 * n / 8);
    t = o.create({ dkLen: i }).update(qu("H2C-OVERSIZE-DST-")).update(t).digest();
  }
  if (r > 65535 || t.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return o.create({ dkLen: r }).update(e).update(Eo(r, 2)).update(t).update(Eo(t.length, 1)).digest();
}
function G0(e, t, r) {
  ps(r, {
    DST: "string",
    p: "bigint",
    m: "isSafeInteger",
    k: "isSafeInteger",
    hash: "hash"
  });
  const { p: n, k: o, m: i, hash: s, expand: a, DST: c } = r;
  ra(e), Nh(t);
  const u = qT(c), f = n.toString(2).length, l = Math.ceil((f + o) / 8), d = t * i * l;
  let m;
  if (a === "xmd")
    m = ZT(e, u, d, s);
  else if (a === "xof")
    m = XT(e, u, d, o, s);
  else if (a === void 0)
    m = e;
  else
    throw new Error('expand must be "xmd", "xof" or undefined');
  const g = new Array(t);
  for (let y = 0; y < t; y++) {
    const b = new Array(i);
    for (let E = 0; E < i; E++) {
      const x = l * (E + y * i), w = m.subarray(x, x + l);
      b[E] = Bt(GT(w), n);
    }
    g[y] = b;
  }
  return g;
}
function YT(e, t) {
  const r = t.map((n) => Array.from(n).reverse());
  return (n, o) => {
    const [i, s, a, c] = r.map((u) => u.reduce((f, l) => e.add(e.mul(f, n), l)));
    return n = e.div(i, s), o = e.mul(o, e.div(a, c)), { x: n, y: o };
  };
}
function JT(e, t, r) {
  if (typeof t != "function")
    throw new Error("mapToCurve() must be defined");
  return {
    // Encodes byte string to elliptic curve
    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3
    hashToCurve(n, o) {
      const i = G0(n, 2, { ...r, DST: r.DST, ...o }), s = e.fromAffine(t(i[0])), a = e.fromAffine(t(i[1])), c = s.add(a).clearCofactor();
      return c.assertValidity(), c;
    },
    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3
    encodeToCurve(n, o) {
      const i = G0(n, 1, { ...r, DST: r.encodeDST, ...o }), s = e.fromAffine(t(i[0])).clearCofactor();
      return s.assertValidity(), s;
    }
  };
}
let sy = class extends Xb {
  constructor(t, r) {
    super(), this.finished = !1, this.destroyed = !1, Wo.hash(t);
    const n = kh(r);
    if (this.iHash = t.create(), typeof this.iHash.update != "function")
      throw new TypeError("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o = this.blockLen, i = new Uint8Array(o);
    i.set(n.length > o ? t.create().update(n).digest() : n);
    for (let s = 0; s < i.length; s++)
      i[s] ^= 54;
    this.iHash.update(i), this.oHash = t.create();
    for (let s = 0; s < i.length; s++)
      i[s] ^= 106;
    this.oHash.update(i), i.fill(0);
  }
  update(t) {
    return Wo.exists(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    Wo.exists(this), Wo.bytes(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: r, iHash: n, finished: o, destroyed: i, blockLen: s, outputLen: a } = this;
    return t = t, t.finished = o, t.destroyed = i, t.blockLen = s, t.outputLen = a, t.oHash = r._cloneInto(t.oHash), t.iHash = n._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const ay = (e, t, r) => new sy(e, t).update(r).digest();
ay.create = (e, t) => new sy(e, t);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function QT(e) {
  return {
    hash: e,
    hmac: (t, ...r) => ay(e, t, fT(...r)),
    randomBytes: Jb
  };
}
function e3(e, t) {
  const r = (n) => FT({ ...e, ...QT(n) });
  return Object.freeze({ ...r(t), create: r });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Gu = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), tu = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), cy = BigInt(1), ru = BigInt(2), W0 = (e, t) => (e + t / ru) / t;
function uy(e) {
  const t = Gu, r = BigInt(3), n = BigInt(6), o = BigInt(11), i = BigInt(22), s = BigInt(23), a = BigInt(44), c = BigInt(88), u = e * e * e % t, f = u * u * e % t, l = Sr(f, r, t) * f % t, d = Sr(l, r, t) * f % t, m = Sr(d, ru, t) * u % t, g = Sr(m, o, t) * m % t, y = Sr(g, i, t) * g % t, b = Sr(y, a, t) * y % t, E = Sr(b, c, t) * b % t, x = Sr(E, a, t) * y % t, w = Sr(x, r, t) * f % t, k = Sr(w, s, t) * g % t, S = Sr(k, n, t) * u % t, I = Sr(S, ru, t);
  if (!ko.eql(ko.sqr(I), e))
    throw new Error("Cannot find square root");
  return I;
}
const ko = oy(Gu, void 0, void 0, { sqrt: uy }), pn = e3({
  a: BigInt(0),
  b: BigInt(7),
  Fp: ko,
  n: tu,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: !0,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (e) => {
      const t = tu, r = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), n = -cy * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), o = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), i = r, s = BigInt("0x100000000000000000000000000000000"), a = W0(i * e, t), c = W0(-n * e, t);
      let u = Bt(e - a * r - c * o, t), f = Bt(-a * n - c * i, t);
      const l = u > s, d = f > s;
      if (l && (u = t - u), d && (f = t - f), u > s || f > s)
        throw new Error("splitScalar: Endomorphism failed, k=" + e);
      return { k1neg: l, k1: u, k2neg: d, k2: f };
    }
  }
}, Qc), Wu = BigInt(0), ly = (e) => typeof e == "bigint" && Wu < e && e < Gu, t3 = (e) => typeof e == "bigint" && Wu < e && e < tu, Z0 = {};
function nu(e, ...t) {
  let r = Z0[e];
  if (r === void 0) {
    const n = Qc(Uint8Array.from(e, (o) => o.charCodeAt(0)));
    r = fr(n, n), Z0[e] = r;
  }
  return Qc(fr(r, ...t));
}
const $h = (e) => e.toRawBytes(!0).slice(1), gd = (e) => _o(e, 32), bf = (e) => Bt(e, Gu), na = (e) => Bt(e, tu), Uh = pn.ProjectivePoint, r3 = (e, t, r) => Uh.BASE.multiplyAndAddUnsafe(e, t, r);
function md(e) {
  let t = pn.utils.normPrivateKeyToScalar(e), r = Uh.fromPrivateKey(t);
  return { scalar: r.hasEvenY() ? t : na(-t), bytes: $h(r) };
}
function fy(e) {
  if (!ly(e))
    throw new Error("bad x: need 0 < x < p");
  const t = bf(e * e), r = bf(t * e + BigInt(7));
  let n = uy(r);
  n % ru !== Wu && (n = bf(-n));
  const o = new Uh(e, n, cy);
  return o.assertValidity(), o;
}
function dy(...e) {
  return na(Jt(nu("BIP0340/challenge", ...e)));
}
function n3(e) {
  return md(e).bytes;
}
function o3(e, t, r = Jb(32)) {
  const n = Mt("message", e), { bytes: o, scalar: i } = md(t), s = Mt("auxRand", r, 32), a = gd(i ^ Jt(nu("BIP0340/aux", s))), c = nu("BIP0340/nonce", a, o, n), u = na(Jt(c));
  if (u === Wu)
    throw new Error("sign failed: k is zero");
  const { bytes: f, scalar: l } = md(u), d = dy(f, o, n), m = new Uint8Array(64);
  if (m.set(f, 0), m.set(gd(na(l + d * i)), 32), !hy(m, n, o))
    throw new Error("sign: Invalid signature produced");
  return m;
}
function hy(e, t, r) {
  const n = Mt("signature", e, 64), o = Mt("message", t), i = Mt("publicKey", r, 32);
  try {
    const s = fy(Jt(i)), a = Jt(n.subarray(0, 32));
    if (!ly(a))
      return !1;
    const c = Jt(n.subarray(32, 64));
    if (!t3(c))
      return !1;
    const u = dy(gd(a), $h(s), o), f = r3(s, c, na(-u));
    return !(!f || !f.hasEvenY() || f.toAffine().x !== a);
  } catch {
    return !1;
  }
}
const i3 = {
  getPublicKey: n3,
  sign: o3,
  verify: hy,
  utils: {
    randomPrivateKey: pn.utils.randomPrivateKey,
    lift_x: fy,
    pointToBytes: $h,
    numberToBytesBE: _o,
    bytesToNumberBE: Jt,
    taggedHash: nu,
    mod: Bt
  }
}, s3 = YT(ko, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((e) => e.map((t) => BigInt(t)))), a3 = VT(ko, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: ko.create(BigInt("-11"))
});
JT(pn.ProjectivePoint, (e) => {
  const { x: t, y: r } = a3(ko.create(e[0]));
  return s3(t, r);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: ko.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: Qc
});
function bd(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
function c3(e) {
  if (typeof e != "boolean")
    throw new Error(`Expected boolean, not ${e}`);
}
function py(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new TypeError("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function u3(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  bd(e.outputLen), bd(e.blockLen);
}
function l3(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function f3(e, t) {
  py(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const d3 = {
  number: bd,
  bool: c3,
  bytes: py,
  hash: u3,
  exists: l3,
  output: f3
};
var yf = d3;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const wf = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), on = (e, t) => e << 32 - t | e >>> t, h3 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!h3)
  throw new Error("Non little-endian hardware is not supported");
Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function p3(e) {
  if (typeof e != "string")
    throw new TypeError(`utf8ToBytes expected string, got ${typeof e}`);
  return new TextEncoder().encode(e);
}
function gy(e) {
  if (typeof e == "string" && (e = p3(e)), !(e instanceof Uint8Array))
    throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);
  return e;
}
let g3 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function my(e) {
  const t = (n) => e().update(gy(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function m3(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
let b3 = class extends g3 {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = wf(this.buffer);
  }
  update(t) {
    yf.exists(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = gy(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = wf(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    yf.exists(this), yf.output(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    m3(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = wf(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
};
const y3 = (e, t, r) => e & t ^ ~e & r, w3 = (e, t, r) => e & t ^ e & r ^ t & r, v3 = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), io = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), so = new Uint32Array(64);
let by = class extends b3 {
  constructor() {
    super(64, 32, 8, !1), this.A = io[0] | 0, this.B = io[1] | 0, this.C = io[2] | 0, this.D = io[3] | 0, this.E = io[4] | 0, this.F = io[5] | 0, this.G = io[6] | 0, this.H = io[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      so[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const d = so[l - 15], m = so[l - 2], g = on(d, 7) ^ on(d, 18) ^ d >>> 3, y = on(m, 17) ^ on(m, 19) ^ m >>> 10;
      so[l] = y + so[l - 7] + g + so[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const d = on(a, 6) ^ on(a, 11) ^ on(a, 25), m = f + d + y3(a, c, u) + v3[l] + so[l] | 0, y = (on(n, 2) ^ on(n, 13) ^ on(n, 22)) + w3(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    so.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}, E3 = class extends by {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
};
const yd = my(() => new by());
my(() => new E3());
function x3(e, t) {
  if (e.length > t)
    throw new TypeError(`Data is larger than array size: ${e.length} > ${t}`);
}
function _3(e) {
  if (e.match(/[^a-fA-f0-9]/) !== null)
    throw new TypeError("Invalid characters in hex string: " + e);
  if (e.length % 2 !== 0)
    throw new Error(`Length of hex string is invalid: ${e.length}`);
}
function S3(e) {
  if (e > Number.MAX_SAFE_INTEGER)
    throw new TypeError("Number exceeds safe bounds!");
}
const { getRandomValues: A3 } = crypto ?? globalThis.crypto ?? window.crypto;
function k3(e = 32) {
  if (typeof A3 == "function")
    return crypto.getRandomValues(new Uint8Array(e));
  throw new Error("Crypto module missing getRandomValues!");
}
function T3(e, t, r = "be") {
  t === void 0 && (t = e.length), x3(e, t);
  const n = new Uint8Array(t).fill(0), o = r === "be" ? 0 : t - e.length;
  return n.set(e, o), n;
}
function yy(e) {
  let t, r = 0;
  const n = e.reduce((i, s) => i + s.length, 0), o = new Uint8Array(n);
  for (t = 0; t < e.length; t++) {
    const i = e[t];
    o.set(i, r), r += i.length;
  }
  return o;
}
const I3 = new TextEncoder(), P3 = [
  {
    name: "base58",
    charset: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
  }
];
function wy(e) {
  for (const t of P3)
    if (t.name === e)
      return t.charset;
  throw TypeError("Charset does not exist: " + e);
}
function O3(e, t, r = !1) {
  typeof e == "string" && (e = I3.encode(e));
  const n = wy(t), o = n.length, i = [];
  let s = "", a, c = 0, u, f;
  for (a = 0; a < e.length; a++)
    for (c = 0, u = e[a], s += u > 0 || (s.length ^ a) > 0 ? "" : "1"; c in i || u > 0; )
      f = i[c], f = f > 0 ? f * 256 + u : u, u = f / o | 0, i[c] = f % o, c++;
  for (; c-- > 0; )
    s += n[i[c]];
  return r && s.length % 4 > 0 ? s + "=".repeat(4 - s.length % 4) : s;
}
function B3(e, t) {
  const r = wy(t), n = r.length, o = [], i = [];
  e = e.replace("=", "");
  let s, a = 0, c, u;
  for (s = 0; s < e.length; s++) {
    if (a = 0, c = r.indexOf(e[s]), c < 0)
      throw new Error(`Character range out of bounds: ${c}`);
    for (c > 0 || (i.length ^ s) > 0 || i.push(0); a in o || c > 0; )
      u = o[a], u = u > 0 ? u * n + c : c, c = u >> 8, o[a] = u % 256, a++;
  }
  for (; a-- > 0; )
    i.push(o[a]);
  return new Uint8Array(i);
}
function vy(e) {
  return yd(yd(e));
}
function N3(e) {
  const t = vy(e);
  return yy([e, t.slice(0, 4)]);
}
function $3(e) {
  const t = e.slice(0, -4), r = e.slice(-4);
  if (vy(t).slice(0, 4).toString() !== r.toString())
    throw new Error("Invalid checksum!");
  return t;
}
const X0 = {
  encode: O3,
  decode: B3
}, Ey = {
  encode: (e) => {
    const t = N3(e);
    return X0.encode(t, "base58");
  },
  decode: (e) => {
    const t = X0.decode(e, "base58");
    return $3(t);
  }
}, xy = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", U3 = [996825010, 642813549, 513874426, 1027748829, 705979059], ou = [
  { version: 0, name: "bech32", const: 1 },
  { version: 1, name: "bech32m", const: 734539939 }
];
function _y(e) {
  let t = 1;
  for (let r = 0; r < e.length; ++r) {
    const n = t >> 25;
    t = (t & 33554431) << 5 ^ e[r];
    for (let o = 0; o < 5; ++o)
      n >> o & 1 && (t ^= U3[o]);
  }
  return t;
}
function Sy(e) {
  const t = [];
  let r;
  for (r = 0; r < e.length; ++r)
    t.push(e.charCodeAt(r) >> 5);
  for (t.push(0), r = 0; r < e.length; ++r)
    t.push(e.charCodeAt(r) & 31);
  return t;
}
function R3(e, t, r) {
  const n = Sy(e).concat(t);
  return _y(n) === r.const;
}
function C3(e, t, r) {
  const n = Sy(e).concat(t).concat([0, 0, 0, 0, 0, 0]), o = _y(n) ^ r.const, i = [];
  for (let s = 0; s < 6; ++s)
    i.push(o >> 5 * (5 - s) & 31);
  return i;
}
function Ay(e, t, r, n = !0) {
  const o = [];
  let i = 0, s = 0;
  const a = (1 << r) - 1, c = (1 << t + r - 1) - 1;
  for (const u of e) {
    if (u < 0 || u >> t > 0)
      throw new Error("Failed to perform base conversion. Invalid value: " + String(u));
    for (i = (i << t | u) & c, s += t; s >= r; )
      s -= r, o.push(i >> s & a);
  }
  if (n)
    s > 0 && o.push(i << r - s & a);
  else if (s >= t || (i << r - s & a) > 0)
    throw new Error("Failed to perform base conversion. Invalid Size!");
  return o;
}
function H3(e, t, r) {
  const n = t.concat(C3(e, t, r));
  let o = e + "1";
  for (let i = 0; i < n.length; ++i)
    o += xy.charAt(n[i]);
  return o;
}
function ky(e) {
  if (!L3(e))
    throw new Error("Encoded string goes out of bounds!");
  if (e = e.toLowerCase(), !z3(e))
    throw new Error("Encoded string has invalid separator!");
  const t = [], r = e.lastIndexOf("1"), n = e.substring(0, r);
  for (let i = r + 1; i < e.length; ++i) {
    const s = xy.indexOf(e.charAt(i));
    if (s === -1)
      throw new Error("Character idx out of bounds: " + String(i));
    t.push(s);
  }
  const o = ou.find((i) => i.version === t[0]) ?? ou[0];
  if (!R3(n, t, o))
    throw new Error("Checksum verification failed!");
  return [n, t.slice(0, t.length - 6)];
}
function L3(e) {
  let t, r, n = !1, o = !1;
  for (t = 0; t < e.length; ++t) {
    if (r = e.charCodeAt(t), r < 33 || r > 126)
      return !1;
    r >= 97 && r <= 122 && (n = !0), r >= 65 && r <= 90 && (o = !0);
  }
  return !(n && o);
}
function z3(e) {
  const t = e.lastIndexOf("1");
  return !(t < 1 || t + 7 > e.length || e.length > 90);
}
function j3(e, t = "bc", r = 0) {
  const n = [r, ...Ay([...e], 8, 5)], o = ou.find((s) => s.version === r) ?? ou[0], i = H3(t, n, o);
  return Ty(i), i;
}
function Ty(e) {
  e = e.toLowerCase();
  const t = e.split("1", 1)[0], [r, n] = ky(e), o = Ay(n.slice(1), 5, 8, !1), i = o.length;
  switch (!0) {
    case t !== r:
      throw new Error("Returned hrp string is invalid.");
    case (o === null || i < 2 || i > 40):
      throw new Error("Decoded string is invalid or out of spec.");
    case n[0] > 16:
      throw new Error("Returned version bit is out of range.");
    default:
      return Uint8Array.from(o);
  }
}
function M3(e) {
  e = e.toLowerCase();
  const [t, r] = ky(e);
  return r[0];
}
const Iy = {
  encode: j3,
  decode: Ty,
  version: M3
}, Py = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", Oy = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", D3 = new TextEncoder();
function By(e, t = !1, r = !0) {
  typeof e == "string" && (e = D3.encode(e));
  const n = t ? Oy : Py;
  let o = "", i = 0, s = 0;
  for (let a = 0; a < e.length; a++)
    for (s = s << 8 | e[a], i += 8; i >= 6; )
      i -= 6, o += n[s >> i & 63];
  if (i > 0)
    for (s <<= 6 - i, o += n[s & 63]; i < 6; )
      o += r ? "=" : "", i += 2;
  return o;
}
function Ny(e, t = !1) {
  const r = t || e.includes("-") || e.includes("_") ? Oy.split("") : Py.split("");
  e = e.replace(/=+$/, "");
  const n = e.split("");
  let o = 0, i = 0;
  const s = [];
  for (let a = 0; a < n.length; a++) {
    const c = n[a], u = r.indexOf(c);
    if (u === -1)
      throw new Error("Invalid character: " + c);
    o += 6, i <<= 6, i |= u, o >= 8 && (o -= 8, s.push(i >>> o & 255));
  }
  return new Uint8Array(s);
}
const $y = {
  encode: By,
  decode: Ny
}, Uy = {
  encode: (e) => By(e, !0, !1),
  decode: (e) => Ny(e, !0)
}, F3 = BigInt(0), K3 = BigInt(255), Ry = BigInt(256);
function V3(e) {
  if (e <= 0xffn)
    return 1;
  if (e <= 0xffffn)
    return 2;
  if (e <= 0xffffffffn)
    return 4;
  if (e <= 0xffffffffffffffffn)
    return 8;
  if (e <= 0xffffffffffffffffffffffffffffffffn)
    return 16;
  if (e <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn)
    return 32;
  throw new TypeError("Must specify a fixed buffer size for bigints greater than 32 bytes.");
}
function q3(e, t, r = "be") {
  t === void 0 && (t = V3(e));
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (; e > F3; ) {
    const a = e & K3, c = Number(a);
    n ? i.setUint8(s++, c) : i.setUint8(s--, c), e = (e - a) / Ry;
  }
  return new Uint8Array(o);
}
function G3(e) {
  let t = BigInt(0);
  for (let r = e.length - 1; r >= 0; r--)
    t = t * Ry + BigInt(e[r]);
  return BigInt(t);
}
function W3(e) {
  const t = e.split("").map(Number);
  if (t.length % 8 !== 0)
    throw new Error(`Binary array is invalid length: ${e.length}`);
  const r = new Uint8Array(t.length / 8);
  for (let n = 0, o = 0; n < t.length; n += 8, o++) {
    let i = 0;
    for (let s = 0; s < 8; s++)
      i |= t[n + s] << 7 - s;
    r[o] = i;
  }
  return r;
}
function Z3(e) {
  const t = new Array(e.length * 8);
  let r = 0;
  for (const n of e) {
    if (n > 255)
      throw new Error(`Invalid byte value: ${n}. Byte values must be between 0 and 255.`);
    for (let o = 7; o >= 0; o--, r++)
      t[r] = n >> o & 1;
  }
  return t.join("");
}
function X3(e) {
  if (e <= 255)
    return 1;
  if (e <= 65535)
    return 2;
  if (e <= 4294967295)
    return 4;
  throw new TypeError("Numbers larger than 4 bytes must specify a fixed size!");
}
function Y3(e, t, r = "be") {
  t === void 0 && (t = X3(e));
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (; e > 0; ) {
    const a = e & 255;
    n ? i.setUint8(s++, e) : i.setUint8(s--, e), e = (e - a) / 256;
  }
  return new Uint8Array(o);
}
function J3(e) {
  let t = 0;
  for (let r = e.length - 1; r >= 0; r--)
    t = t * 256 + e[r], S3(t);
  return t;
}
const Q3 = new TextEncoder(), eI = new TextDecoder();
function Rh(e) {
  return Q3.encode(e);
}
function vf(e) {
  return eI.decode(e);
}
function tI(e, t) {
  _3(e);
  const r = e.length / 2;
  if (t === void 0 && (t = r), r > t)
    throw new TypeError(`Hex string is larger than array size: ${r} > ${t}`);
  return t;
}
function rI(e, t, r = "le") {
  t = tI(e, t);
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (let a = 0; a < e.length; a += 2) {
    const c = e.substring(a, a + 2), u = parseInt(c, 16);
    n ? i.setUint8(s++, u) : i.setUint8(s--, u);
  }
  return new Uint8Array(o);
}
function nI(e) {
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += e[r].toString(16).padStart(2, "0");
  return t;
}
function oI(e) {
  const t = JSON.stringify(e, (r, n) => typeof n == "bigint" ? `${n}n` : n);
  return Rh(t);
}
function iI(e, t, r) {
  if (e instanceof ArrayBuffer)
    return new Uint8Array(e);
  if (e instanceof Uint8Array)
    return T3(e, t, r);
  if (typeof e == "string")
    return rI(e, t, r);
  if (typeof e == "bigint")
    return q3(e, t, r);
  if (typeof e == "number")
    return Y3(e, t, r);
  if (typeof e == "boolean")
    return Uint8Array.of(e ? 1 : 0);
  throw TypeError("Unsupported format:" + typeof e);
}
const $e = class $e extends Uint8Array {
  static random(t = 32) {
    const r = k3(t);
    return new $e(r, t);
  }
  constructor(t, r, n) {
    const o = iI(t, r, n);
    super(o);
  }
  get arr() {
    return [...this];
  }
  get num() {
    return this.toNum();
  }
  get big() {
    return this.toBig();
  }
  get str() {
    return this.toStr();
  }
  get hex() {
    return this.toHex();
  }
  get raw() {
    return new Uint8Array(this);
  }
  get bin() {
    return this.toBin();
  }
  get b58chk() {
    return this.tob58chk();
  }
  get base64() {
    return this.toBase64();
  }
  get b64url() {
    return this.toB64url();
  }
  get digest() {
    return this.toHash();
  }
  get id() {
    return this.toHash().hex;
  }
  get stream() {
    return new yI(this);
  }
  toNum(t = "be") {
    const r = t === "be" ? this.reverse() : this;
    return J3(r);
  }
  toBin() {
    return Z3(this);
  }
  toBig(t = "be") {
    const r = t === "be" ? this.reverse() : this;
    return G3(r);
  }
  toHash() {
    const t = yd(this);
    return new $e(t);
  }
  toJson() {
    const t = vf(this);
    return JSON.parse(t);
  }
  toBech32(t, r = 0) {
    return Iy.encode(this, t, r);
  }
  toStr() {
    return vf(this);
  }
  toHex() {
    return nI(this);
  }
  toBytes() {
    return new Uint8Array(this);
  }
  tob58chk() {
    return Ey.encode(this);
  }
  toBase64() {
    return $y.encode(this);
  }
  toB64url() {
    return Uy.encode(this);
  }
  prepend(t) {
    return $e.join([$e.bytes(t), this]);
  }
  append(t) {
    return $e.join([this, $e.bytes(t)]);
  }
  slice(t, r) {
    const n = new Uint8Array(this).slice(t, r);
    return new $e(n);
  }
  subarray(t, r) {
    const n = new Uint8Array(this).subarray(t, r);
    return new $e(n);
  }
  reverse() {
    const t = new Uint8Array(this).reverse();
    return new $e(t);
  }
  write(t, r) {
    const n = $e.bytes(t);
    this.set(n, r);
  }
  prefixSize(t) {
    const r = $e.varInt(this.length, t);
    return $e.join([r, this]);
  }
  static from(t) {
    return new $e(Uint8Array.from(t));
  }
  static of(...t) {
    return new $e(Uint8Array.of(...t));
  }
  static join(t) {
    const r = t.map((o) => $e.bytes(o)), n = yy(r);
    return new $e(n);
  }
  static varInt(t, r) {
    if (t < 253)
      return $e.num(t, 1);
    if (t < 65536)
      return $e.of(253, ...$e.num(t, 2, r));
    if (t < 4294967296)
      return $e.of(254, ...$e.num(t, 4, r));
    if (BigInt(t) < 0x10000000000000000n)
      return $e.of(255, ...$e.num(t, 8, r));
    throw new Error(`Value is too large: ${t}`);
  }
};
$e.num = sI, $e.big = cI, $e.bin = aI, $e.raw = uI, $e.str = lI, $e.hex = fI, $e.bytes = dI, $e.json = hI, $e.base64 = pI, $e.b64url = gI, $e.bech32 = mI, $e.b58chk = bI, $e.encode = Rh, $e.decode = vf;
let we = $e;
function sI(e, t, r) {
  return new we(e, t, r);
}
function aI(e, t, r) {
  return new we(W3(e), t, r);
}
function cI(e, t, r) {
  return new we(e, t, r);
}
function uI(e, t, r) {
  return new we(e, t, r);
}
function lI(e, t, r) {
  return new we(Rh(e), t, r);
}
function fI(e, t, r) {
  return new we(e, t, r);
}
function dI(e, t, r) {
  return new we(e, t, r);
}
function hI(e) {
  return new we(oI(e));
}
function pI(e) {
  return new we($y.decode(e));
}
function gI(e) {
  return new we(Uy.decode(e));
}
function mI(e) {
  return new we(Iy.decode(e));
}
function bI(e) {
  return new we(Ey.decode(e));
}
class yI {
  constructor(t) {
    this.data = we.bytes(t), this.size = this.data.length;
  }
  peek(t) {
    if (t > this.size)
      throw new Error(`Size greater than stream: ${t} > ${this.size}`);
    return new we(this.data.slice(0, t));
  }
  read(t) {
    t = t ?? this.readSize();
    const r = this.peek(t);
    return this.data = this.data.slice(t), this.size = this.data.length, r;
  }
  readSize(t) {
    const r = this.read(1).num;
    switch (!0) {
      case (r >= 0 && r < 253):
        return r;
      case r === 253:
        return this.read(2).toNum(t);
      case r === 254:
        return this.read(4).toNum(t);
      case r === 255:
        return this.read(8).toNum(t);
      default:
        throw new Error(`Varint is out of range: ${r}`);
    }
  }
}
const iu = pn.CURVE, Ch = iu.n, wI = iu.p, vI = { x: iu.Gx, y: iu.Gy }, EI = BigInt(0), xI = BigInt(1), _I = BigInt(2), SI = BigInt(3), AI = BigInt(4), wd = { N: Ch, P: wI, G: vI, _0n: EI, _1n: xI, _2n: _I, _3n: SI, _4n: AI }, Ns = oy(Ch, 32, !0), Cy = (e) => Bt(e, Ch);
function Hh(e, t = !1) {
  if (t)
    throw new Error(e);
  return !1;
}
function Hy(e) {
  return we.random(e);
}
function kI(e) {
  const t = we.bytes(e).big;
  return we.big(Cy(t), 32);
}
var TI = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  fail: Hh,
  mod_bytes: kI,
  random: Hy
});
const { N: II, P: M7, _0n: PI } = wd;
function OI(e, t, r) {
  const n = we.bytes(e);
  return n.length !== t ? Hh(`Invalid byte size: ${n.hex} !== ${t}`, r) : !0;
}
function BI(e, t) {
  return typeof e == "bigint" && PI < e && e < II || Hh("x value is not in the field!", t), !0;
}
const Y0 = pn.ProjectivePoint, bt = class bt extends Uint8Array {
  static mod(t) {
    return new bt(t);
  }
  static is_valid(t, r) {
    const n = we.bytes(t, 32).big;
    return BI(n, r);
  }
  constructor(t) {
    let r = NI(t);
    r = Cy(r), bt.is_valid(r, !0), super(we.big(r, 32), 32);
  }
  get buff() {
    return new we(this);
  }
  get raw() {
    return this.buff.raw;
  }
  get big() {
    return this.buff.big;
  }
  get hex() {
    return this.buff.hex;
  }
  get point() {
    return this.generate();
  }
  get hasOddY() {
    return this.point.hasOddY;
  }
  get negated() {
    return this.hasOddY ? this.negate() : this;
  }
  gt(t) {
    return new bt(t).big > this.big;
  }
  lt(t) {
    return new bt(t).big < this.big;
  }
  eq(t) {
    return new bt(t).big === this.big;
  }
  ne(t) {
    return new bt(t).big !== this.big;
  }
  add(t) {
    const r = bt.mod(t), n = Ns.add(this.big, r.big);
    return new bt(n);
  }
  sub(t) {
    const r = bt.mod(t), n = Ns.sub(this.big, r.big);
    return new bt(n);
  }
  mul(t) {
    const r = bt.mod(t), n = Ns.mul(this.big, r.big);
    return new bt(n);
  }
  pow(t) {
    const r = bt.mod(t), n = Ns.pow(this.big, r.big);
    return new bt(n);
  }
  div(t) {
    const r = bt.mod(t), n = Ns.div(this.big, r.big);
    return new bt(n);
  }
  negate() {
    return new bt(bt.N - this.big);
  }
  generate() {
    const r = pn.ProjectivePoint.BASE.multiply(this.big);
    return Ln.import(r);
  }
};
bt.N = pn.CURVE.n;
let Dt = bt;
const ot = class ot {
  static from_x(t) {
    let r = $I(t);
    r.length === 32 && (r = r.prepend(2)), OI(r, 33);
    const n = Y0.fromHex(r.hex);
    return n.assertValidity(), new ot(n.x, n.y);
  }
  static generate(t) {
    const r = Dt.mod(t), n = ot.base.multiply(r.big);
    return ot.import(n);
  }
  static import(t) {
    const r = t instanceof ot ? { x: t.x.big, y: t.y.big } : { x: t.x, y: t.y };
    return new ot(r.x, r.y);
  }
  constructor(t, r) {
    this._p = new Y0(t, r, 1n), this.p.assertValidity();
  }
  get p() {
    return this._p;
  }
  get x() {
    return we.big(this.p.x, 32);
  }
  get y() {
    return we.big(this.p.y, 32);
  }
  get buff() {
    return we.raw(this.p.toRawBytes(!0));
  }
  get raw() {
    return this.buff.raw;
  }
  get hex() {
    return this.buff.hex;
  }
  get hasEvenY() {
    return this.p.hasEvenY();
  }
  get hasOddY() {
    return !this.p.hasEvenY();
  }
  eq(t) {
    const r = t instanceof ot ? t : ot.from_x(t);
    return this.x.big === r.x.big && this.y.big === r.y.big;
  }
  add(t) {
    return t instanceof ot ? ot.import(this.p.add(t.p)) : ot.import(this.p.add(ot.generate(t).p));
  }
  sub(t) {
    return t instanceof ot ? ot.import(this.p.subtract(t.p)) : ot.import(this.p.subtract(ot.generate(t).p));
  }
  mul(t) {
    return t instanceof ot ? ot.import(this.p.multiply(t.x.big)) : ot.import(this.p.multiply(Dt.mod(t).big));
  }
  negate() {
    return ot.import(this.p.negate());
  }
};
ot.P = wd.P, ot.G = wd.G, ot.base = pn.ProjectivePoint.BASE;
let Ln = ot;
function NI(e) {
  if (e instanceof Dt)
    return e.big;
  if (e instanceof Ln)
    return e.x.big;
  if (e instanceof Uint8Array)
    return we.raw(e).big;
  if (typeof e == "string")
    return we.hex(e).big;
  if (typeof e == "number")
    return we.num(e).big;
  if (typeof e == "bigint")
    return BigInt(e);
  throw TypeError("Invalid input type:" + typeof e);
}
function $I(e) {
  if (e instanceof Dt)
    return e.point.buff;
  if (e instanceof Ln)
    return e.buff;
  if (e instanceof Uint8Array || typeof e == "string")
    return we.bytes(e);
  if (typeof e == "number" || typeof e == "bigint")
    return we.bytes(e, 32);
  throw new TypeError(`Unknown type: ${typeof e}`);
}
function vd(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
function UI(e) {
  if (typeof e != "boolean")
    throw new Error(`Expected boolean, not ${e}`);
}
function Ly(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function RI(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  vd(e.outputLen), vd(e.blockLen);
}
function CI(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function HI(e, t) {
  Ly(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const LI = {
  number: vd,
  bool: UI,
  bytes: Ly,
  hash: RI,
  exists: CI,
  output: HI
};
var Xo = LI;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const zI = (e) => e instanceof Uint8Array, Ef = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), sn = (e, t) => e << 32 - t | e >>> t, jI = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!jI)
  throw new Error("Non little-endian hardware is not supported");
Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function MI(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
function Lh(e) {
  if (typeof e == "string" && (e = MI(e)), !zI(e))
    throw new Error(`expected Uint8Array, got ${typeof e}`);
  return e;
}
class zy {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
function bi(e) {
  const t = (n) => e().update(Lh(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function DI(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
class zh extends zy {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = Ef(this.buffer);
  }
  update(t) {
    Xo.exists(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = Lh(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = Ef(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    Xo.exists(this), Xo.output(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    DI(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = Ef(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
}
const FI = (e, t, r) => e & t ^ ~e & r, KI = (e, t, r) => e & t ^ e & r ^ t & r, VI = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), ao = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), co = new Uint32Array(64);
let jy = class extends zh {
  constructor() {
    super(64, 32, 8, !1), this.A = ao[0] | 0, this.B = ao[1] | 0, this.C = ao[2] | 0, this.D = ao[3] | 0, this.E = ao[4] | 0, this.F = ao[5] | 0, this.G = ao[6] | 0, this.H = ao[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      co[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const d = co[l - 15], m = co[l - 2], g = sn(d, 7) ^ sn(d, 18) ^ d >>> 3, y = sn(m, 17) ^ sn(m, 19) ^ m >>> 10;
      co[l] = y + co[l - 7] + g + co[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const d = sn(a, 6) ^ sn(a, 11) ^ sn(a, 25), m = f + d + FI(a, c, u) + VI[l] + co[l] | 0, y = (sn(n, 2) ^ sn(n, 13) ^ sn(n, 22)) + KI(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    co.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}, qI = class extends jy {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
};
const su = bi(() => new jy());
bi(() => new qI());
const dc = BigInt(2 ** 32 - 1), Ed = BigInt(32);
function My(e, t = !1) {
  return t ? { h: Number(e & dc), l: Number(e >> Ed & dc) } : { h: Number(e >> Ed & dc) | 0, l: Number(e & dc) | 0 };
}
function GI(e, t = !1) {
  let r = new Uint32Array(e.length), n = new Uint32Array(e.length);
  for (let o = 0; o < e.length; o++) {
    const { h: i, l: s } = My(e[o], t);
    [r[o], n[o]] = [i, s];
  }
  return [r, n];
}
const WI = (e, t) => BigInt(e >>> 0) << Ed | BigInt(t >>> 0), ZI = (e, t, r) => e >>> r, XI = (e, t, r) => e << 32 - r | t >>> r, YI = (e, t, r) => e >>> r | t << 32 - r, JI = (e, t, r) => e << 32 - r | t >>> r, QI = (e, t, r) => e << 64 - r | t >>> r - 32, e4 = (e, t, r) => e >>> r - 32 | t << 64 - r, t4 = (e, t) => t, r4 = (e, t) => e, n4 = (e, t, r) => e << r | t >>> 32 - r, o4 = (e, t, r) => t << r | e >>> 32 - r, i4 = (e, t, r) => t << r - 32 | e >>> 64 - r, s4 = (e, t, r) => e << r - 32 | t >>> 64 - r;
function a4(e, t, r, n) {
  const o = (t >>> 0) + (n >>> 0);
  return { h: e + r + (o / 2 ** 32 | 0) | 0, l: o | 0 };
}
const c4 = (e, t, r) => (e >>> 0) + (t >>> 0) + (r >>> 0), u4 = (e, t, r, n) => t + r + n + (e / 2 ** 32 | 0) | 0, l4 = (e, t, r, n) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0), f4 = (e, t, r, n, o) => t + r + n + o + (e / 2 ** 32 | 0) | 0, d4 = (e, t, r, n, o) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0) + (o >>> 0), h4 = (e, t, r, n, o, i) => t + r + n + o + i + (e / 2 ** 32 | 0) | 0, p4 = {
  fromBig: My,
  split: GI,
  toBig: WI,
  shrSH: ZI,
  shrSL: XI,
  rotrSH: YI,
  rotrSL: JI,
  rotrBH: QI,
  rotrBL: e4,
  rotr32H: t4,
  rotr32L: r4,
  rotlSH: n4,
  rotlSL: o4,
  rotlBH: i4,
  rotlBL: s4,
  add: a4,
  add3L: c4,
  add3H: u4,
  add4L: l4,
  add4H: f4,
  add5H: h4,
  add5L: d4
};
var Oe = p4;
const [g4, m4] = Oe.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((e) => BigInt(e))), uo = new Uint32Array(80), lo = new Uint32Array(80);
let Zu = class extends zh {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: t, Al: r, Bh: n, Bl: o, Ch: i, Cl: s, Dh: a, Dl: c, Eh: u, El: f, Fh: l, Fl: d, Gh: m, Gl: g, Hh: y, Hl: b } = this;
    return [t, r, n, o, i, s, a, c, u, f, l, d, m, g, y, b];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c, u, f, l, d, m, g, y, b) {
    this.Ah = t | 0, this.Al = r | 0, this.Bh = n | 0, this.Bl = o | 0, this.Ch = i | 0, this.Cl = s | 0, this.Dh = a | 0, this.Dl = c | 0, this.Eh = u | 0, this.El = f | 0, this.Fh = l | 0, this.Fl = d | 0, this.Gh = m | 0, this.Gl = g | 0, this.Hh = y | 0, this.Hl = b | 0;
  }
  process(t, r) {
    for (let w = 0; w < 16; w++, r += 4)
      uo[w] = t.getUint32(r), lo[w] = t.getUint32(r += 4);
    for (let w = 16; w < 80; w++) {
      const k = uo[w - 15] | 0, S = lo[w - 15] | 0, I = Oe.rotrSH(k, S, 1) ^ Oe.rotrSH(k, S, 8) ^ Oe.shrSH(k, S, 7), T = Oe.rotrSL(k, S, 1) ^ Oe.rotrSL(k, S, 8) ^ Oe.shrSL(k, S, 7), B = uo[w - 2] | 0, C = lo[w - 2] | 0, F = Oe.rotrSH(B, C, 19) ^ Oe.rotrBH(B, C, 61) ^ Oe.shrSH(B, C, 6), V = Oe.rotrSL(B, C, 19) ^ Oe.rotrBL(B, C, 61) ^ Oe.shrSL(B, C, 6), R = Oe.add4L(T, V, lo[w - 7], lo[w - 16]), G = Oe.add4H(R, I, F, uo[w - 7], uo[w - 16]);
      uo[w] = G | 0, lo[w] = R | 0;
    }
    let { Ah: n, Al: o, Bh: i, Bl: s, Ch: a, Cl: c, Dh: u, Dl: f, Eh: l, El: d, Fh: m, Fl: g, Gh: y, Gl: b, Hh: E, Hl: x } = this;
    for (let w = 0; w < 80; w++) {
      const k = Oe.rotrSH(l, d, 14) ^ Oe.rotrSH(l, d, 18) ^ Oe.rotrBH(l, d, 41), S = Oe.rotrSL(l, d, 14) ^ Oe.rotrSL(l, d, 18) ^ Oe.rotrBL(l, d, 41), I = l & m ^ ~l & y, T = d & g ^ ~d & b, B = Oe.add5L(x, S, T, m4[w], lo[w]), C = Oe.add5H(B, E, k, I, g4[w], uo[w]), F = B | 0, V = Oe.rotrSH(n, o, 28) ^ Oe.rotrBH(n, o, 34) ^ Oe.rotrBH(n, o, 39), R = Oe.rotrSL(n, o, 28) ^ Oe.rotrBL(n, o, 34) ^ Oe.rotrBL(n, o, 39), G = n & i ^ n & a ^ i & a, K = o & s ^ o & c ^ s & c;
      E = y | 0, x = b | 0, y = m | 0, b = g | 0, m = l | 0, g = d | 0, { h: l, l: d } = Oe.add(u | 0, f | 0, C | 0, F | 0), u = a | 0, f = c | 0, a = i | 0, c = s | 0, i = n | 0, s = o | 0;
      const N = Oe.add3L(F, R, K);
      n = Oe.add3H(N, C, V, G), o = N | 0;
    }
    ({ h: n, l: o } = Oe.add(this.Ah | 0, this.Al | 0, n | 0, o | 0)), { h: i, l: s } = Oe.add(this.Bh | 0, this.Bl | 0, i | 0, s | 0), { h: a, l: c } = Oe.add(this.Ch | 0, this.Cl | 0, a | 0, c | 0), { h: u, l: f } = Oe.add(this.Dh | 0, this.Dl | 0, u | 0, f | 0), { h: l, l: d } = Oe.add(this.Eh | 0, this.El | 0, l | 0, d | 0), { h: m, l: g } = Oe.add(this.Fh | 0, this.Fl | 0, m | 0, g | 0), { h: y, l: b } = Oe.add(this.Gh | 0, this.Gl | 0, y | 0, b | 0), { h: E, l: x } = Oe.add(this.Hh | 0, this.Hl | 0, E | 0, x | 0), this.set(n, o, i, s, a, c, u, f, l, d, m, g, y, b, E, x);
  }
  roundClean() {
    uo.fill(0), lo.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}, b4 = class extends Zu {
  constructor() {
    super(), this.Ah = -1942145080, this.Al = 424955298, this.Bh = 1944164710, this.Bl = -1982016298, this.Ch = 502970286, this.Cl = 855612546, this.Dh = 1738396948, this.Dl = 1479516111, this.Eh = 258812777, this.El = 2077511080, this.Fh = 2011393907, this.Fl = 79989058, this.Gh = 1067287976, this.Gl = 1780299464, this.Hh = 286451373, this.Hl = -1848208735, this.outputLen = 28;
  }
}, y4 = class extends Zu {
  constructor() {
    super(), this.Ah = 573645204, this.Al = -64227540, this.Bh = -1621794909, this.Bl = -934517566, this.Ch = 596883563, this.Cl = 1867755857, this.Dh = -1774684391, this.Dl = 1497426621, this.Eh = -1775747358, this.El = -1467023389, this.Fh = -1101128155, this.Fl = 1401305490, this.Gh = 721525244, this.Gl = 746961066, this.Hh = 246885852, this.Hl = -2117784414, this.outputLen = 32;
  }
}, w4 = class extends Zu {
  constructor() {
    super(), this.Ah = -876896931, this.Al = -1056596264, this.Bh = 1654270250, this.Bl = 914150663, this.Ch = -1856437926, this.Cl = 812702999, this.Dh = 355462360, this.Dl = -150054599, this.Eh = 1731405415, this.El = -4191439, this.Fh = -1900787065, this.Fl = 1750603025, this.Gh = -619958771, this.Gl = 1694076839, this.Hh = 1203062813, this.Hl = -1090891868, this.outputLen = 48;
  }
};
const v4 = bi(() => new Zu());
bi(() => new b4());
bi(() => new y4());
bi(() => new w4());
const E4 = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]), Dy = Uint8Array.from({ length: 16 }, (e, t) => t), x4 = Dy.map((e) => (9 * e + 5) % 16);
let jh = [Dy], Mh = [x4];
for (let e = 0; e < 4; e++)
  for (let t of [jh, Mh])
    t.push(t[e].map((r) => E4[r]));
const Fy = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((e) => new Uint8Array(e)), _4 = jh.map((e, t) => e.map((r) => Fy[t][r])), S4 = Mh.map((e, t) => e.map((r) => Fy[t][r])), A4 = new Uint32Array([0, 1518500249, 1859775393, 2400959708, 2840853838]), k4 = new Uint32Array([1352829926, 1548603684, 1836072691, 2053994217, 0]), hc = (e, t) => e << t | e >>> 32 - t;
function J0(e, t, r, n) {
  return e === 0 ? t ^ r ^ n : e === 1 ? t & r | ~t & n : e === 2 ? (t | ~r) ^ n : e === 3 ? t & n | r & ~n : t ^ (r | ~n);
}
const pc = new Uint32Array(16);
class T4 extends zh {
  constructor() {
    super(64, 20, 8, !0), this.h0 = 1732584193, this.h1 = -271733879, this.h2 = -1732584194, this.h3 = 271733878, this.h4 = -1009589776;
  }
  get() {
    const { h0: t, h1: r, h2: n, h3: o, h4: i } = this;
    return [t, r, n, o, i];
  }
  set(t, r, n, o, i) {
    this.h0 = t | 0, this.h1 = r | 0, this.h2 = n | 0, this.h3 = o | 0, this.h4 = i | 0;
  }
  process(t, r) {
    for (let m = 0; m < 16; m++, r += 4)
      pc[m] = t.getUint32(r, !0);
    let n = this.h0 | 0, o = n, i = this.h1 | 0, s = i, a = this.h2 | 0, c = a, u = this.h3 | 0, f = u, l = this.h4 | 0, d = l;
    for (let m = 0; m < 5; m++) {
      const g = 4 - m, y = A4[m], b = k4[m], E = jh[m], x = Mh[m], w = _4[m], k = S4[m];
      for (let S = 0; S < 16; S++) {
        const I = hc(n + J0(m, i, a, u) + pc[E[S]] + y, w[S]) + l | 0;
        n = l, l = u, u = hc(a, 10) | 0, a = i, i = I;
      }
      for (let S = 0; S < 16; S++) {
        const I = hc(o + J0(g, s, c, f) + pc[x[S]] + b, k[S]) + d | 0;
        o = d, d = f, f = hc(c, 10) | 0, c = s, s = I;
      }
    }
    this.set(this.h1 + a + f | 0, this.h2 + u + d | 0, this.h3 + l + o | 0, this.h4 + n + s | 0, this.h0 + i + c | 0);
  }
  roundClean() {
    pc.fill(0);
  }
  destroy() {
    this.destroyed = !0, this.buffer.fill(0), this.set(0, 0, 0, 0, 0);
  }
}
const I4 = bi(() => new T4());
class Ky extends zy {
  constructor(t, r) {
    super(), this.finished = !1, this.destroyed = !1, Xo.hash(t);
    const n = Lh(r);
    if (this.iHash = t.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o = this.blockLen, i = new Uint8Array(o);
    i.set(n.length > o ? t.create().update(n).digest() : n);
    for (let s = 0; s < i.length; s++)
      i[s] ^= 54;
    this.iHash.update(i), this.oHash = t.create();
    for (let s = 0; s < i.length; s++)
      i[s] ^= 106;
    this.oHash.update(i), i.fill(0);
  }
  update(t) {
    return Xo.exists(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    Xo.exists(this), Xo.bytes(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: r, iHash: n, finished: o, destroyed: i, blockLen: s, outputLen: a } = this;
    return t = t, t.finished = o, t.destroyed = i, t.blockLen = s, t.outputLen = a, t.oHash = r._cloneInto(t.oHash), t.iHash = n._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
}
const Vy = (e, t, r) => new Ky(e, t).update(r).digest();
Vy.create = (e, t) => new Ky(e, t);
function P4(e) {
  const t = we.bytes(e);
  return we.raw(su(t));
}
function rs(e) {
  const t = we.bytes(e);
  return we.raw(su(su(t)));
}
function Dh(e) {
  const t = we.bytes(e);
  return we.raw(I4(su(t)));
}
function O4(e, t) {
  const r = we.bytes(e), n = we.bytes(t);
  return we.raw(Vy(v4, r, n));
}
function B4(e) {
  const t = we.str(e).digest;
  return we.join([t, t]);
}
function N4(e = 32) {
  return Fh(Hy(e));
}
function Fh(e) {
  return Dt.mod(e).buff;
}
function qy(e, t = !1) {
  const r = Dt.mod(e).point;
  return t ? r.x : r.buff;
}
function Gy(e, t) {
  const r = Ln.from_x(t), n = Dt.mod(e);
  return r.mul(n).buff;
}
function $4(e, t, r = "ecdh/code") {
  const n = B4(r), o = Fh(e), i = qy(o), s = we.bytes(t), a = Gy(o, s), c = [i.hex, s.hex];
  return c.sort(), O4(a, we.join([n, ...c]));
}
function U4(e) {
  const t = we.bytes(e);
  switch (!0) {
    case t.length === 32:
      return !0;
    case (t.length === 33 && t[0] === 2):
      return !0;
    case (t.length === 33 && t[0] === 3):
      return !1;
    default:
      throw new TypeError(`Invalid public key: ${t.hex}`);
  }
}
function R4(e) {
  const t = we.bytes(e);
  switch (t.length) {
    case 32:
      return t;
    case 33:
      return t.slice(1, 33);
    default:
      throw new Error(`Invalid key length: ${t.length}`);
  }
}
var C4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  genSecretKey: N4,
  getPublicKey: qy,
  getSecretKey: Fh,
  getSharedCode: $4,
  getSharedKey: Gy,
  is_even_pub: U4,
  xonly_pub: R4
});
we.random(32);
const Wy = { secp: pn, schnorr: i3 }, xd = { ...C4, ...TI };
function Xu(e) {
  const t = H.bytes(e);
  return bn(t, 33), Dh(t);
}
function Zy(e) {
  const t = er.fmt.toBytes(e, !1);
  return Dh(t);
}
function Xy(e) {
  const t = er.fmt.toBytes(e, !1);
  return P4(t);
}
function Yy(e, t = "main") {
  const r = t === "main" ? ["1"] : ["m", "n"];
  for (const n of r)
    if (e.startsWith(n))
      return !0;
  return !1;
}
function Jy(e, t = "main") {
  const r = H.bytes(e), n = t === "main" ? H.num(0) : H.num(111);
  return bn(e, 20), r.prepend(n).tob58chk();
}
function H4(e, t = "main") {
  if (!Yy(e, t))
    throw new TypeError("Invalid p2pkh address!");
  return H.b58chk(e).slice(1);
}
function L4(e) {
  const t = H.bytes(e);
  return bn(t, 20), ["OP_DUP", "OP_HASH160", t.hex, "OP_EQUALVERIFY", "OP_CHECKSIG"];
}
function z4(e, t) {
  const r = Xu(e);
  return Jy(r, t);
}
const Qy = { check: Yy, encode: Jy, decode: H4, hash: Xu, scriptPubKey: L4, fromPubKey: z4 };
function ew(e, t = "main") {
  const r = t === "main" ? ["3"] : ["2"];
  for (const n of r)
    if (e.startsWith(n))
      return !0;
  return !1;
}
function tw(e, t = "main") {
  const r = t === "main" ? H.num(5) : H.num(196), n = H.bytes(e);
  return bn(n, 20), n.prepend(r).tob58chk();
}
function j4(e, t = "main") {
  if (!ew(e, t))
    throw new TypeError(`Invalid p2sh address for network ${t}:` + e);
  return H.b58chk(e).slice(1);
}
function M4(e) {
  return ["OP_HASH160", H.bytes(e).hex, "OP_EQUAL"];
}
function D4(e, t) {
  const r = Zy(e);
  return tw(r, t);
}
const rw = { check: ew, encode: tw, decode: j4, hash: Zy, scriptPubKey: M4, fromScript: D4 }, Kh = {
  main: "bc",
  testnet: "tb",
  signet: "tb",
  regtest: "bcrt"
}, F4 = ["bc1q", "tb1q", "bcrt1q"];
function nw(e) {
  for (const t of F4)
    if (e.startsWith(t))
      return !0;
  return !1;
}
function ow(e, t = "main") {
  const r = Kh[t], n = H.bytes(e);
  return bn(n, 20), n.toBech32(r, 0);
}
function K4(e) {
  if (!nw(e))
    throw new TypeError("Invalid segwit address!");
  return H.bech32(e);
}
function V4(e) {
  const t = H.bytes(e);
  return bn(t, 20), ["OP_0", t.hex];
}
function q4(e, t) {
  const r = Xu(e);
  return ow(r, t);
}
const iw = { check: nw, encode: ow, decode: K4, hash: Xu, scriptPubKey: V4, fromPubKey: q4 }, G4 = ["bc1q", "tb1q", "bcrt1q"];
function sw(e) {
  for (const t of G4)
    if (e.startsWith(t))
      return !0;
  return !1;
}
function aw(e, t = "main") {
  const r = Kh[t], n = H.bytes(e);
  return bn(n, 32), n.toBech32(r, 0);
}
function W4(e) {
  if (!sw(e))
    throw new TypeError("Invalid segwit address!");
  return H.bech32(e);
}
function Z4(e) {
  const t = H.bytes(e);
  return bn(t, 32), ["OP_0", t.hex];
}
function X4(e, t) {
  const r = Xy(e);
  return aw(r, t);
}
const cw = { check: sw, encode: aw, decode: W4, hash: Xy, scriptPubKey: Z4, fromScript: X4 };
function si(e) {
  const t = H.bytes(e);
  return t.length > 32 ? t.slice(1, 33) : t;
}
const Y4 = ["bc1p", "tb1p", "bcrt1p"];
function uw(e) {
  for (const t of Y4)
    if (e.startsWith(t))
      return !0;
  return !1;
}
function lw(e, t = "main") {
  const r = Kh[t], n = H.bytes(e);
  return bn(n, 32), n.toBech32(r, 1);
}
function J4(e) {
  if (!uw(e))
    throw new TypeError("Invalid taproot address!");
  return H.bech32(e);
}
function Q4(e) {
  const t = H.bytes(e);
  return bn(t, 32), ["OP_1", t.hex];
}
function e6(e, t) {
  const r = si(e);
  return lw(r, t);
}
const fw = { check: uw, encode: lw, decode: J4, scriptPubKey: Q4, fromPubKey: e6 }, t6 = {
  version: 2,
  vin: [],
  vout: [],
  locktime: 0
}, r6 = {
  scriptSig: [],
  sequence: 4294967293,
  witness: []
}, n6 = {
  value: 0n,
  scriptPubKey: []
};
function Vh(e) {
  const t = { ...t6, ...e };
  return t.vin = t.vin.map((r) => ({ ...r6, ...r })), t.vout = t.vout.map((r) => ({ ...n6, ...r })), t;
}
function ns(e, t) {
  const { version: r, vin: n, vout: o, locktime: i } = Vh(e), s = t !== !0 && o6(n), a = [qh(r)];
  s && a.push(H.hex("0001")), a.push(i6(n)), a.push(s6(o));
  for (const c of n)
    s && a.push(c6(c.witness));
  return a.push(Gh(i)), H.join(a);
}
function o6(e) {
  for (const t of e) {
    const { witness: r } = t;
    if (typeof r == "string" || r instanceof Uint8Array || Array.isArray(r) && r.length > 0)
      return !0;
  }
  return !1;
}
function qh(e) {
  return H.num(e, 4).reverse();
}
function Ba(e) {
  return H.hex(e, 32).reverse();
}
function Na(e) {
  return H.num(e, 4).reverse();
}
function $a(e) {
  if (typeof e == "string")
    return H.hex(e, 4).reverse();
  if (typeof e == "number")
    return H.num(e, 4).reverse();
  throw new Error("Unrecognized format: " + String(e));
}
function i6(e) {
  const t = [H.varInt(e.length, "le")];
  for (const r of e) {
    const { txid: n, vout: o, scriptSig: i, sequence: s } = r;
    t.push(Ba(n)), t.push(Na(o)), t.push(mi(i, !0)), t.push($a(s));
  }
  return H.join(t);
}
function To(e) {
  if (typeof e == "number") {
    if (e % 1 !== 0)
      throw new Error("Value must be an integer:" + String(e));
    return H.num(e, 8).reverse();
  }
  return H.big(e, 8).reverse();
}
function s6(e) {
  const t = [H.varInt(e.length, "le")];
  for (const r of e)
    t.push(a6(r));
  return H.join(t);
}
function a6(e) {
  const { value: t, scriptPubKey: r } = e, n = [];
  return n.push(To(t)), n.push(mi(r, !0)), H.join(n);
}
function c6(e = []) {
  const t = [];
  if (Array.isArray(e)) {
    const r = H.varInt(e.length);
    t.push(r);
    for (const n of e)
      t.push(u6(n));
    return H.join(t);
  } else
    return H.bytes(e);
}
function u6(e) {
  return l6(e) ? new H(0) : mi(e, !0);
}
function l6(e) {
  if (Array.isArray(e))
    return e.length === 0;
  if (typeof e == "string" && e === "")
    return !0;
  const t = H.bytes(e);
  return t.length === 1 && t[0] === 0;
}
function Gh(e) {
  if (typeof e == "string")
    return H.hex(e, 4);
  if (typeof e == "number")
    return H.num(e, 4).reverse();
  throw new Error("Unrecognized format: " + String(e));
}
function Wh(e) {
  typeof e == "string" && (e = H.hex(e).raw);
  const t = new hs(e), r = f6(t), n = d6(t), o = h6(t), i = g6(t);
  if (n)
    for (const a of o)
      a.witness = b6(t);
  const s = y6(t);
  return { version: r, vin: o, vout: i, locktime: s };
}
function f6(e) {
  return e.read(4).reverse().toNum();
}
function d6(e) {
  const [t, r] = [...e.peek(2)];
  if (t === 0) {
    if (e.read(2), r === 1)
      return !0;
    throw new Error(`Invalid witness flag: ${r}`);
  }
  return !1;
}
function h6(e) {
  const t = [], r = e.readSize("le");
  for (let n = 0; n < r; n++)
    t.push(p6(e));
  return t;
}
function p6(e) {
  return {
    txid: e.read(32).reverse().toHex(),
    vout: e.read(4).reverse().toNum(),
    scriptSig: hw(e),
    sequence: e.read(4).reverse().toHex(),
    witness: []
  };
}
function g6(e) {
  const t = [], r = e.readSize("le");
  for (let n = 0; n < r; n++)
    t.push(m6(e));
  return t;
}
function m6(e) {
  return {
    value: e.read(8).reverse().big,
    scriptPubKey: hw(e)
  };
}
function b6(e) {
  const t = [], r = e.readSize();
  for (let n = 0; n < r; n++) {
    const o = dw(e);
    t.push(o ?? "");
  }
  return t;
}
function dw(e, t) {
  const r = e.readSize("le");
  return r > 0 ? e.read(r).hex : null;
}
function hw(e, t) {
  const r = dw(e);
  return r !== null ? r : [];
}
function y6(e) {
  return e.read(4).reverse().toNum();
}
function w6(e) {
  if (Gb(e))
    return Wh(e);
  if (typeof e == "object" && !(e instanceof Uint8Array))
    return ns(e), Vh(e);
  throw new Error("Invalid format: " + typeof e);
}
function v6(e) {
  if (Gb(e))
    return Wh(e), H.bytes(e);
  if (typeof e == "object")
    return ns(e);
  throw new Error("Invalid format: " + typeof e);
}
const Zh = {
  toBytes: v6,
  toJson: w6
}, E6 = [
  ["p2pkh", /^76a914(?<hash>\w{40})88ac$/],
  ["p2sh", /^a914(?<hash>\w{40})87$/],
  ["p2w-pkh", /^0014(?<hash>\w{40})$/],
  ["p2w-sh", /^0020(?<hash>\w{64})$/],
  ["p2tr", /^5120(?<hash>\w{64})$/]
], x6 = [
  192,
  194,
  196,
  198,
  200,
  202,
  204,
  206,
  208,
  210,
  212,
  214,
  216,
  218,
  220,
  222,
  224,
  226,
  228,
  230,
  232,
  234,
  236,
  238,
  240,
  242,
  244,
  246,
  248,
  250,
  252,
  254,
  102,
  126,
  128,
  132,
  150,
  152,
  186,
  188,
  190
];
function _6(e) {
  let t = e.at(-1);
  return Fn(t) && (t = H.hex(t)), e.length > 1 && t instanceof Uint8Array && t[0] === 80 ? (e.pop(), H.raw(t)) : null;
}
function S6(e) {
  let t = e.at(-1);
  return Fn(t) && (t = H.hex(t)), e.length > 1 && t instanceof Uint8Array && t.length > 32 && x6.includes(t[0] & 254) ? (e.pop(), H.raw(t)) : null;
}
function A6(e) {
  if (e.length > 1) {
    const t = e.at(-1);
    try {
      const r = er.fmt.toBytes(t);
      return e.pop(), r;
    } catch {
      return null;
    }
  }
  return null;
}
function k6(e) {
  const t = [];
  for (const r of e)
    if (Fn(r) || r instanceof Uint8Array || typeof r == "number")
      t.push(H.bytes(r));
    else
      throw new Error("unrecognized value: " + String(r));
  return t;
}
function T6(e = []) {
  const t = [...e], r = _6(t), n = S6(t), o = A6(t), i = k6(t);
  return { annex: r, cblock: n, script: o, params: i };
}
function I6(e) {
  const t = er.fmt.toBytes(e, !1).hex;
  for (const [r, n] of E6) {
    const o = r, { groups: i } = n.exec(t) ?? {}, { hash: s } = i ?? {};
    if (Fn(s))
      return { type: o, data: H.hex(s) };
  }
  return { type: "raw", data: H.hex(t) };
}
function P6(e) {
  const t = Zh.toJson(e), r = ns(t, !0);
  return rs(r).reverse().hex;
}
function O6(e) {
  const t = Zh.toJson(e), r = ns(t, !0).length, n = ns(t, !1).length, o = r * 3 + n, i = o % 4 > 0 ? 1 : 0, s = Math.floor(o / 4) + i;
  return { size: n, bsize: r, vsize: s, weight: o };
}
const Mr = {
  create: Vh,
  encode: ns,
  decode: Wh,
  fmt: Zh,
  util: {
    getTxSize: O6,
    getTxid: P6,
    readScriptPubKey: I6,
    readWitness: T6
  }
}, B6 = [
  ["1", "p2pkh", "main", 20, "base58"],
  ["3", "p2sh", "main", 20, "base58"],
  ["m", "p2pkh", "testnet", 20, "base58"],
  ["n", "p2pkh", "testnet", 20, "base58"],
  ["2", "p2sh", "testnet", 20, "base58"],
  ["bc1q", "p2w-pkh", "main", 20, "bech32"],
  ["tb1q", "p2w-pkh", "testnet", 20, "bech32"],
  ["bcrt1q", "p2w-pkh", "regtest", 20, "bech32"],
  ["bc1q", "p2w-sh", "main", 32, "bech32"],
  ["tb1q", "p2w-sh", "testnet", 32, "bech32"],
  ["bcrt1q", "p2w-sh", "regtest", 32, "bech32"],
  ["bc1p", "p2tr", "main", 32, "bech32m"],
  ["tb1p", "p2tr", "testnet", 32, "bech32m"],
  ["bcrt1p", "p2tr", "regtest", 32, "bech32m"]
];
function N6(e, t) {
  switch (t) {
    case "base58":
      return H.b58chk(e).slice(1);
    case "bech32":
      return H.bech32(e);
    case "bech32m":
      return H.bech32(e);
    default:
      throw new Error("Invalid address format: " + t);
  }
}
function $6(e) {
  for (const t of B6) {
    const [r, n, o, i, s] = t;
    if (e.startsWith(r) && N6(e, s).length === i)
      return t;
  }
  throw new Error("Invalid address: " + e);
}
function pw(e) {
  switch (e) {
    case "p2pkh":
      return Qy;
    case "p2sh":
      return rw;
    case "p2w-pkh":
      return iw;
    case "p2w-sh":
      return cw;
    case "p2tr":
      return fw;
    default:
      throw new Error("Invalid address type: " + e);
  }
}
function gw(e) {
  const [t, r, n] = $6(e), o = pw(r), i = o.decode(e, n), s = o.scriptPubKey(i);
  return { prefix: t, type: r, network: n, data: i, script: s };
}
function U6(e, t) {
  const { type: r, data: n } = Mr.util.readScriptPubKey(e);
  return pw(r).encode(n, t);
}
function R6(e) {
  const { script: t } = gw(e);
  return er.fmt.toAsm(t, !1);
}
const mw = {
  p2pkh: Qy,
  p2sh: rw,
  p2wpkh: iw,
  p2wsh: cw,
  p2tr: fw,
  decode: gw,
  fromScriptPubKey: U6,
  toScriptPubKey: R6
}, C6 = [1, 2, 3];
function Xh(e, t, r = {}) {
  const { sigflag: n = 1 } = r, o = (n & 128) === 128, i = n % 128;
  if (!C6.includes(i))
    throw new Error("Invalid hash type: " + String(n));
  const s = Mr.fmt.toJson(e), { version: a, vin: c, vout: u, locktime: f } = s, { txid: l, vout: d, prevout: m, sequence: g } = c[t], { value: y } = m ?? {};
  if (y === void 0)
    throw new Error("Prevout value is empty!");
  let b = r.script;
  if (b === void 0 && r.pubkey !== void 0 && (b = `76a914${Dh(r.pubkey).hex}88ac`), b === void 0)
    throw new Error("No pubkey / script has been set!");
  if (er.fmt.toAsm(b).includes("OP_CODESEPARATOR"))
    throw new Error("This library does not currently support the use of OP_CODESEPARATOR in segwit scripts.");
  const E = [
    qh(a),
    H6(c, o),
    L6(c, i, o),
    Ba(l),
    Na(d),
    er.encode(b, !0),
    To(y),
    $a(g),
    z6(u, t, i),
    Gh(f),
    H.num(n, 4).reverse()
  ];
  return rs(H.join(E));
}
function H6(e, t) {
  if (t === !0)
    return H.num(0, 32);
  const r = [];
  for (const { txid: n, vout: o } of e)
    r.push(Ba(n)), r.push(Na(o));
  return rs(H.join(r));
}
function L6(e, t, r) {
  if (r || t !== 1)
    return H.num(0, 32);
  const n = [];
  for (const { sequence: o } of e)
    n.push($a(o));
  return rs(H.join(n));
}
function z6(e, t, r) {
  const n = [];
  if (r === 1) {
    for (const { value: o, scriptPubKey: i } of e)
      n.push(To(o)), n.push(er.encode(i, !0));
    return rs(H.join(n));
  }
  if (r === 3 && t < e.length) {
    const { value: o, scriptPubKey: i } = e[t];
    return n.push(To(o)), n.push(er.encode(i, !0)), rs(H.join(n));
  }
  return H.num(0, 32);
}
function j6(e, t, r, n = {}) {
  const { sigflag: o = 1 } = n, i = Xh(t, r, n), s = Wy.secp.sign(i, e).toDERRawBytes(!0);
  return H.join([s, o]);
}
function M6(e, t, r = {}) {
  const n = Mr.fmt.toJson(e), { throws: o = !1 } = r, { witness: i = [] } = n.vin[t], s = Mr.util.readWitness(i), { script: a, params: c } = s;
  let u = null;
  if (c.length < 1)
    return Gt("Invalid witness data: " + String(i), o);
  if (r.script === void 0 && a !== null && (r.script = a), r.pubkey !== void 0)
    u = H.bytes(r.pubkey);
  else if (c.length > 1 && c[1].length === 33)
    u = H.bytes(c[1]);
  else
    return Gt("No pubkey provided!", o);
  const f = er.fmt.toParam(c[0]), l = f.slice(0, -1), d = f.slice(-1)[0], m = Xh(n, t, { ...r, sigflag: d });
  return Wy.secp.verify(l, m, u) ? !0 : Gt("Invalid signature!", o);
}
const D6 = {
  hash: Xh,
  sign: j6,
  verify: M6
}, F6 = [0, 1, 2, 3, 129, 130, 131];
function Yh(e, t, r = {}) {
  const { extension: n, sigflag: o = 0, extflag: i = 0, key_version: s = 0, separator_pos: a = 4294967295 } = r, c = Mr.fmt.toJson(e), { version: u, vin: f, vout: l, locktime: d } = c;
  if (t >= f.length)
    throw new Error("Index out of bounds: " + String(t));
  if (!F6.includes(o))
    throw new Error("Invalid hash type: " + String(o));
  if (i < 0 || i > 127)
    throw new Error("Extention flag out of range: " + String(i));
  const { txid: m, vout: g, sequence: y, witness: b = [] } = f[t], E = (o & 128) === 128, x = X6(b), w = x !== void 0 ? 1 : 0, S = (i + (n !== void 0 ? 1 : 0)) * 2 + w, I = H.str("TapSighash").digest, T = [
    I,
    I,
    H.num(0, 1),
    H.num(o, 1),
    qh(u),
    Gh(d)
  ];
  if (!E) {
    const B = f.map((C) => Q0(C));
    T.push(K6(f), q6(B), G6(B), V6(f));
  }
  if (((o & 3) < 2 || (o & 3) > 3) && T.push(W6(l)), T.push(H.num(S, 1)), E) {
    const { value: B, scriptPubKey: C } = Q0(f[t]);
    T.push(Ba(m), Na(g), To(B), er.encode(C, !0), $a(y));
  } else
    T.push(H.num(t, 4).reverse());
  return x !== void 0 && T.push(x), (o & 3) === 3 && T.push(Z6(l[t])), n !== void 0 && T.push(H.bytes(n), H.num(s), H.num(a, 4)), H.join(T).digest;
}
function K6(e) {
  const t = [];
  for (const { txid: r, vout: n } of e)
    t.push(Ba(r)), t.push(Na(n));
  return H.join(t).digest;
}
function V6(e) {
  const t = [];
  for (const { sequence: r } of e)
    t.push($a(r));
  return H.join(t).digest;
}
function q6(e) {
  const t = [];
  for (const { value: r } of e)
    t.push(To(r));
  return H.join(t).digest;
}
function G6(e) {
  const t = [];
  for (const { scriptPubKey: r } of e)
    t.push(mi(r, !0));
  return H.join(t).digest;
}
function W6(e) {
  const t = [];
  for (const { value: r, scriptPubKey: n } of e)
    t.push(To(r)), t.push(er.encode(n, !0));
  return H.join(t).digest;
}
function Z6(e) {
  return H.join([
    To(e.value),
    er.encode(e.scriptPubKey, !0)
  ]).digest;
}
function X6(e) {
  if (e === void 0 || e.length < 2)
    return;
  let t = e.at(-1);
  if (typeof t == "string" && (t = H.hex(t)), t instanceof Uint8Array && t[0] === 80)
    return H.raw(t).prefixSize("be").digest;
}
function Q0(e) {
  if (e.prevout === void 0)
    throw new Error("Prevout data missing for input: " + String(e.txid));
  return e.prevout;
}
const Y6 = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2fn, J6 = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n;
function Q6(e, t, r, n = {}) {
  const { sigflag: o = 0 } = n, i = Yh(t, r, n), s = eP(e, i);
  return o === 0 ? H.raw(s) : H.join([s, o]);
}
function eP(e, t, r = H.random(32)) {
  const n = H.bytes(t), o = new Dt(e), i = o.point, s = i.hasEvenY ? o.big : o.negated.big, a = Oc("BIP0340/aux", H.bytes(r)), c = s ^ a.big, u = Oc("BIP0340/nonce", c, i.x.raw, n), f = new Dt(u), l = f.point, d = l.hasEvenY ? f.big : f.negated.big, m = new Dt(Oc("BIP0340/challenge", l.x.raw, i.x.raw, n)), g = new Dt(d + m.big * s);
  return H.join([l.x.raw, g.raw]);
}
function tP(e, t, r, n = !1) {
  const o = Ln.from_x(si(r)), i = H.bytes(t), s = H.bytes(e).stream;
  s.size < 64 && Gt("Signature length is too small: " + String(s.size), n);
  const a = s.read(32);
  a.big > Y6 && Gt("Signature r value greater than field size!", n);
  const c = s.read(32);
  c.big > J6 && Gt("Signature s value greater than curve order!", n);
  const u = new Dt(Oc("BIP0340/challenge", a.raw, o.x.raw, i)), f = new Dt(c).point, l = o.mul(u.big), d = f.sub(l);
  return d.hasOddY && Gt("Signature R value has odd Y coordinate!", n), d.x.big === 0n && Gt("Signature R value is infinite!", n), d.x.big === a.big;
}
const rP = 192;
function Yu(e) {
  const t = H.str(e).digest;
  return H.join([t, t]);
}
function Jh(e, t = rP) {
  return H.join([
    Yu("TapLeaf"),
    iP(t),
    H.bytes(e)
  ]).digest.hex;
}
function nP(e, t) {
  return Jh(er.fmt.toBytes(e), t);
}
function Qh(e, t) {
  return t < e && ([e, t] = [t, e]), H.join([
    Yu("TapBranch"),
    H.hex(e).raw,
    H.hex(t).raw
  ]).digest.hex;
}
function oP(e) {
  return H.hex(au(e)[0]);
}
function au(e, t, r = []) {
  const n = [], o = [];
  if (e.length < 1)
    throw new Error("Tree is empty!");
  for (let i = 0; i < e.length; i++) {
    const s = e[i];
    if (Array.isArray(s)) {
      const [a, c, u] = au(s, t);
      t = c, n.push(a);
      for (const f of u)
        r.push(f);
    } else
      n.push(s);
  }
  if (n.length === 1)
    return [n[0], t, r];
  n.sort(), n.length % 2 !== 0 && n.push(n[n.length - 1]);
  for (let i = 0; i < n.length - 1; i += 2) {
    const s = Qh(n[i], n[i + 1]);
    o.push(s), typeof t == "string" && (t === n[i] ? (r.push(n[i + 1]), t = s) : t === n[i + 1] && (r.push(n[i]), t = s));
  }
  return au(o, t, r);
}
function iP(e = 192) {
  return e & 254;
}
function bw(e, t = new Uint8Array(), r = !1) {
  const n = r ? new Dt(e).point.x.raw : si(e);
  return H.join([Yu("TapTweak"), n, H.bytes(t)]).digest;
}
function Vi(e, t, r = !1) {
  t === void 0 && (t = new Uint8Array());
  const n = H.bytes(e), o = bw(e, t, r);
  return r ? yw(n, o) : ww(n, o);
}
function sP(e, t) {
  return Vi(e, t);
}
function aP(e, t) {
  return Vi(e, t, !0);
}
function yw(e, t) {
  let r = new Dt(e);
  return r.point.hasOddY && (r = r.negate()), H.raw(r.add(t).raw);
}
function ww(e, t) {
  e = si(e);
  const n = Ln.from_x(e).add(t);
  return H.raw(n.raw);
}
function cP() {
  const e = H.hex("0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8");
  return Ln.from_x(e.digest).x;
}
const uP = cP(), lP = 192;
function fP(e, t = {}) {
  return vw(e, { ...t, isPrivate: !0 });
}
function dP(e, t = {}) {
  return vw(e, { ...t, isPrivate: !1 });
}
function vw(e, t = {}) {
  const { isPrivate: r = !1, tree: n = [], version: o = lP } = t, i = r ? xd.getPublicKey(e, !0) : si(e);
  let { target: s } = t;
  s !== void 0 && (s = H.bytes(s).hex);
  let a, c = [];
  if (n.length > 0) {
    const [m, g, y] = au(n, s);
    c = y, a = Vi(e, m, r);
  } else
    s !== void 0 ? a = Vi(e, s, r) : a = Vi(e, void 0, r);
  const u = r ? xd.getPublicKey(a)[0] : a[0], l = [H.num(o + xw(u)), i];
  c.length > 0 && c.forEach((m) => l.push(H.hex(m)));
  const d = H.join(l);
  if (s !== void 0 && !ep(a, s, d, t))
    throw new Error("Path checking failed! Unable to generate path.");
  return [si(a).hex, d.hex];
}
function ep(e, t, r, n = {}) {
  const { isPrivate: o = !1, throws: i = !1 } = n, { parity: s, paths: a, intkey: c } = Ew(r), u = o ? xd.getPublicKey(e, !0) : si(e), f = H.join([s, u]);
  if (f.length !== 33)
    return Gt("Invalid tapkey: " + f.hex, i);
  let l = H.bytes(t).hex;
  for (const m of a)
    l = Qh(l, m);
  const d = Vi(c, l);
  return H.raw(d).hex === H.raw(f).hex;
}
function Ew(e) {
  const t = new hs(H.bytes(e)), r = t.read(1).num, n = t.read(32), [o, i] = r % 2 === 0 ? [r, 2] : [r - 1, 3], s = [];
  for (; t.size >= 32; )
    s.push(t.read(32).hex);
  if (t.size !== 0)
    throw new Error("Non-empty buffer on control block: " + String(t));
  return { intkey: n, paths: s, parity: i, version: o };
}
function xw(e = 2) {
  if (e === 0 || e === 1)
    return e;
  if (e === 2 || e === "02")
    return 0;
  if (e === 3 || e === "03")
    return 1;
  throw new Error("Invalid parity bit: " + String(e));
}
function hP(e, t, r = {}) {
  const n = Mr.fmt.toJson(e), { throws: o = !1 } = r, { prevout: i, witness: s = [] } = n.vin[t], a = Mr.util.readWitness(s), { cblock: c, script: u, params: f } = a;
  let l;
  if (f.length < 1)
    return Gt("Invalid witness data: " + String(s), o);
  const { scriptPubKey: d } = i ?? {};
  if (d === void 0)
    return Gt("Prevout scriptPubKey is empty!", o);
  const { type: m, data: g } = Mr.util.readScriptPubKey(d);
  if (m !== "p2tr")
    return Gt("Prevout script is not a valid taproot output:" + g.hex, o);
  if (g.length !== 32)
    return Gt("Invalid tapkey length: " + String(g.length), o);
  if (c !== null && u !== null) {
    const w = c[0] & 254, k = Jh(u, w);
    if (r.extension = k, !ep(g, k, c, { throws: o }))
      return Gt("cblock verification failed!", o);
  }
  r.pubkey !== void 0 ? l = H.bytes(r.pubkey) : f.length > 1 && f[1].length === 32 ? l = H.bytes(f[1]) : l = H.bytes(g);
  const y = er.fmt.toParam(f[0]), b = new hs(y), E = b.read(64).raw;
  if (b.size === 1 && (r.sigflag = b.read(1).num, r.sigflag === 0))
    return Gt("0x00 is not a valid appended sigflag!", o);
  const x = Yh(n, t, r);
  return tP(E, x, l, o) ? !0 : Gt("Invalid signature!", o);
}
const pP = {
  hash: Yh,
  sign: Q6,
  verify: hP
}, gP = {
  segwit: D6,
  taproot: pP
}, mP = {
  getTag: Yu,
  getLeaf: Jh,
  getBranch: Qh,
  getRoot: oP
}, bP = {
  readCtrlBlock: Ew,
  readParityBit: xw
}, yP = {
  getPubKey: sP,
  getSecKey: aP,
  getTweak: bw,
  tweakSecKey: yw,
  tweakPubKey: ww
}, cu = {
  getPubKey: dP,
  getSecKey: fP,
  encodeScript: nP,
  checkPath: ep,
  tree: mP,
  tweak: yP,
  util: bP,
  SCRIPT_PUBKEY: uP
};
var Ke;
(function(e) {
  e.assertEqual = (o) => o;
  function t(o) {
  }
  e.assertIs = t;
  function r(o) {
    throw new Error();
  }
  e.assertNever = r, e.arrayToEnum = (o) => {
    const i = {};
    for (const s of o)
      i[s] = s;
    return i;
  }, e.getValidEnumValues = (o) => {
    const i = e.objectKeys(o).filter((a) => typeof o[o[a]] != "number"), s = {};
    for (const a of i)
      s[a] = o[a];
    return e.objectValues(s);
  }, e.objectValues = (o) => e.objectKeys(o).map(function(i) {
    return o[i];
  }), e.objectKeys = typeof Object.keys == "function" ? (o) => Object.keys(o) : (o) => {
    const i = [];
    for (const s in o)
      Object.prototype.hasOwnProperty.call(o, s) && i.push(s);
    return i;
  }, e.find = (o, i) => {
    for (const s of o)
      if (i(s))
        return s;
  }, e.isInteger = typeof Number.isInteger == "function" ? (o) => Number.isInteger(o) : (o) => typeof o == "number" && isFinite(o) && Math.floor(o) === o;
  function n(o, i = " | ") {
    return o.map((s) => typeof s == "string" ? `'${s}'` : s).join(i);
  }
  e.joinValues = n, e.jsonStringifyReplacer = (o, i) => typeof i == "bigint" ? i.toString() : i;
})(Ke || (Ke = {}));
var _d;
(function(e) {
  e.mergeShapes = (t, r) => ({
    ...t,
    ...r
    // second overwrites first
  });
})(_d || (_d = {}));
const re = Ke.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]), xo = (e) => {
  switch (typeof e) {
    case "undefined":
      return re.undefined;
    case "string":
      return re.string;
    case "number":
      return isNaN(e) ? re.nan : re.number;
    case "boolean":
      return re.boolean;
    case "function":
      return re.function;
    case "bigint":
      return re.bigint;
    case "symbol":
      return re.symbol;
    case "object":
      return Array.isArray(e) ? re.array : e === null ? re.null : e.then && typeof e.then == "function" && e.catch && typeof e.catch == "function" ? re.promise : typeof Map < "u" && e instanceof Map ? re.map : typeof Set < "u" && e instanceof Set ? re.set : typeof Date < "u" && e instanceof Date ? re.date : re.object;
    default:
      return re.unknown;
  }
}, X = Ke.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]), wP = (e) => JSON.stringify(e, null, 2).replace(/"([^"]+)":/g, "$1:");
class Dr extends Error {
  constructor(t) {
    super(), this.issues = [], this.addIssue = (n) => {
      this.issues = [...this.issues, n];
    }, this.addIssues = (n = []) => {
      this.issues = [...this.issues, ...n];
    };
    const r = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, r) : this.__proto__ = r, this.name = "ZodError", this.issues = t;
  }
  get errors() {
    return this.issues;
  }
  format(t) {
    const r = t || function(i) {
      return i.message;
    }, n = { _errors: [] }, o = (i) => {
      for (const s of i.issues)
        if (s.code === "invalid_union")
          s.unionErrors.map(o);
        else if (s.code === "invalid_return_type")
          o(s.returnTypeError);
        else if (s.code === "invalid_arguments")
          o(s.argumentsError);
        else if (s.path.length === 0)
          n._errors.push(r(s));
        else {
          let a = n, c = 0;
          for (; c < s.path.length; ) {
            const u = s.path[c];
            c === s.path.length - 1 ? (a[u] = a[u] || { _errors: [] }, a[u]._errors.push(r(s))) : a[u] = a[u] || { _errors: [] }, a = a[u], c++;
          }
        }
    };
    return o(this), n;
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, Ke.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(t = (r) => r.message) {
    const r = {}, n = [];
    for (const o of this.issues)
      o.path.length > 0 ? (r[o.path[0]] = r[o.path[0]] || [], r[o.path[0]].push(t(o))) : n.push(t(o));
    return { formErrors: n, fieldErrors: r };
  }
  get formErrors() {
    return this.flatten();
  }
}
Dr.create = (e) => new Dr(e);
const oa = (e, t) => {
  let r;
  switch (e.code) {
    case X.invalid_type:
      e.received === re.undefined ? r = "Required" : r = `Expected ${e.expected}, received ${e.received}`;
      break;
    case X.invalid_literal:
      r = `Invalid literal value, expected ${JSON.stringify(e.expected, Ke.jsonStringifyReplacer)}`;
      break;
    case X.unrecognized_keys:
      r = `Unrecognized key(s) in object: ${Ke.joinValues(e.keys, ", ")}`;
      break;
    case X.invalid_union:
      r = "Invalid input";
      break;
    case X.invalid_union_discriminator:
      r = `Invalid discriminator value. Expected ${Ke.joinValues(e.options)}`;
      break;
    case X.invalid_enum_value:
      r = `Invalid enum value. Expected ${Ke.joinValues(e.options)}, received '${e.received}'`;
      break;
    case X.invalid_arguments:
      r = "Invalid function arguments";
      break;
    case X.invalid_return_type:
      r = "Invalid function return type";
      break;
    case X.invalid_date:
      r = "Invalid date";
      break;
    case X.invalid_string:
      typeof e.validation == "object" ? "includes" in e.validation ? (r = `Invalid input: must include "${e.validation.includes}"`, typeof e.validation.position == "number" && (r = `${r} at one or more positions greater than or equal to ${e.validation.position}`)) : "startsWith" in e.validation ? r = `Invalid input: must start with "${e.validation.startsWith}"` : "endsWith" in e.validation ? r = `Invalid input: must end with "${e.validation.endsWith}"` : Ke.assertNever(e.validation) : e.validation !== "regex" ? r = `Invalid ${e.validation}` : r = "Invalid";
      break;
    case X.too_small:
      e.type === "array" ? r = `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "more than"} ${e.minimum} element(s)` : e.type === "string" ? r = `String must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "over"} ${e.minimum} character(s)` : e.type === "number" ? r = `Number must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${e.minimum}` : e.type === "date" ? r = `Date must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(e.minimum))}` : r = "Invalid input";
      break;
    case X.too_big:
      e.type === "array" ? r = `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "less than"} ${e.maximum} element(s)` : e.type === "string" ? r = `String must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "under"} ${e.maximum} character(s)` : e.type === "number" ? r = `Number must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}` : e.type === "bigint" ? r = `BigInt must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}` : e.type === "date" ? r = `Date must be ${e.exact ? "exactly" : e.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(e.maximum))}` : r = "Invalid input";
      break;
    case X.custom:
      r = "Invalid input";
      break;
    case X.invalid_intersection_types:
      r = "Intersection results could not be merged";
      break;
    case X.not_multiple_of:
      r = `Number must be a multiple of ${e.multipleOf}`;
      break;
    case X.not_finite:
      r = "Number must be finite";
      break;
    default:
      r = t.defaultError, Ke.assertNever(e);
  }
  return { message: r };
};
let _w = oa;
function vP(e) {
  _w = e;
}
function uu() {
  return _w;
}
const lu = (e) => {
  const { data: t, path: r, errorMaps: n, issueData: o } = e, i = [...r, ...o.path || []], s = {
    ...o,
    path: i
  };
  let a = "";
  const c = n.filter((u) => !!u).slice().reverse();
  for (const u of c)
    a = u(s, { data: t, defaultError: a }).message;
  return {
    ...o,
    path: i,
    message: o.message || a
  };
}, EP = [];
function ne(e, t) {
  const r = lu({
    issueData: t,
    data: e.data,
    path: e.path,
    errorMaps: [
      e.common.contextualErrorMap,
      e.schemaErrorMap,
      uu(),
      oa
      // then global default map
    ].filter((n) => !!n)
  });
  e.common.issues.push(r);
}
class Zt {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(t, r) {
    const n = [];
    for (const o of r) {
      if (o.status === "aborted")
        return xe;
      o.status === "dirty" && t.dirty(), n.push(o.value);
    }
    return { status: t.value, value: n };
  }
  static async mergeObjectAsync(t, r) {
    const n = [];
    for (const o of r)
      n.push({
        key: await o.key,
        value: await o.value
      });
    return Zt.mergeObjectSync(t, n);
  }
  static mergeObjectSync(t, r) {
    const n = {};
    for (const o of r) {
      const { key: i, value: s } = o;
      if (i.status === "aborted" || s.status === "aborted")
        return xe;
      i.status === "dirty" && t.dirty(), s.status === "dirty" && t.dirty(), (typeof s.value < "u" || o.alwaysSet) && (n[i.value] = s.value);
    }
    return { status: t.value, value: n };
  }
}
const xe = Object.freeze({
  status: "aborted"
}), Sw = (e) => ({ status: "dirty", value: e }), tr = (e) => ({ status: "valid", value: e }), Sd = (e) => e.status === "aborted", Ad = (e) => e.status === "dirty", fu = (e) => e.status === "valid", du = (e) => typeof Promise < "u" && e instanceof Promise;
var fe;
(function(e) {
  e.errToObj = (t) => typeof t == "string" ? { message: t } : t || {}, e.toString = (t) => typeof t == "string" ? t : t == null ? void 0 : t.message;
})(fe || (fe = {}));
class gn {
  constructor(t, r, n, o) {
    this._cachedPath = [], this.parent = t, this.data = r, this._path = n, this._key = o;
  }
  get path() {
    return this._cachedPath.length || (this._key instanceof Array ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
}
const eg = (e, t) => {
  if (fu(t))
    return { success: !0, data: t.value };
  if (!e.common.issues.length)
    throw new Error("Validation failed but no issues detected.");
  return {
    success: !1,
    get error() {
      if (this._error)
        return this._error;
      const r = new Dr(e.common.issues);
      return this._error = r, this._error;
    }
  };
};
function Ie(e) {
  if (!e)
    return {};
  const { errorMap: t, invalid_type_error: r, required_error: n, description: o } = e;
  if (t && (r || n))
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return t ? { errorMap: t, description: o } : { errorMap: (s, a) => s.code !== "invalid_type" ? { message: a.defaultError } : typeof a.data > "u" ? { message: n ?? a.defaultError } : { message: r ?? a.defaultError }, description: o };
}
class Ue {
  constructor(t) {
    this.spa = this.safeParseAsync, this._def = t, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(t) {
    return xo(t.data);
  }
  _getOrReturnCtx(t, r) {
    return r || {
      common: t.parent.common,
      data: t.data,
      parsedType: xo(t.data),
      schemaErrorMap: this._def.errorMap,
      path: t.path,
      parent: t.parent
    };
  }
  _processInputParams(t) {
    return {
      status: new Zt(),
      ctx: {
        common: t.parent.common,
        data: t.data,
        parsedType: xo(t.data),
        schemaErrorMap: this._def.errorMap,
        path: t.path,
        parent: t.parent
      }
    };
  }
  _parseSync(t) {
    const r = this._parse(t);
    if (du(r))
      throw new Error("Synchronous parse encountered promise.");
    return r;
  }
  _parseAsync(t) {
    const r = this._parse(t);
    return Promise.resolve(r);
  }
  parse(t, r) {
    const n = this.safeParse(t, r);
    if (n.success)
      return n.data;
    throw n.error;
  }
  safeParse(t, r) {
    var n;
    const o = {
      common: {
        issues: [],
        async: (n = r == null ? void 0 : r.async) !== null && n !== void 0 ? n : !1,
        contextualErrorMap: r == null ? void 0 : r.errorMap
      },
      path: (r == null ? void 0 : r.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: t,
      parsedType: xo(t)
    }, i = this._parseSync({ data: t, path: o.path, parent: o });
    return eg(o, i);
  }
  async parseAsync(t, r) {
    const n = await this.safeParseAsync(t, r);
    if (n.success)
      return n.data;
    throw n.error;
  }
  async safeParseAsync(t, r) {
    const n = {
      common: {
        issues: [],
        contextualErrorMap: r == null ? void 0 : r.errorMap,
        async: !0
      },
      path: (r == null ? void 0 : r.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: t,
      parsedType: xo(t)
    }, o = this._parse({ data: t, path: n.path, parent: n }), i = await (du(o) ? o : Promise.resolve(o));
    return eg(n, i);
  }
  refine(t, r) {
    const n = (o) => typeof r == "string" || typeof r > "u" ? { message: r } : typeof r == "function" ? r(o) : r;
    return this._refinement((o, i) => {
      const s = t(o), a = () => i.addIssue({
        code: X.custom,
        ...n(o)
      });
      return typeof Promise < "u" && s instanceof Promise ? s.then((c) => c ? !0 : (a(), !1)) : s ? !0 : (a(), !1);
    });
  }
  refinement(t, r) {
    return this._refinement((n, o) => t(n) ? !0 : (o.addIssue(typeof r == "function" ? r(n, o) : r), !1));
  }
  _refinement(t) {
    return new qr({
      schema: this,
      typeName: me.ZodEffects,
      effect: { type: "refinement", refinement: t }
    });
  }
  superRefine(t) {
    return this._refinement(t);
  }
  optional() {
    return Un.create(this, this._def);
  }
  nullable() {
    return ui.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return Fr.create(this, this._def);
  }
  promise() {
    return is.create(this, this._def);
  }
  or(t) {
    return ca.create([this, t], this._def);
  }
  and(t) {
    return ua.create(this, t, this._def);
  }
  transform(t) {
    return new qr({
      ...Ie(this._def),
      schema: this,
      typeName: me.ZodEffects,
      effect: { type: "transform", transform: t }
    });
  }
  default(t) {
    const r = typeof t == "function" ? t : () => t;
    return new pa({
      ...Ie(this._def),
      innerType: this,
      defaultValue: r,
      typeName: me.ZodDefault
    });
  }
  brand() {
    return new kw({
      typeName: me.ZodBranded,
      type: this,
      ...Ie(this._def)
    });
  }
  catch(t) {
    const r = typeof t == "function" ? t : () => t;
    return new mu({
      ...Ie(this._def),
      innerType: this,
      catchValue: r,
      typeName: me.ZodCatch
    });
  }
  describe(t) {
    const r = this.constructor;
    return new r({
      ...this._def,
      description: t
    });
  }
  pipe(t) {
    return Ua.create(this, t);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const xP = /^c[^\s-]{8,}$/i, _P = /^[a-z][a-z0-9]*$/, SP = /[0-9A-HJKMNP-TV-Z]{26}/, AP = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i, kP = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/, TP = new RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u"), IP = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/, PP = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/, OP = (e) => e.precision ? e.offset ? new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${e.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`) : new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${e.precision}}Z$`) : e.precision === 0 ? e.offset ? new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$") : new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$") : e.offset ? new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$") : new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$");
function BP(e, t) {
  return !!((t === "v4" || !t) && IP.test(e) || (t === "v6" || !t) && PP.test(e));
}
class zr extends Ue {
  constructor() {
    super(...arguments), this._regex = (t, r, n) => this.refinement((o) => t.test(o), {
      validation: r,
      code: X.invalid_string,
      ...fe.errToObj(n)
    }), this.nonempty = (t) => this.min(1, fe.errToObj(t)), this.trim = () => new zr({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    }), this.toLowerCase = () => new zr({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    }), this.toUpperCase = () => new zr({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  _parse(t) {
    if (this._def.coerce && (t.data = String(t.data)), this._getType(t) !== re.string) {
      const i = this._getOrReturnCtx(t);
      return ne(
        i,
        {
          code: X.invalid_type,
          expected: re.string,
          received: i.parsedType
        }
        //
      ), xe;
    }
    const n = new Zt();
    let o;
    for (const i of this._def.checks)
      if (i.kind === "min")
        t.data.length < i.value && (o = this._getOrReturnCtx(t, o), ne(o, {
          code: X.too_small,
          minimum: i.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: i.message
        }), n.dirty());
      else if (i.kind === "max")
        t.data.length > i.value && (o = this._getOrReturnCtx(t, o), ne(o, {
          code: X.too_big,
          maximum: i.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: i.message
        }), n.dirty());
      else if (i.kind === "length") {
        const s = t.data.length > i.value, a = t.data.length < i.value;
        (s || a) && (o = this._getOrReturnCtx(t, o), s ? ne(o, {
          code: X.too_big,
          maximum: i.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: i.message
        }) : a && ne(o, {
          code: X.too_small,
          minimum: i.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: i.message
        }), n.dirty());
      } else if (i.kind === "email")
        kP.test(t.data) || (o = this._getOrReturnCtx(t, o), ne(o, {
          validation: "email",
          code: X.invalid_string,
          message: i.message
        }), n.dirty());
      else if (i.kind === "emoji")
        TP.test(t.data) || (o = this._getOrReturnCtx(t, o), ne(o, {
          validation: "emoji",
          code: X.invalid_string,
          message: i.message
        }), n.dirty());
      else if (i.kind === "uuid")
        AP.test(t.data) || (o = this._getOrReturnCtx(t, o), ne(o, {
          validation: "uuid",
          code: X.invalid_string,
          message: i.message
        }), n.dirty());
      else if (i.kind === "cuid")
        xP.test(t.data) || (o = this._getOrReturnCtx(t, o), ne(o, {
          validation: "cuid",
          code: X.invalid_string,
          message: i.message
        }), n.dirty());
      else if (i.kind === "cuid2")
        _P.test(t.data) || (o = this._getOrReturnCtx(t, o), ne(o, {
          validation: "cuid2",
          code: X.invalid_string,
          message: i.message
        }), n.dirty());
      else if (i.kind === "ulid")
        SP.test(t.data) || (o = this._getOrReturnCtx(t, o), ne(o, {
          validation: "ulid",
          code: X.invalid_string,
          message: i.message
        }), n.dirty());
      else if (i.kind === "url")
        try {
          new URL(t.data);
        } catch {
          o = this._getOrReturnCtx(t, o), ne(o, {
            validation: "url",
            code: X.invalid_string,
            message: i.message
          }), n.dirty();
        }
      else i.kind === "regex" ? (i.regex.lastIndex = 0, i.regex.test(t.data) || (o = this._getOrReturnCtx(t, o), ne(o, {
        validation: "regex",
        code: X.invalid_string,
        message: i.message
      }), n.dirty())) : i.kind === "trim" ? t.data = t.data.trim() : i.kind === "includes" ? t.data.includes(i.value, i.position) || (o = this._getOrReturnCtx(t, o), ne(o, {
        code: X.invalid_string,
        validation: { includes: i.value, position: i.position },
        message: i.message
      }), n.dirty()) : i.kind === "toLowerCase" ? t.data = t.data.toLowerCase() : i.kind === "toUpperCase" ? t.data = t.data.toUpperCase() : i.kind === "startsWith" ? t.data.startsWith(i.value) || (o = this._getOrReturnCtx(t, o), ne(o, {
        code: X.invalid_string,
        validation: { startsWith: i.value },
        message: i.message
      }), n.dirty()) : i.kind === "endsWith" ? t.data.endsWith(i.value) || (o = this._getOrReturnCtx(t, o), ne(o, {
        code: X.invalid_string,
        validation: { endsWith: i.value },
        message: i.message
      }), n.dirty()) : i.kind === "datetime" ? OP(i).test(t.data) || (o = this._getOrReturnCtx(t, o), ne(o, {
        code: X.invalid_string,
        validation: "datetime",
        message: i.message
      }), n.dirty()) : i.kind === "ip" ? BP(t.data, i.version) || (o = this._getOrReturnCtx(t, o), ne(o, {
        validation: "ip",
        code: X.invalid_string,
        message: i.message
      }), n.dirty()) : Ke.assertNever(i);
    return { status: n.value, value: t.data };
  }
  _addCheck(t) {
    return new zr({
      ...this._def,
      checks: [...this._def.checks, t]
    });
  }
  email(t) {
    return this._addCheck({ kind: "email", ...fe.errToObj(t) });
  }
  url(t) {
    return this._addCheck({ kind: "url", ...fe.errToObj(t) });
  }
  emoji(t) {
    return this._addCheck({ kind: "emoji", ...fe.errToObj(t) });
  }
  uuid(t) {
    return this._addCheck({ kind: "uuid", ...fe.errToObj(t) });
  }
  cuid(t) {
    return this._addCheck({ kind: "cuid", ...fe.errToObj(t) });
  }
  cuid2(t) {
    return this._addCheck({ kind: "cuid2", ...fe.errToObj(t) });
  }
  ulid(t) {
    return this._addCheck({ kind: "ulid", ...fe.errToObj(t) });
  }
  ip(t) {
    return this._addCheck({ kind: "ip", ...fe.errToObj(t) });
  }
  datetime(t) {
    var r;
    return typeof t == "string" ? this._addCheck({
      kind: "datetime",
      precision: null,
      offset: !1,
      message: t
    }) : this._addCheck({
      kind: "datetime",
      precision: typeof (t == null ? void 0 : t.precision) > "u" ? null : t == null ? void 0 : t.precision,
      offset: (r = t == null ? void 0 : t.offset) !== null && r !== void 0 ? r : !1,
      ...fe.errToObj(t == null ? void 0 : t.message)
    });
  }
  regex(t, r) {
    return this._addCheck({
      kind: "regex",
      regex: t,
      ...fe.errToObj(r)
    });
  }
  includes(t, r) {
    return this._addCheck({
      kind: "includes",
      value: t,
      position: r == null ? void 0 : r.position,
      ...fe.errToObj(r == null ? void 0 : r.message)
    });
  }
  startsWith(t, r) {
    return this._addCheck({
      kind: "startsWith",
      value: t,
      ...fe.errToObj(r)
    });
  }
  endsWith(t, r) {
    return this._addCheck({
      kind: "endsWith",
      value: t,
      ...fe.errToObj(r)
    });
  }
  min(t, r) {
    return this._addCheck({
      kind: "min",
      value: t,
      ...fe.errToObj(r)
    });
  }
  max(t, r) {
    return this._addCheck({
      kind: "max",
      value: t,
      ...fe.errToObj(r)
    });
  }
  length(t, r) {
    return this._addCheck({
      kind: "length",
      value: t,
      ...fe.errToObj(r)
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((t) => t.kind === "datetime");
  }
  get isEmail() {
    return !!this._def.checks.find((t) => t.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((t) => t.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((t) => t.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((t) => t.kind === "uuid");
  }
  get isCUID() {
    return !!this._def.checks.find((t) => t.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((t) => t.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((t) => t.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((t) => t.kind === "ip");
  }
  get minLength() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "min" && (t === null || r.value > t) && (t = r.value);
    return t;
  }
  get maxLength() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "max" && (t === null || r.value < t) && (t = r.value);
    return t;
  }
}
zr.create = (e) => {
  var t;
  return new zr({
    checks: [],
    typeName: me.ZodString,
    coerce: (t = e == null ? void 0 : e.coerce) !== null && t !== void 0 ? t : !1,
    ...Ie(e)
  });
};
function NP(e, t) {
  const r = (e.toString().split(".")[1] || "").length, n = (t.toString().split(".")[1] || "").length, o = r > n ? r : n, i = parseInt(e.toFixed(o).replace(".", "")), s = parseInt(t.toFixed(o).replace(".", ""));
  return i % s / Math.pow(10, o);
}
class Io extends Ue {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(t) {
    if (this._def.coerce && (t.data = Number(t.data)), this._getType(t) !== re.number) {
      const i = this._getOrReturnCtx(t);
      return ne(i, {
        code: X.invalid_type,
        expected: re.number,
        received: i.parsedType
      }), xe;
    }
    let n;
    const o = new Zt();
    for (const i of this._def.checks)
      i.kind === "int" ? Ke.isInteger(t.data) || (n = this._getOrReturnCtx(t, n), ne(n, {
        code: X.invalid_type,
        expected: "integer",
        received: "float",
        message: i.message
      }), o.dirty()) : i.kind === "min" ? (i.inclusive ? t.data < i.value : t.data <= i.value) && (n = this._getOrReturnCtx(t, n), ne(n, {
        code: X.too_small,
        minimum: i.value,
        type: "number",
        inclusive: i.inclusive,
        exact: !1,
        message: i.message
      }), o.dirty()) : i.kind === "max" ? (i.inclusive ? t.data > i.value : t.data >= i.value) && (n = this._getOrReturnCtx(t, n), ne(n, {
        code: X.too_big,
        maximum: i.value,
        type: "number",
        inclusive: i.inclusive,
        exact: !1,
        message: i.message
      }), o.dirty()) : i.kind === "multipleOf" ? NP(t.data, i.value) !== 0 && (n = this._getOrReturnCtx(t, n), ne(n, {
        code: X.not_multiple_of,
        multipleOf: i.value,
        message: i.message
      }), o.dirty()) : i.kind === "finite" ? Number.isFinite(t.data) || (n = this._getOrReturnCtx(t, n), ne(n, {
        code: X.not_finite,
        message: i.message
      }), o.dirty()) : Ke.assertNever(i);
    return { status: o.value, value: t.data };
  }
  gte(t, r) {
    return this.setLimit("min", t, !0, fe.toString(r));
  }
  gt(t, r) {
    return this.setLimit("min", t, !1, fe.toString(r));
  }
  lte(t, r) {
    return this.setLimit("max", t, !0, fe.toString(r));
  }
  lt(t, r) {
    return this.setLimit("max", t, !1, fe.toString(r));
  }
  setLimit(t, r, n, o) {
    return new Io({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: t,
          value: r,
          inclusive: n,
          message: fe.toString(o)
        }
      ]
    });
  }
  _addCheck(t) {
    return new Io({
      ...this._def,
      checks: [...this._def.checks, t]
    });
  }
  int(t) {
    return this._addCheck({
      kind: "int",
      message: fe.toString(t)
    });
  }
  positive(t) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !1,
      message: fe.toString(t)
    });
  }
  negative(t) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !1,
      message: fe.toString(t)
    });
  }
  nonpositive(t) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !0,
      message: fe.toString(t)
    });
  }
  nonnegative(t) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !0,
      message: fe.toString(t)
    });
  }
  multipleOf(t, r) {
    return this._addCheck({
      kind: "multipleOf",
      value: t,
      message: fe.toString(r)
    });
  }
  finite(t) {
    return this._addCheck({
      kind: "finite",
      message: fe.toString(t)
    });
  }
  safe(t) {
    return this._addCheck({
      kind: "min",
      inclusive: !0,
      value: Number.MIN_SAFE_INTEGER,
      message: fe.toString(t)
    })._addCheck({
      kind: "max",
      inclusive: !0,
      value: Number.MAX_SAFE_INTEGER,
      message: fe.toString(t)
    });
  }
  get minValue() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "min" && (t === null || r.value > t) && (t = r.value);
    return t;
  }
  get maxValue() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "max" && (t === null || r.value < t) && (t = r.value);
    return t;
  }
  get isInt() {
    return !!this._def.checks.find((t) => t.kind === "int" || t.kind === "multipleOf" && Ke.isInteger(t.value));
  }
  get isFinite() {
    let t = null, r = null;
    for (const n of this._def.checks) {
      if (n.kind === "finite" || n.kind === "int" || n.kind === "multipleOf")
        return !0;
      n.kind === "min" ? (r === null || n.value > r) && (r = n.value) : n.kind === "max" && (t === null || n.value < t) && (t = n.value);
    }
    return Number.isFinite(r) && Number.isFinite(t);
  }
}
Io.create = (e) => new Io({
  checks: [],
  typeName: me.ZodNumber,
  coerce: (e == null ? void 0 : e.coerce) || !1,
  ...Ie(e)
});
class Po extends Ue {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(t) {
    if (this._def.coerce && (t.data = BigInt(t.data)), this._getType(t) !== re.bigint) {
      const i = this._getOrReturnCtx(t);
      return ne(i, {
        code: X.invalid_type,
        expected: re.bigint,
        received: i.parsedType
      }), xe;
    }
    let n;
    const o = new Zt();
    for (const i of this._def.checks)
      i.kind === "min" ? (i.inclusive ? t.data < i.value : t.data <= i.value) && (n = this._getOrReturnCtx(t, n), ne(n, {
        code: X.too_small,
        type: "bigint",
        minimum: i.value,
        inclusive: i.inclusive,
        message: i.message
      }), o.dirty()) : i.kind === "max" ? (i.inclusive ? t.data > i.value : t.data >= i.value) && (n = this._getOrReturnCtx(t, n), ne(n, {
        code: X.too_big,
        type: "bigint",
        maximum: i.value,
        inclusive: i.inclusive,
        message: i.message
      }), o.dirty()) : i.kind === "multipleOf" ? t.data % i.value !== BigInt(0) && (n = this._getOrReturnCtx(t, n), ne(n, {
        code: X.not_multiple_of,
        multipleOf: i.value,
        message: i.message
      }), o.dirty()) : Ke.assertNever(i);
    return { status: o.value, value: t.data };
  }
  gte(t, r) {
    return this.setLimit("min", t, !0, fe.toString(r));
  }
  gt(t, r) {
    return this.setLimit("min", t, !1, fe.toString(r));
  }
  lte(t, r) {
    return this.setLimit("max", t, !0, fe.toString(r));
  }
  lt(t, r) {
    return this.setLimit("max", t, !1, fe.toString(r));
  }
  setLimit(t, r, n, o) {
    return new Po({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: t,
          value: r,
          inclusive: n,
          message: fe.toString(o)
        }
      ]
    });
  }
  _addCheck(t) {
    return new Po({
      ...this._def,
      checks: [...this._def.checks, t]
    });
  }
  positive(t) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !1,
      message: fe.toString(t)
    });
  }
  negative(t) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !1,
      message: fe.toString(t)
    });
  }
  nonpositive(t) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !0,
      message: fe.toString(t)
    });
  }
  nonnegative(t) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !0,
      message: fe.toString(t)
    });
  }
  multipleOf(t, r) {
    return this._addCheck({
      kind: "multipleOf",
      value: t,
      message: fe.toString(r)
    });
  }
  get minValue() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "min" && (t === null || r.value > t) && (t = r.value);
    return t;
  }
  get maxValue() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "max" && (t === null || r.value < t) && (t = r.value);
    return t;
  }
}
Po.create = (e) => {
  var t;
  return new Po({
    checks: [],
    typeName: me.ZodBigInt,
    coerce: (t = e == null ? void 0 : e.coerce) !== null && t !== void 0 ? t : !1,
    ...Ie(e)
  });
};
class ia extends Ue {
  _parse(t) {
    if (this._def.coerce && (t.data = !!t.data), this._getType(t) !== re.boolean) {
      const n = this._getOrReturnCtx(t);
      return ne(n, {
        code: X.invalid_type,
        expected: re.boolean,
        received: n.parsedType
      }), xe;
    }
    return tr(t.data);
  }
}
ia.create = (e) => new ia({
  typeName: me.ZodBoolean,
  coerce: (e == null ? void 0 : e.coerce) || !1,
  ...Ie(e)
});
class ai extends Ue {
  _parse(t) {
    if (this._def.coerce && (t.data = new Date(t.data)), this._getType(t) !== re.date) {
      const i = this._getOrReturnCtx(t);
      return ne(i, {
        code: X.invalid_type,
        expected: re.date,
        received: i.parsedType
      }), xe;
    }
    if (isNaN(t.data.getTime())) {
      const i = this._getOrReturnCtx(t);
      return ne(i, {
        code: X.invalid_date
      }), xe;
    }
    const n = new Zt();
    let o;
    for (const i of this._def.checks)
      i.kind === "min" ? t.data.getTime() < i.value && (o = this._getOrReturnCtx(t, o), ne(o, {
        code: X.too_small,
        message: i.message,
        inclusive: !0,
        exact: !1,
        minimum: i.value,
        type: "date"
      }), n.dirty()) : i.kind === "max" ? t.data.getTime() > i.value && (o = this._getOrReturnCtx(t, o), ne(o, {
        code: X.too_big,
        message: i.message,
        inclusive: !0,
        exact: !1,
        maximum: i.value,
        type: "date"
      }), n.dirty()) : Ke.assertNever(i);
    return {
      status: n.value,
      value: new Date(t.data.getTime())
    };
  }
  _addCheck(t) {
    return new ai({
      ...this._def,
      checks: [...this._def.checks, t]
    });
  }
  min(t, r) {
    return this._addCheck({
      kind: "min",
      value: t.getTime(),
      message: fe.toString(r)
    });
  }
  max(t, r) {
    return this._addCheck({
      kind: "max",
      value: t.getTime(),
      message: fe.toString(r)
    });
  }
  get minDate() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "min" && (t === null || r.value > t) && (t = r.value);
    return t != null ? new Date(t) : null;
  }
  get maxDate() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "max" && (t === null || r.value < t) && (t = r.value);
    return t != null ? new Date(t) : null;
  }
}
ai.create = (e) => new ai({
  checks: [],
  coerce: (e == null ? void 0 : e.coerce) || !1,
  typeName: me.ZodDate,
  ...Ie(e)
});
class hu extends Ue {
  _parse(t) {
    if (this._getType(t) !== re.symbol) {
      const n = this._getOrReturnCtx(t);
      return ne(n, {
        code: X.invalid_type,
        expected: re.symbol,
        received: n.parsedType
      }), xe;
    }
    return tr(t.data);
  }
}
hu.create = (e) => new hu({
  typeName: me.ZodSymbol,
  ...Ie(e)
});
class sa extends Ue {
  _parse(t) {
    if (this._getType(t) !== re.undefined) {
      const n = this._getOrReturnCtx(t);
      return ne(n, {
        code: X.invalid_type,
        expected: re.undefined,
        received: n.parsedType
      }), xe;
    }
    return tr(t.data);
  }
}
sa.create = (e) => new sa({
  typeName: me.ZodUndefined,
  ...Ie(e)
});
class aa extends Ue {
  _parse(t) {
    if (this._getType(t) !== re.null) {
      const n = this._getOrReturnCtx(t);
      return ne(n, {
        code: X.invalid_type,
        expected: re.null,
        received: n.parsedType
      }), xe;
    }
    return tr(t.data);
  }
}
aa.create = (e) => new aa({
  typeName: me.ZodNull,
  ...Ie(e)
});
class os extends Ue {
  constructor() {
    super(...arguments), this._any = !0;
  }
  _parse(t) {
    return tr(t.data);
  }
}
os.create = (e) => new os({
  typeName: me.ZodAny,
  ...Ie(e)
});
class ti extends Ue {
  constructor() {
    super(...arguments), this._unknown = !0;
  }
  _parse(t) {
    return tr(t.data);
  }
}
ti.create = (e) => new ti({
  typeName: me.ZodUnknown,
  ...Ie(e)
});
class zn extends Ue {
  _parse(t) {
    const r = this._getOrReturnCtx(t);
    return ne(r, {
      code: X.invalid_type,
      expected: re.never,
      received: r.parsedType
    }), xe;
  }
}
zn.create = (e) => new zn({
  typeName: me.ZodNever,
  ...Ie(e)
});
class pu extends Ue {
  _parse(t) {
    if (this._getType(t) !== re.undefined) {
      const n = this._getOrReturnCtx(t);
      return ne(n, {
        code: X.invalid_type,
        expected: re.void,
        received: n.parsedType
      }), xe;
    }
    return tr(t.data);
  }
}
pu.create = (e) => new pu({
  typeName: me.ZodVoid,
  ...Ie(e)
});
class Fr extends Ue {
  _parse(t) {
    const { ctx: r, status: n } = this._processInputParams(t), o = this._def;
    if (r.parsedType !== re.array)
      return ne(r, {
        code: X.invalid_type,
        expected: re.array,
        received: r.parsedType
      }), xe;
    if (o.exactLength !== null) {
      const s = r.data.length > o.exactLength.value, a = r.data.length < o.exactLength.value;
      (s || a) && (ne(r, {
        code: s ? X.too_big : X.too_small,
        minimum: a ? o.exactLength.value : void 0,
        maximum: s ? o.exactLength.value : void 0,
        type: "array",
        inclusive: !0,
        exact: !0,
        message: o.exactLength.message
      }), n.dirty());
    }
    if (o.minLength !== null && r.data.length < o.minLength.value && (ne(r, {
      code: X.too_small,
      minimum: o.minLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: o.minLength.message
    }), n.dirty()), o.maxLength !== null && r.data.length > o.maxLength.value && (ne(r, {
      code: X.too_big,
      maximum: o.maxLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: o.maxLength.message
    }), n.dirty()), r.common.async)
      return Promise.all([...r.data].map((s, a) => o.type._parseAsync(new gn(r, s, r.path, a)))).then((s) => Zt.mergeArray(n, s));
    const i = [...r.data].map((s, a) => o.type._parseSync(new gn(r, s, r.path, a)));
    return Zt.mergeArray(n, i);
  }
  get element() {
    return this._def.type;
  }
  min(t, r) {
    return new Fr({
      ...this._def,
      minLength: { value: t, message: fe.toString(r) }
    });
  }
  max(t, r) {
    return new Fr({
      ...this._def,
      maxLength: { value: t, message: fe.toString(r) }
    });
  }
  length(t, r) {
    return new Fr({
      ...this._def,
      exactLength: { value: t, message: fe.toString(r) }
    });
  }
  nonempty(t) {
    return this.min(1, t);
  }
}
Fr.create = (e, t) => new Fr({
  type: e,
  minLength: null,
  maxLength: null,
  exactLength: null,
  typeName: me.ZodArray,
  ...Ie(t)
});
function Ri(e) {
  if (e instanceof at) {
    const t = {};
    for (const r in e.shape) {
      const n = e.shape[r];
      t[r] = Un.create(Ri(n));
    }
    return new at({
      ...e._def,
      shape: () => t
    });
  } else return e instanceof Fr ? new Fr({
    ...e._def,
    type: Ri(e.element)
  }) : e instanceof Un ? Un.create(Ri(e.unwrap())) : e instanceof ui ? ui.create(Ri(e.unwrap())) : e instanceof mn ? mn.create(e.items.map((t) => Ri(t))) : e;
}
class at extends Ue {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const t = this._def.shape(), r = Ke.objectKeys(t);
    return this._cached = { shape: t, keys: r };
  }
  _parse(t) {
    if (this._getType(t) !== re.object) {
      const u = this._getOrReturnCtx(t);
      return ne(u, {
        code: X.invalid_type,
        expected: re.object,
        received: u.parsedType
      }), xe;
    }
    const { status: n, ctx: o } = this._processInputParams(t), { shape: i, keys: s } = this._getCached(), a = [];
    if (!(this._def.catchall instanceof zn && this._def.unknownKeys === "strip"))
      for (const u in o.data)
        s.includes(u) || a.push(u);
    const c = [];
    for (const u of s) {
      const f = i[u], l = o.data[u];
      c.push({
        key: { status: "valid", value: u },
        value: f._parse(new gn(o, l, o.path, u)),
        alwaysSet: u in o.data
      });
    }
    if (this._def.catchall instanceof zn) {
      const u = this._def.unknownKeys;
      if (u === "passthrough")
        for (const f of a)
          c.push({
            key: { status: "valid", value: f },
            value: { status: "valid", value: o.data[f] }
          });
      else if (u === "strict")
        a.length > 0 && (ne(o, {
          code: X.unrecognized_keys,
          keys: a
        }), n.dirty());
      else if (u !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      const u = this._def.catchall;
      for (const f of a) {
        const l = o.data[f];
        c.push({
          key: { status: "valid", value: f },
          value: u._parse(
            new gn(o, l, o.path, f)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: f in o.data
        });
      }
    }
    return o.common.async ? Promise.resolve().then(async () => {
      const u = [];
      for (const f of c) {
        const l = await f.key;
        u.push({
          key: l,
          value: await f.value,
          alwaysSet: f.alwaysSet
        });
      }
      return u;
    }).then((u) => Zt.mergeObjectSync(n, u)) : Zt.mergeObjectSync(n, c);
  }
  get shape() {
    return this._def.shape();
  }
  strict(t) {
    return new at({
      ...this._def,
      unknownKeys: "strict",
      ...t !== void 0 ? {
        errorMap: (r, n) => {
          var o, i, s, a;
          const c = (s = (i = (o = this._def).errorMap) === null || i === void 0 ? void 0 : i.call(o, r, n).message) !== null && s !== void 0 ? s : n.defaultError;
          return r.code === "unrecognized_keys" ? {
            message: (a = fe.errToObj(t).message) !== null && a !== void 0 ? a : c
          } : {
            message: c
          };
        }
      } : {}
    });
  }
  strip() {
    return new at({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new at({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(t) {
    return new at({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...t
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(t) {
    return new at({
      unknownKeys: t._def.unknownKeys,
      catchall: t._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...t._def.shape()
      }),
      typeName: me.ZodObject
    });
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(t, r) {
    return this.augment({ [t]: r });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(t) {
    return new at({
      ...this._def,
      catchall: t
    });
  }
  pick(t) {
    const r = {};
    return Ke.objectKeys(t).forEach((n) => {
      t[n] && this.shape[n] && (r[n] = this.shape[n]);
    }), new at({
      ...this._def,
      shape: () => r
    });
  }
  omit(t) {
    const r = {};
    return Ke.objectKeys(this.shape).forEach((n) => {
      t[n] || (r[n] = this.shape[n]);
    }), new at({
      ...this._def,
      shape: () => r
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return Ri(this);
  }
  partial(t) {
    const r = {};
    return Ke.objectKeys(this.shape).forEach((n) => {
      const o = this.shape[n];
      t && !t[n] ? r[n] = o : r[n] = o.optional();
    }), new at({
      ...this._def,
      shape: () => r
    });
  }
  required(t) {
    const r = {};
    return Ke.objectKeys(this.shape).forEach((n) => {
      if (t && !t[n])
        r[n] = this.shape[n];
      else {
        let i = this.shape[n];
        for (; i instanceof Un; )
          i = i._def.innerType;
        r[n] = i;
      }
    }), new at({
      ...this._def,
      shape: () => r
    });
  }
  keyof() {
    return Aw(Ke.objectKeys(this.shape));
  }
}
at.create = (e, t) => new at({
  shape: () => e,
  unknownKeys: "strip",
  catchall: zn.create(),
  typeName: me.ZodObject,
  ...Ie(t)
});
at.strictCreate = (e, t) => new at({
  shape: () => e,
  unknownKeys: "strict",
  catchall: zn.create(),
  typeName: me.ZodObject,
  ...Ie(t)
});
at.lazycreate = (e, t) => new at({
  shape: e,
  unknownKeys: "strip",
  catchall: zn.create(),
  typeName: me.ZodObject,
  ...Ie(t)
});
class ca extends Ue {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t), n = this._def.options;
    function o(i) {
      for (const a of i)
        if (a.result.status === "valid")
          return a.result;
      for (const a of i)
        if (a.result.status === "dirty")
          return r.common.issues.push(...a.ctx.common.issues), a.result;
      const s = i.map((a) => new Dr(a.ctx.common.issues));
      return ne(r, {
        code: X.invalid_union,
        unionErrors: s
      }), xe;
    }
    if (r.common.async)
      return Promise.all(n.map(async (i) => {
        const s = {
          ...r,
          common: {
            ...r.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await i._parseAsync({
            data: r.data,
            path: r.path,
            parent: s
          }),
          ctx: s
        };
      })).then(o);
    {
      let i;
      const s = [];
      for (const c of n) {
        const u = {
          ...r,
          common: {
            ...r.common,
            issues: []
          },
          parent: null
        }, f = c._parseSync({
          data: r.data,
          path: r.path,
          parent: u
        });
        if (f.status === "valid")
          return f;
        f.status === "dirty" && !i && (i = { result: f, ctx: u }), u.common.issues.length && s.push(u.common.issues);
      }
      if (i)
        return r.common.issues.push(...i.ctx.common.issues), i.result;
      const a = s.map((c) => new Dr(c));
      return ne(r, {
        code: X.invalid_union,
        unionErrors: a
      }), xe;
    }
  }
  get options() {
    return this._def.options;
  }
}
ca.create = (e, t) => new ca({
  options: e,
  typeName: me.ZodUnion,
  ...Ie(t)
});
const Bc = (e) => e instanceof fa ? Bc(e.schema) : e instanceof qr ? Bc(e.innerType()) : e instanceof da ? [e.value] : e instanceof Oo ? e.options : e instanceof ha ? Object.keys(e.enum) : e instanceof pa ? Bc(e._def.innerType) : e instanceof sa ? [void 0] : e instanceof aa ? [null] : null;
class Ju extends Ue {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    if (r.parsedType !== re.object)
      return ne(r, {
        code: X.invalid_type,
        expected: re.object,
        received: r.parsedType
      }), xe;
    const n = this.discriminator, o = r.data[n], i = this.optionsMap.get(o);
    return i ? r.common.async ? i._parseAsync({
      data: r.data,
      path: r.path,
      parent: r
    }) : i._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }) : (ne(r, {
      code: X.invalid_union_discriminator,
      options: Array.from(this.optionsMap.keys()),
      path: [n]
    }), xe);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(t, r, n) {
    const o = /* @__PURE__ */ new Map();
    for (const i of r) {
      const s = Bc(i.shape[t]);
      if (!s)
        throw new Error(`A discriminator value for key \`${t}\` could not be extracted from all schema options`);
      for (const a of s) {
        if (o.has(a))
          throw new Error(`Discriminator property ${String(t)} has duplicate value ${String(a)}`);
        o.set(a, i);
      }
    }
    return new Ju({
      typeName: me.ZodDiscriminatedUnion,
      discriminator: t,
      options: r,
      optionsMap: o,
      ...Ie(n)
    });
  }
}
function kd(e, t) {
  const r = xo(e), n = xo(t);
  if (e === t)
    return { valid: !0, data: e };
  if (r === re.object && n === re.object) {
    const o = Ke.objectKeys(t), i = Ke.objectKeys(e).filter((a) => o.indexOf(a) !== -1), s = { ...e, ...t };
    for (const a of i) {
      const c = kd(e[a], t[a]);
      if (!c.valid)
        return { valid: !1 };
      s[a] = c.data;
    }
    return { valid: !0, data: s };
  } else if (r === re.array && n === re.array) {
    if (e.length !== t.length)
      return { valid: !1 };
    const o = [];
    for (let i = 0; i < e.length; i++) {
      const s = e[i], a = t[i], c = kd(s, a);
      if (!c.valid)
        return { valid: !1 };
      o.push(c.data);
    }
    return { valid: !0, data: o };
  } else return r === re.date && n === re.date && +e == +t ? { valid: !0, data: e } : { valid: !1 };
}
class ua extends Ue {
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t), o = (i, s) => {
      if (Sd(i) || Sd(s))
        return xe;
      const a = kd(i.value, s.value);
      return a.valid ? ((Ad(i) || Ad(s)) && r.dirty(), { status: r.value, value: a.data }) : (ne(n, {
        code: X.invalid_intersection_types
      }), xe);
    };
    return n.common.async ? Promise.all([
      this._def.left._parseAsync({
        data: n.data,
        path: n.path,
        parent: n
      }),
      this._def.right._parseAsync({
        data: n.data,
        path: n.path,
        parent: n
      })
    ]).then(([i, s]) => o(i, s)) : o(this._def.left._parseSync({
      data: n.data,
      path: n.path,
      parent: n
    }), this._def.right._parseSync({
      data: n.data,
      path: n.path,
      parent: n
    }));
  }
}
ua.create = (e, t, r) => new ua({
  left: e,
  right: t,
  typeName: me.ZodIntersection,
  ...Ie(r)
});
class mn extends Ue {
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t);
    if (n.parsedType !== re.array)
      return ne(n, {
        code: X.invalid_type,
        expected: re.array,
        received: n.parsedType
      }), xe;
    if (n.data.length < this._def.items.length)
      return ne(n, {
        code: X.too_small,
        minimum: this._def.items.length,
        inclusive: !0,
        exact: !1,
        type: "array"
      }), xe;
    !this._def.rest && n.data.length > this._def.items.length && (ne(n, {
      code: X.too_big,
      maximum: this._def.items.length,
      inclusive: !0,
      exact: !1,
      type: "array"
    }), r.dirty());
    const i = [...n.data].map((s, a) => {
      const c = this._def.items[a] || this._def.rest;
      return c ? c._parse(new gn(n, s, n.path, a)) : null;
    }).filter((s) => !!s);
    return n.common.async ? Promise.all(i).then((s) => Zt.mergeArray(r, s)) : Zt.mergeArray(r, i);
  }
  get items() {
    return this._def.items;
  }
  rest(t) {
    return new mn({
      ...this._def,
      rest: t
    });
  }
}
mn.create = (e, t) => {
  if (!Array.isArray(e))
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new mn({
    items: e,
    typeName: me.ZodTuple,
    rest: null,
    ...Ie(t)
  });
};
class la extends Ue {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t);
    if (n.parsedType !== re.object)
      return ne(n, {
        code: X.invalid_type,
        expected: re.object,
        received: n.parsedType
      }), xe;
    const o = [], i = this._def.keyType, s = this._def.valueType;
    for (const a in n.data)
      o.push({
        key: i._parse(new gn(n, a, n.path, a)),
        value: s._parse(new gn(n, n.data[a], n.path, a))
      });
    return n.common.async ? Zt.mergeObjectAsync(r, o) : Zt.mergeObjectSync(r, o);
  }
  get element() {
    return this._def.valueType;
  }
  static create(t, r, n) {
    return r instanceof Ue ? new la({
      keyType: t,
      valueType: r,
      typeName: me.ZodRecord,
      ...Ie(n)
    }) : new la({
      keyType: zr.create(),
      valueType: t,
      typeName: me.ZodRecord,
      ...Ie(r)
    });
  }
}
class gu extends Ue {
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t);
    if (n.parsedType !== re.map)
      return ne(n, {
        code: X.invalid_type,
        expected: re.map,
        received: n.parsedType
      }), xe;
    const o = this._def.keyType, i = this._def.valueType, s = [...n.data.entries()].map(([a, c], u) => ({
      key: o._parse(new gn(n, a, n.path, [u, "key"])),
      value: i._parse(new gn(n, c, n.path, [u, "value"]))
    }));
    if (n.common.async) {
      const a = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const c of s) {
          const u = await c.key, f = await c.value;
          if (u.status === "aborted" || f.status === "aborted")
            return xe;
          (u.status === "dirty" || f.status === "dirty") && r.dirty(), a.set(u.value, f.value);
        }
        return { status: r.value, value: a };
      });
    } else {
      const a = /* @__PURE__ */ new Map();
      for (const c of s) {
        const u = c.key, f = c.value;
        if (u.status === "aborted" || f.status === "aborted")
          return xe;
        (u.status === "dirty" || f.status === "dirty") && r.dirty(), a.set(u.value, f.value);
      }
      return { status: r.value, value: a };
    }
  }
}
gu.create = (e, t, r) => new gu({
  valueType: t,
  keyType: e,
  typeName: me.ZodMap,
  ...Ie(r)
});
class ci extends Ue {
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t);
    if (n.parsedType !== re.set)
      return ne(n, {
        code: X.invalid_type,
        expected: re.set,
        received: n.parsedType
      }), xe;
    const o = this._def;
    o.minSize !== null && n.data.size < o.minSize.value && (ne(n, {
      code: X.too_small,
      minimum: o.minSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: o.minSize.message
    }), r.dirty()), o.maxSize !== null && n.data.size > o.maxSize.value && (ne(n, {
      code: X.too_big,
      maximum: o.maxSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: o.maxSize.message
    }), r.dirty());
    const i = this._def.valueType;
    function s(c) {
      const u = /* @__PURE__ */ new Set();
      for (const f of c) {
        if (f.status === "aborted")
          return xe;
        f.status === "dirty" && r.dirty(), u.add(f.value);
      }
      return { status: r.value, value: u };
    }
    const a = [...n.data.values()].map((c, u) => i._parse(new gn(n, c, n.path, u)));
    return n.common.async ? Promise.all(a).then((c) => s(c)) : s(a);
  }
  min(t, r) {
    return new ci({
      ...this._def,
      minSize: { value: t, message: fe.toString(r) }
    });
  }
  max(t, r) {
    return new ci({
      ...this._def,
      maxSize: { value: t, message: fe.toString(r) }
    });
  }
  size(t, r) {
    return this.min(t, r).max(t, r);
  }
  nonempty(t) {
    return this.min(1, t);
  }
}
ci.create = (e, t) => new ci({
  valueType: e,
  minSize: null,
  maxSize: null,
  typeName: me.ZodSet,
  ...Ie(t)
});
class qi extends Ue {
  constructor() {
    super(...arguments), this.validate = this.implement;
  }
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    if (r.parsedType !== re.function)
      return ne(r, {
        code: X.invalid_type,
        expected: re.function,
        received: r.parsedType
      }), xe;
    function n(a, c) {
      return lu({
        data: a,
        path: r.path,
        errorMaps: [
          r.common.contextualErrorMap,
          r.schemaErrorMap,
          uu(),
          oa
        ].filter((u) => !!u),
        issueData: {
          code: X.invalid_arguments,
          argumentsError: c
        }
      });
    }
    function o(a, c) {
      return lu({
        data: a,
        path: r.path,
        errorMaps: [
          r.common.contextualErrorMap,
          r.schemaErrorMap,
          uu(),
          oa
        ].filter((u) => !!u),
        issueData: {
          code: X.invalid_return_type,
          returnTypeError: c
        }
      });
    }
    const i = { errorMap: r.common.contextualErrorMap }, s = r.data;
    return this._def.returns instanceof is ? tr(async (...a) => {
      const c = new Dr([]), u = await this._def.args.parseAsync(a, i).catch((d) => {
        throw c.addIssue(n(a, d)), c;
      }), f = await s(...u);
      return await this._def.returns._def.type.parseAsync(f, i).catch((d) => {
        throw c.addIssue(o(f, d)), c;
      });
    }) : tr((...a) => {
      const c = this._def.args.safeParse(a, i);
      if (!c.success)
        throw new Dr([n(a, c.error)]);
      const u = s(...c.data), f = this._def.returns.safeParse(u, i);
      if (!f.success)
        throw new Dr([o(u, f.error)]);
      return f.data;
    });
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...t) {
    return new qi({
      ...this._def,
      args: mn.create(t).rest(ti.create())
    });
  }
  returns(t) {
    return new qi({
      ...this._def,
      returns: t
    });
  }
  implement(t) {
    return this.parse(t);
  }
  strictImplement(t) {
    return this.parse(t);
  }
  static create(t, r, n) {
    return new qi({
      args: t || mn.create([]).rest(ti.create()),
      returns: r || ti.create(),
      typeName: me.ZodFunction,
      ...Ie(n)
    });
  }
}
class fa extends Ue {
  get schema() {
    return this._def.getter();
  }
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    return this._def.getter()._parse({ data: r.data, path: r.path, parent: r });
  }
}
fa.create = (e, t) => new fa({
  getter: e,
  typeName: me.ZodLazy,
  ...Ie(t)
});
class da extends Ue {
  _parse(t) {
    if (t.data !== this._def.value) {
      const r = this._getOrReturnCtx(t);
      return ne(r, {
        received: r.data,
        code: X.invalid_literal,
        expected: this._def.value
      }), xe;
    }
    return { status: "valid", value: t.data };
  }
  get value() {
    return this._def.value;
  }
}
da.create = (e, t) => new da({
  value: e,
  typeName: me.ZodLiteral,
  ...Ie(t)
});
function Aw(e, t) {
  return new Oo({
    values: e,
    typeName: me.ZodEnum,
    ...Ie(t)
  });
}
class Oo extends Ue {
  _parse(t) {
    if (typeof t.data != "string") {
      const r = this._getOrReturnCtx(t), n = this._def.values;
      return ne(r, {
        expected: Ke.joinValues(n),
        received: r.parsedType,
        code: X.invalid_type
      }), xe;
    }
    if (this._def.values.indexOf(t.data) === -1) {
      const r = this._getOrReturnCtx(t), n = this._def.values;
      return ne(r, {
        received: r.data,
        code: X.invalid_enum_value,
        options: n
      }), xe;
    }
    return tr(t.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const t = {};
    for (const r of this._def.values)
      t[r] = r;
    return t;
  }
  get Values() {
    const t = {};
    for (const r of this._def.values)
      t[r] = r;
    return t;
  }
  get Enum() {
    const t = {};
    for (const r of this._def.values)
      t[r] = r;
    return t;
  }
  extract(t) {
    return Oo.create(t);
  }
  exclude(t) {
    return Oo.create(this.options.filter((r) => !t.includes(r)));
  }
}
Oo.create = Aw;
class ha extends Ue {
  _parse(t) {
    const r = Ke.getValidEnumValues(this._def.values), n = this._getOrReturnCtx(t);
    if (n.parsedType !== re.string && n.parsedType !== re.number) {
      const o = Ke.objectValues(r);
      return ne(n, {
        expected: Ke.joinValues(o),
        received: n.parsedType,
        code: X.invalid_type
      }), xe;
    }
    if (r.indexOf(t.data) === -1) {
      const o = Ke.objectValues(r);
      return ne(n, {
        received: n.data,
        code: X.invalid_enum_value,
        options: o
      }), xe;
    }
    return tr(t.data);
  }
  get enum() {
    return this._def.values;
  }
}
ha.create = (e, t) => new ha({
  values: e,
  typeName: me.ZodNativeEnum,
  ...Ie(t)
});
class is extends Ue {
  unwrap() {
    return this._def.type;
  }
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    if (r.parsedType !== re.promise && r.common.async === !1)
      return ne(r, {
        code: X.invalid_type,
        expected: re.promise,
        received: r.parsedType
      }), xe;
    const n = r.parsedType === re.promise ? r.data : Promise.resolve(r.data);
    return tr(n.then((o) => this._def.type.parseAsync(o, {
      path: r.path,
      errorMap: r.common.contextualErrorMap
    })));
  }
}
is.create = (e, t) => new is({
  type: e,
  typeName: me.ZodPromise,
  ...Ie(t)
});
class qr extends Ue {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === me.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t), o = this._def.effect || null;
    if (o.type === "preprocess") {
      const s = o.transform(n.data);
      return n.common.async ? Promise.resolve(s).then((a) => this._def.schema._parseAsync({
        data: a,
        path: n.path,
        parent: n
      })) : this._def.schema._parseSync({
        data: s,
        path: n.path,
        parent: n
      });
    }
    const i = {
      addIssue: (s) => {
        ne(n, s), s.fatal ? r.abort() : r.dirty();
      },
      get path() {
        return n.path;
      }
    };
    if (i.addIssue = i.addIssue.bind(i), o.type === "refinement") {
      const s = (a) => {
        const c = o.refinement(a, i);
        if (n.common.async)
          return Promise.resolve(c);
        if (c instanceof Promise)
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return a;
      };
      if (n.common.async === !1) {
        const a = this._def.schema._parseSync({
          data: n.data,
          path: n.path,
          parent: n
        });
        return a.status === "aborted" ? xe : (a.status === "dirty" && r.dirty(), s(a.value), { status: r.value, value: a.value });
      } else
        return this._def.schema._parseAsync({ data: n.data, path: n.path, parent: n }).then((a) => a.status === "aborted" ? xe : (a.status === "dirty" && r.dirty(), s(a.value).then(() => ({ status: r.value, value: a.value }))));
    }
    if (o.type === "transform")
      if (n.common.async === !1) {
        const s = this._def.schema._parseSync({
          data: n.data,
          path: n.path,
          parent: n
        });
        if (!fu(s))
          return s;
        const a = o.transform(s.value, i);
        if (a instanceof Promise)
          throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: r.value, value: a };
      } else
        return this._def.schema._parseAsync({ data: n.data, path: n.path, parent: n }).then((s) => fu(s) ? Promise.resolve(o.transform(s.value, i)).then((a) => ({ status: r.value, value: a })) : s);
    Ke.assertNever(o);
  }
}
qr.create = (e, t, r) => new qr({
  schema: e,
  typeName: me.ZodEffects,
  effect: t,
  ...Ie(r)
});
qr.createWithPreprocess = (e, t, r) => new qr({
  schema: t,
  effect: { type: "preprocess", transform: e },
  typeName: me.ZodEffects,
  ...Ie(r)
});
class Un extends Ue {
  _parse(t) {
    return this._getType(t) === re.undefined ? tr(void 0) : this._def.innerType._parse(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Un.create = (e, t) => new Un({
  innerType: e,
  typeName: me.ZodOptional,
  ...Ie(t)
});
class ui extends Ue {
  _parse(t) {
    return this._getType(t) === re.null ? tr(null) : this._def.innerType._parse(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ui.create = (e, t) => new ui({
  innerType: e,
  typeName: me.ZodNullable,
  ...Ie(t)
});
class pa extends Ue {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    let n = r.data;
    return r.parsedType === re.undefined && (n = this._def.defaultValue()), this._def.innerType._parse({
      data: n,
      path: r.path,
      parent: r
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
pa.create = (e, t) => new pa({
  innerType: e,
  typeName: me.ZodDefault,
  defaultValue: typeof t.default == "function" ? t.default : () => t.default,
  ...Ie(t)
});
class mu extends Ue {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t), n = {
      ...r,
      common: {
        ...r.common,
        issues: []
      }
    }, o = this._def.innerType._parse({
      data: n.data,
      path: n.path,
      parent: {
        ...n
      }
    });
    return du(o) ? o.then((i) => ({
      status: "valid",
      value: i.status === "valid" ? i.value : this._def.catchValue({
        get error() {
          return new Dr(n.common.issues);
        },
        input: n.data
      })
    })) : {
      status: "valid",
      value: o.status === "valid" ? o.value : this._def.catchValue({
        get error() {
          return new Dr(n.common.issues);
        },
        input: n.data
      })
    };
  }
  removeCatch() {
    return this._def.innerType;
  }
}
mu.create = (e, t) => new mu({
  innerType: e,
  typeName: me.ZodCatch,
  catchValue: typeof t.catch == "function" ? t.catch : () => t.catch,
  ...Ie(t)
});
class bu extends Ue {
  _parse(t) {
    if (this._getType(t) !== re.nan) {
      const n = this._getOrReturnCtx(t);
      return ne(n, {
        code: X.invalid_type,
        expected: re.nan,
        received: n.parsedType
      }), xe;
    }
    return { status: "valid", value: t.data };
  }
}
bu.create = (e) => new bu({
  typeName: me.ZodNaN,
  ...Ie(e)
});
const $P = Symbol("zod_brand");
class kw extends Ue {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t), n = r.data;
    return this._def.type._parse({
      data: n,
      path: r.path,
      parent: r
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class Ua extends Ue {
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t);
    if (n.common.async)
      return (async () => {
        const i = await this._def.in._parseAsync({
          data: n.data,
          path: n.path,
          parent: n
        });
        return i.status === "aborted" ? xe : i.status === "dirty" ? (r.dirty(), Sw(i.value)) : this._def.out._parseAsync({
          data: i.value,
          path: n.path,
          parent: n
        });
      })();
    {
      const o = this._def.in._parseSync({
        data: n.data,
        path: n.path,
        parent: n
      });
      return o.status === "aborted" ? xe : o.status === "dirty" ? (r.dirty(), {
        status: "dirty",
        value: o.value
      }) : this._def.out._parseSync({
        data: o.value,
        path: n.path,
        parent: n
      });
    }
  }
  static create(t, r) {
    return new Ua({
      in: t,
      out: r,
      typeName: me.ZodPipeline
    });
  }
}
const Tw = (e, t = {}, r) => e ? os.create().superRefine((n, o) => {
  var i, s;
  if (!e(n)) {
    const a = typeof t == "function" ? t(n) : typeof t == "string" ? { message: t } : t, c = (s = (i = a.fatal) !== null && i !== void 0 ? i : r) !== null && s !== void 0 ? s : !0, u = typeof a == "string" ? { message: a } : a;
    o.addIssue({ code: "custom", ...u, fatal: c });
  }
}) : os.create(), UP = {
  object: at.lazycreate
};
var me;
(function(e) {
  e.ZodString = "ZodString", e.ZodNumber = "ZodNumber", e.ZodNaN = "ZodNaN", e.ZodBigInt = "ZodBigInt", e.ZodBoolean = "ZodBoolean", e.ZodDate = "ZodDate", e.ZodSymbol = "ZodSymbol", e.ZodUndefined = "ZodUndefined", e.ZodNull = "ZodNull", e.ZodAny = "ZodAny", e.ZodUnknown = "ZodUnknown", e.ZodNever = "ZodNever", e.ZodVoid = "ZodVoid", e.ZodArray = "ZodArray", e.ZodObject = "ZodObject", e.ZodUnion = "ZodUnion", e.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", e.ZodIntersection = "ZodIntersection", e.ZodTuple = "ZodTuple", e.ZodRecord = "ZodRecord", e.ZodMap = "ZodMap", e.ZodSet = "ZodSet", e.ZodFunction = "ZodFunction", e.ZodLazy = "ZodLazy", e.ZodLiteral = "ZodLiteral", e.ZodEnum = "ZodEnum", e.ZodEffects = "ZodEffects", e.ZodNativeEnum = "ZodNativeEnum", e.ZodOptional = "ZodOptional", e.ZodNullable = "ZodNullable", e.ZodDefault = "ZodDefault", e.ZodCatch = "ZodCatch", e.ZodPromise = "ZodPromise", e.ZodBranded = "ZodBranded", e.ZodPipeline = "ZodPipeline";
})(me || (me = {}));
const RP = (e, t = {
  message: `Input not instance of ${e.name}`
}) => Tw((r) => r instanceof e, t), Iw = zr.create, Pw = Io.create, CP = bu.create, HP = Po.create, Ow = ia.create, LP = ai.create, zP = hu.create, jP = sa.create, MP = aa.create, DP = os.create, FP = ti.create, KP = zn.create, VP = pu.create, qP = Fr.create, GP = at.create, WP = at.strictCreate, ZP = ca.create, XP = Ju.create, YP = ua.create, JP = mn.create, QP = la.create, eO = gu.create, tO = ci.create, rO = qi.create, nO = fa.create, oO = da.create, iO = Oo.create, sO = ha.create, aO = is.create, tg = qr.create, cO = Un.create, uO = ui.create, lO = qr.createWithPreprocess, fO = Ua.create, dO = () => Iw().optional(), hO = () => Pw().optional(), pO = () => Ow().optional(), gO = {
  string: (e) => zr.create({ ...e, coerce: !0 }),
  number: (e) => Io.create({ ...e, coerce: !0 }),
  boolean: (e) => ia.create({
    ...e,
    coerce: !0
  }),
  bigint: (e) => Po.create({ ...e, coerce: !0 }),
  date: (e) => ai.create({ ...e, coerce: !0 })
}, mO = xe;
var Qt = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: oa,
  setErrorMap: vP,
  getErrorMap: uu,
  makeIssue: lu,
  EMPTY_PATH: EP,
  addIssueToContext: ne,
  ParseStatus: Zt,
  INVALID: xe,
  DIRTY: Sw,
  OK: tr,
  isAborted: Sd,
  isDirty: Ad,
  isValid: fu,
  isAsync: du,
  get util() {
    return Ke;
  },
  get objectUtil() {
    return _d;
  },
  ZodParsedType: re,
  getParsedType: xo,
  ZodType: Ue,
  ZodString: zr,
  ZodNumber: Io,
  ZodBigInt: Po,
  ZodBoolean: ia,
  ZodDate: ai,
  ZodSymbol: hu,
  ZodUndefined: sa,
  ZodNull: aa,
  ZodAny: os,
  ZodUnknown: ti,
  ZodNever: zn,
  ZodVoid: pu,
  ZodArray: Fr,
  ZodObject: at,
  ZodUnion: ca,
  ZodDiscriminatedUnion: Ju,
  ZodIntersection: ua,
  ZodTuple: mn,
  ZodRecord: la,
  ZodMap: gu,
  ZodSet: ci,
  ZodFunction: qi,
  ZodLazy: fa,
  ZodLiteral: da,
  ZodEnum: Oo,
  ZodNativeEnum: ha,
  ZodPromise: is,
  ZodEffects: qr,
  ZodTransformer: qr,
  ZodOptional: Un,
  ZodNullable: ui,
  ZodDefault: pa,
  ZodCatch: mu,
  ZodNaN: bu,
  BRAND: $P,
  ZodBranded: kw,
  ZodPipeline: Ua,
  custom: Tw,
  Schema: Ue,
  ZodSchema: Ue,
  late: UP,
  get ZodFirstPartyTypeKind() {
    return me;
  },
  coerce: gO,
  any: DP,
  array: qP,
  bigint: HP,
  boolean: Ow,
  date: LP,
  discriminatedUnion: XP,
  effect: tg,
  enum: iO,
  function: rO,
  instanceof: RP,
  intersection: YP,
  lazy: nO,
  literal: oO,
  map: eO,
  nan: CP,
  nativeEnum: sO,
  never: KP,
  null: MP,
  nullable: uO,
  number: Pw,
  object: GP,
  oboolean: pO,
  onumber: hO,
  optional: cO,
  ostring: dO,
  pipeline: fO,
  preprocess: lO,
  promise: aO,
  record: QP,
  set: tO,
  strictObject: WP,
  string: Iw,
  symbol: zP,
  transformer: tg,
  tuple: JP,
  undefined: jP,
  union: ZP,
  unknown: FP,
  void: VP,
  NEVER: mO,
  ZodIssueCode: X,
  quotelessJson: wP,
  ZodError: Dr
});
const Bw = Qt.string().regex(/^[a-fA-F0-9]$/), bO = Qt.string().regex(/^[a-fA-F0-9]{64}$/), ss = Qt.number().min(0).max(4294967295), yO = Qt.bigint(), Nw = Qt.instanceof(Uint8Array), wO = Qt.union([Bw, ss, Qt.string(), Nw]).array(), tp = Qt.union([wO, Bw, Nw]), vO = Qt.array(tp), $w = Qt.object({
  value: Qt.union([ss, yO]),
  scriptPubKey: tp
}), EO = Qt.object({
  txid: bO,
  vout: ss,
  scriptSig: tp,
  sequence: ss,
  prevout: $w.optional(),
  witness: vO
});
Qt.object({
  version: ss,
  vin: Qt.array(EO),
  vout: Qt.array($w),
  locktime: ss
});
var ht = {}, rp = {};
const xO = {}, _O = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: xO
}, Symbol.toStringTag, { value: "Module" })), Uw = /* @__PURE__ */ vE(_O);
(function(e) {
  /*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */
  Object.defineProperty(e, "__esModule", { value: !0 }), e.utils = e.schnorr = e.verify = e.signSync = e.sign = e.getSharedSecret = e.recoverPublicKey = e.getPublicKey = e.Signature = e.Point = e.CURVE = void 0;
  const t = Uw, r = BigInt(0), n = BigInt(1), o = BigInt(2), i = BigInt(3), s = BigInt(8), a = Object.freeze({
    a: r,
    b: BigInt(7),
    P: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),
    n: BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),
    h: n,
    Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
    Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
  });
  e.CURVE = a;
  const c = (O, _) => (O + _ / o) / _, u = {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar(O) {
      const { n: _ } = a, P = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), U = -n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), M = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), Z = P, J = BigInt("0x100000000000000000000000000000000"), Q = c(Z * O, _), pe = c(-U * O, _);
      let le = W(O - Q * P - pe * M, _), _e = W(-Q * U - pe * Z, _);
      const je = le > J, Me = _e > J;
      if (je && (le = _ - le), Me && (_e = _ - _e), le > J || _e > J)
        throw new Error("splitScalarEndo: Endomorphism failed, k=" + O);
      return { k1neg: je, k1: le, k2neg: Me, k2: _e };
    }
  }, f = 32, l = 32, d = 32, m = f + 1, g = 2 * f + 1;
  function y(O) {
    const { a: _, b: P } = a, U = W(O * O), M = W(U * O);
    return W(M + _ * O + P);
  }
  const b = a.a === r;
  class E extends Error {
    constructor(_) {
      super(_);
    }
  }
  function x(O) {
    if (!(O instanceof w))
      throw new TypeError("JacobianPoint expected");
  }
  class w {
    constructor(_, P, U) {
      this.x = _, this.y = P, this.z = U;
    }
    static fromAffine(_) {
      if (!(_ instanceof I))
        throw new TypeError("JacobianPoint#fromAffine: expected Point");
      return _.equals(I.ZERO) ? w.ZERO : new w(_.x, _.y, n);
    }
    static toAffineBatch(_) {
      const P = Et(_.map((U) => U.z));
      return _.map((U, M) => U.toAffine(P[M]));
    }
    static normalizeZ(_) {
      return w.toAffineBatch(_).map(w.fromAffine);
    }
    equals(_) {
      x(_);
      const { x: P, y: U, z: M } = this, { x: Z, y: J, z: Q } = _, pe = W(M * M), le = W(Q * Q), _e = W(P * le), je = W(Z * pe), Me = W(W(U * Q) * le), kt = W(W(J * M) * pe);
      return _e === je && Me === kt;
    }
    negate() {
      return new w(this.x, W(-this.y), this.z);
    }
    double() {
      const { x: _, y: P, z: U } = this, M = W(_ * _), Z = W(P * P), J = W(Z * Z), Q = _ + Z, pe = W(o * (W(Q * Q) - M - J)), le = W(i * M), _e = W(le * le), je = W(_e - o * pe), Me = W(le * (pe - je) - s * J), kt = W(o * P * U);
      return new w(je, Me, kt);
    }
    add(_) {
      x(_);
      const { x: P, y: U, z: M } = this, { x: Z, y: J, z: Q } = _;
      if (Z === r || J === r)
        return this;
      if (P === r || U === r)
        return _;
      const pe = W(M * M), le = W(Q * Q), _e = W(P * le), je = W(Z * pe), Me = W(W(U * Q) * le), kt = W(W(J * M) * pe), _t = W(je - _e), $r = W(kt - Me);
      if (_t === r)
        return $r === r ? this.double() : w.ZERO;
      const Ai = W(_t * _t), ki = W(_t * Ai), Ti = W(_e * Ai), Qa = W($r * $r - ki - o * Ti), jl = W($r * (Ti - Qa) - Me * ki), ks = W(M * Q * _t);
      return new w(Qa, jl, ks);
    }
    subtract(_) {
      return this.add(_.negate());
    }
    multiplyUnsafe(_) {
      const P = w.ZERO;
      if (typeof _ == "bigint" && _ === r)
        return P;
      let U = ve(_);
      if (U === n)
        return this;
      if (!b) {
        let je = P, Me = this;
        for (; U > r; )
          U & n && (je = je.add(Me)), Me = Me.double(), U >>= n;
        return je;
      }
      let { k1neg: M, k1: Z, k2neg: J, k2: Q } = u.splitScalar(U), pe = P, le = P, _e = this;
      for (; Z > r || Q > r; )
        Z & n && (pe = pe.add(_e)), Q & n && (le = le.add(_e)), _e = _e.double(), Z >>= n, Q >>= n;
      return M && (pe = pe.negate()), J && (le = le.negate()), le = new w(W(le.x * u.beta), le.y, le.z), pe.add(le);
    }
    precomputeWindow(_) {
      const P = b ? 128 / _ + 1 : 256 / _ + 1, U = [];
      let M = this, Z = M;
      for (let J = 0; J < P; J++) {
        Z = M, U.push(Z);
        for (let Q = 1; Q < 2 ** (_ - 1); Q++)
          Z = Z.add(M), U.push(Z);
        M = Z.double();
      }
      return U;
    }
    wNAF(_, P) {
      !P && this.equals(w.BASE) && (P = I.BASE);
      const U = P && P._WINDOW_SIZE || 1;
      if (256 % U)
        throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");
      let M = P && S.get(P);
      M || (M = this.precomputeWindow(U), P && U !== 1 && (M = w.normalizeZ(M), S.set(P, M)));
      let Z = w.ZERO, J = w.BASE;
      const Q = 1 + (b ? 128 / U : 256 / U), pe = 2 ** (U - 1), le = BigInt(2 ** U - 1), _e = 2 ** U, je = BigInt(U);
      for (let Me = 0; Me < Q; Me++) {
        const kt = Me * pe;
        let _t = Number(_ & le);
        _ >>= je, _t > pe && (_t -= _e, _ += n);
        const $r = kt, Ai = kt + Math.abs(_t) - 1, ki = Me % 2 !== 0, Ti = _t < 0;
        _t === 0 ? J = J.add(k(ki, M[$r])) : Z = Z.add(k(Ti, M[Ai]));
      }
      return { p: Z, f: J };
    }
    multiply(_, P) {
      let U = ve(_), M, Z;
      if (b) {
        const { k1neg: J, k1: Q, k2neg: pe, k2: le } = u.splitScalar(U);
        let { p: _e, f: je } = this.wNAF(Q, P), { p: Me, f: kt } = this.wNAF(le, P);
        _e = k(J, _e), Me = k(pe, Me), Me = new w(W(Me.x * u.beta), Me.y, Me.z), M = _e.add(Me), Z = je.add(kt);
      } else {
        const { p: J, f: Q } = this.wNAF(U, P);
        M = J, Z = Q;
      }
      return w.normalizeZ([M, Z])[0];
    }
    toAffine(_) {
      const { x: P, y: U, z: M } = this, Z = this.equals(w.ZERO);
      _ == null && (_ = Z ? s : Le(M));
      const J = _, Q = W(J * J), pe = W(Q * J), le = W(P * Q), _e = W(U * pe), je = W(M * J);
      if (Z)
        return I.ZERO;
      if (je !== n)
        throw new Error("invZ was invalid");
      return new I(le, _e);
    }
  }
  w.BASE = new w(a.Gx, a.Gy, n), w.ZERO = new w(r, n, r);
  function k(O, _) {
    const P = _.negate();
    return O ? P : _;
  }
  const S = /* @__PURE__ */ new WeakMap();
  class I {
    constructor(_, P) {
      this.x = _, this.y = P;
    }
    _setWindowSize(_) {
      this._WINDOW_SIZE = _, S.delete(this);
    }
    hasEvenY() {
      return this.y % o === r;
    }
    static fromCompressedHex(_) {
      const P = _.length === 32, U = ae(P ? _ : _.subarray(1));
      if (!xt(U))
        throw new Error("Point is not on curve");
      const M = y(U);
      let Z = Ge(M);
      const J = (Z & n) === n;
      P ? J && (Z = W(-Z)) : (_[0] & 1) === 1 !== J && (Z = W(-Z));
      const Q = new I(U, Z);
      return Q.assertValidity(), Q;
    }
    static fromUncompressedHex(_) {
      const P = ae(_.subarray(1, f + 1)), U = ae(_.subarray(f + 1, f * 2 + 1)), M = new I(P, U);
      return M.assertValidity(), M;
    }
    static fromHex(_) {
      const P = ie(_), U = P.length, M = P[0];
      if (U === f)
        return this.fromCompressedHex(P);
      if (U === m && (M === 2 || M === 3))
        return this.fromCompressedHex(P);
      if (U === g && M === 4)
        return this.fromUncompressedHex(P);
      throw new Error(`Point.fromHex: received invalid point. Expected 32-${m} compressed bytes or ${g} uncompressed bytes, not ${U}`);
    }
    static fromPrivateKey(_) {
      return I.BASE.multiply(vr(_));
    }
    static fromSignature(_, P, U) {
      const { r: M, s: Z } = Za(P);
      if (![0, 1, 2, 3].includes(U))
        throw new Error("Cannot recover: invalid recovery bit");
      const J = ze(ie(_)), { n: Q } = a, pe = U === 2 || U === 3 ? M + Q : M, le = Le(pe, Q), _e = W(-J * le, Q), je = W(Z * le, Q), Me = U & 1 ? "03" : "02", kt = I.fromHex(Me + N(pe)), _t = I.BASE.multiplyAndAddUnsafe(kt, _e, je);
      if (!_t)
        throw new Error("Cannot recover signature: point at infinify");
      return _t.assertValidity(), _t;
    }
    toRawBytes(_ = !1) {
      return Y(this.toHex(_));
    }
    toHex(_ = !1) {
      const P = N(this.x);
      return _ ? `${this.hasEvenY() ? "02" : "03"}${P}` : `04${P}${N(this.y)}`;
    }
    toHexX() {
      return this.toHex(!0).slice(2);
    }
    toRawX() {
      return this.toRawBytes(!0).slice(1);
    }
    assertValidity() {
      const _ = "Point is not on elliptic curve", { x: P, y: U } = this;
      if (!xt(P) || !xt(U))
        throw new Error(_);
      const M = W(U * U), Z = y(P);
      if (W(M - Z) !== r)
        throw new Error(_);
    }
    equals(_) {
      return this.x === _.x && this.y === _.y;
    }
    negate() {
      return new I(this.x, W(-this.y));
    }
    double() {
      return w.fromAffine(this).double().toAffine();
    }
    add(_) {
      return w.fromAffine(this).add(w.fromAffine(_)).toAffine();
    }
    subtract(_) {
      return this.add(_.negate());
    }
    multiply(_) {
      return w.fromAffine(this).multiply(_, this).toAffine();
    }
    multiplyAndAddUnsafe(_, P, U) {
      const M = w.fromAffine(this), Z = P === r || P === n || this !== I.BASE ? M.multiplyUnsafe(P) : M.multiply(P), J = w.fromAffine(_).multiplyUnsafe(U), Q = Z.add(J);
      return Q.equals(w.ZERO) ? void 0 : Q.toAffine();
    }
  }
  e.Point = I, I.BASE = new I(a.Gx, a.Gy), I.ZERO = new I(r, r);
  function T(O) {
    return Number.parseInt(O[0], 16) >= 8 ? "00" + O : O;
  }
  function B(O) {
    if (O.length < 2 || O[0] !== 2)
      throw new Error(`Invalid signature integer tag: ${G(O)}`);
    const _ = O[1], P = O.subarray(2, _ + 2);
    if (!_ || P.length !== _)
      throw new Error("Invalid signature integer: wrong length");
    if (P[0] === 0 && P[1] <= 127)
      throw new Error("Invalid signature integer: trailing length");
    return { data: ae(P), left: O.subarray(_ + 2) };
  }
  function C(O) {
    if (O.length < 2 || O[0] != 48)
      throw new Error(`Invalid signature tag: ${G(O)}`);
    if (O[1] !== O.length - 2)
      throw new Error("Invalid signature: incorrect length");
    const { data: _, left: P } = B(O.subarray(2)), { data: U, left: M } = B(P);
    if (M.length)
      throw new Error(`Invalid signature: left bytes after parsing: ${G(M)}`);
    return { r: _, s: U };
  }
  class F {
    constructor(_, P) {
      this.r = _, this.s = P, this.assertValidity();
    }
    static fromCompact(_) {
      const P = _ instanceof Uint8Array, U = "Signature.fromCompact";
      if (typeof _ != "string" && !P)
        throw new TypeError(`${U}: Expected string or Uint8Array`);
      const M = P ? G(_) : _;
      if (M.length !== 128)
        throw new Error(`${U}: Expected 64-byte hex`);
      return new F(ee(M.slice(0, 64)), ee(M.slice(64, 128)));
    }
    static fromDER(_) {
      const P = _ instanceof Uint8Array;
      if (typeof _ != "string" && !P)
        throw new TypeError("Signature.fromDER: Expected string or Uint8Array");
      const { r: U, s: M } = C(P ? _ : Y(_));
      return new F(U, M);
    }
    static fromHex(_) {
      return this.fromDER(_);
    }
    assertValidity() {
      const { r: _, s: P } = this;
      if (!Fe(_))
        throw new Error("Invalid Signature: r must be 0 < r < n");
      if (!Fe(P))
        throw new Error("Invalid Signature: s must be 0 < s < n");
    }
    hasHighS() {
      const _ = a.n >> n;
      return this.s > _;
    }
    normalizeS() {
      return this.hasHighS() ? new F(this.r, W(-this.s, a.n)) : this;
    }
    toDERRawBytes() {
      return Y(this.toDERHex());
    }
    toDERHex() {
      const _ = T(q(this.s)), P = T(q(this.r)), U = _.length / 2, M = P.length / 2, Z = q(U), J = q(M);
      return `30${q(M + U + 4)}02${J}${P}02${Z}${_}`;
    }
    toRawBytes() {
      return this.toDERRawBytes();
    }
    toHex() {
      return this.toDERHex();
    }
    toCompactRawBytes() {
      return Y(this.toCompactHex());
    }
    toCompactHex() {
      return N(this.r) + N(this.s);
    }
  }
  e.Signature = F;
  function V(...O) {
    if (!O.every((U) => U instanceof Uint8Array))
      throw new Error("Uint8Array list expected");
    if (O.length === 1)
      return O[0];
    const _ = O.reduce((U, M) => U + M.length, 0), P = new Uint8Array(_);
    for (let U = 0, M = 0; U < O.length; U++) {
      const Z = O[U];
      P.set(Z, M), M += Z.length;
    }
    return P;
  }
  const R = Array.from({ length: 256 }, (O, _) => _.toString(16).padStart(2, "0"));
  function G(O) {
    if (!(O instanceof Uint8Array))
      throw new Error("Expected Uint8Array");
    let _ = "";
    for (let P = 0; P < O.length; P++)
      _ += R[O[P]];
    return _;
  }
  const K = BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");
  function N(O) {
    if (typeof O != "bigint")
      throw new Error("Expected bigint");
    if (!(r <= O && O < K))
      throw new Error("Expected number 0 <= n < 2^256");
    return O.toString(16).padStart(64, "0");
  }
  function L(O) {
    const _ = Y(N(O));
    if (_.length !== 32)
      throw new Error("Error: expected 32 bytes");
    return _;
  }
  function q(O) {
    const _ = O.toString(16);
    return _.length & 1 ? `0${_}` : _;
  }
  function ee(O) {
    if (typeof O != "string")
      throw new TypeError("hexToNumber: expected string, got " + typeof O);
    return BigInt(`0x${O}`);
  }
  function Y(O) {
    if (typeof O != "string")
      throw new TypeError("hexToBytes: expected string, got " + typeof O);
    if (O.length % 2)
      throw new Error("hexToBytes: received invalid unpadded hex" + O.length);
    const _ = new Uint8Array(O.length / 2);
    for (let P = 0; P < _.length; P++) {
      const U = P * 2, M = O.slice(U, U + 2), Z = Number.parseInt(M, 16);
      if (Number.isNaN(Z) || Z < 0)
        throw new Error("Invalid byte sequence");
      _[P] = Z;
    }
    return _;
  }
  function ae(O) {
    return ee(G(O));
  }
  function ie(O) {
    return O instanceof Uint8Array ? Uint8Array.from(O) : Y(O);
  }
  function ve(O) {
    if (typeof O == "number" && Number.isSafeInteger(O) && O > 0)
      return BigInt(O);
    if (typeof O == "bigint" && Fe(O))
      return O;
    throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n");
  }
  function W(O, _ = a.P) {
    const P = O % _;
    return P >= r ? P : _ + P;
  }
  function He(O, _) {
    const { P } = a;
    let U = O;
    for (; _-- > r; )
      U *= U, U %= P;
    return U;
  }
  function Ge(O) {
    const { P: _ } = a, P = BigInt(6), U = BigInt(11), M = BigInt(22), Z = BigInt(23), J = BigInt(44), Q = BigInt(88), pe = O * O * O % _, le = pe * pe * O % _, _e = He(le, i) * le % _, je = He(_e, i) * le % _, Me = He(je, o) * pe % _, kt = He(Me, U) * Me % _, _t = He(kt, M) * kt % _, $r = He(_t, J) * _t % _, Ai = He($r, Q) * $r % _, ki = He(Ai, J) * _t % _, Ti = He(ki, i) * le % _, Qa = He(Ti, Z) * kt % _, jl = He(Qa, P) * pe % _, ks = He(jl, o);
    if (ks * ks % _ !== O)
      throw new Error("Cannot find square root");
    return ks;
  }
  function Le(O, _ = a.P) {
    if (O === r || _ <= r)
      throw new Error(`invert: expected positive integers, got n=${O} mod=${_}`);
    let P = W(O, _), U = _, M = r, Z = n;
    for (; P !== r; ) {
      const Q = U / P, pe = U % P, le = M - Z * Q;
      U = P, P = pe, M = Z, Z = le;
    }
    if (U !== n)
      throw new Error("invert: does not exist");
    return W(M, _);
  }
  function Et(O, _ = a.P) {
    const P = new Array(O.length), U = O.reduce((Z, J, Q) => J === r ? Z : (P[Q] = Z, W(Z * J, _)), n), M = Le(U, _);
    return O.reduceRight((Z, J, Q) => J === r ? Z : (P[Q] = W(Z * P[Q], _), W(Z * J, _)), M), P;
  }
  function gt(O) {
    const _ = O.length * 8 - l * 8, P = ae(O);
    return _ > 0 ? P >> BigInt(_) : P;
  }
  function ze(O, _ = !1) {
    const P = gt(O);
    if (_)
      return P;
    const { n: U } = a;
    return P >= U ? P - U : P;
  }
  let At, zt;
  class rt {
    constructor(_, P) {
      if (this.hashLen = _, this.qByteLen = P, typeof _ != "number" || _ < 2)
        throw new Error("hashLen must be a number");
      if (typeof P != "number" || P < 2)
        throw new Error("qByteLen must be a number");
      this.v = new Uint8Array(_).fill(1), this.k = new Uint8Array(_).fill(0), this.counter = 0;
    }
    hmac(..._) {
      return e.utils.hmacSha256(this.k, ..._);
    }
    hmacSync(..._) {
      return zt(this.k, ..._);
    }
    checkSync() {
      if (typeof zt != "function")
        throw new E("hmacSha256Sync needs to be set");
    }
    incr() {
      if (this.counter >= 1e3)
        throw new Error("Tried 1,000 k values for sign(), all were invalid");
      this.counter += 1;
    }
    async reseed(_ = new Uint8Array()) {
      this.k = await this.hmac(this.v, Uint8Array.from([0]), _), this.v = await this.hmac(this.v), _.length !== 0 && (this.k = await this.hmac(this.v, Uint8Array.from([1]), _), this.v = await this.hmac(this.v));
    }
    reseedSync(_ = new Uint8Array()) {
      this.checkSync(), this.k = this.hmacSync(this.v, Uint8Array.from([0]), _), this.v = this.hmacSync(this.v), _.length !== 0 && (this.k = this.hmacSync(this.v, Uint8Array.from([1]), _), this.v = this.hmacSync(this.v));
    }
    async generate() {
      this.incr();
      let _ = 0;
      const P = [];
      for (; _ < this.qByteLen; ) {
        this.v = await this.hmac(this.v);
        const U = this.v.slice();
        P.push(U), _ += this.v.length;
      }
      return V(...P);
    }
    generateSync() {
      this.checkSync(), this.incr();
      let _ = 0;
      const P = [];
      for (; _ < this.qByteLen; ) {
        this.v = this.hmacSync(this.v);
        const U = this.v.slice();
        P.push(U), _ += this.v.length;
      }
      return V(...P);
    }
  }
  function Fe(O) {
    return r < O && O < a.n;
  }
  function xt(O) {
    return r < O && O < a.P;
  }
  function Qr(O, _, P, U = !0) {
    const { n: M } = a, Z = ze(O, !0);
    if (!Fe(Z))
      return;
    const J = Le(Z, M), Q = I.BASE.multiply(Z), pe = W(Q.x, M);
    if (pe === r)
      return;
    const le = W(J * W(_ + P * pe, M), M);
    if (le === r)
      return;
    let _e = new F(pe, le), je = (Q.x === _e.r ? 0 : 2) | Number(Q.y & n);
    return U && _e.hasHighS() && (_e = _e.normalizeS(), je ^= 1), { sig: _e, recovery: je };
  }
  function vr(O) {
    let _;
    if (typeof O == "bigint")
      _ = O;
    else if (typeof O == "number" && Number.isSafeInteger(O) && O > 0)
      _ = BigInt(O);
    else if (typeof O == "string") {
      if (O.length !== 2 * l)
        throw new Error("Expected 32 bytes of private key");
      _ = ee(O);
    } else if (O instanceof Uint8Array) {
      if (O.length !== l)
        throw new Error("Expected 32 bytes of private key");
      _ = ae(O);
    } else
      throw new TypeError("Expected valid private key");
    if (!Fe(_))
      throw new Error("Expected private key: 0 < key < n");
    return _;
  }
  function Ho(O) {
    return O instanceof I ? (O.assertValidity(), O) : I.fromHex(O);
  }
  function Za(O) {
    if (O instanceof F)
      return O.assertValidity(), O;
    try {
      return F.fromDER(O);
    } catch {
      return F.fromCompact(O);
    }
  }
  function Ll(O, _ = !1) {
    return I.fromPrivateKey(O).toRawBytes(_);
  }
  e.getPublicKey = Ll;
  function Xa(O, _, P, U = !1) {
    return I.fromSignature(O, _, P).toRawBytes(U);
  }
  e.recoverPublicKey = Xa;
  function Lo(O) {
    const _ = O instanceof Uint8Array, P = typeof O == "string", U = (_ || P) && O.length;
    return _ ? U === m || U === g : P ? U === m * 2 || U === g * 2 : O instanceof I;
  }
  function Er(O, _, P = !1) {
    if (Lo(O))
      throw new TypeError("getSharedSecret: first arg must be private key");
    if (!Lo(_))
      throw new TypeError("getSharedSecret: second arg must be public key");
    const U = Ho(_);
    return U.assertValidity(), U.multiply(vr(O)).toRawBytes(P);
  }
  e.getSharedSecret = Er;
  function Si(O) {
    const _ = O.length > f ? O.slice(0, f) : O;
    return ae(_);
  }
  function zl(O) {
    const _ = Si(O), P = W(_, a.n);
    return Nr(P < r ? _ : P);
  }
  function Nr(O) {
    return L(O);
  }
  function Ya(O, _, P) {
    if (O == null)
      throw new Error(`sign: expected valid message hash, not "${O}"`);
    const U = ie(O), M = vr(_), Z = [Nr(M), zl(U)];
    if (P != null) {
      P === !0 && (P = e.utils.randomBytes(f));
      const pe = ie(P);
      if (pe.length !== f)
        throw new Error(`sign: Expected ${f} bytes of extra data`);
      Z.push(pe);
    }
    const J = V(...Z), Q = Si(U);
    return { seed: J, m: Q, d: M };
  }
  function v(O, _) {
    const { sig: P, recovery: U } = O, { der: M, recovered: Z } = Object.assign({ canonical: !0, der: !0 }, _), J = M ? P.toDERRawBytes() : P.toCompactRawBytes();
    return Z ? [J, U] : J;
  }
  async function h(O, _, P = {}) {
    const { seed: U, m: M, d: Z } = Ya(O, _, P.extraEntropy), J = new rt(d, l);
    await J.reseed(U);
    let Q;
    for (; !(Q = Qr(await J.generate(), M, Z, P.canonical)); )
      await J.reseed();
    return v(Q, P);
  }
  e.sign = h;
  function p(O, _, P = {}) {
    const { seed: U, m: M, d: Z } = Ya(O, _, P.extraEntropy), J = new rt(d, l);
    J.reseedSync(U);
    let Q;
    for (; !(Q = Qr(J.generateSync(), M, Z, P.canonical)); )
      J.reseedSync();
    return v(Q, P);
  }
  e.signSync = p;
  const A = { strict: !0 };
  function $(O, _, P, U = A) {
    let M;
    try {
      M = Za(O), _ = ie(_);
    } catch {
      return !1;
    }
    const { r: Z, s: J } = M;
    if (U.strict && M.hasHighS())
      return !1;
    const Q = ze(_);
    let pe;
    try {
      pe = Ho(P);
    } catch {
      return !1;
    }
    const { n: le } = a, _e = Le(J, le), je = W(Q * _e, le), Me = W(Z * _e, le), kt = I.BASE.multiplyAndAddUnsafe(pe, je, Me);
    return kt ? W(kt.x, le) === Z : !1;
  }
  e.verify = $;
  function z(O) {
    return W(ae(O), a.n);
  }
  class D {
    constructor(_, P) {
      this.r = _, this.s = P, this.assertValidity();
    }
    static fromHex(_) {
      const P = ie(_);
      if (P.length !== 64)
        throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${P.length}`);
      const U = ae(P.subarray(0, 32)), M = ae(P.subarray(32, 64));
      return new D(U, M);
    }
    assertValidity() {
      const { r: _, s: P } = this;
      if (!xt(_) || !Fe(P))
        throw new Error("Invalid signature");
    }
    toHex() {
      return N(this.r) + N(this.s);
    }
    toRawBytes() {
      return Y(this.toHex());
    }
  }
  function Ne(O) {
    return I.fromPrivateKey(O).toRawX();
  }
  class et {
    constructor(_, P, U = e.utils.randomBytes()) {
      if (_ == null)
        throw new TypeError(`sign: Expected valid message, not "${_}"`);
      this.m = ie(_);
      const { x: M, scalar: Z } = this.getScalar(vr(P));
      if (this.px = M, this.d = Z, this.rand = ie(U), this.rand.length !== 32)
        throw new TypeError("sign: Expected 32 bytes of aux randomness");
    }
    getScalar(_) {
      const P = I.fromPrivateKey(_), U = P.hasEvenY() ? _ : a.n - _;
      return { point: P, scalar: U, x: P.toRawX() };
    }
    initNonce(_, P) {
      return L(_ ^ ae(P));
    }
    finalizeNonce(_) {
      const P = W(ae(_), a.n);
      if (P === r)
        throw new Error("sign: Creation of signature failed. k is zero");
      const { point: U, x: M, scalar: Z } = this.getScalar(P);
      return { R: U, rx: M, k: Z };
    }
    finalizeSig(_, P, U, M) {
      return new D(_.x, W(P + U * M, a.n)).toRawBytes();
    }
    error() {
      throw new Error("sign: Invalid signature produced");
    }
    async calc() {
      const { m: _, d: P, px: U, rand: M } = this, Z = e.utils.taggedHash, J = this.initNonce(P, await Z(qn.aux, M)), { R: Q, rx: pe, k: le } = this.finalizeNonce(await Z(qn.nonce, J, U, _)), _e = z(await Z(qn.challenge, pe, U, _)), je = this.finalizeSig(Q, le, _e, P);
      return await Hp(je, _, U) || this.error(), je;
    }
    calcSync() {
      const { m: _, d: P, px: U, rand: M } = this, Z = e.utils.taggedHashSync, J = this.initNonce(P, Z(qn.aux, M)), { R: Q, rx: pe, k: le } = this.finalizeNonce(Z(qn.nonce, J, U, _)), _e = z(Z(qn.challenge, pe, U, _)), je = this.finalizeSig(Q, le, _e, P);
      return Lp(je, _, U) || this.error(), je;
    }
  }
  async function Ye(O, _, P) {
    return new et(O, _, P).calc();
  }
  function nt(O, _, P) {
    return new et(O, _, P).calcSync();
  }
  function qe(O, _, P) {
    const U = O instanceof D, M = U ? O : D.fromHex(O);
    return U && M.assertValidity(), {
      ...M,
      m: ie(_),
      P: Ho(P)
    };
  }
  function Cp(O, _, P, U) {
    const M = I.BASE.multiplyAndAddUnsafe(_, vr(P), W(-U, a.n));
    return !(!M || !M.hasEvenY() || M.x !== O);
  }
  async function Hp(O, _, P) {
    try {
      const { r: U, s: M, m: Z, P: J } = qe(O, _, P), Q = z(await e.utils.taggedHash(qn.challenge, L(U), J.toRawX(), Z));
      return Cp(U, J, M, Q);
    } catch {
      return !1;
    }
  }
  function Lp(O, _, P) {
    try {
      const { r: U, s: M, m: Z, P: J } = qe(O, _, P), Q = z(e.utils.taggedHashSync(qn.challenge, L(U), J.toRawX(), Z));
      return Cp(U, J, M, Q);
    } catch (U) {
      if (U instanceof E)
        throw U;
      return !1;
    }
  }
  e.schnorr = {
    Signature: D,
    getPublicKey: Ne,
    sign: Ye,
    verify: Hp,
    signSync: nt,
    verifySync: Lp
  }, I.BASE._setWindowSize(8);
  const lr = {
    node: t,
    web: typeof self == "object" && "crypto" in self ? self.crypto : void 0
  }, qn = {
    challenge: "BIP0340/challenge",
    aux: "BIP0340/aux",
    nonce: "BIP0340/nonce"
  }, Ja = {};
  e.utils = {
    bytesToHex: G,
    hexToBytes: Y,
    concatBytes: V,
    mod: W,
    invert: Le,
    isValidPrivateKey(O) {
      try {
        return vr(O), !0;
      } catch {
        return !1;
      }
    },
    _bigintTo32Bytes: L,
    _normalizePrivateKey: vr,
    hashToPrivateKey: (O) => {
      O = ie(O);
      const _ = l + 8;
      if (O.length < _ || O.length > 1024)
        throw new Error("Expected valid bytes of private key as per FIPS 186");
      const P = W(ae(O), a.n - n) + n;
      return L(P);
    },
    randomBytes: (O = 32) => {
      if (lr.web)
        return lr.web.getRandomValues(new Uint8Array(O));
      if (lr.node) {
        const { randomBytes: _ } = lr.node;
        return Uint8Array.from(_(O));
      } else
        throw new Error("The environment doesn't have randomBytes function");
    },
    randomPrivateKey: () => e.utils.hashToPrivateKey(e.utils.randomBytes(l + 8)),
    precompute(O = 8, _ = I.BASE) {
      const P = _ === I.BASE ? _ : new I(_.x, _.y);
      return P._setWindowSize(O), P.multiply(i), P;
    },
    sha256: async (...O) => {
      if (lr.web) {
        const _ = await lr.web.subtle.digest("SHA-256", V(...O));
        return new Uint8Array(_);
      } else if (lr.node) {
        const { createHash: _ } = lr.node, P = _("sha256");
        return O.forEach((U) => P.update(U)), Uint8Array.from(P.digest());
      } else
        throw new Error("The environment doesn't have sha256 function");
    },
    hmacSha256: async (O, ..._) => {
      if (lr.web) {
        const P = await lr.web.subtle.importKey("raw", O, { name: "HMAC", hash: { name: "SHA-256" } }, !1, ["sign"]), U = V(..._), M = await lr.web.subtle.sign("HMAC", P, U);
        return new Uint8Array(M);
      } else if (lr.node) {
        const { createHmac: P } = lr.node, U = P("sha256", O);
        return _.forEach((M) => U.update(M)), Uint8Array.from(U.digest());
      } else
        throw new Error("The environment doesn't have hmac-sha256 function");
    },
    sha256Sync: void 0,
    hmacSha256Sync: void 0,
    taggedHash: async (O, ..._) => {
      let P = Ja[O];
      if (P === void 0) {
        const U = await e.utils.sha256(Uint8Array.from(O, (M) => M.charCodeAt(0)));
        P = V(U, U), Ja[O] = P;
      }
      return e.utils.sha256(P, ..._);
    },
    taggedHashSync: (O, ..._) => {
      if (typeof At != "function")
        throw new E("sha256Sync is undefined, you need to set it");
      let P = Ja[O];
      if (P === void 0) {
        const U = At(Uint8Array.from(O, (M) => M.charCodeAt(0)));
        P = V(U, U), Ja[O] = P;
      }
      return At(P, ..._);
    },
    _JacobianPoint: w
  }, Object.defineProperties(e.utils, {
    sha256Sync: {
      configurable: !1,
      get() {
        return At;
      },
      set(O) {
        At || (At = O);
      }
    },
    hmacSha256Sync: {
      configurable: !1,
      get() {
        return zt;
      },
      set(O) {
        zt || (zt = O);
      }
    }
  });
})(rp);
var Qu = {}, mr = {};
Object.defineProperty(mr, "__esModule", { value: !0 });
mr.isBytes = Cw;
mr.number = yu;
mr.bool = Rw;
mr.bytes = np;
mr.hash = Hw;
mr.exists = Lw;
mr.output = zw;
function yu(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`positive integer expected, not ${e}`);
}
function Rw(e) {
  if (typeof e != "boolean")
    throw new Error(`boolean expected, not ${e}`);
}
function Cw(e) {
  return e instanceof Uint8Array || e != null && typeof e == "object" && e.constructor.name === "Uint8Array";
}
function np(e, ...t) {
  if (!Cw(e))
    throw new Error("Uint8Array expected");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error(`Uint8Array expected of length ${t}, not of length=${e.length}`);
}
function Hw(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  yu(e.outputLen), yu(e.blockLen);
}
function Lw(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function zw(e, t) {
  np(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const SO = { number: yu, bool: Rw, bytes: np, hash: Hw, exists: Lw, output: zw };
mr.default = SO;
var $o = {}, el = {};
Object.defineProperty(el, "__esModule", { value: !0 });
el.crypto = void 0;
el.crypto = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
(function(e) {
  /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  Object.defineProperty(e, "__esModule", { value: !0 }), e.Hash = e.nextTick = e.byteSwapIfBE = e.byteSwap = e.isLE = e.rotl = e.rotr = e.createView = e.u32 = e.u8 = void 0, e.isBytes = n, e.byteSwap32 = f, e.bytesToHex = d, e.hexToBytes = y, e.asyncLoop = E, e.utf8ToBytes = x, e.toBytes = w, e.concatBytes = k, e.checkOpts = T, e.wrapConstructor = B, e.wrapConstructorWithOpts = C, e.wrapXOFConstructorWithOpts = F, e.randomBytes = V;
  const t = el, r = mr;
  function n(R) {
    return R instanceof Uint8Array || R != null && typeof R == "object" && R.constructor.name === "Uint8Array";
  }
  const o = (R) => new Uint8Array(R.buffer, R.byteOffset, R.byteLength);
  e.u8 = o;
  const i = (R) => new Uint32Array(R.buffer, R.byteOffset, Math.floor(R.byteLength / 4));
  e.u32 = i;
  const s = (R) => new DataView(R.buffer, R.byteOffset, R.byteLength);
  e.createView = s;
  const a = (R, G) => R << 32 - G | R >>> G;
  e.rotr = a;
  const c = (R, G) => R << G | R >>> 32 - G >>> 0;
  e.rotl = c, e.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
  const u = (R) => R << 24 & 4278190080 | R << 8 & 16711680 | R >>> 8 & 65280 | R >>> 24 & 255;
  e.byteSwap = u, e.byteSwapIfBE = e.isLE ? (R) => R : (R) => (0, e.byteSwap)(R);
  function f(R) {
    for (let G = 0; G < R.length; G++)
      R[G] = (0, e.byteSwap)(R[G]);
  }
  const l = /* @__PURE__ */ Array.from({ length: 256 }, (R, G) => G.toString(16).padStart(2, "0"));
  function d(R) {
    (0, r.bytes)(R);
    let G = "";
    for (let K = 0; K < R.length; K++)
      G += l[R[K]];
    return G;
  }
  const m = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
  function g(R) {
    if (R >= m._0 && R <= m._9)
      return R - m._0;
    if (R >= m._A && R <= m._F)
      return R - (m._A - 10);
    if (R >= m._a && R <= m._f)
      return R - (m._a - 10);
  }
  function y(R) {
    if (typeof R != "string")
      throw new Error("hex string expected, got " + typeof R);
    const G = R.length, K = G / 2;
    if (G % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + G);
    const N = new Uint8Array(K);
    for (let L = 0, q = 0; L < K; L++, q += 2) {
      const ee = g(R.charCodeAt(q)), Y = g(R.charCodeAt(q + 1));
      if (ee === void 0 || Y === void 0) {
        const ae = R[q] + R[q + 1];
        throw new Error('hex string expected, got non-hex character "' + ae + '" at index ' + q);
      }
      N[L] = ee * 16 + Y;
    }
    return N;
  }
  const b = async () => {
  };
  e.nextTick = b;
  async function E(R, G, K) {
    let N = Date.now();
    for (let L = 0; L < R; L++) {
      K(L);
      const q = Date.now() - N;
      q >= 0 && q < G || (await (0, e.nextTick)(), N += q);
    }
  }
  function x(R) {
    if (typeof R != "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof R}`);
    return new Uint8Array(new TextEncoder().encode(R));
  }
  function w(R) {
    return typeof R == "string" && (R = x(R)), (0, r.bytes)(R), R;
  }
  function k(...R) {
    let G = 0;
    for (let N = 0; N < R.length; N++) {
      const L = R[N];
      (0, r.bytes)(L), G += L.length;
    }
    const K = new Uint8Array(G);
    for (let N = 0, L = 0; N < R.length; N++) {
      const q = R[N];
      K.set(q, L), L += q.length;
    }
    return K;
  }
  class S {
    // Safe version that clones internal state
    clone() {
      return this._cloneInto();
    }
  }
  e.Hash = S;
  const I = {}.toString;
  function T(R, G) {
    if (G !== void 0 && I.call(G) !== "[object Object]")
      throw new Error("Options should be object or undefined");
    return Object.assign(R, G);
  }
  function B(R) {
    const G = (N) => R().update(w(N)).digest(), K = R();
    return G.outputLen = K.outputLen, G.blockLen = K.blockLen, G.create = () => R(), G;
  }
  function C(R) {
    const G = (N, L) => R(L).update(w(N)).digest(), K = R({});
    return G.outputLen = K.outputLen, G.blockLen = K.blockLen, G.create = (N) => R(N), G;
  }
  function F(R) {
    const G = (N, L) => R(L).update(w(N)).digest(), K = R({});
    return G.outputLen = K.outputLen, G.blockLen = K.blockLen, G.create = (N) => R(N), G;
  }
  function V(R = 32) {
    if (t.crypto && typeof t.crypto.getRandomValues == "function")
      return t.crypto.getRandomValues(new Uint8Array(R));
    if (t.crypto && typeof t.crypto.randomBytes == "function")
      return t.crypto.randomBytes(R);
    throw new Error("crypto.getRandomValues must be defined");
  }
})($o);
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.hmac = e.HMAC = void 0;
  const t = mr, r = $o;
  class n extends r.Hash {
    constructor(s, a) {
      super(), this.finished = !1, this.destroyed = !1, (0, t.hash)(s);
      const c = (0, r.toBytes)(a);
      if (this.iHash = s.create(), typeof this.iHash.update != "function")
        throw new Error("Expected instance of class which extends utils.Hash");
      this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
      const u = this.blockLen, f = new Uint8Array(u);
      f.set(c.length > u ? s.create().update(c).digest() : c);
      for (let l = 0; l < f.length; l++)
        f[l] ^= 54;
      this.iHash.update(f), this.oHash = s.create();
      for (let l = 0; l < f.length; l++)
        f[l] ^= 106;
      this.oHash.update(f), f.fill(0);
    }
    update(s) {
      return (0, t.exists)(this), this.iHash.update(s), this;
    }
    digestInto(s) {
      (0, t.exists)(this), (0, t.bytes)(s, this.outputLen), this.finished = !0, this.iHash.digestInto(s), this.oHash.update(s), this.oHash.digestInto(s), this.destroy();
    }
    digest() {
      const s = new Uint8Array(this.oHash.outputLen);
      return this.digestInto(s), s;
    }
    _cloneInto(s) {
      s || (s = Object.create(Object.getPrototypeOf(this), {}));
      const { oHash: a, iHash: c, finished: u, destroyed: f, blockLen: l, outputLen: d } = this;
      return s = s, s.finished = u, s.destroyed = f, s.blockLen = l, s.outputLen = d, s.oHash = a._cloneInto(s.oHash), s.iHash = c._cloneInto(s.iHash), s;
    }
    destroy() {
      this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
    }
  }
  e.HMAC = n;
  const o = (i, s, a) => new n(i, s).update(a).digest();
  e.hmac = o, e.hmac.create = (i, s) => new n(i, s);
})(Qu);
var Kr = {}, Rn = {};
Object.defineProperty(Rn, "__esModule", { value: !0 });
Rn.HashMD = Rn.Maj = Rn.Chi = void 0;
const xf = mr, $s = $o;
function AO(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
const kO = (e, t, r) => e & t ^ ~e & r;
Rn.Chi = kO;
const TO = (e, t, r) => e & t ^ e & r ^ t & r;
Rn.Maj = TO;
class IO extends $s.Hash {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = (0, $s.createView)(this.buffer);
  }
  update(t) {
    (0, xf.exists)(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = (0, $s.toBytes)(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = (0, $s.createView)(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    (0, xf.exists)(this), (0, xf.output)(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    AO(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = (0, $s.createView)(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
}
Rn.HashMD = IO;
Object.defineProperty(Kr, "__esModule", { value: !0 });
Kr.sha224 = Kr.sha256 = Kr.SHA256 = void 0;
const _f = Rn, Ar = $o, PO = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), fo = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), ho = /* @__PURE__ */ new Uint32Array(64);
class op extends _f.HashMD {
  constructor() {
    super(64, 32, 8, !1), this.A = fo[0] | 0, this.B = fo[1] | 0, this.C = fo[2] | 0, this.D = fo[3] | 0, this.E = fo[4] | 0, this.F = fo[5] | 0, this.G = fo[6] | 0, this.H = fo[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      ho[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const d = ho[l - 15], m = ho[l - 2], g = (0, Ar.rotr)(d, 7) ^ (0, Ar.rotr)(d, 18) ^ d >>> 3, y = (0, Ar.rotr)(m, 17) ^ (0, Ar.rotr)(m, 19) ^ m >>> 10;
      ho[l] = y + ho[l - 7] + g + ho[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const d = (0, Ar.rotr)(a, 6) ^ (0, Ar.rotr)(a, 11) ^ (0, Ar.rotr)(a, 25), m = f + d + (0, _f.Chi)(a, c, u) + PO[l] + ho[l] | 0, y = ((0, Ar.rotr)(n, 2) ^ (0, Ar.rotr)(n, 13) ^ (0, Ar.rotr)(n, 22)) + (0, _f.Maj)(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    ho.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
Kr.SHA256 = op;
class OO extends op {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
}
Kr.sha256 = (0, Ar.wrapConstructor)(() => new op());
Kr.sha224 = (0, Ar.wrapConstructor)(() => new OO());
var BO = rp, NO = Qu, jw = Kr;
function $O(e) {
  var t = /* @__PURE__ */ Object.create(null);
  return e && Object.keys(e).forEach(function(r) {
    if (r !== "default") {
      var n = Object.getOwnPropertyDescriptor(e, r);
      Object.defineProperty(t, r, n.get ? n : {
        enumerable: !0,
        get: function() {
          return e[r];
        }
      });
    }
  }), t.default = e, Object.freeze(t);
}
var De = /* @__PURE__ */ $O(BO);
const Uo = "Expected Private", Ro = "Expected Point", Ra = "Expected Tweak", UO = "Expected Hash", wu = "Expected Signature", ip = "Expected Extra Data (32 bytes)", Ca = "Expected Scalar", RO = "Bad Recovery Id";
De.utils.hmacSha256Sync = (e, ...t) => NO.hmac(jw.sha256, e, De.utils.concatBytes(...t));
De.utils.sha256Sync = (...e) => jw.sha256(De.utils.concatBytes(...e));
const sp = De.utils._normalizePrivateKey, CO = 32, HO = 32, Td = new Uint8Array([
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  254,
  186,
  174,
  220,
  230,
  175,
  72,
  160,
  59,
  191,
  210,
  94,
  140,
  208,
  54,
  65,
  65
]), LO = 32, zO = new Uint8Array(32), jO = new Uint8Array([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  69,
  81,
  35,
  25,
  80,
  183,
  95,
  196,
  64,
  45,
  161,
  114,
  47,
  201,
  186,
  238
]);
function MO(e) {
  return e instanceof Uint8Array;
}
function ga(e, t) {
  for (let r = 0; r < 32; ++r)
    if (e[r] !== t[r])
      return e[r] < t[r] ? -1 : 1;
  return 0;
}
function rg(e) {
  return ga(e, zO) === 0;
}
function Ha(e) {
  return !(!(e instanceof Uint8Array) || e.length !== HO || ga(e, Td) >= 0);
}
function ap(e) {
  return e instanceof Uint8Array && e.length === 64 && ga(e.subarray(0, 32), Td) < 0 && ga(e.subarray(32, 64), Td) < 0;
}
function DO(e) {
  return MO(e) && e.length === 64 && ga(e.subarray(0, 32), jO) < 0;
}
function FO(e) {
  return !(rg(e.subarray(0, 32)) || rg(e.subarray(32, 64)));
}
function gs(e) {
  return e instanceof Uint8Array && e.length === CO;
}
function cp(e) {
  return e === void 0 || e instanceof Uint8Array && e.length === LO;
}
function Mw(e) {
  if (typeof e != "string")
    throw new TypeError("hexToNumber: expected string, got " + typeof e);
  return BigInt(`0x${e}`);
}
function KO(e) {
  return Mw(De.utils.bytesToHex(e));
}
function up(e) {
  let t;
  if (typeof e == "bigint")
    t = e;
  else if (typeof e == "number" && Number.isSafeInteger(e) && e >= 0)
    t = BigInt(e);
  else if (typeof e == "string") {
    if (e.length !== 64)
      throw new Error("Expected 32 bytes of private scalar");
    t = Mw(e);
  } else if (e instanceof Uint8Array) {
    if (e.length !== 32)
      throw new Error("Expected 32 bytes of private scalar");
    t = KO(e);
  } else
    throw new TypeError("Expected valid private scalar");
  if (t < 0) throw new Error("Expected private scalar >= 0");
  return t;
}
const VO = (e, t) => {
  const r = sp(e), n = up(t), o = De.utils._bigintTo32Bytes(De.utils.mod(r + n, De.CURVE.n));
  return De.utils.isValidPrivateKey(o) ? o : null;
}, qO = (e, t) => {
  const r = sp(e), n = up(t), o = De.utils._bigintTo32Bytes(De.utils.mod(r - n, De.CURVE.n));
  return De.utils.isValidPrivateKey(o) ? o : null;
}, GO = (e) => {
  const t = sp(e), r = De.utils._bigintTo32Bytes(De.CURVE.n - t);
  return De.utils.isValidPrivateKey(r) ? r : null;
}, Dw = (e, t, r) => {
  const n = De.Point.fromHex(e), o = up(t), i = De.Point.BASE.multiplyAndAddUnsafe(n, o, BigInt(1));
  if (!i) throw new Error("Tweaked point at infinity");
  return i.toRawBytes(r);
}, WO = (e, t, r) => {
  const n = De.Point.fromHex(e), o = typeof t == "string" ? t : De.utils.bytesToHex(t), i = BigInt(`0x${o}`);
  return n.multiply(i).toRawBytes(r);
};
function ms(e, t) {
  return e === void 0 ? t !== void 0 ? Fw(t) : !0 : !!e;
}
function yi(e) {
  try {
    return e();
  } catch {
    return null;
  }
}
function lp(e, t) {
  if (e.length === 32 !== t) return !1;
  try {
    return !!De.Point.fromHex(e);
  } catch {
    return !1;
  }
}
function Bo(e) {
  return lp(e, !1);
}
function Fw(e) {
  return lp(e, !1) && e.length === 33;
}
function Kn(e) {
  return De.utils.isValidPrivateKey(e);
}
function tl(e) {
  return lp(e, !0);
}
function ZO(e, t) {
  if (!tl(e))
    throw new Error(Ro);
  if (!Ha(t))
    throw new Error(Ra);
  return yi(() => {
    const r = Dw(e, t, !0);
    return { parity: r[0] % 2 === 1 ? 1 : 0, xOnlyPubkey: r.slice(1) };
  });
}
function Kw(e) {
  if (!Bo(e))
    throw new Error(Ro);
  return e.slice(1, 33);
}
function Vw(e, t) {
  if (!Kn(e))
    throw new Error(Uo);
  return yi(
    () => De.getPublicKey(e, ms(t))
  );
}
function XO(e) {
  if (!Kn(e))
    throw new Error(Uo);
  return Kw(Vw(e));
}
function YO(e, t) {
  if (!Bo(e))
    throw new Error(Ro);
  return De.Point.fromHex(e).toRawBytes(ms(t, e));
}
function JO(e, t, r) {
  if (!Bo(e))
    throw new Error(Ro);
  if (!Ha(t))
    throw new Error(Ra);
  return yi(
    () => WO(e, t, ms(r, e))
  );
}
function QO(e, t, r) {
  if (!Bo(e) || !Bo(t))
    throw new Error(Ro);
  return yi(() => {
    const n = De.Point.fromHex(e), o = De.Point.fromHex(t);
    return n.equals(o.negate()) ? null : n.add(o).toRawBytes(ms(r, e));
  });
}
function e5(e, t, r) {
  if (!Bo(e))
    throw new Error(Ro);
  if (!Ha(t))
    throw new Error(Ra);
  return yi(
    () => Dw(e, t, ms(r, e))
  );
}
function t5(e, t) {
  if (Kn(e) === !1)
    throw new Error(Uo);
  if (Ha(t) === !1)
    throw new Error(Ra);
  return yi(() => VO(e, t));
}
function r5(e, t) {
  if (Kn(e) === !1)
    throw new Error(Uo);
  if (Ha(t) === !1)
    throw new Error(Ra);
  return yi(() => qO(e, t));
}
function n5(e) {
  if (Kn(e) === !1)
    throw new Error(Uo);
  return GO(e);
}
function o5(e, t, r) {
  if (!Kn(t))
    throw new Error(Uo);
  if (!gs(e))
    throw new Error(Ca);
  if (!cp(r))
    throw new Error(ip);
  return De.signSync(e, t, { der: !1, extraEntropy: r });
}
function i5(e, t, r) {
  if (!Kn(t))
    throw new Error(Uo);
  if (!gs(e))
    throw new Error(Ca);
  if (!cp(r))
    throw new Error(ip);
  const [n, o] = De.signSync(e, t, { der: !1, extraEntropy: r, recovered: !0 });
  return { signature: n, recoveryId: o };
}
function s5(e, t, r = Buffer.alloc(32, 0)) {
  if (!Kn(t))
    throw new Error(Uo);
  if (!gs(e))
    throw new Error(Ca);
  if (!cp(r))
    throw new Error(ip);
  return De.schnorr.signSync(e, t, r);
}
function a5(e, t, r, n) {
  if (!gs(e))
    throw new Error(UO);
  if (!ap(t) || !FO(t))
    throw new Error(wu);
  if (r & 2 && !DO(t))
    throw new Error(RO);
  if (!tl(t.subarray(0, 32)))
    throw new Error(wu);
  return De.recoverPublicKey(e, t, r, ms(n));
}
function c5(e, t, r, n) {
  if (!Bo(t))
    throw new Error(Ro);
  if (!ap(r))
    throw new Error(wu);
  if (!gs(e))
    throw new Error(Ca);
  return De.verify(r, e, t, { strict: n });
}
function u5(e, t, r) {
  if (!tl(t))
    throw new Error(Ro);
  if (!ap(r))
    throw new Error(wu);
  if (!gs(e))
    throw new Error(Ca);
  return De.schnorr.verifySync(r, e, t);
}
var l5 = ht.isPoint = Bo, f5 = ht.isPointCompressed = Fw, d5 = ht.isPrivate = Kn, h5 = ht.isXOnlyPoint = tl, p5 = ht.pointAdd = QO, g5 = ht.pointAddScalar = e5, m5 = ht.pointCompress = YO, b5 = ht.pointFromScalar = Vw, y5 = ht.pointMultiply = JO, w5 = ht.privateAdd = t5, v5 = ht.privateNegate = n5, E5 = ht.privateSub = r5, x5 = ht.recover = a5, _5 = ht.sign = o5, S5 = ht.signRecoverable = i5, A5 = ht.signSchnorr = s5, k5 = ht.verify = c5, T5 = ht.verifySchnorr = u5, I5 = ht.xOnlyPointAddTweak = ZO, P5 = ht.xOnlyPointFromPoint = Kw, O5 = ht.xOnlyPointFromScalar = XO;
const rl = /* @__PURE__ */ a2({
  __proto__: null,
  default: ht,
  isPoint: l5,
  isPointCompressed: f5,
  isPrivate: d5,
  isXOnlyPoint: h5,
  pointAdd: p5,
  pointAddScalar: g5,
  pointCompress: m5,
  pointFromScalar: b5,
  pointMultiply: y5,
  privateAdd: w5,
  privateNegate: v5,
  privateSub: E5,
  recover: x5,
  sign: _5,
  signRecoverable: S5,
  signSchnorr: A5,
  verify: k5,
  verifySchnorr: T5,
  xOnlyPointAddTweak: I5,
  xOnlyPointFromPoint: P5,
  xOnlyPointFromScalar: O5
}, [ht]), W7 = "Mainnet", Id = "BITCOIN_MAINNET", qw = "BITCOIN_TESTNET", Gw = "BITCOIN_TESTNET4", Ww = "BITCOIN_SIGNET", Zw = "FRACTAL_BITCOIN_MAINNET", Xw = "FRACTAL_BITCOIN_TESTNET", Z7 = "livenet", X7 = "testnet", Ls = "Mainnet", Pd = "Testnet", B5 = "Signet", N5 = "livenet", $5 = "testnet", Vs = "livenet", Od = "testnet", Yw = "testnet4", Jw = "signet", gc = "Mainnet", Sf = "Testnet", Bd = "mainnet", Qw = "testnet", mc = "main", ng = "testnet", U5 = "signet", Ce = "mainnet", Ft = "signet", tt = "testnet", Ht = "testnet4", Br = "fractal mainnet", Lt = "fractal testnet", Y7 = "regtest", Nc = (e) => e === Ce ? Ls : e === tt || e === Ht ? Pd : e === Ft ? B5 : Ls, J7 = (e) => e === Ce ? Bd : e === tt ? Qw : Bd, e1 = (e) => e === Ce ? Id : e === tt ? qw : e === Ht ? Gw : e === Ft ? Ww : e === Br ? Zw : e === Lt ? Xw : Id, Q7 = (e) => e === Ce ? Vs : e === tt ? Od : e === Ht ? Yw : e === Ft ? Jw : e === Lt ? Od : Vs, Af = (e) => e === Ce ? gc : e === tt || e === Ht || e === Ft ? Sf : gc, R5 = (e) => e === Ce ? mc : e === Ht || e === tt ? ng : e === Ft ? U5 : mc, vu = (e) => e === Id ? Ce : e === qw ? tt : e === Gw ? Ht : e === Ww ? Ft : e === Zw ? Br : e === Xw ? Lt : Ce, eC = (e) => e === Ls ? Ce : e === Pd ? tt : Ce, tC = (e) => e === Bd ? Ce : e === Qw ? tt : Ce, C5 = (e) => e === N5 ? Ce : e === $5 ? tt : Ce, og = (e) => e === Vs ? Ce : e === Od ? tt : e === Yw ? Ht : e === Jw ? Ft : e === Lt ? tt : Ce;
function t1(e, t) {
  return function() {
    return e.apply(t, arguments);
  };
}
const { toString: H5 } = Object.prototype, { getPrototypeOf: fp } = Object, nl = /* @__PURE__ */ ((e) => (t) => {
  const r = H5.call(t);
  return e[r] || (e[r] = r.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null)), Xr = (e) => (e = e.toLowerCase(), (t) => nl(t) === e), ol = (e) => (t) => typeof t === e, { isArray: bs } = Array, ma = ol("undefined");
function L5(e) {
  return e !== null && !ma(e) && e.constructor !== null && !ma(e.constructor) && pr(e.constructor.isBuffer) && e.constructor.isBuffer(e);
}
const r1 = Xr("ArrayBuffer");
function z5(e) {
  let t;
  return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? t = ArrayBuffer.isView(e) : t = e && e.buffer && r1(e.buffer), t;
}
const j5 = ol("string"), pr = ol("function"), n1 = ol("number"), il = (e) => e !== null && typeof e == "object", M5 = (e) => e === !0 || e === !1, $c = (e) => {
  if (nl(e) !== "object")
    return !1;
  const t = fp(e);
  return (t === null || t === Object.prototype || Object.getPrototypeOf(t) === null) && !(Symbol.toStringTag in e) && !(Symbol.iterator in e);
}, D5 = Xr("Date"), F5 = Xr("File"), K5 = Xr("Blob"), V5 = Xr("FileList"), q5 = (e) => il(e) && pr(e.pipe), G5 = (e) => {
  let t;
  return e && (typeof FormData == "function" && e instanceof FormData || pr(e.append) && ((t = nl(e)) === "formdata" || // detect form-data instance
  t === "object" && pr(e.toString) && e.toString() === "[object FormData]"));
}, W5 = Xr("URLSearchParams"), [Z5, X5, Y5, J5] = ["ReadableStream", "Request", "Response", "Headers"].map(Xr), Q5 = (e) => e.trim ? e.trim() : e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function La(e, t, { allOwnKeys: r = !1 } = {}) {
  if (e === null || typeof e > "u")
    return;
  let n, o;
  if (typeof e != "object" && (e = [e]), bs(e))
    for (n = 0, o = e.length; n < o; n++)
      t.call(null, e[n], n, e);
  else {
    const i = r ? Object.getOwnPropertyNames(e) : Object.keys(e), s = i.length;
    let a;
    for (n = 0; n < s; n++)
      a = i[n], t.call(null, e[a], a, e);
  }
}
function o1(e, t) {
  t = t.toLowerCase();
  const r = Object.keys(e);
  let n = r.length, o;
  for (; n-- > 0; )
    if (o = r[n], t === o.toLowerCase())
      return o;
  return null;
}
const Yo = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : global, i1 = (e) => !ma(e) && e !== Yo;
function Nd() {
  const { caseless: e } = i1(this) && this || {}, t = {}, r = (n, o) => {
    const i = e && o1(t, o) || o;
    $c(t[i]) && $c(n) ? t[i] = Nd(t[i], n) : $c(n) ? t[i] = Nd({}, n) : bs(n) ? t[i] = n.slice() : t[i] = n;
  };
  for (let n = 0, o = arguments.length; n < o; n++)
    arguments[n] && La(arguments[n], r);
  return t;
}
const eB = (e, t, r, { allOwnKeys: n } = {}) => (La(t, (o, i) => {
  r && pr(o) ? e[i] = t1(o, r) : e[i] = o;
}, { allOwnKeys: n }), e), tB = (e) => (e.charCodeAt(0) === 65279 && (e = e.slice(1)), e), rB = (e, t, r, n) => {
  e.prototype = Object.create(t.prototype, n), e.prototype.constructor = e, Object.defineProperty(e, "super", {
    value: t.prototype
  }), r && Object.assign(e.prototype, r);
}, nB = (e, t, r, n) => {
  let o, i, s;
  const a = {};
  if (t = t || {}, e == null) return t;
  do {
    for (o = Object.getOwnPropertyNames(e), i = o.length; i-- > 0; )
      s = o[i], (!n || n(s, e, t)) && !a[s] && (t[s] = e[s], a[s] = !0);
    e = r !== !1 && fp(e);
  } while (e && (!r || r(e, t)) && e !== Object.prototype);
  return t;
}, oB = (e, t, r) => {
  e = String(e), (r === void 0 || r > e.length) && (r = e.length), r -= t.length;
  const n = e.indexOf(t, r);
  return n !== -1 && n === r;
}, iB = (e) => {
  if (!e) return null;
  if (bs(e)) return e;
  let t = e.length;
  if (!n1(t)) return null;
  const r = new Array(t);
  for (; t-- > 0; )
    r[t] = e[t];
  return r;
}, sB = /* @__PURE__ */ ((e) => (t) => e && t instanceof e)(typeof Uint8Array < "u" && fp(Uint8Array)), aB = (e, t) => {
  const n = (e && e[Symbol.iterator]).call(e);
  let o;
  for (; (o = n.next()) && !o.done; ) {
    const i = o.value;
    t.call(e, i[0], i[1]);
  }
}, cB = (e, t) => {
  let r;
  const n = [];
  for (; (r = e.exec(t)) !== null; )
    n.push(r);
  return n;
}, uB = Xr("HTMLFormElement"), lB = (e) => e.toLowerCase().replace(
  /[-_\s]([a-z\d])(\w*)/g,
  function(r, n, o) {
    return n.toUpperCase() + o;
  }
), ig = (({ hasOwnProperty: e }) => (t, r) => e.call(t, r))(Object.prototype), fB = Xr("RegExp"), s1 = (e, t) => {
  const r = Object.getOwnPropertyDescriptors(e), n = {};
  La(r, (o, i) => {
    let s;
    (s = t(o, i, e)) !== !1 && (n[i] = s || o);
  }), Object.defineProperties(e, n);
}, dB = (e) => {
  s1(e, (t, r) => {
    if (pr(e) && ["arguments", "caller", "callee"].indexOf(r) !== -1)
      return !1;
    const n = e[r];
    if (pr(n)) {
      if (t.enumerable = !1, "writable" in t) {
        t.writable = !1;
        return;
      }
      t.set || (t.set = () => {
        throw Error("Can not rewrite read-only method '" + r + "'");
      });
    }
  });
}, hB = (e, t) => {
  const r = {}, n = (o) => {
    o.forEach((i) => {
      r[i] = !0;
    });
  };
  return bs(e) ? n(e) : n(String(e).split(t)), r;
}, pB = () => {
}, gB = (e, t) => e != null && Number.isFinite(e = +e) ? e : t, kf = "abcdefghijklmnopqrstuvwxyz", sg = "0123456789", a1 = {
  DIGIT: sg,
  ALPHA: kf,
  ALPHA_DIGIT: kf + kf.toUpperCase() + sg
}, mB = (e = 16, t = a1.ALPHA_DIGIT) => {
  let r = "";
  const { length: n } = t;
  for (; e--; )
    r += t[Math.random() * n | 0];
  return r;
};
function bB(e) {
  return !!(e && pr(e.append) && e[Symbol.toStringTag] === "FormData" && e[Symbol.iterator]);
}
const yB = (e) => {
  const t = new Array(10), r = (n, o) => {
    if (il(n)) {
      if (t.indexOf(n) >= 0)
        return;
      if (!("toJSON" in n)) {
        t[o] = n;
        const i = bs(n) ? [] : {};
        return La(n, (s, a) => {
          const c = r(s, o + 1);
          !ma(c) && (i[a] = c);
        }), t[o] = void 0, i;
      }
    }
    return n;
  };
  return r(e, 0);
}, wB = Xr("AsyncFunction"), vB = (e) => e && (il(e) || pr(e)) && pr(e.then) && pr(e.catch), c1 = ((e, t) => e ? setImmediate : t ? ((r, n) => (Yo.addEventListener("message", ({ source: o, data: i }) => {
  o === Yo && i === r && n.length && n.shift()();
}, !1), (o) => {
  n.push(o), Yo.postMessage(r, "*");
}))(`axios@${Math.random()}`, []) : (r) => setTimeout(r))(
  typeof setImmediate == "function",
  pr(Yo.postMessage)
), EB = typeof queueMicrotask < "u" ? queueMicrotask.bind(Yo) : typeof process < "u" && process.nextTick || c1, j = {
  isArray: bs,
  isArrayBuffer: r1,
  isBuffer: L5,
  isFormData: G5,
  isArrayBufferView: z5,
  isString: j5,
  isNumber: n1,
  isBoolean: M5,
  isObject: il,
  isPlainObject: $c,
  isReadableStream: Z5,
  isRequest: X5,
  isResponse: Y5,
  isHeaders: J5,
  isUndefined: ma,
  isDate: D5,
  isFile: F5,
  isBlob: K5,
  isRegExp: fB,
  isFunction: pr,
  isStream: q5,
  isURLSearchParams: W5,
  isTypedArray: sB,
  isFileList: V5,
  forEach: La,
  merge: Nd,
  extend: eB,
  trim: Q5,
  stripBOM: tB,
  inherits: rB,
  toFlatObject: nB,
  kindOf: nl,
  kindOfTest: Xr,
  endsWith: oB,
  toArray: iB,
  forEachEntry: aB,
  matchAll: cB,
  isHTMLForm: uB,
  hasOwnProperty: ig,
  hasOwnProp: ig,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors: s1,
  freezeMethods: dB,
  toObjectSet: hB,
  toCamelCase: lB,
  noop: pB,
  toFiniteNumber: gB,
  findKey: o1,
  global: Yo,
  isContextDefined: i1,
  ALPHABET: a1,
  generateString: mB,
  isSpecCompliantForm: bB,
  toJSONObject: yB,
  isAsyncFn: wB,
  isThenable: vB,
  setImmediate: c1,
  asap: EB
};
function Ae(e, t, r, n, o) {
  Error.call(this), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack, this.message = e, this.name = "AxiosError", t && (this.code = t), r && (this.config = r), n && (this.request = n), o && (this.response = o, this.status = o.status ? o.status : null);
}
j.inherits(Ae, Error, {
  toJSON: function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: j.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
const u1 = Ae.prototype, l1 = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((e) => {
  l1[e] = { value: e };
});
Object.defineProperties(Ae, l1);
Object.defineProperty(u1, "isAxiosError", { value: !0 });
Ae.from = (e, t, r, n, o, i) => {
  const s = Object.create(u1);
  return j.toFlatObject(e, s, function(c) {
    return c !== Error.prototype;
  }, (a) => a !== "isAxiosError"), Ae.call(s, e.message, t, r, n, o), s.cause = e, s.name = e.name, i && Object.assign(s, i), s;
};
const xB = null;
function $d(e) {
  return j.isPlainObject(e) || j.isArray(e);
}
function f1(e) {
  return j.endsWith(e, "[]") ? e.slice(0, -2) : e;
}
function ag(e, t, r) {
  return e ? e.concat(t).map(function(o, i) {
    return o = f1(o), !r && i ? "[" + o + "]" : o;
  }).join(r ? "." : "") : t;
}
function _B(e) {
  return j.isArray(e) && !e.some($d);
}
const SB = j.toFlatObject(j, {}, null, function(t) {
  return /^is[A-Z]/.test(t);
});
function sl(e, t, r) {
  if (!j.isObject(e))
    throw new TypeError("target must be an object");
  t = t || new FormData(), r = j.toFlatObject(r, {
    metaTokens: !0,
    dots: !1,
    indexes: !1
  }, !1, function(y, b) {
    return !j.isUndefined(b[y]);
  });
  const n = r.metaTokens, o = r.visitor || f, i = r.dots, s = r.indexes, c = (r.Blob || typeof Blob < "u" && Blob) && j.isSpecCompliantForm(t);
  if (!j.isFunction(o))
    throw new TypeError("visitor must be a function");
  function u(g) {
    if (g === null) return "";
    if (j.isDate(g))
      return g.toISOString();
    if (!c && j.isBlob(g))
      throw new Ae("Blob is not supported. Use a Buffer instead.");
    return j.isArrayBuffer(g) || j.isTypedArray(g) ? c && typeof Blob == "function" ? new Blob([g]) : Buffer.from(g) : g;
  }
  function f(g, y, b) {
    let E = g;
    if (g && !b && typeof g == "object") {
      if (j.endsWith(y, "{}"))
        y = n ? y : y.slice(0, -2), g = JSON.stringify(g);
      else if (j.isArray(g) && _B(g) || (j.isFileList(g) || j.endsWith(y, "[]")) && (E = j.toArray(g)))
        return y = f1(y), E.forEach(function(w, k) {
          !(j.isUndefined(w) || w === null) && t.append(
            // eslint-disable-next-line no-nested-ternary
            s === !0 ? ag([y], k, i) : s === null ? y : y + "[]",
            u(w)
          );
        }), !1;
    }
    return $d(g) ? !0 : (t.append(ag(b, y, i), u(g)), !1);
  }
  const l = [], d = Object.assign(SB, {
    defaultVisitor: f,
    convertValue: u,
    isVisitable: $d
  });
  function m(g, y) {
    if (!j.isUndefined(g)) {
      if (l.indexOf(g) !== -1)
        throw Error("Circular reference detected in " + y.join("."));
      l.push(g), j.forEach(g, function(E, x) {
        (!(j.isUndefined(E) || E === null) && o.call(
          t,
          E,
          j.isString(x) ? x.trim() : x,
          y,
          d
        )) === !0 && m(E, y ? y.concat(x) : [x]);
      }), l.pop();
    }
  }
  if (!j.isObject(e))
    throw new TypeError("data must be an object");
  return m(e), t;
}
function cg(e) {
  const t = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g, function(n) {
    return t[n];
  });
}
function dp(e, t) {
  this._pairs = [], e && sl(e, this, t);
}
const d1 = dp.prototype;
d1.append = function(t, r) {
  this._pairs.push([t, r]);
};
d1.toString = function(t) {
  const r = t ? function(n) {
    return t.call(this, n, cg);
  } : cg;
  return this._pairs.map(function(o) {
    return r(o[0]) + "=" + r(o[1]);
  }, "").join("&");
};
function AB(e) {
  return encodeURIComponent(e).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function h1(e, t, r) {
  if (!t)
    return e;
  const n = r && r.encode || AB, o = r && r.serialize;
  let i;
  if (o ? i = o(t, r) : i = j.isURLSearchParams(t) ? t.toString() : new dp(t, r).toString(n), i) {
    const s = e.indexOf("#");
    s !== -1 && (e = e.slice(0, s)), e += (e.indexOf("?") === -1 ? "?" : "&") + i;
  }
  return e;
}
class ug {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(t, r, n) {
    return this.handlers.push({
      fulfilled: t,
      rejected: r,
      synchronous: n ? n.synchronous : !1,
      runWhen: n ? n.runWhen : null
    }), this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(t) {
    this.handlers[t] && (this.handlers[t] = null);
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    this.handlers && (this.handlers = []);
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(t) {
    j.forEach(this.handlers, function(n) {
      n !== null && t(n);
    });
  }
}
const p1 = {
  silentJSONParsing: !0,
  forcedJSONParsing: !0,
  clarifyTimeoutError: !1
}, kB = typeof URLSearchParams < "u" ? URLSearchParams : dp, TB = typeof FormData < "u" ? FormData : null, IB = typeof Blob < "u" ? Blob : null, PB = {
  isBrowser: !0,
  classes: {
    URLSearchParams: kB,
    FormData: TB,
    Blob: IB
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
}, hp = typeof window < "u" && typeof document < "u", Ud = typeof navigator == "object" && navigator || void 0, OB = hp && (!Ud || ["ReactNative", "NativeScript", "NS"].indexOf(Ud.product) < 0), BB = typeof WorkerGlobalScope < "u" && // eslint-disable-next-line no-undef
self instanceof WorkerGlobalScope && typeof self.importScripts == "function", NB = hp && window.location.href || "http://localhost", $B = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  hasBrowserEnv: hp,
  hasStandardBrowserEnv: OB,
  hasStandardBrowserWebWorkerEnv: BB,
  navigator: Ud,
  origin: NB
}, Symbol.toStringTag, { value: "Module" })), sr = {
  ...$B,
  ...PB
};
function UB(e, t) {
  return sl(e, new sr.classes.URLSearchParams(), Object.assign({
    visitor: function(r, n, o, i) {
      return sr.isNode && j.isBuffer(r) ? (this.append(n, r.toString("base64")), !1) : i.defaultVisitor.apply(this, arguments);
    }
  }, t));
}
function RB(e) {
  return j.matchAll(/\w+|\[(\w*)]/g, e).map((t) => t[0] === "[]" ? "" : t[1] || t[0]);
}
function CB(e) {
  const t = {}, r = Object.keys(e);
  let n;
  const o = r.length;
  let i;
  for (n = 0; n < o; n++)
    i = r[n], t[i] = e[i];
  return t;
}
function g1(e) {
  function t(r, n, o, i) {
    let s = r[i++];
    if (s === "__proto__") return !0;
    const a = Number.isFinite(+s), c = i >= r.length;
    return s = !s && j.isArray(o) ? o.length : s, c ? (j.hasOwnProp(o, s) ? o[s] = [o[s], n] : o[s] = n, !a) : ((!o[s] || !j.isObject(o[s])) && (o[s] = []), t(r, n, o[s], i) && j.isArray(o[s]) && (o[s] = CB(o[s])), !a);
  }
  if (j.isFormData(e) && j.isFunction(e.entries)) {
    const r = {};
    return j.forEachEntry(e, (n, o) => {
      t(RB(n), o, r, 0);
    }), r;
  }
  return null;
}
function HB(e, t, r) {
  if (j.isString(e))
    try {
      return (t || JSON.parse)(e), j.trim(e);
    } catch (n) {
      if (n.name !== "SyntaxError")
        throw n;
    }
  return (0, JSON.stringify)(e);
}
const za = {
  transitional: p1,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function(t, r) {
    const n = r.getContentType() || "", o = n.indexOf("application/json") > -1, i = j.isObject(t);
    if (i && j.isHTMLForm(t) && (t = new FormData(t)), j.isFormData(t))
      return o ? JSON.stringify(g1(t)) : t;
    if (j.isArrayBuffer(t) || j.isBuffer(t) || j.isStream(t) || j.isFile(t) || j.isBlob(t) || j.isReadableStream(t))
      return t;
    if (j.isArrayBufferView(t))
      return t.buffer;
    if (j.isURLSearchParams(t))
      return r.setContentType("application/x-www-form-urlencoded;charset=utf-8", !1), t.toString();
    let a;
    if (i) {
      if (n.indexOf("application/x-www-form-urlencoded") > -1)
        return UB(t, this.formSerializer).toString();
      if ((a = j.isFileList(t)) || n.indexOf("multipart/form-data") > -1) {
        const c = this.env && this.env.FormData;
        return sl(
          a ? { "files[]": t } : t,
          c && new c(),
          this.formSerializer
        );
      }
    }
    return i || o ? (r.setContentType("application/json", !1), HB(t)) : t;
  }],
  transformResponse: [function(t) {
    const r = this.transitional || za.transitional, n = r && r.forcedJSONParsing, o = this.responseType === "json";
    if (j.isResponse(t) || j.isReadableStream(t))
      return t;
    if (t && j.isString(t) && (n && !this.responseType || o)) {
      const s = !(r && r.silentJSONParsing) && o;
      try {
        return JSON.parse(t);
      } catch (a) {
        if (s)
          throw a.name === "SyntaxError" ? Ae.from(a, Ae.ERR_BAD_RESPONSE, this, null, this.response) : a;
      }
    }
    return t;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: sr.classes.FormData,
    Blob: sr.classes.Blob
  },
  validateStatus: function(t) {
    return t >= 200 && t < 300;
  },
  headers: {
    common: {
      Accept: "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
j.forEach(["delete", "get", "head", "post", "put", "patch"], (e) => {
  za.headers[e] = {};
});
const LB = j.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]), zB = (e) => {
  const t = {};
  let r, n, o;
  return e && e.split(`
`).forEach(function(s) {
    o = s.indexOf(":"), r = s.substring(0, o).trim().toLowerCase(), n = s.substring(o + 1).trim(), !(!r || t[r] && LB[r]) && (r === "set-cookie" ? t[r] ? t[r].push(n) : t[r] = [n] : t[r] = t[r] ? t[r] + ", " + n : n);
  }), t;
}, lg = Symbol("internals");
function Us(e) {
  return e && String(e).trim().toLowerCase();
}
function Uc(e) {
  return e === !1 || e == null ? e : j.isArray(e) ? e.map(Uc) : String(e);
}
function jB(e) {
  const t = /* @__PURE__ */ Object.create(null), r = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let n;
  for (; n = r.exec(e); )
    t[n[1]] = n[2];
  return t;
}
const MB = (e) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());
function Tf(e, t, r, n, o) {
  if (j.isFunction(n))
    return n.call(this, t, r);
  if (o && (t = r), !!j.isString(t)) {
    if (j.isString(n))
      return t.indexOf(n) !== -1;
    if (j.isRegExp(n))
      return n.test(t);
  }
}
function DB(e) {
  return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (t, r, n) => r.toUpperCase() + n);
}
function FB(e, t) {
  const r = j.toCamelCase(" " + t);
  ["get", "set", "has"].forEach((n) => {
    Object.defineProperty(e, n + r, {
      value: function(o, i, s) {
        return this[n].call(this, t, o, i, s);
      },
      configurable: !0
    });
  });
}
class ar {
  constructor(t) {
    t && this.set(t);
  }
  set(t, r, n) {
    const o = this;
    function i(a, c, u) {
      const f = Us(c);
      if (!f)
        throw new Error("header name must be a non-empty string");
      const l = j.findKey(o, f);
      (!l || o[l] === void 0 || u === !0 || u === void 0 && o[l] !== !1) && (o[l || c] = Uc(a));
    }
    const s = (a, c) => j.forEach(a, (u, f) => i(u, f, c));
    if (j.isPlainObject(t) || t instanceof this.constructor)
      s(t, r);
    else if (j.isString(t) && (t = t.trim()) && !MB(t))
      s(zB(t), r);
    else if (j.isHeaders(t))
      for (const [a, c] of t.entries())
        i(c, a, n);
    else
      t != null && i(r, t, n);
    return this;
  }
  get(t, r) {
    if (t = Us(t), t) {
      const n = j.findKey(this, t);
      if (n) {
        const o = this[n];
        if (!r)
          return o;
        if (r === !0)
          return jB(o);
        if (j.isFunction(r))
          return r.call(this, o, n);
        if (j.isRegExp(r))
          return r.exec(o);
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(t, r) {
    if (t = Us(t), t) {
      const n = j.findKey(this, t);
      return !!(n && this[n] !== void 0 && (!r || Tf(this, this[n], n, r)));
    }
    return !1;
  }
  delete(t, r) {
    const n = this;
    let o = !1;
    function i(s) {
      if (s = Us(s), s) {
        const a = j.findKey(n, s);
        a && (!r || Tf(n, n[a], a, r)) && (delete n[a], o = !0);
      }
    }
    return j.isArray(t) ? t.forEach(i) : i(t), o;
  }
  clear(t) {
    const r = Object.keys(this);
    let n = r.length, o = !1;
    for (; n--; ) {
      const i = r[n];
      (!t || Tf(this, this[i], i, t, !0)) && (delete this[i], o = !0);
    }
    return o;
  }
  normalize(t) {
    const r = this, n = {};
    return j.forEach(this, (o, i) => {
      const s = j.findKey(n, i);
      if (s) {
        r[s] = Uc(o), delete r[i];
        return;
      }
      const a = t ? DB(i) : String(i).trim();
      a !== i && delete r[i], r[a] = Uc(o), n[a] = !0;
    }), this;
  }
  concat(...t) {
    return this.constructor.concat(this, ...t);
  }
  toJSON(t) {
    const r = /* @__PURE__ */ Object.create(null);
    return j.forEach(this, (n, o) => {
      n != null && n !== !1 && (r[o] = t && j.isArray(n) ? n.join(", ") : n);
    }), r;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([t, r]) => t + ": " + r).join(`
`);
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(t) {
    return t instanceof this ? t : new this(t);
  }
  static concat(t, ...r) {
    const n = new this(t);
    return r.forEach((o) => n.set(o)), n;
  }
  static accessor(t) {
    const n = (this[lg] = this[lg] = {
      accessors: {}
    }).accessors, o = this.prototype;
    function i(s) {
      const a = Us(s);
      n[a] || (FB(o, s), n[a] = !0);
    }
    return j.isArray(t) ? t.forEach(i) : i(t), this;
  }
}
ar.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
j.reduceDescriptors(ar.prototype, ({ value: e }, t) => {
  let r = t[0].toUpperCase() + t.slice(1);
  return {
    get: () => e,
    set(n) {
      this[r] = n;
    }
  };
});
j.freezeMethods(ar);
function If(e, t) {
  const r = this || za, n = t || r, o = ar.from(n.headers);
  let i = n.data;
  return j.forEach(e, function(a) {
    i = a.call(r, i, o.normalize(), t ? t.status : void 0);
  }), o.normalize(), i;
}
function m1(e) {
  return !!(e && e.__CANCEL__);
}
function ys(e, t, r) {
  Ae.call(this, e ?? "canceled", Ae.ERR_CANCELED, t, r), this.name = "CanceledError";
}
j.inherits(ys, Ae, {
  __CANCEL__: !0
});
function b1(e, t, r) {
  const n = r.config.validateStatus;
  !r.status || !n || n(r.status) ? e(r) : t(new Ae(
    "Request failed with status code " + r.status,
    [Ae.ERR_BAD_REQUEST, Ae.ERR_BAD_RESPONSE][Math.floor(r.status / 100) - 4],
    r.config,
    r.request,
    r
  ));
}
function KB(e) {
  const t = /^([-+\w]{1,25})(:?\/\/|:)/.exec(e);
  return t && t[1] || "";
}
function VB(e, t) {
  e = e || 10;
  const r = new Array(e), n = new Array(e);
  let o = 0, i = 0, s;
  return t = t !== void 0 ? t : 1e3, function(c) {
    const u = Date.now(), f = n[i];
    s || (s = u), r[o] = c, n[o] = u;
    let l = i, d = 0;
    for (; l !== o; )
      d += r[l++], l = l % e;
    if (o = (o + 1) % e, o === i && (i = (i + 1) % e), u - s < t)
      return;
    const m = f && u - f;
    return m ? Math.round(d * 1e3 / m) : void 0;
  };
}
function qB(e, t) {
  let r = 0, n = 1e3 / t, o, i;
  const s = (u, f = Date.now()) => {
    r = f, o = null, i && (clearTimeout(i), i = null), e.apply(null, u);
  };
  return [(...u) => {
    const f = Date.now(), l = f - r;
    l >= n ? s(u, f) : (o = u, i || (i = setTimeout(() => {
      i = null, s(o);
    }, n - l)));
  }, () => o && s(o)];
}
const Eu = (e, t, r = 3) => {
  let n = 0;
  const o = VB(50, 250);
  return qB((i) => {
    const s = i.loaded, a = i.lengthComputable ? i.total : void 0, c = s - n, u = o(c), f = s <= a;
    n = s;
    const l = {
      loaded: s,
      total: a,
      progress: a ? s / a : void 0,
      bytes: c,
      rate: u || void 0,
      estimated: u && a && f ? (a - s) / u : void 0,
      event: i,
      lengthComputable: a != null,
      [t ? "download" : "upload"]: !0
    };
    e(l);
  }, r);
}, fg = (e, t) => {
  const r = e != null;
  return [(n) => t[0]({
    lengthComputable: r,
    total: e,
    loaded: n
  }), t[1]];
}, dg = (e) => (...t) => j.asap(() => e(...t)), GB = sr.hasStandardBrowserEnv ? (
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function() {
    const t = sr.navigator && /(msie|trident)/i.test(sr.navigator.userAgent), r = document.createElement("a");
    let n;
    function o(i) {
      let s = i;
      return t && (r.setAttribute("href", s), s = r.href), r.setAttribute("href", s), {
        href: r.href,
        protocol: r.protocol ? r.protocol.replace(/:$/, "") : "",
        host: r.host,
        search: r.search ? r.search.replace(/^\?/, "") : "",
        hash: r.hash ? r.hash.replace(/^#/, "") : "",
        hostname: r.hostname,
        port: r.port,
        pathname: r.pathname.charAt(0) === "/" ? r.pathname : "/" + r.pathname
      };
    }
    return n = o(window.location.href), function(s) {
      const a = j.isString(s) ? o(s) : s;
      return a.protocol === n.protocol && a.host === n.host;
    };
  }()
) : (
  // Non standard browser envs (web workers, react-native) lack needed support.
  /* @__PURE__ */ function() {
    return function() {
      return !0;
    };
  }()
), WB = sr.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(e, t, r, n, o, i) {
      const s = [e + "=" + encodeURIComponent(t)];
      j.isNumber(r) && s.push("expires=" + new Date(r).toGMTString()), j.isString(n) && s.push("path=" + n), j.isString(o) && s.push("domain=" + o), i === !0 && s.push("secure"), document.cookie = s.join("; ");
    },
    read(e) {
      const t = document.cookie.match(new RegExp("(^|;\\s*)(" + e + ")=([^;]*)"));
      return t ? decodeURIComponent(t[3]) : null;
    },
    remove(e) {
      this.write(e, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);
function ZB(e) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(e);
}
function XB(e, t) {
  return t ? e.replace(/\/?\/$/, "") + "/" + t.replace(/^\/+/, "") : e;
}
function y1(e, t) {
  return e && !ZB(t) ? XB(e, t) : t;
}
const hg = (e) => e instanceof ar ? { ...e } : e;
function li(e, t) {
  t = t || {};
  const r = {};
  function n(u, f, l) {
    return j.isPlainObject(u) && j.isPlainObject(f) ? j.merge.call({ caseless: l }, u, f) : j.isPlainObject(f) ? j.merge({}, f) : j.isArray(f) ? f.slice() : f;
  }
  function o(u, f, l) {
    if (j.isUndefined(f)) {
      if (!j.isUndefined(u))
        return n(void 0, u, l);
    } else return n(u, f, l);
  }
  function i(u, f) {
    if (!j.isUndefined(f))
      return n(void 0, f);
  }
  function s(u, f) {
    if (j.isUndefined(f)) {
      if (!j.isUndefined(u))
        return n(void 0, u);
    } else return n(void 0, f);
  }
  function a(u, f, l) {
    if (l in t)
      return n(u, f);
    if (l in e)
      return n(void 0, u);
  }
  const c = {
    url: i,
    method: i,
    data: i,
    baseURL: s,
    transformRequest: s,
    transformResponse: s,
    paramsSerializer: s,
    timeout: s,
    timeoutMessage: s,
    withCredentials: s,
    withXSRFToken: s,
    adapter: s,
    responseType: s,
    xsrfCookieName: s,
    xsrfHeaderName: s,
    onUploadProgress: s,
    onDownloadProgress: s,
    decompress: s,
    maxContentLength: s,
    maxBodyLength: s,
    beforeRedirect: s,
    transport: s,
    httpAgent: s,
    httpsAgent: s,
    cancelToken: s,
    socketPath: s,
    responseEncoding: s,
    validateStatus: a,
    headers: (u, f) => o(hg(u), hg(f), !0)
  };
  return j.forEach(Object.keys(Object.assign({}, e, t)), function(f) {
    const l = c[f] || o, d = l(e[f], t[f], f);
    j.isUndefined(d) && l !== a || (r[f] = d);
  }), r;
}
const w1 = (e) => {
  const t = li({}, e);
  let { data: r, withXSRFToken: n, xsrfHeaderName: o, xsrfCookieName: i, headers: s, auth: a } = t;
  t.headers = s = ar.from(s), t.url = h1(y1(t.baseURL, t.url), e.params, e.paramsSerializer), a && s.set(
    "Authorization",
    "Basic " + btoa((a.username || "") + ":" + (a.password ? unescape(encodeURIComponent(a.password)) : ""))
  );
  let c;
  if (j.isFormData(r)) {
    if (sr.hasStandardBrowserEnv || sr.hasStandardBrowserWebWorkerEnv)
      s.setContentType(void 0);
    else if ((c = s.getContentType()) !== !1) {
      const [u, ...f] = c ? c.split(";").map((l) => l.trim()).filter(Boolean) : [];
      s.setContentType([u || "multipart/form-data", ...f].join("; "));
    }
  }
  if (sr.hasStandardBrowserEnv && (n && j.isFunction(n) && (n = n(t)), n || n !== !1 && GB(t.url))) {
    const u = o && i && WB.read(i);
    u && s.set(o, u);
  }
  return t;
}, YB = typeof XMLHttpRequest < "u", JB = YB && function(e) {
  return new Promise(function(r, n) {
    const o = w1(e);
    let i = o.data;
    const s = ar.from(o.headers).normalize();
    let { responseType: a, onUploadProgress: c, onDownloadProgress: u } = o, f, l, d, m, g;
    function y() {
      m && m(), g && g(), o.cancelToken && o.cancelToken.unsubscribe(f), o.signal && o.signal.removeEventListener("abort", f);
    }
    let b = new XMLHttpRequest();
    b.open(o.method.toUpperCase(), o.url, !0), b.timeout = o.timeout;
    function E() {
      if (!b)
        return;
      const w = ar.from(
        "getAllResponseHeaders" in b && b.getAllResponseHeaders()
      ), S = {
        data: !a || a === "text" || a === "json" ? b.responseText : b.response,
        status: b.status,
        statusText: b.statusText,
        headers: w,
        config: e,
        request: b
      };
      b1(function(T) {
        r(T), y();
      }, function(T) {
        n(T), y();
      }, S), b = null;
    }
    "onloadend" in b ? b.onloadend = E : b.onreadystatechange = function() {
      !b || b.readyState !== 4 || b.status === 0 && !(b.responseURL && b.responseURL.indexOf("file:") === 0) || setTimeout(E);
    }, b.onabort = function() {
      b && (n(new Ae("Request aborted", Ae.ECONNABORTED, e, b)), b = null);
    }, b.onerror = function() {
      n(new Ae("Network Error", Ae.ERR_NETWORK, e, b)), b = null;
    }, b.ontimeout = function() {
      let k = o.timeout ? "timeout of " + o.timeout + "ms exceeded" : "timeout exceeded";
      const S = o.transitional || p1;
      o.timeoutErrorMessage && (k = o.timeoutErrorMessage), n(new Ae(
        k,
        S.clarifyTimeoutError ? Ae.ETIMEDOUT : Ae.ECONNABORTED,
        e,
        b
      )), b = null;
    }, i === void 0 && s.setContentType(null), "setRequestHeader" in b && j.forEach(s.toJSON(), function(k, S) {
      b.setRequestHeader(S, k);
    }), j.isUndefined(o.withCredentials) || (b.withCredentials = !!o.withCredentials), a && a !== "json" && (b.responseType = o.responseType), u && ([d, g] = Eu(u, !0), b.addEventListener("progress", d)), c && b.upload && ([l, m] = Eu(c), b.upload.addEventListener("progress", l), b.upload.addEventListener("loadend", m)), (o.cancelToken || o.signal) && (f = (w) => {
      b && (n(!w || w.type ? new ys(null, e, b) : w), b.abort(), b = null);
    }, o.cancelToken && o.cancelToken.subscribe(f), o.signal && (o.signal.aborted ? f() : o.signal.addEventListener("abort", f)));
    const x = KB(o.url);
    if (x && sr.protocols.indexOf(x) === -1) {
      n(new Ae("Unsupported protocol " + x + ":", Ae.ERR_BAD_REQUEST, e));
      return;
    }
    b.send(i || null);
  });
}, QB = (e, t) => {
  const { length: r } = e = e ? e.filter(Boolean) : [];
  if (t || r) {
    let n = new AbortController(), o;
    const i = function(u) {
      if (!o) {
        o = !0, a();
        const f = u instanceof Error ? u : this.reason;
        n.abort(f instanceof Ae ? f : new ys(f instanceof Error ? f.message : f));
      }
    };
    let s = t && setTimeout(() => {
      s = null, i(new Ae(`timeout ${t} of ms exceeded`, Ae.ETIMEDOUT));
    }, t);
    const a = () => {
      e && (s && clearTimeout(s), s = null, e.forEach((u) => {
        u.unsubscribe ? u.unsubscribe(i) : u.removeEventListener("abort", i);
      }), e = null);
    };
    e.forEach((u) => u.addEventListener("abort", i));
    const { signal: c } = n;
    return c.unsubscribe = () => j.asap(a), c;
  }
}, eN = function* (e, t) {
  let r = e.byteLength;
  if (r < t) {
    yield e;
    return;
  }
  let n = 0, o;
  for (; n < r; )
    o = n + t, yield e.slice(n, o), n = o;
}, tN = async function* (e, t) {
  for await (const r of rN(e))
    yield* eN(r, t);
}, rN = async function* (e) {
  if (e[Symbol.asyncIterator]) {
    yield* e;
    return;
  }
  const t = e.getReader();
  try {
    for (; ; ) {
      const { done: r, value: n } = await t.read();
      if (r)
        break;
      yield n;
    }
  } finally {
    await t.cancel();
  }
}, pg = (e, t, r, n) => {
  const o = tN(e, t);
  let i = 0, s, a = (c) => {
    s || (s = !0, n && n(c));
  };
  return new ReadableStream({
    async pull(c) {
      try {
        const { done: u, value: f } = await o.next();
        if (u) {
          a(), c.close();
          return;
        }
        let l = f.byteLength;
        if (r) {
          let d = i += l;
          r(d);
        }
        c.enqueue(new Uint8Array(f));
      } catch (u) {
        throw a(u), u;
      }
    },
    cancel(c) {
      return a(c), o.return();
    }
  }, {
    highWaterMark: 2
  });
}, al = typeof fetch == "function" && typeof Request == "function" && typeof Response == "function", v1 = al && typeof ReadableStream == "function", nN = al && (typeof TextEncoder == "function" ? /* @__PURE__ */ ((e) => (t) => e.encode(t))(new TextEncoder()) : async (e) => new Uint8Array(await new Response(e).arrayBuffer())), E1 = (e, ...t) => {
  try {
    return !!e(...t);
  } catch {
    return !1;
  }
}, oN = v1 && E1(() => {
  let e = !1;
  const t = new Request(sr.origin, {
    body: new ReadableStream(),
    method: "POST",
    get duplex() {
      return e = !0, "half";
    }
  }).headers.has("Content-Type");
  return e && !t;
}), gg = 64 * 1024, Rd = v1 && E1(() => j.isReadableStream(new Response("").body)), xu = {
  stream: Rd && ((e) => e.body)
};
al && ((e) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((t) => {
    !xu[t] && (xu[t] = j.isFunction(e[t]) ? (r) => r[t]() : (r, n) => {
      throw new Ae(`Response type '${t}' is not supported`, Ae.ERR_NOT_SUPPORT, n);
    });
  });
})(new Response());
const iN = async (e) => {
  if (e == null)
    return 0;
  if (j.isBlob(e))
    return e.size;
  if (j.isSpecCompliantForm(e))
    return (await new Request(sr.origin, {
      method: "POST",
      body: e
    }).arrayBuffer()).byteLength;
  if (j.isArrayBufferView(e) || j.isArrayBuffer(e))
    return e.byteLength;
  if (j.isURLSearchParams(e) && (e = e + ""), j.isString(e))
    return (await nN(e)).byteLength;
}, sN = async (e, t) => {
  const r = j.toFiniteNumber(e.getContentLength());
  return r ?? iN(t);
}, aN = al && (async (e) => {
  let {
    url: t,
    method: r,
    data: n,
    signal: o,
    cancelToken: i,
    timeout: s,
    onDownloadProgress: a,
    onUploadProgress: c,
    responseType: u,
    headers: f,
    withCredentials: l = "same-origin",
    fetchOptions: d
  } = w1(e);
  u = u ? (u + "").toLowerCase() : "text";
  let m = QB([o, i && i.toAbortSignal()], s), g;
  const y = m && m.unsubscribe && (() => {
    m.unsubscribe();
  });
  let b;
  try {
    if (c && oN && r !== "get" && r !== "head" && (b = await sN(f, n)) !== 0) {
      let S = new Request(t, {
        method: "POST",
        body: n,
        duplex: "half"
      }), I;
      if (j.isFormData(n) && (I = S.headers.get("content-type")) && f.setContentType(I), S.body) {
        const [T, B] = fg(
          b,
          Eu(dg(c))
        );
        n = pg(S.body, gg, T, B);
      }
    }
    j.isString(l) || (l = l ? "include" : "omit");
    const E = "credentials" in Request.prototype;
    g = new Request(t, {
      ...d,
      signal: m,
      method: r.toUpperCase(),
      headers: f.normalize().toJSON(),
      body: n,
      duplex: "half",
      credentials: E ? l : void 0
    });
    let x = await fetch(g);
    const w = Rd && (u === "stream" || u === "response");
    if (Rd && (a || w && y)) {
      const S = {};
      ["status", "statusText", "headers"].forEach((C) => {
        S[C] = x[C];
      });
      const I = j.toFiniteNumber(x.headers.get("content-length")), [T, B] = a && fg(
        I,
        Eu(dg(a), !0)
      ) || [];
      x = new Response(
        pg(x.body, gg, T, () => {
          B && B(), y && y();
        }),
        S
      );
    }
    u = u || "text";
    let k = await xu[j.findKey(xu, u) || "text"](x, e);
    return !w && y && y(), await new Promise((S, I) => {
      b1(S, I, {
        data: k,
        headers: ar.from(x.headers),
        status: x.status,
        statusText: x.statusText,
        config: e,
        request: g
      });
    });
  } catch (E) {
    throw y && y(), E && E.name === "TypeError" && /fetch/i.test(E.message) ? Object.assign(
      new Ae("Network Error", Ae.ERR_NETWORK, e, g),
      {
        cause: E.cause || E
      }
    ) : Ae.from(E, E && E.code, e, g);
  }
}), Cd = {
  http: xB,
  xhr: JB,
  fetch: aN
};
j.forEach(Cd, (e, t) => {
  if (e) {
    try {
      Object.defineProperty(e, "name", { value: t });
    } catch {
    }
    Object.defineProperty(e, "adapterName", { value: t });
  }
});
const mg = (e) => `- ${e}`, cN = (e) => j.isFunction(e) || e === null || e === !1, x1 = {
  getAdapter: (e) => {
    e = j.isArray(e) ? e : [e];
    const { length: t } = e;
    let r, n;
    const o = {};
    for (let i = 0; i < t; i++) {
      r = e[i];
      let s;
      if (n = r, !cN(r) && (n = Cd[(s = String(r)).toLowerCase()], n === void 0))
        throw new Ae(`Unknown adapter '${s}'`);
      if (n)
        break;
      o[s || "#" + i] = n;
    }
    if (!n) {
      const i = Object.entries(o).map(
        ([a, c]) => `adapter ${a} ` + (c === !1 ? "is not supported by the environment" : "is not available in the build")
      );
      let s = t ? i.length > 1 ? `since :
` + i.map(mg).join(`
`) : " " + mg(i[0]) : "as no adapter specified";
      throw new Ae(
        "There is no suitable adapter to dispatch the request " + s,
        "ERR_NOT_SUPPORT"
      );
    }
    return n;
  },
  adapters: Cd
};
function Pf(e) {
  if (e.cancelToken && e.cancelToken.throwIfRequested(), e.signal && e.signal.aborted)
    throw new ys(null, e);
}
function bg(e) {
  return Pf(e), e.headers = ar.from(e.headers), e.data = If.call(
    e,
    e.transformRequest
  ), ["post", "put", "patch"].indexOf(e.method) !== -1 && e.headers.setContentType("application/x-www-form-urlencoded", !1), x1.getAdapter(e.adapter || za.adapter)(e).then(function(n) {
    return Pf(e), n.data = If.call(
      e,
      e.transformResponse,
      n
    ), n.headers = ar.from(n.headers), n;
  }, function(n) {
    return m1(n) || (Pf(e), n && n.response && (n.response.data = If.call(
      e,
      e.transformResponse,
      n.response
    ), n.response.headers = ar.from(n.response.headers))), Promise.reject(n);
  });
}
const _1 = "1.7.7", pp = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((e, t) => {
  pp[e] = function(n) {
    return typeof n === e || "a" + (t < 1 ? "n " : " ") + e;
  };
});
const yg = {};
pp.transitional = function(t, r, n) {
  function o(i, s) {
    return "[Axios v" + _1 + "] Transitional option '" + i + "'" + s + (n ? ". " + n : "");
  }
  return (i, s, a) => {
    if (t === !1)
      throw new Ae(
        o(s, " has been removed" + (r ? " in " + r : "")),
        Ae.ERR_DEPRECATED
      );
    return r && !yg[s] && (yg[s] = !0, console.warn(
      o(
        s,
        " has been deprecated since v" + r + " and will be removed in the near future"
      )
    )), t ? t(i, s, a) : !0;
  };
};
function uN(e, t, r) {
  if (typeof e != "object")
    throw new Ae("options must be an object", Ae.ERR_BAD_OPTION_VALUE);
  const n = Object.keys(e);
  let o = n.length;
  for (; o-- > 0; ) {
    const i = n[o], s = t[i];
    if (s) {
      const a = e[i], c = a === void 0 || s(a, i, e);
      if (c !== !0)
        throw new Ae("option " + i + " must be " + c, Ae.ERR_BAD_OPTION_VALUE);
      continue;
    }
    if (r !== !0)
      throw new Ae("Unknown option " + i, Ae.ERR_BAD_OPTION);
  }
}
const Hd = {
  assertOptions: uN,
  validators: pp
}, po = Hd.validators;
class ri {
  constructor(t) {
    this.defaults = t, this.interceptors = {
      request: new ug(),
      response: new ug()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(t, r) {
    try {
      return await this._request(t, r);
    } catch (n) {
      if (n instanceof Error) {
        let o;
        Error.captureStackTrace ? Error.captureStackTrace(o = {}) : o = new Error();
        const i = o.stack ? o.stack.replace(/^.+\n/, "") : "";
        try {
          n.stack ? i && !String(n.stack).endsWith(i.replace(/^.+\n.+\n/, "")) && (n.stack += `
` + i) : n.stack = i;
        } catch {
        }
      }
      throw n;
    }
  }
  _request(t, r) {
    typeof t == "string" ? (r = r || {}, r.url = t) : r = t || {}, r = li(this.defaults, r);
    const { transitional: n, paramsSerializer: o, headers: i } = r;
    n !== void 0 && Hd.assertOptions(n, {
      silentJSONParsing: po.transitional(po.boolean),
      forcedJSONParsing: po.transitional(po.boolean),
      clarifyTimeoutError: po.transitional(po.boolean)
    }, !1), o != null && (j.isFunction(o) ? r.paramsSerializer = {
      serialize: o
    } : Hd.assertOptions(o, {
      encode: po.function,
      serialize: po.function
    }, !0)), r.method = (r.method || this.defaults.method || "get").toLowerCase();
    let s = i && j.merge(
      i.common,
      i[r.method]
    );
    i && j.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (g) => {
        delete i[g];
      }
    ), r.headers = ar.concat(s, i);
    const a = [];
    let c = !0;
    this.interceptors.request.forEach(function(y) {
      typeof y.runWhen == "function" && y.runWhen(r) === !1 || (c = c && y.synchronous, a.unshift(y.fulfilled, y.rejected));
    });
    const u = [];
    this.interceptors.response.forEach(function(y) {
      u.push(y.fulfilled, y.rejected);
    });
    let f, l = 0, d;
    if (!c) {
      const g = [bg.bind(this), void 0];
      for (g.unshift.apply(g, a), g.push.apply(g, u), d = g.length, f = Promise.resolve(r); l < d; )
        f = f.then(g[l++], g[l++]);
      return f;
    }
    d = a.length;
    let m = r;
    for (l = 0; l < d; ) {
      const g = a[l++], y = a[l++];
      try {
        m = g(m);
      } catch (b) {
        y.call(this, b);
        break;
      }
    }
    try {
      f = bg.call(this, m);
    } catch (g) {
      return Promise.reject(g);
    }
    for (l = 0, d = u.length; l < d; )
      f = f.then(u[l++], u[l++]);
    return f;
  }
  getUri(t) {
    t = li(this.defaults, t);
    const r = y1(t.baseURL, t.url);
    return h1(r, t.params, t.paramsSerializer);
  }
}
j.forEach(["delete", "get", "head", "options"], function(t) {
  ri.prototype[t] = function(r, n) {
    return this.request(li(n || {}, {
      method: t,
      url: r,
      data: (n || {}).data
    }));
  };
});
j.forEach(["post", "put", "patch"], function(t) {
  function r(n) {
    return function(i, s, a) {
      return this.request(li(a || {}, {
        method: t,
        headers: n ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url: i,
        data: s
      }));
    };
  }
  ri.prototype[t] = r(), ri.prototype[t + "Form"] = r(!0);
});
class gp {
  constructor(t) {
    if (typeof t != "function")
      throw new TypeError("executor must be a function.");
    let r;
    this.promise = new Promise(function(i) {
      r = i;
    });
    const n = this;
    this.promise.then((o) => {
      if (!n._listeners) return;
      let i = n._listeners.length;
      for (; i-- > 0; )
        n._listeners[i](o);
      n._listeners = null;
    }), this.promise.then = (o) => {
      let i;
      const s = new Promise((a) => {
        n.subscribe(a), i = a;
      }).then(o);
      return s.cancel = function() {
        n.unsubscribe(i);
      }, s;
    }, t(function(i, s, a) {
      n.reason || (n.reason = new ys(i, s, a), r(n.reason));
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason)
      throw this.reason;
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(t) {
    if (this.reason) {
      t(this.reason);
      return;
    }
    this._listeners ? this._listeners.push(t) : this._listeners = [t];
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(t) {
    if (!this._listeners)
      return;
    const r = this._listeners.indexOf(t);
    r !== -1 && this._listeners.splice(r, 1);
  }
  toAbortSignal() {
    const t = new AbortController(), r = (n) => {
      t.abort(n);
    };
    return this.subscribe(r), t.signal.unsubscribe = () => this.unsubscribe(r), t.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let t;
    return {
      token: new gp(function(o) {
        t = o;
      }),
      cancel: t
    };
  }
}
function lN(e) {
  return function(r) {
    return e.apply(null, r);
  };
}
function fN(e) {
  return j.isObject(e) && e.isAxiosError === !0;
}
const Ld = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(Ld).forEach(([e, t]) => {
  Ld[t] = e;
});
function S1(e) {
  const t = new ri(e), r = t1(ri.prototype.request, t);
  return j.extend(r, ri.prototype, t, { allOwnKeys: !0 }), j.extend(r, t, null, { allOwnKeys: !0 }), r.create = function(o) {
    return S1(li(e, o));
  }, r;
}
const st = S1(za);
st.Axios = ri;
st.CanceledError = ys;
st.CancelToken = gp;
st.isCancel = m1;
st.VERSION = _1;
st.toFormData = sl;
st.AxiosError = Ae;
st.Cancel = st.CanceledError;
st.all = function(t) {
  return Promise.all(t);
};
st.spread = lN;
st.isAxiosError = fN;
st.mergeConfig = li;
st.AxiosHeaders = ar;
st.formToJSON = (e) => g1(j.isHTMLForm(e) ? new FormData(e) : e);
st.getAdapter = x1.getAdapter;
st.HttpStatusCode = Ld;
st.default = st;
const dN = "https://mempool.space", hN = "https://mempool.space/testnet", pN = "https://mempool.space/testnet4", gN = "https://mempool.space/signet", mN = "https://mempool.fractalbitcoin.io", bN = "https://mempool-testnet.fractalbitcoin.io", cl = (e) => e === tt ? hN : e === Ht ? pN : e === Ft ? gN : e === Br ? mN : e === Lt ? bN : dN;
var yn = {}, $t = {}, Ee = {};
Object.defineProperty(Ee, "__esModule", { value: !0 });
Ee.add5L = Ee.add5H = Ee.add4H = Ee.add4L = Ee.add3H = Ee.add3L = Ee.rotlBL = Ee.rotlBH = Ee.rotlSL = Ee.rotlSH = Ee.rotr32L = Ee.rotr32H = Ee.rotrBL = Ee.rotrBH = Ee.rotrSL = Ee.rotrSH = Ee.shrSL = Ee.shrSH = Ee.toBig = void 0;
Ee.fromBig = mp;
Ee.split = A1;
Ee.add = z1;
const bc = /* @__PURE__ */ BigInt(2 ** 32 - 1), zd = /* @__PURE__ */ BigInt(32);
function mp(e, t = !1) {
  return t ? { h: Number(e & bc), l: Number(e >> zd & bc) } : { h: Number(e >> zd & bc) | 0, l: Number(e & bc) | 0 };
}
function A1(e, t = !1) {
  let r = new Uint32Array(e.length), n = new Uint32Array(e.length);
  for (let o = 0; o < e.length; o++) {
    const { h: i, l: s } = mp(e[o], t);
    [r[o], n[o]] = [i, s];
  }
  return [r, n];
}
const k1 = (e, t) => BigInt(e >>> 0) << zd | BigInt(t >>> 0);
Ee.toBig = k1;
const T1 = (e, t, r) => e >>> r;
Ee.shrSH = T1;
const I1 = (e, t, r) => e << 32 - r | t >>> r;
Ee.shrSL = I1;
const P1 = (e, t, r) => e >>> r | t << 32 - r;
Ee.rotrSH = P1;
const O1 = (e, t, r) => e << 32 - r | t >>> r;
Ee.rotrSL = O1;
const B1 = (e, t, r) => e << 64 - r | t >>> r - 32;
Ee.rotrBH = B1;
const N1 = (e, t, r) => e >>> r - 32 | t << 64 - r;
Ee.rotrBL = N1;
const $1 = (e, t) => t;
Ee.rotr32H = $1;
const U1 = (e, t) => e;
Ee.rotr32L = U1;
const R1 = (e, t, r) => e << r | t >>> 32 - r;
Ee.rotlSH = R1;
const C1 = (e, t, r) => t << r | e >>> 32 - r;
Ee.rotlSL = C1;
const H1 = (e, t, r) => t << r - 32 | e >>> 64 - r;
Ee.rotlBH = H1;
const L1 = (e, t, r) => e << r - 32 | t >>> 64 - r;
Ee.rotlBL = L1;
function z1(e, t, r, n) {
  const o = (t >>> 0) + (n >>> 0);
  return { h: e + r + (o / 2 ** 32 | 0) | 0, l: o | 0 };
}
const j1 = (e, t, r) => (e >>> 0) + (t >>> 0) + (r >>> 0);
Ee.add3L = j1;
const M1 = (e, t, r, n) => t + r + n + (e / 2 ** 32 | 0) | 0;
Ee.add3H = M1;
const D1 = (e, t, r, n) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0);
Ee.add4L = D1;
const F1 = (e, t, r, n, o) => t + r + n + o + (e / 2 ** 32 | 0) | 0;
Ee.add4H = F1;
const K1 = (e, t, r, n, o) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0) + (o >>> 0);
Ee.add5L = K1;
const V1 = (e, t, r, n, o, i) => t + r + n + o + i + (e / 2 ** 32 | 0) | 0;
Ee.add5H = V1;
const yN = {
  fromBig: mp,
  split: A1,
  toBig: k1,
  shrSH: T1,
  shrSL: I1,
  rotrSH: P1,
  rotrSL: O1,
  rotrBH: B1,
  rotrBL: N1,
  rotr32H: $1,
  rotr32L: U1,
  rotlSH: R1,
  rotlSL: C1,
  rotlBH: H1,
  rotlBL: L1,
  add: z1,
  add3L: j1,
  add3H: M1,
  add4L: D1,
  add4H: F1,
  add5H: V1,
  add5L: K1
};
Ee.default = yN;
Object.defineProperty($t, "__esModule", { value: !0 });
$t.sha384 = $t.sha512_256 = $t.sha512_224 = $t.sha512 = $t.SHA384 = $t.SHA512_256 = $t.SHA512_224 = $t.SHA512 = void 0;
const wN = Rn, Be = Ee, ul = $o, [vN, EN] = Be.default.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((e) => BigInt(e))), go = /* @__PURE__ */ new Uint32Array(80), mo = /* @__PURE__ */ new Uint32Array(80);
class ja extends wN.HashMD {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: t, Al: r, Bh: n, Bl: o, Ch: i, Cl: s, Dh: a, Dl: c, Eh: u, El: f, Fh: l, Fl: d, Gh: m, Gl: g, Hh: y, Hl: b } = this;
    return [t, r, n, o, i, s, a, c, u, f, l, d, m, g, y, b];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c, u, f, l, d, m, g, y, b) {
    this.Ah = t | 0, this.Al = r | 0, this.Bh = n | 0, this.Bl = o | 0, this.Ch = i | 0, this.Cl = s | 0, this.Dh = a | 0, this.Dl = c | 0, this.Eh = u | 0, this.El = f | 0, this.Fh = l | 0, this.Fl = d | 0, this.Gh = m | 0, this.Gl = g | 0, this.Hh = y | 0, this.Hl = b | 0;
  }
  process(t, r) {
    for (let w = 0; w < 16; w++, r += 4)
      go[w] = t.getUint32(r), mo[w] = t.getUint32(r += 4);
    for (let w = 16; w < 80; w++) {
      const k = go[w - 15] | 0, S = mo[w - 15] | 0, I = Be.default.rotrSH(k, S, 1) ^ Be.default.rotrSH(k, S, 8) ^ Be.default.shrSH(k, S, 7), T = Be.default.rotrSL(k, S, 1) ^ Be.default.rotrSL(k, S, 8) ^ Be.default.shrSL(k, S, 7), B = go[w - 2] | 0, C = mo[w - 2] | 0, F = Be.default.rotrSH(B, C, 19) ^ Be.default.rotrBH(B, C, 61) ^ Be.default.shrSH(B, C, 6), V = Be.default.rotrSL(B, C, 19) ^ Be.default.rotrBL(B, C, 61) ^ Be.default.shrSL(B, C, 6), R = Be.default.add4L(T, V, mo[w - 7], mo[w - 16]), G = Be.default.add4H(R, I, F, go[w - 7], go[w - 16]);
      go[w] = G | 0, mo[w] = R | 0;
    }
    let { Ah: n, Al: o, Bh: i, Bl: s, Ch: a, Cl: c, Dh: u, Dl: f, Eh: l, El: d, Fh: m, Fl: g, Gh: y, Gl: b, Hh: E, Hl: x } = this;
    for (let w = 0; w < 80; w++) {
      const k = Be.default.rotrSH(l, d, 14) ^ Be.default.rotrSH(l, d, 18) ^ Be.default.rotrBH(l, d, 41), S = Be.default.rotrSL(l, d, 14) ^ Be.default.rotrSL(l, d, 18) ^ Be.default.rotrBL(l, d, 41), I = l & m ^ ~l & y, T = d & g ^ ~d & b, B = Be.default.add5L(x, S, T, EN[w], mo[w]), C = Be.default.add5H(B, E, k, I, vN[w], go[w]), F = B | 0, V = Be.default.rotrSH(n, o, 28) ^ Be.default.rotrBH(n, o, 34) ^ Be.default.rotrBH(n, o, 39), R = Be.default.rotrSL(n, o, 28) ^ Be.default.rotrBL(n, o, 34) ^ Be.default.rotrBL(n, o, 39), G = n & i ^ n & a ^ i & a, K = o & s ^ o & c ^ s & c;
      E = y | 0, x = b | 0, y = m | 0, b = g | 0, m = l | 0, g = d | 0, { h: l, l: d } = Be.default.add(u | 0, f | 0, C | 0, F | 0), u = a | 0, f = c | 0, a = i | 0, c = s | 0, i = n | 0, s = o | 0;
      const N = Be.default.add3L(F, R, K);
      n = Be.default.add3H(N, C, V, G), o = N | 0;
    }
    ({ h: n, l: o } = Be.default.add(this.Ah | 0, this.Al | 0, n | 0, o | 0)), { h: i, l: s } = Be.default.add(this.Bh | 0, this.Bl | 0, i | 0, s | 0), { h: a, l: c } = Be.default.add(this.Ch | 0, this.Cl | 0, a | 0, c | 0), { h: u, l: f } = Be.default.add(this.Dh | 0, this.Dl | 0, u | 0, f | 0), { h: l, l: d } = Be.default.add(this.Eh | 0, this.El | 0, l | 0, d | 0), { h: m, l: g } = Be.default.add(this.Fh | 0, this.Fl | 0, m | 0, g | 0), { h: y, l: b } = Be.default.add(this.Gh | 0, this.Gl | 0, y | 0, b | 0), { h: E, l: x } = Be.default.add(this.Hh | 0, this.Hl | 0, E | 0, x | 0), this.set(n, o, i, s, a, c, u, f, l, d, m, g, y, b, E, x);
  }
  roundClean() {
    go.fill(0), mo.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}
$t.SHA512 = ja;
class q1 extends ja {
  constructor() {
    super(), this.Ah = -1942145080, this.Al = 424955298, this.Bh = 1944164710, this.Bl = -1982016298, this.Ch = 502970286, this.Cl = 855612546, this.Dh = 1738396948, this.Dl = 1479516111, this.Eh = 258812777, this.El = 2077511080, this.Fh = 2011393907, this.Fl = 79989058, this.Gh = 1067287976, this.Gl = 1780299464, this.Hh = 286451373, this.Hl = -1848208735, this.outputLen = 28;
  }
}
$t.SHA512_224 = q1;
class G1 extends ja {
  constructor() {
    super(), this.Ah = 573645204, this.Al = -64227540, this.Bh = -1621794909, this.Bl = -934517566, this.Ch = 596883563, this.Cl = 1867755857, this.Dh = -1774684391, this.Dl = 1497426621, this.Eh = -1775747358, this.El = -1467023389, this.Fh = -1101128155, this.Fl = 1401305490, this.Gh = 721525244, this.Gl = 746961066, this.Hh = 246885852, this.Hl = -2117784414, this.outputLen = 32;
  }
}
$t.SHA512_256 = G1;
class W1 extends ja {
  constructor() {
    super(), this.Ah = -876896931, this.Al = -1056596264, this.Bh = 1654270250, this.Bl = 914150663, this.Ch = -1856437926, this.Cl = 812702999, this.Dh = 355462360, this.Dl = -150054599, this.Eh = 1731405415, this.El = -4191439, this.Fh = -1900787065, this.Fl = 1750603025, this.Gh = -619958771, this.Gl = 1694076839, this.Hh = 1203062813, this.Hl = -1090891868, this.outputLen = 48;
  }
}
$t.SHA384 = W1;
$t.sha512 = (0, ul.wrapConstructor)(() => new ja());
$t.sha512_224 = (0, ul.wrapConstructor)(() => new q1());
$t.sha512_256 = (0, ul.wrapConstructor)(() => new G1());
$t.sha384 = (0, ul.wrapConstructor)(() => new W1());
var ll = {};
Object.defineProperty(ll, "__esModule", { value: !0 });
ll.pbkdf2 = _N;
ll.pbkdf2Async = SN;
const yc = mr, xN = Qu, Gi = $o;
function Z1(e, t, r, n) {
  (0, yc.hash)(e);
  const o = (0, Gi.checkOpts)({ dkLen: 32, asyncTick: 10 }, n), { c: i, dkLen: s, asyncTick: a } = o;
  if ((0, yc.number)(i), (0, yc.number)(s), (0, yc.number)(a), i < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const c = (0, Gi.toBytes)(t), u = (0, Gi.toBytes)(r), f = new Uint8Array(s), l = xN.hmac.create(e, c), d = l._cloneInto().update(u);
  return { c: i, dkLen: s, asyncTick: a, DK: f, PRF: l, PRFSalt: d };
}
function X1(e, t, r, n, o) {
  return e.destroy(), t.destroy(), n && n.destroy(), o.fill(0), r;
}
function _N(e, t, r, n) {
  const { c: o, dkLen: i, DK: s, PRF: a, PRFSalt: c } = Z1(e, t, r, n);
  let u;
  const f = new Uint8Array(4), l = (0, Gi.createView)(f), d = new Uint8Array(a.outputLen);
  for (let m = 1, g = 0; g < i; m++, g += a.outputLen) {
    const y = s.subarray(g, g + a.outputLen);
    l.setInt32(0, m, !1), (u = c._cloneInto(u)).update(f).digestInto(d), y.set(d.subarray(0, y.length));
    for (let b = 1; b < o; b++) {
      a._cloneInto(u).update(d).digestInto(d);
      for (let E = 0; E < y.length; E++)
        y[E] ^= d[E];
    }
  }
  return X1(a, c, s, u, d);
}
async function SN(e, t, r, n) {
  const { c: o, dkLen: i, asyncTick: s, DK: a, PRF: c, PRFSalt: u } = Z1(e, t, r, n);
  let f;
  const l = new Uint8Array(4), d = (0, Gi.createView)(l), m = new Uint8Array(c.outputLen);
  for (let g = 1, y = 0; y < i; g++, y += c.outputLen) {
    const b = a.subarray(y, y + c.outputLen);
    d.setInt32(0, g, !1), (f = u._cloneInto(f)).update(l).digestInto(m), b.set(m.subarray(0, b.length)), await (0, Gi.asyncLoop)(o - 1, s, () => {
      c._cloneInto(f).update(m).digestInto(m);
      for (let E = 0; E < b.length; E++)
        b[E] ^= m[E];
    });
  }
  return X1(c, u, a, f, m);
}
var rr = {};
const AN = [
  "abdikace",
  "abeceda",
  "adresa",
  "agrese",
  "akce",
  "aktovka",
  "alej",
  "alkohol",
  "amputace",
  "ananas",
  "andulka",
  "anekdota",
  "anketa",
  "antika",
  "anulovat",
  "archa",
  "arogance",
  "asfalt",
  "asistent",
  "aspirace",
  "astma",
  "astronom",
  "atlas",
  "atletika",
  "atol",
  "autobus",
  "azyl",
  "babka",
  "bachor",
  "bacil",
  "baculka",
  "badatel",
  "bageta",
  "bagr",
  "bahno",
  "bakterie",
  "balada",
  "baletka",
  "balkon",
  "balonek",
  "balvan",
  "balza",
  "bambus",
  "bankomat",
  "barbar",
  "baret",
  "barman",
  "baroko",
  "barva",
  "baterka",
  "batoh",
  "bavlna",
  "bazalka",
  "bazilika",
  "bazuka",
  "bedna",
  "beran",
  "beseda",
  "bestie",
  "beton",
  "bezinka",
  "bezmoc",
  "beztak",
  "bicykl",
  "bidlo",
  "biftek",
  "bikiny",
  "bilance",
  "biograf",
  "biolog",
  "bitva",
  "bizon",
  "blahobyt",
  "blatouch",
  "blecha",
  "bledule",
  "blesk",
  "blikat",
  "blizna",
  "blokovat",
  "bloudit",
  "blud",
  "bobek",
  "bobr",
  "bodlina",
  "bodnout",
  "bohatost",
  "bojkot",
  "bojovat",
  "bokorys",
  "bolest",
  "borec",
  "borovice",
  "bota",
  "boubel",
  "bouchat",
  "bouda",
  "boule",
  "bourat",
  "boxer",
  "bradavka",
  "brambora",
  "branka",
  "bratr",
  "brepta",
  "briketa",
  "brko",
  "brloh",
  "bronz",
  "broskev",
  "brunetka",
  "brusinka",
  "brzda",
  "brzy",
  "bublina",
  "bubnovat",
  "buchta",
  "buditel",
  "budka",
  "budova",
  "bufet",
  "bujarost",
  "bukvice",
  "buldok",
  "bulva",
  "bunda",
  "bunkr",
  "burza",
  "butik",
  "buvol",
  "buzola",
  "bydlet",
  "bylina",
  "bytovka",
  "bzukot",
  "capart",
  "carevna",
  "cedr",
  "cedule",
  "cejch",
  "cejn",
  "cela",
  "celer",
  "celkem",
  "celnice",
  "cenina",
  "cennost",
  "cenovka",
  "centrum",
  "cenzor",
  "cestopis",
  "cetka",
  "chalupa",
  "chapadlo",
  "charita",
  "chata",
  "chechtat",
  "chemie",
  "chichot",
  "chirurg",
  "chlad",
  "chleba",
  "chlubit",
  "chmel",
  "chmura",
  "chobot",
  "chochol",
  "chodba",
  "cholera",
  "chomout",
  "chopit",
  "choroba",
  "chov",
  "chrapot",
  "chrlit",
  "chrt",
  "chrup",
  "chtivost",
  "chudina",
  "chutnat",
  "chvat",
  "chvilka",
  "chvost",
  "chyba",
  "chystat",
  "chytit",
  "cibule",
  "cigareta",
  "cihelna",
  "cihla",
  "cinkot",
  "cirkus",
  "cisterna",
  "citace",
  "citrus",
  "cizinec",
  "cizost",
  "clona",
  "cokoliv",
  "couvat",
  "ctitel",
  "ctnost",
  "cudnost",
  "cuketa",
  "cukr",
  "cupot",
  "cvaknout",
  "cval",
  "cvik",
  "cvrkot",
  "cyklista",
  "daleko",
  "dareba",
  "datel",
  "datum",
  "dcera",
  "debata",
  "dechovka",
  "decibel",
  "deficit",
  "deflace",
  "dekl",
  "dekret",
  "demokrat",
  "deprese",
  "derby",
  "deska",
  "detektiv",
  "dikobraz",
  "diktovat",
  "dioda",
  "diplom",
  "disk",
  "displej",
  "divadlo",
  "divoch",
  "dlaha",
  "dlouho",
  "dluhopis",
  "dnes",
  "dobro",
  "dobytek",
  "docent",
  "dochutit",
  "dodnes",
  "dohled",
  "dohoda",
  "dohra",
  "dojem",
  "dojnice",
  "doklad",
  "dokola",
  "doktor",
  "dokument",
  "dolar",
  "doleva",
  "dolina",
  "doma",
  "dominant",
  "domluvit",
  "domov",
  "donutit",
  "dopad",
  "dopis",
  "doplnit",
  "doposud",
  "doprovod",
  "dopustit",
  "dorazit",
  "dorost",
  "dort",
  "dosah",
  "doslov",
  "dostatek",
  "dosud",
  "dosyta",
  "dotaz",
  "dotek",
  "dotknout",
  "doufat",
  "doutnat",
  "dovozce",
  "dozadu",
  "doznat",
  "dozorce",
  "drahota",
  "drak",
  "dramatik",
  "dravec",
  "draze",
  "drdol",
  "drobnost",
  "drogerie",
  "drozd",
  "drsnost",
  "drtit",
  "drzost",
  "duben",
  "duchovno",
  "dudek",
  "duha",
  "duhovka",
  "dusit",
  "dusno",
  "dutost",
  "dvojice",
  "dvorec",
  "dynamit",
  "ekolog",
  "ekonomie",
  "elektron",
  "elipsa",
  "email",
  "emise",
  "emoce",
  "empatie",
  "epizoda",
  "epocha",
  "epopej",
  "epos",
  "esej",
  "esence",
  "eskorta",
  "eskymo",
  "etiketa",
  "euforie",
  "evoluce",
  "exekuce",
  "exkurze",
  "expedice",
  "exploze",
  "export",
  "extrakt",
  "facka",
  "fajfka",
  "fakulta",
  "fanatik",
  "fantazie",
  "farmacie",
  "favorit",
  "fazole",
  "federace",
  "fejeton",
  "fenka",
  "fialka",
  "figurant",
  "filozof",
  "filtr",
  "finance",
  "finta",
  "fixace",
  "fjord",
  "flanel",
  "flirt",
  "flotila",
  "fond",
  "fosfor",
  "fotbal",
  "fotka",
  "foton",
  "frakce",
  "freska",
  "fronta",
  "fukar",
  "funkce",
  "fyzika",
  "galeje",
  "garant",
  "genetika",
  "geolog",
  "gilotina",
  "glazura",
  "glejt",
  "golem",
  "golfista",
  "gotika",
  "graf",
  "gramofon",
  "granule",
  "grep",
  "gril",
  "grog",
  "groteska",
  "guma",
  "hadice",
  "hadr",
  "hala",
  "halenka",
  "hanba",
  "hanopis",
  "harfa",
  "harpuna",
  "havran",
  "hebkost",
  "hejkal",
  "hejno",
  "hejtman",
  "hektar",
  "helma",
  "hematom",
  "herec",
  "herna",
  "heslo",
  "hezky",
  "historik",
  "hladovka",
  "hlasivky",
  "hlava",
  "hledat",
  "hlen",
  "hlodavec",
  "hloh",
  "hloupost",
  "hltat",
  "hlubina",
  "hluchota",
  "hmat",
  "hmota",
  "hmyz",
  "hnis",
  "hnojivo",
  "hnout",
  "hoblina",
  "hoboj",
  "hoch",
  "hodiny",
  "hodlat",
  "hodnota",
  "hodovat",
  "hojnost",
  "hokej",
  "holinka",
  "holka",
  "holub",
  "homole",
  "honitba",
  "honorace",
  "horal",
  "horda",
  "horizont",
  "horko",
  "horlivec",
  "hormon",
  "hornina",
  "horoskop",
  "horstvo",
  "hospoda",
  "hostina",
  "hotovost",
  "houba",
  "houf",
  "houpat",
  "houska",
  "hovor",
  "hradba",
  "hranice",
  "hravost",
  "hrazda",
  "hrbolek",
  "hrdina",
  "hrdlo",
  "hrdost",
  "hrnek",
  "hrobka",
  "hromada",
  "hrot",
  "hrouda",
  "hrozen",
  "hrstka",
  "hrubost",
  "hryzat",
  "hubenost",
  "hubnout",
  "hudba",
  "hukot",
  "humr",
  "husita",
  "hustota",
  "hvozd",
  "hybnost",
  "hydrant",
  "hygiena",
  "hymna",
  "hysterik",
  "idylka",
  "ihned",
  "ikona",
  "iluze",
  "imunita",
  "infekce",
  "inflace",
  "inkaso",
  "inovace",
  "inspekce",
  "internet",
  "invalida",
  "investor",
  "inzerce",
  "ironie",
  "jablko",
  "jachta",
  "jahoda",
  "jakmile",
  "jakost",
  "jalovec",
  "jantar",
  "jarmark",
  "jaro",
  "jasan",
  "jasno",
  "jatka",
  "javor",
  "jazyk",
  "jedinec",
  "jedle",
  "jednatel",
  "jehlan",
  "jekot",
  "jelen",
  "jelito",
  "jemnost",
  "jenom",
  "jepice",
  "jeseter",
  "jevit",
  "jezdec",
  "jezero",
  "jinak",
  "jindy",
  "jinoch",
  "jiskra",
  "jistota",
  "jitrnice",
  "jizva",
  "jmenovat",
  "jogurt",
  "jurta",
  "kabaret",
  "kabel",
  "kabinet",
  "kachna",
  "kadet",
  "kadidlo",
  "kahan",
  "kajak",
  "kajuta",
  "kakao",
  "kaktus",
  "kalamita",
  "kalhoty",
  "kalibr",
  "kalnost",
  "kamera",
  "kamkoliv",
  "kamna",
  "kanibal",
  "kanoe",
  "kantor",
  "kapalina",
  "kapela",
  "kapitola",
  "kapka",
  "kaple",
  "kapota",
  "kapr",
  "kapusta",
  "kapybara",
  "karamel",
  "karotka",
  "karton",
  "kasa",
  "katalog",
  "katedra",
  "kauce",
  "kauza",
  "kavalec",
  "kazajka",
  "kazeta",
  "kazivost",
  "kdekoliv",
  "kdesi",
  "kedluben",
  "kemp",
  "keramika",
  "kino",
  "klacek",
  "kladivo",
  "klam",
  "klapot",
  "klasika",
  "klaun",
  "klec",
  "klenba",
  "klepat",
  "klesnout",
  "klid",
  "klima",
  "klisna",
  "klobouk",
  "klokan",
  "klopa",
  "kloub",
  "klubovna",
  "klusat",
  "kluzkost",
  "kmen",
  "kmitat",
  "kmotr",
  "kniha",
  "knot",
  "koalice",
  "koberec",
  "kobka",
  "kobliha",
  "kobyla",
  "kocour",
  "kohout",
  "kojenec",
  "kokos",
  "koktejl",
  "kolaps",
  "koleda",
  "kolize",
  "kolo",
  "komando",
  "kometa",
  "komik",
  "komnata",
  "komora",
  "kompas",
  "komunita",
  "konat",
  "koncept",
  "kondice",
  "konec",
  "konfese",
  "kongres",
  "konina",
  "konkurs",
  "kontakt",
  "konzerva",
  "kopanec",
  "kopie",
  "kopnout",
  "koprovka",
  "korbel",
  "korektor",
  "kormidlo",
  "koroptev",
  "korpus",
  "koruna",
  "koryto",
  "korzet",
  "kosatec",
  "kostka",
  "kotel",
  "kotleta",
  "kotoul",
  "koukat",
  "koupelna",
  "kousek",
  "kouzlo",
  "kovboj",
  "koza",
  "kozoroh",
  "krabice",
  "krach",
  "krajina",
  "kralovat",
  "krasopis",
  "kravata",
  "kredit",
  "krejcar",
  "kresba",
  "kreveta",
  "kriket",
  "kritik",
  "krize",
  "krkavec",
  "krmelec",
  "krmivo",
  "krocan",
  "krok",
  "kronika",
  "kropit",
  "kroupa",
  "krovka",
  "krtek",
  "kruhadlo",
  "krupice",
  "krutost",
  "krvinka",
  "krychle",
  "krypta",
  "krystal",
  "kryt",
  "kudlanka",
  "kufr",
  "kujnost",
  "kukla",
  "kulajda",
  "kulich",
  "kulka",
  "kulomet",
  "kultura",
  "kuna",
  "kupodivu",
  "kurt",
  "kurzor",
  "kutil",
  "kvalita",
  "kvasinka",
  "kvestor",
  "kynolog",
  "kyselina",
  "kytara",
  "kytice",
  "kytka",
  "kytovec",
  "kyvadlo",
  "labrador",
  "lachtan",
  "ladnost",
  "laik",
  "lakomec",
  "lamela",
  "lampa",
  "lanovka",
  "lasice",
  "laso",
  "lastura",
  "latinka",
  "lavina",
  "lebka",
  "leckdy",
  "leden",
  "lednice",
  "ledovka",
  "ledvina",
  "legenda",
  "legie",
  "legrace",
  "lehce",
  "lehkost",
  "lehnout",
  "lektvar",
  "lenochod",
  "lentilka",
  "lepenka",
  "lepidlo",
  "letadlo",
  "letec",
  "letmo",
  "letokruh",
  "levhart",
  "levitace",
  "levobok",
  "libra",
  "lichotka",
  "lidojed",
  "lidskost",
  "lihovina",
  "lijavec",
  "lilek",
  "limetka",
  "linie",
  "linka",
  "linoleum",
  "listopad",
  "litina",
  "litovat",
  "lobista",
  "lodivod",
  "logika",
  "logoped",
  "lokalita",
  "loket",
  "lomcovat",
  "lopata",
  "lopuch",
  "lord",
  "losos",
  "lotr",
  "loudal",
  "louh",
  "louka",
  "louskat",
  "lovec",
  "lstivost",
  "lucerna",
  "lucifer",
  "lump",
  "lusk",
  "lustrace",
  "lvice",
  "lyra",
  "lyrika",
  "lysina",
  "madam",
  "madlo",
  "magistr",
  "mahagon",
  "majetek",
  "majitel",
  "majorita",
  "makak",
  "makovice",
  "makrela",
  "malba",
  "malina",
  "malovat",
  "malvice",
  "maminka",
  "mandle",
  "manko",
  "marnost",
  "masakr",
  "maskot",
  "masopust",
  "matice",
  "matrika",
  "maturita",
  "mazanec",
  "mazivo",
  "mazlit",
  "mazurka",
  "mdloba",
  "mechanik",
  "meditace",
  "medovina",
  "melasa",
  "meloun",
  "mentolka",
  "metla",
  "metoda",
  "metr",
  "mezera",
  "migrace",
  "mihnout",
  "mihule",
  "mikina",
  "mikrofon",
  "milenec",
  "milimetr",
  "milost",
  "mimika",
  "mincovna",
  "minibar",
  "minomet",
  "minulost",
  "miska",
  "mistr",
  "mixovat",
  "mladost",
  "mlha",
  "mlhovina",
  "mlok",
  "mlsat",
  "mluvit",
  "mnich",
  "mnohem",
  "mobil",
  "mocnost",
  "modelka",
  "modlitba",
  "mohyla",
  "mokro",
  "molekula",
  "momentka",
  "monarcha",
  "monokl",
  "monstrum",
  "montovat",
  "monzun",
  "mosaz",
  "moskyt",
  "most",
  "motivace",
  "motorka",
  "motyka",
  "moucha",
  "moudrost",
  "mozaika",
  "mozek",
  "mozol",
  "mramor",
  "mravenec",
  "mrkev",
  "mrtvola",
  "mrzet",
  "mrzutost",
  "mstitel",
  "mudrc",
  "muflon",
  "mulat",
  "mumie",
  "munice",
  "muset",
  "mutace",
  "muzeum",
  "muzikant",
  "myslivec",
  "mzda",
  "nabourat",
  "nachytat",
  "nadace",
  "nadbytek",
  "nadhoz",
  "nadobro",
  "nadpis",
  "nahlas",
  "nahnat",
  "nahodile",
  "nahradit",
  "naivita",
  "najednou",
  "najisto",
  "najmout",
  "naklonit",
  "nakonec",
  "nakrmit",
  "nalevo",
  "namazat",
  "namluvit",
  "nanometr",
  "naoko",
  "naopak",
  "naostro",
  "napadat",
  "napevno",
  "naplnit",
  "napnout",
  "naposled",
  "naprosto",
  "narodit",
  "naruby",
  "narychlo",
  "nasadit",
  "nasekat",
  "naslepo",
  "nastat",
  "natolik",
  "navenek",
  "navrch",
  "navzdory",
  "nazvat",
  "nebe",
  "nechat",
  "necky",
  "nedaleko",
  "nedbat",
  "neduh",
  "negace",
  "nehet",
  "nehoda",
  "nejen",
  "nejprve",
  "neklid",
  "nelibost",
  "nemilost",
  "nemoc",
  "neochota",
  "neonka",
  "nepokoj",
  "nerost",
  "nerv",
  "nesmysl",
  "nesoulad",
  "netvor",
  "neuron",
  "nevina",
  "nezvykle",
  "nicota",
  "nijak",
  "nikam",
  "nikdy",
  "nikl",
  "nikterak",
  "nitro",
  "nocleh",
  "nohavice",
  "nominace",
  "nora",
  "norek",
  "nositel",
  "nosnost",
  "nouze",
  "noviny",
  "novota",
  "nozdra",
  "nuda",
  "nudle",
  "nuget",
  "nutit",
  "nutnost",
  "nutrie",
  "nymfa",
  "obal",
  "obarvit",
  "obava",
  "obdiv",
  "obec",
  "obehnat",
  "obejmout",
  "obezita",
  "obhajoba",
  "obilnice",
  "objasnit",
  "objekt",
  "obklopit",
  "oblast",
  "oblek",
  "obliba",
  "obloha",
  "obluda",
  "obnos",
  "obohatit",
  "obojek",
  "obout",
  "obrazec",
  "obrna",
  "obruba",
  "obrys",
  "obsah",
  "obsluha",
  "obstarat",
  "obuv",
  "obvaz",
  "obvinit",
  "obvod",
  "obvykle",
  "obyvatel",
  "obzor",
  "ocas",
  "ocel",
  "ocenit",
  "ochladit",
  "ochota",
  "ochrana",
  "ocitnout",
  "odboj",
  "odbyt",
  "odchod",
  "odcizit",
  "odebrat",
  "odeslat",
  "odevzdat",
  "odezva",
  "odhadce",
  "odhodit",
  "odjet",
  "odjinud",
  "odkaz",
  "odkoupit",
  "odliv",
  "odluka",
  "odmlka",
  "odolnost",
  "odpad",
  "odpis",
  "odplout",
  "odpor",
  "odpustit",
  "odpykat",
  "odrazka",
  "odsoudit",
  "odstup",
  "odsun",
  "odtok",
  "odtud",
  "odvaha",
  "odveta",
  "odvolat",
  "odvracet",
  "odznak",
  "ofina",
  "ofsajd",
  "ohlas",
  "ohnisko",
  "ohrada",
  "ohrozit",
  "ohryzek",
  "okap",
  "okenice",
  "oklika",
  "okno",
  "okouzlit",
  "okovy",
  "okrasa",
  "okres",
  "okrsek",
  "okruh",
  "okupant",
  "okurka",
  "okusit",
  "olejnina",
  "olizovat",
  "omak",
  "omeleta",
  "omezit",
  "omladina",
  "omlouvat",
  "omluva",
  "omyl",
  "onehdy",
  "opakovat",
  "opasek",
  "operace",
  "opice",
  "opilost",
  "opisovat",
  "opora",
  "opozice",
  "opravdu",
  "oproti",
  "orbital",
  "orchestr",
  "orgie",
  "orlice",
  "orloj",
  "ortel",
  "osada",
  "oschnout",
  "osika",
  "osivo",
  "oslava",
  "oslepit",
  "oslnit",
  "oslovit",
  "osnova",
  "osoba",
  "osolit",
  "ospalec",
  "osten",
  "ostraha",
  "ostuda",
  "ostych",
  "osvojit",
  "oteplit",
  "otisk",
  "otop",
  "otrhat",
  "otrlost",
  "otrok",
  "otruby",
  "otvor",
  "ovanout",
  "ovar",
  "oves",
  "ovlivnit",
  "ovoce",
  "oxid",
  "ozdoba",
  "pachatel",
  "pacient",
  "padouch",
  "pahorek",
  "pakt",
  "palanda",
  "palec",
  "palivo",
  "paluba",
  "pamflet",
  "pamlsek",
  "panenka",
  "panika",
  "panna",
  "panovat",
  "panstvo",
  "pantofle",
  "paprika",
  "parketa",
  "parodie",
  "parta",
  "paruka",
  "paryba",
  "paseka",
  "pasivita",
  "pastelka",
  "patent",
  "patrona",
  "pavouk",
  "pazneht",
  "pazourek",
  "pecka",
  "pedagog",
  "pejsek",
  "peklo",
  "peloton",
  "penalta",
  "pendrek",
  "penze",
  "periskop",
  "pero",
  "pestrost",
  "petarda",
  "petice",
  "petrolej",
  "pevnina",
  "pexeso",
  "pianista",
  "piha",
  "pijavice",
  "pikle",
  "piknik",
  "pilina",
  "pilnost",
  "pilulka",
  "pinzeta",
  "pipeta",
  "pisatel",
  "pistole",
  "pitevna",
  "pivnice",
  "pivovar",
  "placenta",
  "plakat",
  "plamen",
  "planeta",
  "plastika",
  "platit",
  "plavidlo",
  "plaz",
  "plech",
  "plemeno",
  "plenta",
  "ples",
  "pletivo",
  "plevel",
  "plivat",
  "plnit",
  "plno",
  "plocha",
  "plodina",
  "plomba",
  "plout",
  "pluk",
  "plyn",
  "pobavit",
  "pobyt",
  "pochod",
  "pocit",
  "poctivec",
  "podat",
  "podcenit",
  "podepsat",
  "podhled",
  "podivit",
  "podklad",
  "podmanit",
  "podnik",
  "podoba",
  "podpora",
  "podraz",
  "podstata",
  "podvod",
  "podzim",
  "poezie",
  "pohanka",
  "pohnutka",
  "pohovor",
  "pohroma",
  "pohyb",
  "pointa",
  "pojistka",
  "pojmout",
  "pokazit",
  "pokles",
  "pokoj",
  "pokrok",
  "pokuta",
  "pokyn",
  "poledne",
  "polibek",
  "polknout",
  "poloha",
  "polynom",
  "pomalu",
  "pominout",
  "pomlka",
  "pomoc",
  "pomsta",
  "pomyslet",
  "ponechat",
  "ponorka",
  "ponurost",
  "popadat",
  "popel",
  "popisek",
  "poplach",
  "poprosit",
  "popsat",
  "popud",
  "poradce",
  "porce",
  "porod",
  "porucha",
  "poryv",
  "posadit",
  "posed",
  "posila",
  "poskok",
  "poslanec",
  "posoudit",
  "pospolu",
  "postava",
  "posudek",
  "posyp",
  "potah",
  "potkan",
  "potlesk",
  "potomek",
  "potrava",
  "potupa",
  "potvora",
  "poukaz",
  "pouto",
  "pouzdro",
  "povaha",
  "povidla",
  "povlak",
  "povoz",
  "povrch",
  "povstat",
  "povyk",
  "povzdech",
  "pozdrav",
  "pozemek",
  "poznatek",
  "pozor",
  "pozvat",
  "pracovat",
  "prahory",
  "praktika",
  "prales",
  "praotec",
  "praporek",
  "prase",
  "pravda",
  "princip",
  "prkno",
  "probudit",
  "procento",
  "prodej",
  "profese",
  "prohra",
  "projekt",
  "prolomit",
  "promile",
  "pronikat",
  "propad",
  "prorok",
  "prosba",
  "proton",
  "proutek",
  "provaz",
  "prskavka",
  "prsten",
  "prudkost",
  "prut",
  "prvek",
  "prvohory",
  "psanec",
  "psovod",
  "pstruh",
  "ptactvo",
  "puberta",
  "puch",
  "pudl",
  "pukavec",
  "puklina",
  "pukrle",
  "pult",
  "pumpa",
  "punc",
  "pupen",
  "pusa",
  "pusinka",
  "pustina",
  "putovat",
  "putyka",
  "pyramida",
  "pysk",
  "pytel",
  "racek",
  "rachot",
  "radiace",
  "radnice",
  "radon",
  "raft",
  "ragby",
  "raketa",
  "rakovina",
  "rameno",
  "rampouch",
  "rande",
  "rarach",
  "rarita",
  "rasovna",
  "rastr",
  "ratolest",
  "razance",
  "razidlo",
  "reagovat",
  "reakce",
  "recept",
  "redaktor",
  "referent",
  "reflex",
  "rejnok",
  "reklama",
  "rekord",
  "rekrut",
  "rektor",
  "reputace",
  "revize",
  "revma",
  "revolver",
  "rezerva",
  "riskovat",
  "riziko",
  "robotika",
  "rodokmen",
  "rohovka",
  "rokle",
  "rokoko",
  "romaneto",
  "ropovod",
  "ropucha",
  "rorejs",
  "rosol",
  "rostlina",
  "rotmistr",
  "rotoped",
  "rotunda",
  "roubenka",
  "roucho",
  "roup",
  "roura",
  "rovina",
  "rovnice",
  "rozbor",
  "rozchod",
  "rozdat",
  "rozeznat",
  "rozhodce",
  "rozinka",
  "rozjezd",
  "rozkaz",
  "rozloha",
  "rozmar",
  "rozpad",
  "rozruch",
  "rozsah",
  "roztok",
  "rozum",
  "rozvod",
  "rubrika",
  "ruchadlo",
  "rukavice",
  "rukopis",
  "ryba",
  "rybolov",
  "rychlost",
  "rydlo",
  "rypadlo",
  "rytina",
  "ryzost",
  "sadista",
  "sahat",
  "sako",
  "samec",
  "samizdat",
  "samota",
  "sanitka",
  "sardinka",
  "sasanka",
  "satelit",
  "sazba",
  "sazenice",
  "sbor",
  "schovat",
  "sebranka",
  "secese",
  "sedadlo",
  "sediment",
  "sedlo",
  "sehnat",
  "sejmout",
  "sekera",
  "sekta",
  "sekunda",
  "sekvoje",
  "semeno",
  "seno",
  "servis",
  "sesadit",
  "seshora",
  "seskok",
  "seslat",
  "sestra",
  "sesuv",
  "sesypat",
  "setba",
  "setina",
  "setkat",
  "setnout",
  "setrvat",
  "sever",
  "seznam",
  "shoda",
  "shrnout",
  "sifon",
  "silnice",
  "sirka",
  "sirotek",
  "sirup",
  "situace",
  "skafandr",
  "skalisko",
  "skanzen",
  "skaut",
  "skeptik",
  "skica",
  "skladba",
  "sklenice",
  "sklo",
  "skluz",
  "skoba",
  "skokan",
  "skoro",
  "skripta",
  "skrz",
  "skupina",
  "skvost",
  "skvrna",
  "slabika",
  "sladidlo",
  "slanina",
  "slast",
  "slavnost",
  "sledovat",
  "slepec",
  "sleva",
  "slezina",
  "slib",
  "slina",
  "sliznice",
  "slon",
  "sloupek",
  "slovo",
  "sluch",
  "sluha",
  "slunce",
  "slupka",
  "slza",
  "smaragd",
  "smetana",
  "smilstvo",
  "smlouva",
  "smog",
  "smrad",
  "smrk",
  "smrtka",
  "smutek",
  "smysl",
  "snad",
  "snaha",
  "snob",
  "sobota",
  "socha",
  "sodovka",
  "sokol",
  "sopka",
  "sotva",
  "souboj",
  "soucit",
  "soudce",
  "souhlas",
  "soulad",
  "soumrak",
  "souprava",
  "soused",
  "soutok",
  "souviset",
  "spalovna",
  "spasitel",
  "spis",
  "splav",
  "spodek",
  "spojenec",
  "spolu",
  "sponzor",
  "spornost",
  "spousta",
  "sprcha",
  "spustit",
  "sranda",
  "sraz",
  "srdce",
  "srna",
  "srnec",
  "srovnat",
  "srpen",
  "srst",
  "srub",
  "stanice",
  "starosta",
  "statika",
  "stavba",
  "stehno",
  "stezka",
  "stodola",
  "stolek",
  "stopa",
  "storno",
  "stoupat",
  "strach",
  "stres",
  "strhnout",
  "strom",
  "struna",
  "studna",
  "stupnice",
  "stvol",
  "styk",
  "subjekt",
  "subtropy",
  "suchar",
  "sudost",
  "sukno",
  "sundat",
  "sunout",
  "surikata",
  "surovina",
  "svah",
  "svalstvo",
  "svetr",
  "svatba",
  "svazek",
  "svisle",
  "svitek",
  "svoboda",
  "svodidlo",
  "svorka",
  "svrab",
  "sykavka",
  "sykot",
  "synek",
  "synovec",
  "sypat",
  "sypkost",
  "syrovost",
  "sysel",
  "sytost",
  "tabletka",
  "tabule",
  "tahoun",
  "tajemno",
  "tajfun",
  "tajga",
  "tajit",
  "tajnost",
  "taktika",
  "tamhle",
  "tampon",
  "tancovat",
  "tanec",
  "tanker",
  "tapeta",
  "tavenina",
  "tazatel",
  "technika",
  "tehdy",
  "tekutina",
  "telefon",
  "temnota",
  "tendence",
  "tenista",
  "tenor",
  "teplota",
  "tepna",
  "teprve",
  "terapie",
  "termoska",
  "textil",
  "ticho",
  "tiskopis",
  "titulek",
  "tkadlec",
  "tkanina",
  "tlapka",
  "tleskat",
  "tlukot",
  "tlupa",
  "tmel",
  "toaleta",
  "topinka",
  "topol",
  "torzo",
  "touha",
  "toulec",
  "tradice",
  "traktor",
  "tramp",
  "trasa",
  "traverza",
  "trefit",
  "trest",
  "trezor",
  "trhavina",
  "trhlina",
  "trochu",
  "trojice",
  "troska",
  "trouba",
  "trpce",
  "trpitel",
  "trpkost",
  "trubec",
  "truchlit",
  "truhlice",
  "trus",
  "trvat",
  "tudy",
  "tuhnout",
  "tuhost",
  "tundra",
  "turista",
  "turnaj",
  "tuzemsko",
  "tvaroh",
  "tvorba",
  "tvrdost",
  "tvrz",
  "tygr",
  "tykev",
  "ubohost",
  "uboze",
  "ubrat",
  "ubrousek",
  "ubrus",
  "ubytovna",
  "ucho",
  "uctivost",
  "udivit",
  "uhradit",
  "ujednat",
  "ujistit",
  "ujmout",
  "ukazatel",
  "uklidnit",
  "uklonit",
  "ukotvit",
  "ukrojit",
  "ulice",
  "ulita",
  "ulovit",
  "umyvadlo",
  "unavit",
  "uniforma",
  "uniknout",
  "upadnout",
  "uplatnit",
  "uplynout",
  "upoutat",
  "upravit",
  "uran",
  "urazit",
  "usednout",
  "usilovat",
  "usmrtit",
  "usnadnit",
  "usnout",
  "usoudit",
  "ustlat",
  "ustrnout",
  "utahovat",
  "utkat",
  "utlumit",
  "utonout",
  "utopenec",
  "utrousit",
  "uvalit",
  "uvolnit",
  "uvozovka",
  "uzdravit",
  "uzel",
  "uzenina",
  "uzlina",
  "uznat",
  "vagon",
  "valcha",
  "valoun",
  "vana",
  "vandal",
  "vanilka",
  "varan",
  "varhany",
  "varovat",
  "vcelku",
  "vchod",
  "vdova",
  "vedro",
  "vegetace",
  "vejce",
  "velbloud",
  "veletrh",
  "velitel",
  "velmoc",
  "velryba",
  "venkov",
  "veranda",
  "verze",
  "veselka",
  "veskrze",
  "vesnice",
  "vespodu",
  "vesta",
  "veterina",
  "veverka",
  "vibrace",
  "vichr",
  "videohra",
  "vidina",
  "vidle",
  "vila",
  "vinice",
  "viset",
  "vitalita",
  "vize",
  "vizitka",
  "vjezd",
  "vklad",
  "vkus",
  "vlajka",
  "vlak",
  "vlasec",
  "vlevo",
  "vlhkost",
  "vliv",
  "vlnovka",
  "vloupat",
  "vnucovat",
  "vnuk",
  "voda",
  "vodivost",
  "vodoznak",
  "vodstvo",
  "vojensky",
  "vojna",
  "vojsko",
  "volant",
  "volba",
  "volit",
  "volno",
  "voskovka",
  "vozidlo",
  "vozovna",
  "vpravo",
  "vrabec",
  "vracet",
  "vrah",
  "vrata",
  "vrba",
  "vrcholek",
  "vrhat",
  "vrstva",
  "vrtule",
  "vsadit",
  "vstoupit",
  "vstup",
  "vtip",
  "vybavit",
  "vybrat",
  "vychovat",
  "vydat",
  "vydra",
  "vyfotit",
  "vyhledat",
  "vyhnout",
  "vyhodit",
  "vyhradit",
  "vyhubit",
  "vyjasnit",
  "vyjet",
  "vyjmout",
  "vyklopit",
  "vykonat",
  "vylekat",
  "vymazat",
  "vymezit",
  "vymizet",
  "vymyslet",
  "vynechat",
  "vynikat",
  "vynutit",
  "vypadat",
  "vyplatit",
  "vypravit",
  "vypustit",
  "vyrazit",
  "vyrovnat",
  "vyrvat",
  "vyslovit",
  "vysoko",
  "vystavit",
  "vysunout",
  "vysypat",
  "vytasit",
  "vytesat",
  "vytratit",
  "vyvinout",
  "vyvolat",
  "vyvrhel",
  "vyzdobit",
  "vyznat",
  "vzadu",
  "vzbudit",
  "vzchopit",
  "vzdor",
  "vzduch",
  "vzdychat",
  "vzestup",
  "vzhledem",
  "vzkaz",
  "vzlykat",
  "vznik",
  "vzorek",
  "vzpoura",
  "vztah",
  "vztek",
  "xylofon",
  "zabrat",
  "zabydlet",
  "zachovat",
  "zadarmo",
  "zadusit",
  "zafoukat",
  "zahltit",
  "zahodit",
  "zahrada",
  "zahynout",
  "zajatec",
  "zajet",
  "zajistit",
  "zaklepat",
  "zakoupit",
  "zalepit",
  "zamezit",
  "zamotat",
  "zamyslet",
  "zanechat",
  "zanikat",
  "zaplatit",
  "zapojit",
  "zapsat",
  "zarazit",
  "zastavit",
  "zasunout",
  "zatajit",
  "zatemnit",
  "zatknout",
  "zaujmout",
  "zavalit",
  "zavelet",
  "zavinit",
  "zavolat",
  "zavrtat",
  "zazvonit",
  "zbavit",
  "zbrusu",
  "zbudovat",
  "zbytek",
  "zdaleka",
  "zdarma",
  "zdatnost",
  "zdivo",
  "zdobit",
  "zdroj",
  "zdvih",
  "zdymadlo",
  "zelenina",
  "zeman",
  "zemina",
  "zeptat",
  "zezadu",
  "zezdola",
  "zhatit",
  "zhltnout",
  "zhluboka",
  "zhotovit",
  "zhruba",
  "zima",
  "zimnice",
  "zjemnit",
  "zklamat",
  "zkoumat",
  "zkratka",
  "zkumavka",
  "zlato",
  "zlehka",
  "zloba",
  "zlom",
  "zlost",
  "zlozvyk",
  "zmapovat",
  "zmar",
  "zmatek",
  "zmije",
  "zmizet",
  "zmocnit",
  "zmodrat",
  "zmrzlina",
  "zmutovat",
  "znak",
  "znalost",
  "znamenat",
  "znovu",
  "zobrazit",
  "zotavit",
  "zoubek",
  "zoufale",
  "zplodit",
  "zpomalit",
  "zprava",
  "zprostit",
  "zprudka",
  "zprvu",
  "zrada",
  "zranit",
  "zrcadlo",
  "zrnitost",
  "zrno",
  "zrovna",
  "zrychlit",
  "zrzavost",
  "zticha",
  "ztratit",
  "zubovina",
  "zubr",
  "zvednout",
  "zvenku",
  "zvesela",
  "zvon",
  "zvrat",
  "zvukovod",
  "zvyk"
], kN = [
  "的",
  "一",
  "是",
  "在",
  "不",
  "了",
  "有",
  "和",
  "人",
  "这",
  "中",
  "大",
  "为",
  "上",
  "个",
  "国",
  "我",
  "以",
  "要",
  "他",
  "时",
  "来",
  "用",
  "们",
  "生",
  "到",
  "作",
  "地",
  "于",
  "出",
  "就",
  "分",
  "对",
  "成",
  "会",
  "可",
  "主",
  "发",
  "年",
  "动",
  "同",
  "工",
  "也",
  "能",
  "下",
  "过",
  "子",
  "说",
  "产",
  "种",
  "面",
  "而",
  "方",
  "后",
  "多",
  "定",
  "行",
  "学",
  "法",
  "所",
  "民",
  "得",
  "经",
  "十",
  "三",
  "之",
  "进",
  "着",
  "等",
  "部",
  "度",
  "家",
  "电",
  "力",
  "里",
  "如",
  "水",
  "化",
  "高",
  "自",
  "二",
  "理",
  "起",
  "小",
  "物",
  "现",
  "实",
  "加",
  "量",
  "都",
  "两",
  "体",
  "制",
  "机",
  "当",
  "使",
  "点",
  "从",
  "业",
  "本",
  "去",
  "把",
  "性",
  "好",
  "应",
  "开",
  "它",
  "合",
  "还",
  "因",
  "由",
  "其",
  "些",
  "然",
  "前",
  "外",
  "天",
  "政",
  "四",
  "日",
  "那",
  "社",
  "义",
  "事",
  "平",
  "形",
  "相",
  "全",
  "表",
  "间",
  "样",
  "与",
  "关",
  "各",
  "重",
  "新",
  "线",
  "内",
  "数",
  "正",
  "心",
  "反",
  "你",
  "明",
  "看",
  "原",
  "又",
  "么",
  "利",
  "比",
  "或",
  "但",
  "质",
  "气",
  "第",
  "向",
  "道",
  "命",
  "此",
  "变",
  "条",
  "只",
  "没",
  "结",
  "解",
  "问",
  "意",
  "建",
  "月",
  "公",
  "无",
  "系",
  "军",
  "很",
  "情",
  "者",
  "最",
  "立",
  "代",
  "想",
  "已",
  "通",
  "并",
  "提",
  "直",
  "题",
  "党",
  "程",
  "展",
  "五",
  "果",
  "料",
  "象",
  "员",
  "革",
  "位",
  "入",
  "常",
  "文",
  "总",
  "次",
  "品",
  "式",
  "活",
  "设",
  "及",
  "管",
  "特",
  "件",
  "长",
  "求",
  "老",
  "头",
  "基",
  "资",
  "边",
  "流",
  "路",
  "级",
  "少",
  "图",
  "山",
  "统",
  "接",
  "知",
  "较",
  "将",
  "组",
  "见",
  "计",
  "别",
  "她",
  "手",
  "角",
  "期",
  "根",
  "论",
  "运",
  "农",
  "指",
  "几",
  "九",
  "区",
  "强",
  "放",
  "决",
  "西",
  "被",
  "干",
  "做",
  "必",
  "战",
  "先",
  "回",
  "则",
  "任",
  "取",
  "据",
  "处",
  "队",
  "南",
  "给",
  "色",
  "光",
  "门",
  "即",
  "保",
  "治",
  "北",
  "造",
  "百",
  "规",
  "热",
  "领",
  "七",
  "海",
  "口",
  "东",
  "导",
  "器",
  "压",
  "志",
  "世",
  "金",
  "增",
  "争",
  "济",
  "阶",
  "油",
  "思",
  "术",
  "极",
  "交",
  "受",
  "联",
  "什",
  "认",
  "六",
  "共",
  "权",
  "收",
  "证",
  "改",
  "清",
  "美",
  "再",
  "采",
  "转",
  "更",
  "单",
  "风",
  "切",
  "打",
  "白",
  "教",
  "速",
  "花",
  "带",
  "安",
  "场",
  "身",
  "车",
  "例",
  "真",
  "务",
  "具",
  "万",
  "每",
  "目",
  "至",
  "达",
  "走",
  "积",
  "示",
  "议",
  "声",
  "报",
  "斗",
  "完",
  "类",
  "八",
  "离",
  "华",
  "名",
  "确",
  "才",
  "科",
  "张",
  "信",
  "马",
  "节",
  "话",
  "米",
  "整",
  "空",
  "元",
  "况",
  "今",
  "集",
  "温",
  "传",
  "土",
  "许",
  "步",
  "群",
  "广",
  "石",
  "记",
  "需",
  "段",
  "研",
  "界",
  "拉",
  "林",
  "律",
  "叫",
  "且",
  "究",
  "观",
  "越",
  "织",
  "装",
  "影",
  "算",
  "低",
  "持",
  "音",
  "众",
  "书",
  "布",
  "复",
  "容",
  "儿",
  "须",
  "际",
  "商",
  "非",
  "验",
  "连",
  "断",
  "深",
  "难",
  "近",
  "矿",
  "千",
  "周",
  "委",
  "素",
  "技",
  "备",
  "半",
  "办",
  "青",
  "省",
  "列",
  "习",
  "响",
  "约",
  "支",
  "般",
  "史",
  "感",
  "劳",
  "便",
  "团",
  "往",
  "酸",
  "历",
  "市",
  "克",
  "何",
  "除",
  "消",
  "构",
  "府",
  "称",
  "太",
  "准",
  "精",
  "值",
  "号",
  "率",
  "族",
  "维",
  "划",
  "选",
  "标",
  "写",
  "存",
  "候",
  "毛",
  "亲",
  "快",
  "效",
  "斯",
  "院",
  "查",
  "江",
  "型",
  "眼",
  "王",
  "按",
  "格",
  "养",
  "易",
  "置",
  "派",
  "层",
  "片",
  "始",
  "却",
  "专",
  "状",
  "育",
  "厂",
  "京",
  "识",
  "适",
  "属",
  "圆",
  "包",
  "火",
  "住",
  "调",
  "满",
  "县",
  "局",
  "照",
  "参",
  "红",
  "细",
  "引",
  "听",
  "该",
  "铁",
  "价",
  "严",
  "首",
  "底",
  "液",
  "官",
  "德",
  "随",
  "病",
  "苏",
  "失",
  "尔",
  "死",
  "讲",
  "配",
  "女",
  "黄",
  "推",
  "显",
  "谈",
  "罪",
  "神",
  "艺",
  "呢",
  "席",
  "含",
  "企",
  "望",
  "密",
  "批",
  "营",
  "项",
  "防",
  "举",
  "球",
  "英",
  "氧",
  "势",
  "告",
  "李",
  "台",
  "落",
  "木",
  "帮",
  "轮",
  "破",
  "亚",
  "师",
  "围",
  "注",
  "远",
  "字",
  "材",
  "排",
  "供",
  "河",
  "态",
  "封",
  "另",
  "施",
  "减",
  "树",
  "溶",
  "怎",
  "止",
  "案",
  "言",
  "士",
  "均",
  "武",
  "固",
  "叶",
  "鱼",
  "波",
  "视",
  "仅",
  "费",
  "紧",
  "爱",
  "左",
  "章",
  "早",
  "朝",
  "害",
  "续",
  "轻",
  "服",
  "试",
  "食",
  "充",
  "兵",
  "源",
  "判",
  "护",
  "司",
  "足",
  "某",
  "练",
  "差",
  "致",
  "板",
  "田",
  "降",
  "黑",
  "犯",
  "负",
  "击",
  "范",
  "继",
  "兴",
  "似",
  "余",
  "坚",
  "曲",
  "输",
  "修",
  "故",
  "城",
  "夫",
  "够",
  "送",
  "笔",
  "船",
  "占",
  "右",
  "财",
  "吃",
  "富",
  "春",
  "职",
  "觉",
  "汉",
  "画",
  "功",
  "巴",
  "跟",
  "虽",
  "杂",
  "飞",
  "检",
  "吸",
  "助",
  "升",
  "阳",
  "互",
  "初",
  "创",
  "抗",
  "考",
  "投",
  "坏",
  "策",
  "古",
  "径",
  "换",
  "未",
  "跑",
  "留",
  "钢",
  "曾",
  "端",
  "责",
  "站",
  "简",
  "述",
  "钱",
  "副",
  "尽",
  "帝",
  "射",
  "草",
  "冲",
  "承",
  "独",
  "令",
  "限",
  "阿",
  "宣",
  "环",
  "双",
  "请",
  "超",
  "微",
  "让",
  "控",
  "州",
  "良",
  "轴",
  "找",
  "否",
  "纪",
  "益",
  "依",
  "优",
  "顶",
  "础",
  "载",
  "倒",
  "房",
  "突",
  "坐",
  "粉",
  "敌",
  "略",
  "客",
  "袁",
  "冷",
  "胜",
  "绝",
  "析",
  "块",
  "剂",
  "测",
  "丝",
  "协",
  "诉",
  "念",
  "陈",
  "仍",
  "罗",
  "盐",
  "友",
  "洋",
  "错",
  "苦",
  "夜",
  "刑",
  "移",
  "频",
  "逐",
  "靠",
  "混",
  "母",
  "短",
  "皮",
  "终",
  "聚",
  "汽",
  "村",
  "云",
  "哪",
  "既",
  "距",
  "卫",
  "停",
  "烈",
  "央",
  "察",
  "烧",
  "迅",
  "境",
  "若",
  "印",
  "洲",
  "刻",
  "括",
  "激",
  "孔",
  "搞",
  "甚",
  "室",
  "待",
  "核",
  "校",
  "散",
  "侵",
  "吧",
  "甲",
  "游",
  "久",
  "菜",
  "味",
  "旧",
  "模",
  "湖",
  "货",
  "损",
  "预",
  "阻",
  "毫",
  "普",
  "稳",
  "乙",
  "妈",
  "植",
  "息",
  "扩",
  "银",
  "语",
  "挥",
  "酒",
  "守",
  "拿",
  "序",
  "纸",
  "医",
  "缺",
  "雨",
  "吗",
  "针",
  "刘",
  "啊",
  "急",
  "唱",
  "误",
  "训",
  "愿",
  "审",
  "附",
  "获",
  "茶",
  "鲜",
  "粮",
  "斤",
  "孩",
  "脱",
  "硫",
  "肥",
  "善",
  "龙",
  "演",
  "父",
  "渐",
  "血",
  "欢",
  "械",
  "掌",
  "歌",
  "沙",
  "刚",
  "攻",
  "谓",
  "盾",
  "讨",
  "晚",
  "粒",
  "乱",
  "燃",
  "矛",
  "乎",
  "杀",
  "药",
  "宁",
  "鲁",
  "贵",
  "钟",
  "煤",
  "读",
  "班",
  "伯",
  "香",
  "介",
  "迫",
  "句",
  "丰",
  "培",
  "握",
  "兰",
  "担",
  "弦",
  "蛋",
  "沉",
  "假",
  "穿",
  "执",
  "答",
  "乐",
  "谁",
  "顺",
  "烟",
  "缩",
  "征",
  "脸",
  "喜",
  "松",
  "脚",
  "困",
  "异",
  "免",
  "背",
  "星",
  "福",
  "买",
  "染",
  "井",
  "概",
  "慢",
  "怕",
  "磁",
  "倍",
  "祖",
  "皇",
  "促",
  "静",
  "补",
  "评",
  "翻",
  "肉",
  "践",
  "尼",
  "衣",
  "宽",
  "扬",
  "棉",
  "希",
  "伤",
  "操",
  "垂",
  "秋",
  "宜",
  "氢",
  "套",
  "督",
  "振",
  "架",
  "亮",
  "末",
  "宪",
  "庆",
  "编",
  "牛",
  "触",
  "映",
  "雷",
  "销",
  "诗",
  "座",
  "居",
  "抓",
  "裂",
  "胞",
  "呼",
  "娘",
  "景",
  "威",
  "绿",
  "晶",
  "厚",
  "盟",
  "衡",
  "鸡",
  "孙",
  "延",
  "危",
  "胶",
  "屋",
  "乡",
  "临",
  "陆",
  "顾",
  "掉",
  "呀",
  "灯",
  "岁",
  "措",
  "束",
  "耐",
  "剧",
  "玉",
  "赵",
  "跳",
  "哥",
  "季",
  "课",
  "凯",
  "胡",
  "额",
  "款",
  "绍",
  "卷",
  "齐",
  "伟",
  "蒸",
  "殖",
  "永",
  "宗",
  "苗",
  "川",
  "炉",
  "岩",
  "弱",
  "零",
  "杨",
  "奏",
  "沿",
  "露",
  "杆",
  "探",
  "滑",
  "镇",
  "饭",
  "浓",
  "航",
  "怀",
  "赶",
  "库",
  "夺",
  "伊",
  "灵",
  "税",
  "途",
  "灭",
  "赛",
  "归",
  "召",
  "鼓",
  "播",
  "盘",
  "裁",
  "险",
  "康",
  "唯",
  "录",
  "菌",
  "纯",
  "借",
  "糖",
  "盖",
  "横",
  "符",
  "私",
  "努",
  "堂",
  "域",
  "枪",
  "润",
  "幅",
  "哈",
  "竟",
  "熟",
  "虫",
  "泽",
  "脑",
  "壤",
  "碳",
  "欧",
  "遍",
  "侧",
  "寨",
  "敢",
  "彻",
  "虑",
  "斜",
  "薄",
  "庭",
  "纳",
  "弹",
  "饲",
  "伸",
  "折",
  "麦",
  "湿",
  "暗",
  "荷",
  "瓦",
  "塞",
  "床",
  "筑",
  "恶",
  "户",
  "访",
  "塔",
  "奇",
  "透",
  "梁",
  "刀",
  "旋",
  "迹",
  "卡",
  "氯",
  "遇",
  "份",
  "毒",
  "泥",
  "退",
  "洗",
  "摆",
  "灰",
  "彩",
  "卖",
  "耗",
  "夏",
  "择",
  "忙",
  "铜",
  "献",
  "硬",
  "予",
  "繁",
  "圈",
  "雪",
  "函",
  "亦",
  "抽",
  "篇",
  "阵",
  "阴",
  "丁",
  "尺",
  "追",
  "堆",
  "雄",
  "迎",
  "泛",
  "爸",
  "楼",
  "避",
  "谋",
  "吨",
  "野",
  "猪",
  "旗",
  "累",
  "偏",
  "典",
  "馆",
  "索",
  "秦",
  "脂",
  "潮",
  "爷",
  "豆",
  "忽",
  "托",
  "惊",
  "塑",
  "遗",
  "愈",
  "朱",
  "替",
  "纤",
  "粗",
  "倾",
  "尚",
  "痛",
  "楚",
  "谢",
  "奋",
  "购",
  "磨",
  "君",
  "池",
  "旁",
  "碎",
  "骨",
  "监",
  "捕",
  "弟",
  "暴",
  "割",
  "贯",
  "殊",
  "释",
  "词",
  "亡",
  "壁",
  "顿",
  "宝",
  "午",
  "尘",
  "闻",
  "揭",
  "炮",
  "残",
  "冬",
  "桥",
  "妇",
  "警",
  "综",
  "招",
  "吴",
  "付",
  "浮",
  "遭",
  "徐",
  "您",
  "摇",
  "谷",
  "赞",
  "箱",
  "隔",
  "订",
  "男",
  "吹",
  "园",
  "纷",
  "唐",
  "败",
  "宋",
  "玻",
  "巨",
  "耕",
  "坦",
  "荣",
  "闭",
  "湾",
  "键",
  "凡",
  "驻",
  "锅",
  "救",
  "恩",
  "剥",
  "凝",
  "碱",
  "齿",
  "截",
  "炼",
  "麻",
  "纺",
  "禁",
  "废",
  "盛",
  "版",
  "缓",
  "净",
  "睛",
  "昌",
  "婚",
  "涉",
  "筒",
  "嘴",
  "插",
  "岸",
  "朗",
  "庄",
  "街",
  "藏",
  "姑",
  "贸",
  "腐",
  "奴",
  "啦",
  "惯",
  "乘",
  "伙",
  "恢",
  "匀",
  "纱",
  "扎",
  "辩",
  "耳",
  "彪",
  "臣",
  "亿",
  "璃",
  "抵",
  "脉",
  "秀",
  "萨",
  "俄",
  "网",
  "舞",
  "店",
  "喷",
  "纵",
  "寸",
  "汗",
  "挂",
  "洪",
  "贺",
  "闪",
  "柬",
  "爆",
  "烯",
  "津",
  "稻",
  "墙",
  "软",
  "勇",
  "像",
  "滚",
  "厘",
  "蒙",
  "芳",
  "肯",
  "坡",
  "柱",
  "荡",
  "腿",
  "仪",
  "旅",
  "尾",
  "轧",
  "冰",
  "贡",
  "登",
  "黎",
  "削",
  "钻",
  "勒",
  "逃",
  "障",
  "氨",
  "郭",
  "峰",
  "币",
  "港",
  "伏",
  "轨",
  "亩",
  "毕",
  "擦",
  "莫",
  "刺",
  "浪",
  "秘",
  "援",
  "株",
  "健",
  "售",
  "股",
  "岛",
  "甘",
  "泡",
  "睡",
  "童",
  "铸",
  "汤",
  "阀",
  "休",
  "汇",
  "舍",
  "牧",
  "绕",
  "炸",
  "哲",
  "磷",
  "绩",
  "朋",
  "淡",
  "尖",
  "启",
  "陷",
  "柴",
  "呈",
  "徒",
  "颜",
  "泪",
  "稍",
  "忘",
  "泵",
  "蓝",
  "拖",
  "洞",
  "授",
  "镜",
  "辛",
  "壮",
  "锋",
  "贫",
  "虚",
  "弯",
  "摩",
  "泰",
  "幼",
  "廷",
  "尊",
  "窗",
  "纲",
  "弄",
  "隶",
  "疑",
  "氏",
  "宫",
  "姐",
  "震",
  "瑞",
  "怪",
  "尤",
  "琴",
  "循",
  "描",
  "膜",
  "违",
  "夹",
  "腰",
  "缘",
  "珠",
  "穷",
  "森",
  "枝",
  "竹",
  "沟",
  "催",
  "绳",
  "忆",
  "邦",
  "剩",
  "幸",
  "浆",
  "栏",
  "拥",
  "牙",
  "贮",
  "礼",
  "滤",
  "钠",
  "纹",
  "罢",
  "拍",
  "咱",
  "喊",
  "袖",
  "埃",
  "勤",
  "罚",
  "焦",
  "潜",
  "伍",
  "墨",
  "欲",
  "缝",
  "姓",
  "刊",
  "饱",
  "仿",
  "奖",
  "铝",
  "鬼",
  "丽",
  "跨",
  "默",
  "挖",
  "链",
  "扫",
  "喝",
  "袋",
  "炭",
  "污",
  "幕",
  "诸",
  "弧",
  "励",
  "梅",
  "奶",
  "洁",
  "灾",
  "舟",
  "鉴",
  "苯",
  "讼",
  "抱",
  "毁",
  "懂",
  "寒",
  "智",
  "埔",
  "寄",
  "届",
  "跃",
  "渡",
  "挑",
  "丹",
  "艰",
  "贝",
  "碰",
  "拔",
  "爹",
  "戴",
  "码",
  "梦",
  "芽",
  "熔",
  "赤",
  "渔",
  "哭",
  "敬",
  "颗",
  "奔",
  "铅",
  "仲",
  "虎",
  "稀",
  "妹",
  "乏",
  "珍",
  "申",
  "桌",
  "遵",
  "允",
  "隆",
  "螺",
  "仓",
  "魏",
  "锐",
  "晓",
  "氮",
  "兼",
  "隐",
  "碍",
  "赫",
  "拨",
  "忠",
  "肃",
  "缸",
  "牵",
  "抢",
  "博",
  "巧",
  "壳",
  "兄",
  "杜",
  "讯",
  "诚",
  "碧",
  "祥",
  "柯",
  "页",
  "巡",
  "矩",
  "悲",
  "灌",
  "龄",
  "伦",
  "票",
  "寻",
  "桂",
  "铺",
  "圣",
  "恐",
  "恰",
  "郑",
  "趣",
  "抬",
  "荒",
  "腾",
  "贴",
  "柔",
  "滴",
  "猛",
  "阔",
  "辆",
  "妻",
  "填",
  "撤",
  "储",
  "签",
  "闹",
  "扰",
  "紫",
  "砂",
  "递",
  "戏",
  "吊",
  "陶",
  "伐",
  "喂",
  "疗",
  "瓶",
  "婆",
  "抚",
  "臂",
  "摸",
  "忍",
  "虾",
  "蜡",
  "邻",
  "胸",
  "巩",
  "挤",
  "偶",
  "弃",
  "槽",
  "劲",
  "乳",
  "邓",
  "吉",
  "仁",
  "烂",
  "砖",
  "租",
  "乌",
  "舰",
  "伴",
  "瓜",
  "浅",
  "丙",
  "暂",
  "燥",
  "橡",
  "柳",
  "迷",
  "暖",
  "牌",
  "秧",
  "胆",
  "详",
  "簧",
  "踏",
  "瓷",
  "谱",
  "呆",
  "宾",
  "糊",
  "洛",
  "辉",
  "愤",
  "竞",
  "隙",
  "怒",
  "粘",
  "乃",
  "绪",
  "肩",
  "籍",
  "敏",
  "涂",
  "熙",
  "皆",
  "侦",
  "悬",
  "掘",
  "享",
  "纠",
  "醒",
  "狂",
  "锁",
  "淀",
  "恨",
  "牲",
  "霸",
  "爬",
  "赏",
  "逆",
  "玩",
  "陵",
  "祝",
  "秒",
  "浙",
  "貌",
  "役",
  "彼",
  "悉",
  "鸭",
  "趋",
  "凤",
  "晨",
  "畜",
  "辈",
  "秩",
  "卵",
  "署",
  "梯",
  "炎",
  "滩",
  "棋",
  "驱",
  "筛",
  "峡",
  "冒",
  "啥",
  "寿",
  "译",
  "浸",
  "泉",
  "帽",
  "迟",
  "硅",
  "疆",
  "贷",
  "漏",
  "稿",
  "冠",
  "嫩",
  "胁",
  "芯",
  "牢",
  "叛",
  "蚀",
  "奥",
  "鸣",
  "岭",
  "羊",
  "凭",
  "串",
  "塘",
  "绘",
  "酵",
  "融",
  "盆",
  "锡",
  "庙",
  "筹",
  "冻",
  "辅",
  "摄",
  "袭",
  "筋",
  "拒",
  "僚",
  "旱",
  "钾",
  "鸟",
  "漆",
  "沈",
  "眉",
  "疏",
  "添",
  "棒",
  "穗",
  "硝",
  "韩",
  "逼",
  "扭",
  "侨",
  "凉",
  "挺",
  "碗",
  "栽",
  "炒",
  "杯",
  "患",
  "馏",
  "劝",
  "豪",
  "辽",
  "勃",
  "鸿",
  "旦",
  "吏",
  "拜",
  "狗",
  "埋",
  "辊",
  "掩",
  "饮",
  "搬",
  "骂",
  "辞",
  "勾",
  "扣",
  "估",
  "蒋",
  "绒",
  "雾",
  "丈",
  "朵",
  "姆",
  "拟",
  "宇",
  "辑",
  "陕",
  "雕",
  "偿",
  "蓄",
  "崇",
  "剪",
  "倡",
  "厅",
  "咬",
  "驶",
  "薯",
  "刷",
  "斥",
  "番",
  "赋",
  "奉",
  "佛",
  "浇",
  "漫",
  "曼",
  "扇",
  "钙",
  "桃",
  "扶",
  "仔",
  "返",
  "俗",
  "亏",
  "腔",
  "鞋",
  "棱",
  "覆",
  "框",
  "悄",
  "叔",
  "撞",
  "骗",
  "勘",
  "旺",
  "沸",
  "孤",
  "吐",
  "孟",
  "渠",
  "屈",
  "疾",
  "妙",
  "惜",
  "仰",
  "狠",
  "胀",
  "谐",
  "抛",
  "霉",
  "桑",
  "岗",
  "嘛",
  "衰",
  "盗",
  "渗",
  "脏",
  "赖",
  "涌",
  "甜",
  "曹",
  "阅",
  "肌",
  "哩",
  "厉",
  "烃",
  "纬",
  "毅",
  "昨",
  "伪",
  "症",
  "煮",
  "叹",
  "钉",
  "搭",
  "茎",
  "笼",
  "酷",
  "偷",
  "弓",
  "锥",
  "恒",
  "杰",
  "坑",
  "鼻",
  "翼",
  "纶",
  "叙",
  "狱",
  "逮",
  "罐",
  "络",
  "棚",
  "抑",
  "膨",
  "蔬",
  "寺",
  "骤",
  "穆",
  "冶",
  "枯",
  "册",
  "尸",
  "凸",
  "绅",
  "坯",
  "牺",
  "焰",
  "轰",
  "欣",
  "晋",
  "瘦",
  "御",
  "锭",
  "锦",
  "丧",
  "旬",
  "锻",
  "垄",
  "搜",
  "扑",
  "邀",
  "亭",
  "酯",
  "迈",
  "舒",
  "脆",
  "酶",
  "闲",
  "忧",
  "酚",
  "顽",
  "羽",
  "涨",
  "卸",
  "仗",
  "陪",
  "辟",
  "惩",
  "杭",
  "姚",
  "肚",
  "捉",
  "飘",
  "漂",
  "昆",
  "欺",
  "吾",
  "郎",
  "烷",
  "汁",
  "呵",
  "饰",
  "萧",
  "雅",
  "邮",
  "迁",
  "燕",
  "撒",
  "姻",
  "赴",
  "宴",
  "烦",
  "债",
  "帐",
  "斑",
  "铃",
  "旨",
  "醇",
  "董",
  "饼",
  "雏",
  "姿",
  "拌",
  "傅",
  "腹",
  "妥",
  "揉",
  "贤",
  "拆",
  "歪",
  "葡",
  "胺",
  "丢",
  "浩",
  "徽",
  "昂",
  "垫",
  "挡",
  "览",
  "贪",
  "慰",
  "缴",
  "汪",
  "慌",
  "冯",
  "诺",
  "姜",
  "谊",
  "凶",
  "劣",
  "诬",
  "耀",
  "昏",
  "躺",
  "盈",
  "骑",
  "乔",
  "溪",
  "丛",
  "卢",
  "抹",
  "闷",
  "咨",
  "刮",
  "驾",
  "缆",
  "悟",
  "摘",
  "铒",
  "掷",
  "颇",
  "幻",
  "柄",
  "惠",
  "惨",
  "佳",
  "仇",
  "腊",
  "窝",
  "涤",
  "剑",
  "瞧",
  "堡",
  "泼",
  "葱",
  "罩",
  "霍",
  "捞",
  "胎",
  "苍",
  "滨",
  "俩",
  "捅",
  "湘",
  "砍",
  "霞",
  "邵",
  "萄",
  "疯",
  "淮",
  "遂",
  "熊",
  "粪",
  "烘",
  "宿",
  "档",
  "戈",
  "驳",
  "嫂",
  "裕",
  "徙",
  "箭",
  "捐",
  "肠",
  "撑",
  "晒",
  "辨",
  "殿",
  "莲",
  "摊",
  "搅",
  "酱",
  "屏",
  "疫",
  "哀",
  "蔡",
  "堵",
  "沫",
  "皱",
  "畅",
  "叠",
  "阁",
  "莱",
  "敲",
  "辖",
  "钩",
  "痕",
  "坝",
  "巷",
  "饿",
  "祸",
  "丘",
  "玄",
  "溜",
  "曰",
  "逻",
  "彭",
  "尝",
  "卿",
  "妨",
  "艇",
  "吞",
  "韦",
  "怨",
  "矮",
  "歇"
], TN = [
  "的",
  "一",
  "是",
  "在",
  "不",
  "了",
  "有",
  "和",
  "人",
  "這",
  "中",
  "大",
  "為",
  "上",
  "個",
  "國",
  "我",
  "以",
  "要",
  "他",
  "時",
  "來",
  "用",
  "們",
  "生",
  "到",
  "作",
  "地",
  "於",
  "出",
  "就",
  "分",
  "對",
  "成",
  "會",
  "可",
  "主",
  "發",
  "年",
  "動",
  "同",
  "工",
  "也",
  "能",
  "下",
  "過",
  "子",
  "說",
  "產",
  "種",
  "面",
  "而",
  "方",
  "後",
  "多",
  "定",
  "行",
  "學",
  "法",
  "所",
  "民",
  "得",
  "經",
  "十",
  "三",
  "之",
  "進",
  "著",
  "等",
  "部",
  "度",
  "家",
  "電",
  "力",
  "裡",
  "如",
  "水",
  "化",
  "高",
  "自",
  "二",
  "理",
  "起",
  "小",
  "物",
  "現",
  "實",
  "加",
  "量",
  "都",
  "兩",
  "體",
  "制",
  "機",
  "當",
  "使",
  "點",
  "從",
  "業",
  "本",
  "去",
  "把",
  "性",
  "好",
  "應",
  "開",
  "它",
  "合",
  "還",
  "因",
  "由",
  "其",
  "些",
  "然",
  "前",
  "外",
  "天",
  "政",
  "四",
  "日",
  "那",
  "社",
  "義",
  "事",
  "平",
  "形",
  "相",
  "全",
  "表",
  "間",
  "樣",
  "與",
  "關",
  "各",
  "重",
  "新",
  "線",
  "內",
  "數",
  "正",
  "心",
  "反",
  "你",
  "明",
  "看",
  "原",
  "又",
  "麼",
  "利",
  "比",
  "或",
  "但",
  "質",
  "氣",
  "第",
  "向",
  "道",
  "命",
  "此",
  "變",
  "條",
  "只",
  "沒",
  "結",
  "解",
  "問",
  "意",
  "建",
  "月",
  "公",
  "無",
  "系",
  "軍",
  "很",
  "情",
  "者",
  "最",
  "立",
  "代",
  "想",
  "已",
  "通",
  "並",
  "提",
  "直",
  "題",
  "黨",
  "程",
  "展",
  "五",
  "果",
  "料",
  "象",
  "員",
  "革",
  "位",
  "入",
  "常",
  "文",
  "總",
  "次",
  "品",
  "式",
  "活",
  "設",
  "及",
  "管",
  "特",
  "件",
  "長",
  "求",
  "老",
  "頭",
  "基",
  "資",
  "邊",
  "流",
  "路",
  "級",
  "少",
  "圖",
  "山",
  "統",
  "接",
  "知",
  "較",
  "將",
  "組",
  "見",
  "計",
  "別",
  "她",
  "手",
  "角",
  "期",
  "根",
  "論",
  "運",
  "農",
  "指",
  "幾",
  "九",
  "區",
  "強",
  "放",
  "決",
  "西",
  "被",
  "幹",
  "做",
  "必",
  "戰",
  "先",
  "回",
  "則",
  "任",
  "取",
  "據",
  "處",
  "隊",
  "南",
  "給",
  "色",
  "光",
  "門",
  "即",
  "保",
  "治",
  "北",
  "造",
  "百",
  "規",
  "熱",
  "領",
  "七",
  "海",
  "口",
  "東",
  "導",
  "器",
  "壓",
  "志",
  "世",
  "金",
  "增",
  "爭",
  "濟",
  "階",
  "油",
  "思",
  "術",
  "極",
  "交",
  "受",
  "聯",
  "什",
  "認",
  "六",
  "共",
  "權",
  "收",
  "證",
  "改",
  "清",
  "美",
  "再",
  "採",
  "轉",
  "更",
  "單",
  "風",
  "切",
  "打",
  "白",
  "教",
  "速",
  "花",
  "帶",
  "安",
  "場",
  "身",
  "車",
  "例",
  "真",
  "務",
  "具",
  "萬",
  "每",
  "目",
  "至",
  "達",
  "走",
  "積",
  "示",
  "議",
  "聲",
  "報",
  "鬥",
  "完",
  "類",
  "八",
  "離",
  "華",
  "名",
  "確",
  "才",
  "科",
  "張",
  "信",
  "馬",
  "節",
  "話",
  "米",
  "整",
  "空",
  "元",
  "況",
  "今",
  "集",
  "溫",
  "傳",
  "土",
  "許",
  "步",
  "群",
  "廣",
  "石",
  "記",
  "需",
  "段",
  "研",
  "界",
  "拉",
  "林",
  "律",
  "叫",
  "且",
  "究",
  "觀",
  "越",
  "織",
  "裝",
  "影",
  "算",
  "低",
  "持",
  "音",
  "眾",
  "書",
  "布",
  "复",
  "容",
  "兒",
  "須",
  "際",
  "商",
  "非",
  "驗",
  "連",
  "斷",
  "深",
  "難",
  "近",
  "礦",
  "千",
  "週",
  "委",
  "素",
  "技",
  "備",
  "半",
  "辦",
  "青",
  "省",
  "列",
  "習",
  "響",
  "約",
  "支",
  "般",
  "史",
  "感",
  "勞",
  "便",
  "團",
  "往",
  "酸",
  "歷",
  "市",
  "克",
  "何",
  "除",
  "消",
  "構",
  "府",
  "稱",
  "太",
  "準",
  "精",
  "值",
  "號",
  "率",
  "族",
  "維",
  "劃",
  "選",
  "標",
  "寫",
  "存",
  "候",
  "毛",
  "親",
  "快",
  "效",
  "斯",
  "院",
  "查",
  "江",
  "型",
  "眼",
  "王",
  "按",
  "格",
  "養",
  "易",
  "置",
  "派",
  "層",
  "片",
  "始",
  "卻",
  "專",
  "狀",
  "育",
  "廠",
  "京",
  "識",
  "適",
  "屬",
  "圓",
  "包",
  "火",
  "住",
  "調",
  "滿",
  "縣",
  "局",
  "照",
  "參",
  "紅",
  "細",
  "引",
  "聽",
  "該",
  "鐵",
  "價",
  "嚴",
  "首",
  "底",
  "液",
  "官",
  "德",
  "隨",
  "病",
  "蘇",
  "失",
  "爾",
  "死",
  "講",
  "配",
  "女",
  "黃",
  "推",
  "顯",
  "談",
  "罪",
  "神",
  "藝",
  "呢",
  "席",
  "含",
  "企",
  "望",
  "密",
  "批",
  "營",
  "項",
  "防",
  "舉",
  "球",
  "英",
  "氧",
  "勢",
  "告",
  "李",
  "台",
  "落",
  "木",
  "幫",
  "輪",
  "破",
  "亞",
  "師",
  "圍",
  "注",
  "遠",
  "字",
  "材",
  "排",
  "供",
  "河",
  "態",
  "封",
  "另",
  "施",
  "減",
  "樹",
  "溶",
  "怎",
  "止",
  "案",
  "言",
  "士",
  "均",
  "武",
  "固",
  "葉",
  "魚",
  "波",
  "視",
  "僅",
  "費",
  "緊",
  "愛",
  "左",
  "章",
  "早",
  "朝",
  "害",
  "續",
  "輕",
  "服",
  "試",
  "食",
  "充",
  "兵",
  "源",
  "判",
  "護",
  "司",
  "足",
  "某",
  "練",
  "差",
  "致",
  "板",
  "田",
  "降",
  "黑",
  "犯",
  "負",
  "擊",
  "范",
  "繼",
  "興",
  "似",
  "餘",
  "堅",
  "曲",
  "輸",
  "修",
  "故",
  "城",
  "夫",
  "夠",
  "送",
  "筆",
  "船",
  "佔",
  "右",
  "財",
  "吃",
  "富",
  "春",
  "職",
  "覺",
  "漢",
  "畫",
  "功",
  "巴",
  "跟",
  "雖",
  "雜",
  "飛",
  "檢",
  "吸",
  "助",
  "昇",
  "陽",
  "互",
  "初",
  "創",
  "抗",
  "考",
  "投",
  "壞",
  "策",
  "古",
  "徑",
  "換",
  "未",
  "跑",
  "留",
  "鋼",
  "曾",
  "端",
  "責",
  "站",
  "簡",
  "述",
  "錢",
  "副",
  "盡",
  "帝",
  "射",
  "草",
  "衝",
  "承",
  "獨",
  "令",
  "限",
  "阿",
  "宣",
  "環",
  "雙",
  "請",
  "超",
  "微",
  "讓",
  "控",
  "州",
  "良",
  "軸",
  "找",
  "否",
  "紀",
  "益",
  "依",
  "優",
  "頂",
  "礎",
  "載",
  "倒",
  "房",
  "突",
  "坐",
  "粉",
  "敵",
  "略",
  "客",
  "袁",
  "冷",
  "勝",
  "絕",
  "析",
  "塊",
  "劑",
  "測",
  "絲",
  "協",
  "訴",
  "念",
  "陳",
  "仍",
  "羅",
  "鹽",
  "友",
  "洋",
  "錯",
  "苦",
  "夜",
  "刑",
  "移",
  "頻",
  "逐",
  "靠",
  "混",
  "母",
  "短",
  "皮",
  "終",
  "聚",
  "汽",
  "村",
  "雲",
  "哪",
  "既",
  "距",
  "衛",
  "停",
  "烈",
  "央",
  "察",
  "燒",
  "迅",
  "境",
  "若",
  "印",
  "洲",
  "刻",
  "括",
  "激",
  "孔",
  "搞",
  "甚",
  "室",
  "待",
  "核",
  "校",
  "散",
  "侵",
  "吧",
  "甲",
  "遊",
  "久",
  "菜",
  "味",
  "舊",
  "模",
  "湖",
  "貨",
  "損",
  "預",
  "阻",
  "毫",
  "普",
  "穩",
  "乙",
  "媽",
  "植",
  "息",
  "擴",
  "銀",
  "語",
  "揮",
  "酒",
  "守",
  "拿",
  "序",
  "紙",
  "醫",
  "缺",
  "雨",
  "嗎",
  "針",
  "劉",
  "啊",
  "急",
  "唱",
  "誤",
  "訓",
  "願",
  "審",
  "附",
  "獲",
  "茶",
  "鮮",
  "糧",
  "斤",
  "孩",
  "脫",
  "硫",
  "肥",
  "善",
  "龍",
  "演",
  "父",
  "漸",
  "血",
  "歡",
  "械",
  "掌",
  "歌",
  "沙",
  "剛",
  "攻",
  "謂",
  "盾",
  "討",
  "晚",
  "粒",
  "亂",
  "燃",
  "矛",
  "乎",
  "殺",
  "藥",
  "寧",
  "魯",
  "貴",
  "鐘",
  "煤",
  "讀",
  "班",
  "伯",
  "香",
  "介",
  "迫",
  "句",
  "豐",
  "培",
  "握",
  "蘭",
  "擔",
  "弦",
  "蛋",
  "沉",
  "假",
  "穿",
  "執",
  "答",
  "樂",
  "誰",
  "順",
  "煙",
  "縮",
  "徵",
  "臉",
  "喜",
  "松",
  "腳",
  "困",
  "異",
  "免",
  "背",
  "星",
  "福",
  "買",
  "染",
  "井",
  "概",
  "慢",
  "怕",
  "磁",
  "倍",
  "祖",
  "皇",
  "促",
  "靜",
  "補",
  "評",
  "翻",
  "肉",
  "踐",
  "尼",
  "衣",
  "寬",
  "揚",
  "棉",
  "希",
  "傷",
  "操",
  "垂",
  "秋",
  "宜",
  "氫",
  "套",
  "督",
  "振",
  "架",
  "亮",
  "末",
  "憲",
  "慶",
  "編",
  "牛",
  "觸",
  "映",
  "雷",
  "銷",
  "詩",
  "座",
  "居",
  "抓",
  "裂",
  "胞",
  "呼",
  "娘",
  "景",
  "威",
  "綠",
  "晶",
  "厚",
  "盟",
  "衡",
  "雞",
  "孫",
  "延",
  "危",
  "膠",
  "屋",
  "鄉",
  "臨",
  "陸",
  "顧",
  "掉",
  "呀",
  "燈",
  "歲",
  "措",
  "束",
  "耐",
  "劇",
  "玉",
  "趙",
  "跳",
  "哥",
  "季",
  "課",
  "凱",
  "胡",
  "額",
  "款",
  "紹",
  "卷",
  "齊",
  "偉",
  "蒸",
  "殖",
  "永",
  "宗",
  "苗",
  "川",
  "爐",
  "岩",
  "弱",
  "零",
  "楊",
  "奏",
  "沿",
  "露",
  "桿",
  "探",
  "滑",
  "鎮",
  "飯",
  "濃",
  "航",
  "懷",
  "趕",
  "庫",
  "奪",
  "伊",
  "靈",
  "稅",
  "途",
  "滅",
  "賽",
  "歸",
  "召",
  "鼓",
  "播",
  "盤",
  "裁",
  "險",
  "康",
  "唯",
  "錄",
  "菌",
  "純",
  "借",
  "糖",
  "蓋",
  "橫",
  "符",
  "私",
  "努",
  "堂",
  "域",
  "槍",
  "潤",
  "幅",
  "哈",
  "竟",
  "熟",
  "蟲",
  "澤",
  "腦",
  "壤",
  "碳",
  "歐",
  "遍",
  "側",
  "寨",
  "敢",
  "徹",
  "慮",
  "斜",
  "薄",
  "庭",
  "納",
  "彈",
  "飼",
  "伸",
  "折",
  "麥",
  "濕",
  "暗",
  "荷",
  "瓦",
  "塞",
  "床",
  "築",
  "惡",
  "戶",
  "訪",
  "塔",
  "奇",
  "透",
  "梁",
  "刀",
  "旋",
  "跡",
  "卡",
  "氯",
  "遇",
  "份",
  "毒",
  "泥",
  "退",
  "洗",
  "擺",
  "灰",
  "彩",
  "賣",
  "耗",
  "夏",
  "擇",
  "忙",
  "銅",
  "獻",
  "硬",
  "予",
  "繁",
  "圈",
  "雪",
  "函",
  "亦",
  "抽",
  "篇",
  "陣",
  "陰",
  "丁",
  "尺",
  "追",
  "堆",
  "雄",
  "迎",
  "泛",
  "爸",
  "樓",
  "避",
  "謀",
  "噸",
  "野",
  "豬",
  "旗",
  "累",
  "偏",
  "典",
  "館",
  "索",
  "秦",
  "脂",
  "潮",
  "爺",
  "豆",
  "忽",
  "托",
  "驚",
  "塑",
  "遺",
  "愈",
  "朱",
  "替",
  "纖",
  "粗",
  "傾",
  "尚",
  "痛",
  "楚",
  "謝",
  "奮",
  "購",
  "磨",
  "君",
  "池",
  "旁",
  "碎",
  "骨",
  "監",
  "捕",
  "弟",
  "暴",
  "割",
  "貫",
  "殊",
  "釋",
  "詞",
  "亡",
  "壁",
  "頓",
  "寶",
  "午",
  "塵",
  "聞",
  "揭",
  "炮",
  "殘",
  "冬",
  "橋",
  "婦",
  "警",
  "綜",
  "招",
  "吳",
  "付",
  "浮",
  "遭",
  "徐",
  "您",
  "搖",
  "谷",
  "贊",
  "箱",
  "隔",
  "訂",
  "男",
  "吹",
  "園",
  "紛",
  "唐",
  "敗",
  "宋",
  "玻",
  "巨",
  "耕",
  "坦",
  "榮",
  "閉",
  "灣",
  "鍵",
  "凡",
  "駐",
  "鍋",
  "救",
  "恩",
  "剝",
  "凝",
  "鹼",
  "齒",
  "截",
  "煉",
  "麻",
  "紡",
  "禁",
  "廢",
  "盛",
  "版",
  "緩",
  "淨",
  "睛",
  "昌",
  "婚",
  "涉",
  "筒",
  "嘴",
  "插",
  "岸",
  "朗",
  "莊",
  "街",
  "藏",
  "姑",
  "貿",
  "腐",
  "奴",
  "啦",
  "慣",
  "乘",
  "夥",
  "恢",
  "勻",
  "紗",
  "扎",
  "辯",
  "耳",
  "彪",
  "臣",
  "億",
  "璃",
  "抵",
  "脈",
  "秀",
  "薩",
  "俄",
  "網",
  "舞",
  "店",
  "噴",
  "縱",
  "寸",
  "汗",
  "掛",
  "洪",
  "賀",
  "閃",
  "柬",
  "爆",
  "烯",
  "津",
  "稻",
  "牆",
  "軟",
  "勇",
  "像",
  "滾",
  "厘",
  "蒙",
  "芳",
  "肯",
  "坡",
  "柱",
  "盪",
  "腿",
  "儀",
  "旅",
  "尾",
  "軋",
  "冰",
  "貢",
  "登",
  "黎",
  "削",
  "鑽",
  "勒",
  "逃",
  "障",
  "氨",
  "郭",
  "峰",
  "幣",
  "港",
  "伏",
  "軌",
  "畝",
  "畢",
  "擦",
  "莫",
  "刺",
  "浪",
  "秘",
  "援",
  "株",
  "健",
  "售",
  "股",
  "島",
  "甘",
  "泡",
  "睡",
  "童",
  "鑄",
  "湯",
  "閥",
  "休",
  "匯",
  "舍",
  "牧",
  "繞",
  "炸",
  "哲",
  "磷",
  "績",
  "朋",
  "淡",
  "尖",
  "啟",
  "陷",
  "柴",
  "呈",
  "徒",
  "顏",
  "淚",
  "稍",
  "忘",
  "泵",
  "藍",
  "拖",
  "洞",
  "授",
  "鏡",
  "辛",
  "壯",
  "鋒",
  "貧",
  "虛",
  "彎",
  "摩",
  "泰",
  "幼",
  "廷",
  "尊",
  "窗",
  "綱",
  "弄",
  "隸",
  "疑",
  "氏",
  "宮",
  "姐",
  "震",
  "瑞",
  "怪",
  "尤",
  "琴",
  "循",
  "描",
  "膜",
  "違",
  "夾",
  "腰",
  "緣",
  "珠",
  "窮",
  "森",
  "枝",
  "竹",
  "溝",
  "催",
  "繩",
  "憶",
  "邦",
  "剩",
  "幸",
  "漿",
  "欄",
  "擁",
  "牙",
  "貯",
  "禮",
  "濾",
  "鈉",
  "紋",
  "罷",
  "拍",
  "咱",
  "喊",
  "袖",
  "埃",
  "勤",
  "罰",
  "焦",
  "潛",
  "伍",
  "墨",
  "欲",
  "縫",
  "姓",
  "刊",
  "飽",
  "仿",
  "獎",
  "鋁",
  "鬼",
  "麗",
  "跨",
  "默",
  "挖",
  "鏈",
  "掃",
  "喝",
  "袋",
  "炭",
  "污",
  "幕",
  "諸",
  "弧",
  "勵",
  "梅",
  "奶",
  "潔",
  "災",
  "舟",
  "鑑",
  "苯",
  "訟",
  "抱",
  "毀",
  "懂",
  "寒",
  "智",
  "埔",
  "寄",
  "屆",
  "躍",
  "渡",
  "挑",
  "丹",
  "艱",
  "貝",
  "碰",
  "拔",
  "爹",
  "戴",
  "碼",
  "夢",
  "芽",
  "熔",
  "赤",
  "漁",
  "哭",
  "敬",
  "顆",
  "奔",
  "鉛",
  "仲",
  "虎",
  "稀",
  "妹",
  "乏",
  "珍",
  "申",
  "桌",
  "遵",
  "允",
  "隆",
  "螺",
  "倉",
  "魏",
  "銳",
  "曉",
  "氮",
  "兼",
  "隱",
  "礙",
  "赫",
  "撥",
  "忠",
  "肅",
  "缸",
  "牽",
  "搶",
  "博",
  "巧",
  "殼",
  "兄",
  "杜",
  "訊",
  "誠",
  "碧",
  "祥",
  "柯",
  "頁",
  "巡",
  "矩",
  "悲",
  "灌",
  "齡",
  "倫",
  "票",
  "尋",
  "桂",
  "鋪",
  "聖",
  "恐",
  "恰",
  "鄭",
  "趣",
  "抬",
  "荒",
  "騰",
  "貼",
  "柔",
  "滴",
  "猛",
  "闊",
  "輛",
  "妻",
  "填",
  "撤",
  "儲",
  "簽",
  "鬧",
  "擾",
  "紫",
  "砂",
  "遞",
  "戲",
  "吊",
  "陶",
  "伐",
  "餵",
  "療",
  "瓶",
  "婆",
  "撫",
  "臂",
  "摸",
  "忍",
  "蝦",
  "蠟",
  "鄰",
  "胸",
  "鞏",
  "擠",
  "偶",
  "棄",
  "槽",
  "勁",
  "乳",
  "鄧",
  "吉",
  "仁",
  "爛",
  "磚",
  "租",
  "烏",
  "艦",
  "伴",
  "瓜",
  "淺",
  "丙",
  "暫",
  "燥",
  "橡",
  "柳",
  "迷",
  "暖",
  "牌",
  "秧",
  "膽",
  "詳",
  "簧",
  "踏",
  "瓷",
  "譜",
  "呆",
  "賓",
  "糊",
  "洛",
  "輝",
  "憤",
  "競",
  "隙",
  "怒",
  "粘",
  "乃",
  "緒",
  "肩",
  "籍",
  "敏",
  "塗",
  "熙",
  "皆",
  "偵",
  "懸",
  "掘",
  "享",
  "糾",
  "醒",
  "狂",
  "鎖",
  "淀",
  "恨",
  "牲",
  "霸",
  "爬",
  "賞",
  "逆",
  "玩",
  "陵",
  "祝",
  "秒",
  "浙",
  "貌",
  "役",
  "彼",
  "悉",
  "鴨",
  "趨",
  "鳳",
  "晨",
  "畜",
  "輩",
  "秩",
  "卵",
  "署",
  "梯",
  "炎",
  "灘",
  "棋",
  "驅",
  "篩",
  "峽",
  "冒",
  "啥",
  "壽",
  "譯",
  "浸",
  "泉",
  "帽",
  "遲",
  "矽",
  "疆",
  "貸",
  "漏",
  "稿",
  "冠",
  "嫩",
  "脅",
  "芯",
  "牢",
  "叛",
  "蝕",
  "奧",
  "鳴",
  "嶺",
  "羊",
  "憑",
  "串",
  "塘",
  "繪",
  "酵",
  "融",
  "盆",
  "錫",
  "廟",
  "籌",
  "凍",
  "輔",
  "攝",
  "襲",
  "筋",
  "拒",
  "僚",
  "旱",
  "鉀",
  "鳥",
  "漆",
  "沈",
  "眉",
  "疏",
  "添",
  "棒",
  "穗",
  "硝",
  "韓",
  "逼",
  "扭",
  "僑",
  "涼",
  "挺",
  "碗",
  "栽",
  "炒",
  "杯",
  "患",
  "餾",
  "勸",
  "豪",
  "遼",
  "勃",
  "鴻",
  "旦",
  "吏",
  "拜",
  "狗",
  "埋",
  "輥",
  "掩",
  "飲",
  "搬",
  "罵",
  "辭",
  "勾",
  "扣",
  "估",
  "蔣",
  "絨",
  "霧",
  "丈",
  "朵",
  "姆",
  "擬",
  "宇",
  "輯",
  "陝",
  "雕",
  "償",
  "蓄",
  "崇",
  "剪",
  "倡",
  "廳",
  "咬",
  "駛",
  "薯",
  "刷",
  "斥",
  "番",
  "賦",
  "奉",
  "佛",
  "澆",
  "漫",
  "曼",
  "扇",
  "鈣",
  "桃",
  "扶",
  "仔",
  "返",
  "俗",
  "虧",
  "腔",
  "鞋",
  "棱",
  "覆",
  "框",
  "悄",
  "叔",
  "撞",
  "騙",
  "勘",
  "旺",
  "沸",
  "孤",
  "吐",
  "孟",
  "渠",
  "屈",
  "疾",
  "妙",
  "惜",
  "仰",
  "狠",
  "脹",
  "諧",
  "拋",
  "黴",
  "桑",
  "崗",
  "嘛",
  "衰",
  "盜",
  "滲",
  "臟",
  "賴",
  "湧",
  "甜",
  "曹",
  "閱",
  "肌",
  "哩",
  "厲",
  "烴",
  "緯",
  "毅",
  "昨",
  "偽",
  "症",
  "煮",
  "嘆",
  "釘",
  "搭",
  "莖",
  "籠",
  "酷",
  "偷",
  "弓",
  "錐",
  "恆",
  "傑",
  "坑",
  "鼻",
  "翼",
  "綸",
  "敘",
  "獄",
  "逮",
  "罐",
  "絡",
  "棚",
  "抑",
  "膨",
  "蔬",
  "寺",
  "驟",
  "穆",
  "冶",
  "枯",
  "冊",
  "屍",
  "凸",
  "紳",
  "坯",
  "犧",
  "焰",
  "轟",
  "欣",
  "晉",
  "瘦",
  "禦",
  "錠",
  "錦",
  "喪",
  "旬",
  "鍛",
  "壟",
  "搜",
  "撲",
  "邀",
  "亭",
  "酯",
  "邁",
  "舒",
  "脆",
  "酶",
  "閒",
  "憂",
  "酚",
  "頑",
  "羽",
  "漲",
  "卸",
  "仗",
  "陪",
  "闢",
  "懲",
  "杭",
  "姚",
  "肚",
  "捉",
  "飄",
  "漂",
  "昆",
  "欺",
  "吾",
  "郎",
  "烷",
  "汁",
  "呵",
  "飾",
  "蕭",
  "雅",
  "郵",
  "遷",
  "燕",
  "撒",
  "姻",
  "赴",
  "宴",
  "煩",
  "債",
  "帳",
  "斑",
  "鈴",
  "旨",
  "醇",
  "董",
  "餅",
  "雛",
  "姿",
  "拌",
  "傅",
  "腹",
  "妥",
  "揉",
  "賢",
  "拆",
  "歪",
  "葡",
  "胺",
  "丟",
  "浩",
  "徽",
  "昂",
  "墊",
  "擋",
  "覽",
  "貪",
  "慰",
  "繳",
  "汪",
  "慌",
  "馮",
  "諾",
  "姜",
  "誼",
  "兇",
  "劣",
  "誣",
  "耀",
  "昏",
  "躺",
  "盈",
  "騎",
  "喬",
  "溪",
  "叢",
  "盧",
  "抹",
  "悶",
  "諮",
  "刮",
  "駕",
  "纜",
  "悟",
  "摘",
  "鉺",
  "擲",
  "頗",
  "幻",
  "柄",
  "惠",
  "慘",
  "佳",
  "仇",
  "臘",
  "窩",
  "滌",
  "劍",
  "瞧",
  "堡",
  "潑",
  "蔥",
  "罩",
  "霍",
  "撈",
  "胎",
  "蒼",
  "濱",
  "倆",
  "捅",
  "湘",
  "砍",
  "霞",
  "邵",
  "萄",
  "瘋",
  "淮",
  "遂",
  "熊",
  "糞",
  "烘",
  "宿",
  "檔",
  "戈",
  "駁",
  "嫂",
  "裕",
  "徙",
  "箭",
  "捐",
  "腸",
  "撐",
  "曬",
  "辨",
  "殿",
  "蓮",
  "攤",
  "攪",
  "醬",
  "屏",
  "疫",
  "哀",
  "蔡",
  "堵",
  "沫",
  "皺",
  "暢",
  "疊",
  "閣",
  "萊",
  "敲",
  "轄",
  "鉤",
  "痕",
  "壩",
  "巷",
  "餓",
  "禍",
  "丘",
  "玄",
  "溜",
  "曰",
  "邏",
  "彭",
  "嘗",
  "卿",
  "妨",
  "艇",
  "吞",
  "韋",
  "怨",
  "矮",
  "歇"
], IN = [
  "가격",
  "가끔",
  "가난",
  "가능",
  "가득",
  "가르침",
  "가뭄",
  "가방",
  "가상",
  "가슴",
  "가운데",
  "가을",
  "가이드",
  "가입",
  "가장",
  "가정",
  "가족",
  "가죽",
  "각오",
  "각자",
  "간격",
  "간부",
  "간섭",
  "간장",
  "간접",
  "간판",
  "갈등",
  "갈비",
  "갈색",
  "갈증",
  "감각",
  "감기",
  "감소",
  "감수성",
  "감자",
  "감정",
  "갑자기",
  "강남",
  "강당",
  "강도",
  "강력히",
  "강변",
  "강북",
  "강사",
  "강수량",
  "강아지",
  "강원도",
  "강의",
  "강제",
  "강조",
  "같이",
  "개구리",
  "개나리",
  "개방",
  "개별",
  "개선",
  "개성",
  "개인",
  "객관적",
  "거실",
  "거액",
  "거울",
  "거짓",
  "거품",
  "걱정",
  "건강",
  "건물",
  "건설",
  "건조",
  "건축",
  "걸음",
  "검사",
  "검토",
  "게시판",
  "게임",
  "겨울",
  "견해",
  "결과",
  "결국",
  "결론",
  "결석",
  "결승",
  "결심",
  "결정",
  "결혼",
  "경계",
  "경고",
  "경기",
  "경력",
  "경복궁",
  "경비",
  "경상도",
  "경영",
  "경우",
  "경쟁",
  "경제",
  "경주",
  "경찰",
  "경치",
  "경향",
  "경험",
  "계곡",
  "계단",
  "계란",
  "계산",
  "계속",
  "계약",
  "계절",
  "계층",
  "계획",
  "고객",
  "고구려",
  "고궁",
  "고급",
  "고등학생",
  "고무신",
  "고민",
  "고양이",
  "고장",
  "고전",
  "고집",
  "고춧가루",
  "고통",
  "고향",
  "곡식",
  "골목",
  "골짜기",
  "골프",
  "공간",
  "공개",
  "공격",
  "공군",
  "공급",
  "공기",
  "공동",
  "공무원",
  "공부",
  "공사",
  "공식",
  "공업",
  "공연",
  "공원",
  "공장",
  "공짜",
  "공책",
  "공통",
  "공포",
  "공항",
  "공휴일",
  "과목",
  "과일",
  "과장",
  "과정",
  "과학",
  "관객",
  "관계",
  "관광",
  "관념",
  "관람",
  "관련",
  "관리",
  "관습",
  "관심",
  "관점",
  "관찰",
  "광경",
  "광고",
  "광장",
  "광주",
  "괴로움",
  "굉장히",
  "교과서",
  "교문",
  "교복",
  "교실",
  "교양",
  "교육",
  "교장",
  "교직",
  "교통",
  "교환",
  "교훈",
  "구경",
  "구름",
  "구멍",
  "구별",
  "구분",
  "구석",
  "구성",
  "구속",
  "구역",
  "구입",
  "구청",
  "구체적",
  "국가",
  "국기",
  "국내",
  "국립",
  "국물",
  "국민",
  "국수",
  "국어",
  "국왕",
  "국적",
  "국제",
  "국회",
  "군대",
  "군사",
  "군인",
  "궁극적",
  "권리",
  "권위",
  "권투",
  "귀국",
  "귀신",
  "규정",
  "규칙",
  "균형",
  "그날",
  "그냥",
  "그늘",
  "그러나",
  "그룹",
  "그릇",
  "그림",
  "그제서야",
  "그토록",
  "극복",
  "극히",
  "근거",
  "근교",
  "근래",
  "근로",
  "근무",
  "근본",
  "근원",
  "근육",
  "근처",
  "글씨",
  "글자",
  "금강산",
  "금고",
  "금년",
  "금메달",
  "금액",
  "금연",
  "금요일",
  "금지",
  "긍정적",
  "기간",
  "기관",
  "기념",
  "기능",
  "기독교",
  "기둥",
  "기록",
  "기름",
  "기법",
  "기본",
  "기분",
  "기쁨",
  "기숙사",
  "기술",
  "기억",
  "기업",
  "기온",
  "기운",
  "기원",
  "기적",
  "기준",
  "기침",
  "기혼",
  "기획",
  "긴급",
  "긴장",
  "길이",
  "김밥",
  "김치",
  "김포공항",
  "깍두기",
  "깜빡",
  "깨달음",
  "깨소금",
  "껍질",
  "꼭대기",
  "꽃잎",
  "나들이",
  "나란히",
  "나머지",
  "나물",
  "나침반",
  "나흘",
  "낙엽",
  "난방",
  "날개",
  "날씨",
  "날짜",
  "남녀",
  "남대문",
  "남매",
  "남산",
  "남자",
  "남편",
  "남학생",
  "낭비",
  "낱말",
  "내년",
  "내용",
  "내일",
  "냄비",
  "냄새",
  "냇물",
  "냉동",
  "냉면",
  "냉방",
  "냉장고",
  "넥타이",
  "넷째",
  "노동",
  "노란색",
  "노력",
  "노인",
  "녹음",
  "녹차",
  "녹화",
  "논리",
  "논문",
  "논쟁",
  "놀이",
  "농구",
  "농담",
  "농민",
  "농부",
  "농업",
  "농장",
  "농촌",
  "높이",
  "눈동자",
  "눈물",
  "눈썹",
  "뉴욕",
  "느낌",
  "늑대",
  "능동적",
  "능력",
  "다방",
  "다양성",
  "다음",
  "다이어트",
  "다행",
  "단계",
  "단골",
  "단독",
  "단맛",
  "단순",
  "단어",
  "단위",
  "단점",
  "단체",
  "단추",
  "단편",
  "단풍",
  "달걀",
  "달러",
  "달력",
  "달리",
  "닭고기",
  "담당",
  "담배",
  "담요",
  "담임",
  "답변",
  "답장",
  "당근",
  "당분간",
  "당연히",
  "당장",
  "대규모",
  "대낮",
  "대단히",
  "대답",
  "대도시",
  "대략",
  "대량",
  "대륙",
  "대문",
  "대부분",
  "대신",
  "대응",
  "대장",
  "대전",
  "대접",
  "대중",
  "대책",
  "대출",
  "대충",
  "대통령",
  "대학",
  "대한민국",
  "대합실",
  "대형",
  "덩어리",
  "데이트",
  "도대체",
  "도덕",
  "도둑",
  "도망",
  "도서관",
  "도심",
  "도움",
  "도입",
  "도자기",
  "도저히",
  "도전",
  "도중",
  "도착",
  "독감",
  "독립",
  "독서",
  "독일",
  "독창적",
  "동화책",
  "뒷모습",
  "뒷산",
  "딸아이",
  "마누라",
  "마늘",
  "마당",
  "마라톤",
  "마련",
  "마무리",
  "마사지",
  "마약",
  "마요네즈",
  "마을",
  "마음",
  "마이크",
  "마중",
  "마지막",
  "마찬가지",
  "마찰",
  "마흔",
  "막걸리",
  "막내",
  "막상",
  "만남",
  "만두",
  "만세",
  "만약",
  "만일",
  "만점",
  "만족",
  "만화",
  "많이",
  "말기",
  "말씀",
  "말투",
  "맘대로",
  "망원경",
  "매년",
  "매달",
  "매력",
  "매번",
  "매스컴",
  "매일",
  "매장",
  "맥주",
  "먹이",
  "먼저",
  "먼지",
  "멀리",
  "메일",
  "며느리",
  "며칠",
  "면담",
  "멸치",
  "명단",
  "명령",
  "명예",
  "명의",
  "명절",
  "명칭",
  "명함",
  "모금",
  "모니터",
  "모델",
  "모든",
  "모범",
  "모습",
  "모양",
  "모임",
  "모조리",
  "모집",
  "모퉁이",
  "목걸이",
  "목록",
  "목사",
  "목소리",
  "목숨",
  "목적",
  "목표",
  "몰래",
  "몸매",
  "몸무게",
  "몸살",
  "몸속",
  "몸짓",
  "몸통",
  "몹시",
  "무관심",
  "무궁화",
  "무더위",
  "무덤",
  "무릎",
  "무슨",
  "무엇",
  "무역",
  "무용",
  "무조건",
  "무지개",
  "무척",
  "문구",
  "문득",
  "문법",
  "문서",
  "문제",
  "문학",
  "문화",
  "물가",
  "물건",
  "물결",
  "물고기",
  "물론",
  "물리학",
  "물음",
  "물질",
  "물체",
  "미국",
  "미디어",
  "미사일",
  "미술",
  "미역",
  "미용실",
  "미움",
  "미인",
  "미팅",
  "미혼",
  "민간",
  "민족",
  "민주",
  "믿음",
  "밀가루",
  "밀리미터",
  "밑바닥",
  "바가지",
  "바구니",
  "바나나",
  "바늘",
  "바닥",
  "바닷가",
  "바람",
  "바이러스",
  "바탕",
  "박물관",
  "박사",
  "박수",
  "반대",
  "반드시",
  "반말",
  "반발",
  "반성",
  "반응",
  "반장",
  "반죽",
  "반지",
  "반찬",
  "받침",
  "발가락",
  "발걸음",
  "발견",
  "발달",
  "발레",
  "발목",
  "발바닥",
  "발생",
  "발음",
  "발자국",
  "발전",
  "발톱",
  "발표",
  "밤하늘",
  "밥그릇",
  "밥맛",
  "밥상",
  "밥솥",
  "방금",
  "방면",
  "방문",
  "방바닥",
  "방법",
  "방송",
  "방식",
  "방안",
  "방울",
  "방지",
  "방학",
  "방해",
  "방향",
  "배경",
  "배꼽",
  "배달",
  "배드민턴",
  "백두산",
  "백색",
  "백성",
  "백인",
  "백제",
  "백화점",
  "버릇",
  "버섯",
  "버튼",
  "번개",
  "번역",
  "번지",
  "번호",
  "벌금",
  "벌레",
  "벌써",
  "범위",
  "범인",
  "범죄",
  "법률",
  "법원",
  "법적",
  "법칙",
  "베이징",
  "벨트",
  "변경",
  "변동",
  "변명",
  "변신",
  "변호사",
  "변화",
  "별도",
  "별명",
  "별일",
  "병실",
  "병아리",
  "병원",
  "보관",
  "보너스",
  "보라색",
  "보람",
  "보름",
  "보상",
  "보안",
  "보자기",
  "보장",
  "보전",
  "보존",
  "보통",
  "보편적",
  "보험",
  "복도",
  "복사",
  "복숭아",
  "복습",
  "볶음",
  "본격적",
  "본래",
  "본부",
  "본사",
  "본성",
  "본인",
  "본질",
  "볼펜",
  "봉사",
  "봉지",
  "봉투",
  "부근",
  "부끄러움",
  "부담",
  "부동산",
  "부문",
  "부분",
  "부산",
  "부상",
  "부엌",
  "부인",
  "부작용",
  "부장",
  "부정",
  "부족",
  "부지런히",
  "부친",
  "부탁",
  "부품",
  "부회장",
  "북부",
  "북한",
  "분노",
  "분량",
  "분리",
  "분명",
  "분석",
  "분야",
  "분위기",
  "분필",
  "분홍색",
  "불고기",
  "불과",
  "불교",
  "불꽃",
  "불만",
  "불법",
  "불빛",
  "불안",
  "불이익",
  "불행",
  "브랜드",
  "비극",
  "비난",
  "비닐",
  "비둘기",
  "비디오",
  "비로소",
  "비만",
  "비명",
  "비밀",
  "비바람",
  "비빔밥",
  "비상",
  "비용",
  "비율",
  "비중",
  "비타민",
  "비판",
  "빌딩",
  "빗물",
  "빗방울",
  "빗줄기",
  "빛깔",
  "빨간색",
  "빨래",
  "빨리",
  "사건",
  "사계절",
  "사나이",
  "사냥",
  "사람",
  "사랑",
  "사립",
  "사모님",
  "사물",
  "사방",
  "사상",
  "사생활",
  "사설",
  "사슴",
  "사실",
  "사업",
  "사용",
  "사월",
  "사장",
  "사전",
  "사진",
  "사촌",
  "사춘기",
  "사탕",
  "사투리",
  "사흘",
  "산길",
  "산부인과",
  "산업",
  "산책",
  "살림",
  "살인",
  "살짝",
  "삼계탕",
  "삼국",
  "삼십",
  "삼월",
  "삼촌",
  "상관",
  "상금",
  "상대",
  "상류",
  "상반기",
  "상상",
  "상식",
  "상업",
  "상인",
  "상자",
  "상점",
  "상처",
  "상추",
  "상태",
  "상표",
  "상품",
  "상황",
  "새벽",
  "색깔",
  "색연필",
  "생각",
  "생명",
  "생물",
  "생방송",
  "생산",
  "생선",
  "생신",
  "생일",
  "생활",
  "서랍",
  "서른",
  "서명",
  "서민",
  "서비스",
  "서양",
  "서울",
  "서적",
  "서점",
  "서쪽",
  "서클",
  "석사",
  "석유",
  "선거",
  "선물",
  "선배",
  "선생",
  "선수",
  "선원",
  "선장",
  "선전",
  "선택",
  "선풍기",
  "설거지",
  "설날",
  "설렁탕",
  "설명",
  "설문",
  "설사",
  "설악산",
  "설치",
  "설탕",
  "섭씨",
  "성공",
  "성당",
  "성명",
  "성별",
  "성인",
  "성장",
  "성적",
  "성질",
  "성함",
  "세금",
  "세미나",
  "세상",
  "세월",
  "세종대왕",
  "세탁",
  "센터",
  "센티미터",
  "셋째",
  "소규모",
  "소극적",
  "소금",
  "소나기",
  "소년",
  "소득",
  "소망",
  "소문",
  "소설",
  "소속",
  "소아과",
  "소용",
  "소원",
  "소음",
  "소중히",
  "소지품",
  "소질",
  "소풍",
  "소형",
  "속담",
  "속도",
  "속옷",
  "손가락",
  "손길",
  "손녀",
  "손님",
  "손등",
  "손목",
  "손뼉",
  "손실",
  "손질",
  "손톱",
  "손해",
  "솔직히",
  "솜씨",
  "송아지",
  "송이",
  "송편",
  "쇠고기",
  "쇼핑",
  "수건",
  "수년",
  "수단",
  "수돗물",
  "수동적",
  "수면",
  "수명",
  "수박",
  "수상",
  "수석",
  "수술",
  "수시로",
  "수업",
  "수염",
  "수영",
  "수입",
  "수준",
  "수집",
  "수출",
  "수컷",
  "수필",
  "수학",
  "수험생",
  "수화기",
  "숙녀",
  "숙소",
  "숙제",
  "순간",
  "순서",
  "순수",
  "순식간",
  "순위",
  "숟가락",
  "술병",
  "술집",
  "숫자",
  "스님",
  "스물",
  "스스로",
  "스승",
  "스웨터",
  "스위치",
  "스케이트",
  "스튜디오",
  "스트레스",
  "스포츠",
  "슬쩍",
  "슬픔",
  "습관",
  "습기",
  "승객",
  "승리",
  "승부",
  "승용차",
  "승진",
  "시각",
  "시간",
  "시골",
  "시금치",
  "시나리오",
  "시댁",
  "시리즈",
  "시멘트",
  "시민",
  "시부모",
  "시선",
  "시설",
  "시스템",
  "시아버지",
  "시어머니",
  "시월",
  "시인",
  "시일",
  "시작",
  "시장",
  "시절",
  "시점",
  "시중",
  "시즌",
  "시집",
  "시청",
  "시합",
  "시험",
  "식구",
  "식기",
  "식당",
  "식량",
  "식료품",
  "식물",
  "식빵",
  "식사",
  "식생활",
  "식초",
  "식탁",
  "식품",
  "신고",
  "신규",
  "신념",
  "신문",
  "신발",
  "신비",
  "신사",
  "신세",
  "신용",
  "신제품",
  "신청",
  "신체",
  "신화",
  "실감",
  "실내",
  "실력",
  "실례",
  "실망",
  "실수",
  "실습",
  "실시",
  "실장",
  "실정",
  "실질적",
  "실천",
  "실체",
  "실컷",
  "실태",
  "실패",
  "실험",
  "실현",
  "심리",
  "심부름",
  "심사",
  "심장",
  "심정",
  "심판",
  "쌍둥이",
  "씨름",
  "씨앗",
  "아가씨",
  "아나운서",
  "아드님",
  "아들",
  "아쉬움",
  "아스팔트",
  "아시아",
  "아울러",
  "아저씨",
  "아줌마",
  "아직",
  "아침",
  "아파트",
  "아프리카",
  "아픔",
  "아홉",
  "아흔",
  "악기",
  "악몽",
  "악수",
  "안개",
  "안경",
  "안과",
  "안내",
  "안녕",
  "안동",
  "안방",
  "안부",
  "안주",
  "알루미늄",
  "알코올",
  "암시",
  "암컷",
  "압력",
  "앞날",
  "앞문",
  "애인",
  "애정",
  "액수",
  "앨범",
  "야간",
  "야단",
  "야옹",
  "약간",
  "약국",
  "약속",
  "약수",
  "약점",
  "약품",
  "약혼녀",
  "양념",
  "양력",
  "양말",
  "양배추",
  "양주",
  "양파",
  "어둠",
  "어려움",
  "어른",
  "어젯밤",
  "어쨌든",
  "어쩌다가",
  "어쩐지",
  "언니",
  "언덕",
  "언론",
  "언어",
  "얼굴",
  "얼른",
  "얼음",
  "얼핏",
  "엄마",
  "업무",
  "업종",
  "업체",
  "엉덩이",
  "엉망",
  "엉터리",
  "엊그제",
  "에너지",
  "에어컨",
  "엔진",
  "여건",
  "여고생",
  "여관",
  "여군",
  "여권",
  "여대생",
  "여덟",
  "여동생",
  "여든",
  "여론",
  "여름",
  "여섯",
  "여성",
  "여왕",
  "여인",
  "여전히",
  "여직원",
  "여학생",
  "여행",
  "역사",
  "역시",
  "역할",
  "연결",
  "연구",
  "연극",
  "연기",
  "연락",
  "연설",
  "연세",
  "연속",
  "연습",
  "연애",
  "연예인",
  "연인",
  "연장",
  "연주",
  "연출",
  "연필",
  "연합",
  "연휴",
  "열기",
  "열매",
  "열쇠",
  "열심히",
  "열정",
  "열차",
  "열흘",
  "염려",
  "엽서",
  "영국",
  "영남",
  "영상",
  "영양",
  "영역",
  "영웅",
  "영원히",
  "영하",
  "영향",
  "영혼",
  "영화",
  "옆구리",
  "옆방",
  "옆집",
  "예감",
  "예금",
  "예방",
  "예산",
  "예상",
  "예선",
  "예술",
  "예습",
  "예식장",
  "예약",
  "예전",
  "예절",
  "예정",
  "예컨대",
  "옛날",
  "오늘",
  "오락",
  "오랫동안",
  "오렌지",
  "오로지",
  "오른발",
  "오븐",
  "오십",
  "오염",
  "오월",
  "오전",
  "오직",
  "오징어",
  "오페라",
  "오피스텔",
  "오히려",
  "옥상",
  "옥수수",
  "온갖",
  "온라인",
  "온몸",
  "온종일",
  "온통",
  "올가을",
  "올림픽",
  "올해",
  "옷차림",
  "와이셔츠",
  "와인",
  "완성",
  "완전",
  "왕비",
  "왕자",
  "왜냐하면",
  "왠지",
  "외갓집",
  "외국",
  "외로움",
  "외삼촌",
  "외출",
  "외침",
  "외할머니",
  "왼발",
  "왼손",
  "왼쪽",
  "요금",
  "요일",
  "요즘",
  "요청",
  "용기",
  "용서",
  "용어",
  "우산",
  "우선",
  "우승",
  "우연히",
  "우정",
  "우체국",
  "우편",
  "운동",
  "운명",
  "운반",
  "운전",
  "운행",
  "울산",
  "울음",
  "움직임",
  "웃어른",
  "웃음",
  "워낙",
  "원고",
  "원래",
  "원서",
  "원숭이",
  "원인",
  "원장",
  "원피스",
  "월급",
  "월드컵",
  "월세",
  "월요일",
  "웨이터",
  "위반",
  "위법",
  "위성",
  "위원",
  "위험",
  "위협",
  "윗사람",
  "유난히",
  "유럽",
  "유명",
  "유물",
  "유산",
  "유적",
  "유치원",
  "유학",
  "유행",
  "유형",
  "육군",
  "육상",
  "육십",
  "육체",
  "은행",
  "음력",
  "음료",
  "음반",
  "음성",
  "음식",
  "음악",
  "음주",
  "의견",
  "의논",
  "의문",
  "의복",
  "의식",
  "의심",
  "의외로",
  "의욕",
  "의원",
  "의학",
  "이것",
  "이곳",
  "이념",
  "이놈",
  "이달",
  "이대로",
  "이동",
  "이렇게",
  "이력서",
  "이론적",
  "이름",
  "이민",
  "이발소",
  "이별",
  "이불",
  "이빨",
  "이상",
  "이성",
  "이슬",
  "이야기",
  "이용",
  "이웃",
  "이월",
  "이윽고",
  "이익",
  "이전",
  "이중",
  "이튿날",
  "이틀",
  "이혼",
  "인간",
  "인격",
  "인공",
  "인구",
  "인근",
  "인기",
  "인도",
  "인류",
  "인물",
  "인생",
  "인쇄",
  "인연",
  "인원",
  "인재",
  "인종",
  "인천",
  "인체",
  "인터넷",
  "인하",
  "인형",
  "일곱",
  "일기",
  "일단",
  "일대",
  "일등",
  "일반",
  "일본",
  "일부",
  "일상",
  "일생",
  "일손",
  "일요일",
  "일월",
  "일정",
  "일종",
  "일주일",
  "일찍",
  "일체",
  "일치",
  "일행",
  "일회용",
  "임금",
  "임무",
  "입대",
  "입력",
  "입맛",
  "입사",
  "입술",
  "입시",
  "입원",
  "입장",
  "입학",
  "자가용",
  "자격",
  "자극",
  "자동",
  "자랑",
  "자부심",
  "자식",
  "자신",
  "자연",
  "자원",
  "자율",
  "자전거",
  "자정",
  "자존심",
  "자판",
  "작가",
  "작년",
  "작성",
  "작업",
  "작용",
  "작은딸",
  "작품",
  "잔디",
  "잔뜩",
  "잔치",
  "잘못",
  "잠깐",
  "잠수함",
  "잠시",
  "잠옷",
  "잠자리",
  "잡지",
  "장관",
  "장군",
  "장기간",
  "장래",
  "장례",
  "장르",
  "장마",
  "장면",
  "장모",
  "장미",
  "장비",
  "장사",
  "장소",
  "장식",
  "장애인",
  "장인",
  "장점",
  "장차",
  "장학금",
  "재능",
  "재빨리",
  "재산",
  "재생",
  "재작년",
  "재정",
  "재채기",
  "재판",
  "재학",
  "재활용",
  "저것",
  "저고리",
  "저곳",
  "저녁",
  "저런",
  "저렇게",
  "저번",
  "저울",
  "저절로",
  "저축",
  "적극",
  "적당히",
  "적성",
  "적용",
  "적응",
  "전개",
  "전공",
  "전기",
  "전달",
  "전라도",
  "전망",
  "전문",
  "전반",
  "전부",
  "전세",
  "전시",
  "전용",
  "전자",
  "전쟁",
  "전주",
  "전철",
  "전체",
  "전통",
  "전혀",
  "전후",
  "절대",
  "절망",
  "절반",
  "절약",
  "절차",
  "점검",
  "점수",
  "점심",
  "점원",
  "점점",
  "점차",
  "접근",
  "접시",
  "접촉",
  "젓가락",
  "정거장",
  "정도",
  "정류장",
  "정리",
  "정말",
  "정면",
  "정문",
  "정반대",
  "정보",
  "정부",
  "정비",
  "정상",
  "정성",
  "정오",
  "정원",
  "정장",
  "정지",
  "정치",
  "정확히",
  "제공",
  "제과점",
  "제대로",
  "제목",
  "제발",
  "제법",
  "제삿날",
  "제안",
  "제일",
  "제작",
  "제주도",
  "제출",
  "제품",
  "제한",
  "조각",
  "조건",
  "조금",
  "조깅",
  "조명",
  "조미료",
  "조상",
  "조선",
  "조용히",
  "조절",
  "조정",
  "조직",
  "존댓말",
  "존재",
  "졸업",
  "졸음",
  "종교",
  "종로",
  "종류",
  "종소리",
  "종업원",
  "종종",
  "종합",
  "좌석",
  "죄인",
  "주관적",
  "주름",
  "주말",
  "주머니",
  "주먹",
  "주문",
  "주민",
  "주방",
  "주변",
  "주식",
  "주인",
  "주일",
  "주장",
  "주전자",
  "주택",
  "준비",
  "줄거리",
  "줄기",
  "줄무늬",
  "중간",
  "중계방송",
  "중국",
  "중년",
  "중단",
  "중독",
  "중반",
  "중부",
  "중세",
  "중소기업",
  "중순",
  "중앙",
  "중요",
  "중학교",
  "즉석",
  "즉시",
  "즐거움",
  "증가",
  "증거",
  "증권",
  "증상",
  "증세",
  "지각",
  "지갑",
  "지경",
  "지극히",
  "지금",
  "지급",
  "지능",
  "지름길",
  "지리산",
  "지방",
  "지붕",
  "지식",
  "지역",
  "지우개",
  "지원",
  "지적",
  "지점",
  "지진",
  "지출",
  "직선",
  "직업",
  "직원",
  "직장",
  "진급",
  "진동",
  "진로",
  "진료",
  "진리",
  "진짜",
  "진찰",
  "진출",
  "진통",
  "진행",
  "질문",
  "질병",
  "질서",
  "짐작",
  "집단",
  "집안",
  "집중",
  "짜증",
  "찌꺼기",
  "차남",
  "차라리",
  "차량",
  "차림",
  "차별",
  "차선",
  "차츰",
  "착각",
  "찬물",
  "찬성",
  "참가",
  "참기름",
  "참새",
  "참석",
  "참여",
  "참외",
  "참조",
  "찻잔",
  "창가",
  "창고",
  "창구",
  "창문",
  "창밖",
  "창작",
  "창조",
  "채널",
  "채점",
  "책가방",
  "책방",
  "책상",
  "책임",
  "챔피언",
  "처벌",
  "처음",
  "천국",
  "천둥",
  "천장",
  "천재",
  "천천히",
  "철도",
  "철저히",
  "철학",
  "첫날",
  "첫째",
  "청년",
  "청바지",
  "청소",
  "청춘",
  "체계",
  "체력",
  "체온",
  "체육",
  "체중",
  "체험",
  "초등학생",
  "초반",
  "초밥",
  "초상화",
  "초순",
  "초여름",
  "초원",
  "초저녁",
  "초점",
  "초청",
  "초콜릿",
  "촛불",
  "총각",
  "총리",
  "총장",
  "촬영",
  "최근",
  "최상",
  "최선",
  "최신",
  "최악",
  "최종",
  "추석",
  "추억",
  "추진",
  "추천",
  "추측",
  "축구",
  "축소",
  "축제",
  "축하",
  "출근",
  "출발",
  "출산",
  "출신",
  "출연",
  "출입",
  "출장",
  "출판",
  "충격",
  "충고",
  "충돌",
  "충분히",
  "충청도",
  "취업",
  "취직",
  "취향",
  "치약",
  "친구",
  "친척",
  "칠십",
  "칠월",
  "칠판",
  "침대",
  "침묵",
  "침실",
  "칫솔",
  "칭찬",
  "카메라",
  "카운터",
  "칼국수",
  "캐릭터",
  "캠퍼스",
  "캠페인",
  "커튼",
  "컨디션",
  "컬러",
  "컴퓨터",
  "코끼리",
  "코미디",
  "콘서트",
  "콜라",
  "콤플렉스",
  "콩나물",
  "쾌감",
  "쿠데타",
  "크림",
  "큰길",
  "큰딸",
  "큰소리",
  "큰아들",
  "큰어머니",
  "큰일",
  "큰절",
  "클래식",
  "클럽",
  "킬로",
  "타입",
  "타자기",
  "탁구",
  "탁자",
  "탄생",
  "태권도",
  "태양",
  "태풍",
  "택시",
  "탤런트",
  "터널",
  "터미널",
  "테니스",
  "테스트",
  "테이블",
  "텔레비전",
  "토론",
  "토마토",
  "토요일",
  "통계",
  "통과",
  "통로",
  "통신",
  "통역",
  "통일",
  "통장",
  "통제",
  "통증",
  "통합",
  "통화",
  "퇴근",
  "퇴원",
  "퇴직금",
  "튀김",
  "트럭",
  "특급",
  "특별",
  "특성",
  "특수",
  "특징",
  "특히",
  "튼튼히",
  "티셔츠",
  "파란색",
  "파일",
  "파출소",
  "판결",
  "판단",
  "판매",
  "판사",
  "팔십",
  "팔월",
  "팝송",
  "패션",
  "팩스",
  "팩시밀리",
  "팬티",
  "퍼센트",
  "페인트",
  "편견",
  "편의",
  "편지",
  "편히",
  "평가",
  "평균",
  "평생",
  "평소",
  "평양",
  "평일",
  "평화",
  "포스터",
  "포인트",
  "포장",
  "포함",
  "표면",
  "표정",
  "표준",
  "표현",
  "품목",
  "품질",
  "풍경",
  "풍속",
  "풍습",
  "프랑스",
  "프린터",
  "플라스틱",
  "피곤",
  "피망",
  "피아노",
  "필름",
  "필수",
  "필요",
  "필자",
  "필통",
  "핑계",
  "하느님",
  "하늘",
  "하드웨어",
  "하룻밤",
  "하반기",
  "하숙집",
  "하순",
  "하여튼",
  "하지만",
  "하천",
  "하품",
  "하필",
  "학과",
  "학교",
  "학급",
  "학기",
  "학년",
  "학력",
  "학번",
  "학부모",
  "학비",
  "학생",
  "학술",
  "학습",
  "학용품",
  "학원",
  "학위",
  "학자",
  "학점",
  "한계",
  "한글",
  "한꺼번에",
  "한낮",
  "한눈",
  "한동안",
  "한때",
  "한라산",
  "한마디",
  "한문",
  "한번",
  "한복",
  "한식",
  "한여름",
  "한쪽",
  "할머니",
  "할아버지",
  "할인",
  "함께",
  "함부로",
  "합격",
  "합리적",
  "항공",
  "항구",
  "항상",
  "항의",
  "해결",
  "해군",
  "해답",
  "해당",
  "해물",
  "해석",
  "해설",
  "해수욕장",
  "해안",
  "핵심",
  "핸드백",
  "햄버거",
  "햇볕",
  "햇살",
  "행동",
  "행복",
  "행사",
  "행운",
  "행위",
  "향기",
  "향상",
  "향수",
  "허락",
  "허용",
  "헬기",
  "현관",
  "현금",
  "현대",
  "현상",
  "현실",
  "현장",
  "현재",
  "현지",
  "혈액",
  "협력",
  "형부",
  "형사",
  "형수",
  "형식",
  "형제",
  "형태",
  "형편",
  "혜택",
  "호기심",
  "호남",
  "호랑이",
  "호박",
  "호텔",
  "호흡",
  "혹시",
  "홀로",
  "홈페이지",
  "홍보",
  "홍수",
  "홍차",
  "화면",
  "화분",
  "화살",
  "화요일",
  "화장",
  "화학",
  "확보",
  "확인",
  "확장",
  "확정",
  "환갑",
  "환경",
  "환영",
  "환율",
  "환자",
  "활기",
  "활동",
  "활발히",
  "활용",
  "활짝",
  "회견",
  "회관",
  "회복",
  "회색",
  "회원",
  "회장",
  "회전",
  "횟수",
  "횡단보도",
  "효율적",
  "후반",
  "후춧가루",
  "훈련",
  "훨씬",
  "휴식",
  "휴일",
  "흉내",
  "흐름",
  "흑백",
  "흑인",
  "흔적",
  "흔히",
  "흥미",
  "흥분",
  "희곡",
  "희망",
  "희생",
  "흰색",
  "힘껏"
], PN = [
  "abaisser",
  "abandon",
  "abdiquer",
  "abeille",
  "abolir",
  "aborder",
  "aboutir",
  "aboyer",
  "abrasif",
  "abreuver",
  "abriter",
  "abroger",
  "abrupt",
  "absence",
  "absolu",
  "absurde",
  "abusif",
  "abyssal",
  "académie",
  "acajou",
  "acarien",
  "accabler",
  "accepter",
  "acclamer",
  "accolade",
  "accroche",
  "accuser",
  "acerbe",
  "achat",
  "acheter",
  "aciduler",
  "acier",
  "acompte",
  "acquérir",
  "acronyme",
  "acteur",
  "actif",
  "actuel",
  "adepte",
  "adéquat",
  "adhésif",
  "adjectif",
  "adjuger",
  "admettre",
  "admirer",
  "adopter",
  "adorer",
  "adoucir",
  "adresse",
  "adroit",
  "adulte",
  "adverbe",
  "aérer",
  "aéronef",
  "affaire",
  "affecter",
  "affiche",
  "affreux",
  "affubler",
  "agacer",
  "agencer",
  "agile",
  "agiter",
  "agrafer",
  "agréable",
  "agrume",
  "aider",
  "aiguille",
  "ailier",
  "aimable",
  "aisance",
  "ajouter",
  "ajuster",
  "alarmer",
  "alchimie",
  "alerte",
  "algèbre",
  "algue",
  "aliéner",
  "aliment",
  "alléger",
  "alliage",
  "allouer",
  "allumer",
  "alourdir",
  "alpaga",
  "altesse",
  "alvéole",
  "amateur",
  "ambigu",
  "ambre",
  "aménager",
  "amertume",
  "amidon",
  "amiral",
  "amorcer",
  "amour",
  "amovible",
  "amphibie",
  "ampleur",
  "amusant",
  "analyse",
  "anaphore",
  "anarchie",
  "anatomie",
  "ancien",
  "anéantir",
  "angle",
  "angoisse",
  "anguleux",
  "animal",
  "annexer",
  "annonce",
  "annuel",
  "anodin",
  "anomalie",
  "anonyme",
  "anormal",
  "antenne",
  "antidote",
  "anxieux",
  "apaiser",
  "apéritif",
  "aplanir",
  "apologie",
  "appareil",
  "appeler",
  "apporter",
  "appuyer",
  "aquarium",
  "aqueduc",
  "arbitre",
  "arbuste",
  "ardeur",
  "ardoise",
  "argent",
  "arlequin",
  "armature",
  "armement",
  "armoire",
  "armure",
  "arpenter",
  "arracher",
  "arriver",
  "arroser",
  "arsenic",
  "artériel",
  "article",
  "aspect",
  "asphalte",
  "aspirer",
  "assaut",
  "asservir",
  "assiette",
  "associer",
  "assurer",
  "asticot",
  "astre",
  "astuce",
  "atelier",
  "atome",
  "atrium",
  "atroce",
  "attaque",
  "attentif",
  "attirer",
  "attraper",
  "aubaine",
  "auberge",
  "audace",
  "audible",
  "augurer",
  "aurore",
  "automne",
  "autruche",
  "avaler",
  "avancer",
  "avarice",
  "avenir",
  "averse",
  "aveugle",
  "aviateur",
  "avide",
  "avion",
  "aviser",
  "avoine",
  "avouer",
  "avril",
  "axial",
  "axiome",
  "badge",
  "bafouer",
  "bagage",
  "baguette",
  "baignade",
  "balancer",
  "balcon",
  "baleine",
  "balisage",
  "bambin",
  "bancaire",
  "bandage",
  "banlieue",
  "bannière",
  "banquier",
  "barbier",
  "baril",
  "baron",
  "barque",
  "barrage",
  "bassin",
  "bastion",
  "bataille",
  "bateau",
  "batterie",
  "baudrier",
  "bavarder",
  "belette",
  "bélier",
  "belote",
  "bénéfice",
  "berceau",
  "berger",
  "berline",
  "bermuda",
  "besace",
  "besogne",
  "bétail",
  "beurre",
  "biberon",
  "bicycle",
  "bidule",
  "bijou",
  "bilan",
  "bilingue",
  "billard",
  "binaire",
  "biologie",
  "biopsie",
  "biotype",
  "biscuit",
  "bison",
  "bistouri",
  "bitume",
  "bizarre",
  "blafard",
  "blague",
  "blanchir",
  "blessant",
  "blinder",
  "blond",
  "bloquer",
  "blouson",
  "bobard",
  "bobine",
  "boire",
  "boiser",
  "bolide",
  "bonbon",
  "bondir",
  "bonheur",
  "bonifier",
  "bonus",
  "bordure",
  "borne",
  "botte",
  "boucle",
  "boueux",
  "bougie",
  "boulon",
  "bouquin",
  "bourse",
  "boussole",
  "boutique",
  "boxeur",
  "branche",
  "brasier",
  "brave",
  "brebis",
  "brèche",
  "breuvage",
  "bricoler",
  "brigade",
  "brillant",
  "brioche",
  "brique",
  "brochure",
  "broder",
  "bronzer",
  "brousse",
  "broyeur",
  "brume",
  "brusque",
  "brutal",
  "bruyant",
  "buffle",
  "buisson",
  "bulletin",
  "bureau",
  "burin",
  "bustier",
  "butiner",
  "butoir",
  "buvable",
  "buvette",
  "cabanon",
  "cabine",
  "cachette",
  "cadeau",
  "cadre",
  "caféine",
  "caillou",
  "caisson",
  "calculer",
  "calepin",
  "calibre",
  "calmer",
  "calomnie",
  "calvaire",
  "camarade",
  "caméra",
  "camion",
  "campagne",
  "canal",
  "caneton",
  "canon",
  "cantine",
  "canular",
  "capable",
  "caporal",
  "caprice",
  "capsule",
  "capter",
  "capuche",
  "carabine",
  "carbone",
  "caresser",
  "caribou",
  "carnage",
  "carotte",
  "carreau",
  "carton",
  "cascade",
  "casier",
  "casque",
  "cassure",
  "causer",
  "caution",
  "cavalier",
  "caverne",
  "caviar",
  "cédille",
  "ceinture",
  "céleste",
  "cellule",
  "cendrier",
  "censurer",
  "central",
  "cercle",
  "cérébral",
  "cerise",
  "cerner",
  "cerveau",
  "cesser",
  "chagrin",
  "chaise",
  "chaleur",
  "chambre",
  "chance",
  "chapitre",
  "charbon",
  "chasseur",
  "chaton",
  "chausson",
  "chavirer",
  "chemise",
  "chenille",
  "chéquier",
  "chercher",
  "cheval",
  "chien",
  "chiffre",
  "chignon",
  "chimère",
  "chiot",
  "chlorure",
  "chocolat",
  "choisir",
  "chose",
  "chouette",
  "chrome",
  "chute",
  "cigare",
  "cigogne",
  "cimenter",
  "cinéma",
  "cintrer",
  "circuler",
  "cirer",
  "cirque",
  "citerne",
  "citoyen",
  "citron",
  "civil",
  "clairon",
  "clameur",
  "claquer",
  "classe",
  "clavier",
  "client",
  "cligner",
  "climat",
  "clivage",
  "cloche",
  "clonage",
  "cloporte",
  "cobalt",
  "cobra",
  "cocasse",
  "cocotier",
  "coder",
  "codifier",
  "coffre",
  "cogner",
  "cohésion",
  "coiffer",
  "coincer",
  "colère",
  "colibri",
  "colline",
  "colmater",
  "colonel",
  "combat",
  "comédie",
  "commande",
  "compact",
  "concert",
  "conduire",
  "confier",
  "congeler",
  "connoter",
  "consonne",
  "contact",
  "convexe",
  "copain",
  "copie",
  "corail",
  "corbeau",
  "cordage",
  "corniche",
  "corpus",
  "correct",
  "cortège",
  "cosmique",
  "costume",
  "coton",
  "coude",
  "coupure",
  "courage",
  "couteau",
  "couvrir",
  "coyote",
  "crabe",
  "crainte",
  "cravate",
  "crayon",
  "créature",
  "créditer",
  "crémeux",
  "creuser",
  "crevette",
  "cribler",
  "crier",
  "cristal",
  "critère",
  "croire",
  "croquer",
  "crotale",
  "crucial",
  "cruel",
  "crypter",
  "cubique",
  "cueillir",
  "cuillère",
  "cuisine",
  "cuivre",
  "culminer",
  "cultiver",
  "cumuler",
  "cupide",
  "curatif",
  "curseur",
  "cyanure",
  "cycle",
  "cylindre",
  "cynique",
  "daigner",
  "damier",
  "danger",
  "danseur",
  "dauphin",
  "débattre",
  "débiter",
  "déborder",
  "débrider",
  "débutant",
  "décaler",
  "décembre",
  "déchirer",
  "décider",
  "déclarer",
  "décorer",
  "décrire",
  "décupler",
  "dédale",
  "déductif",
  "déesse",
  "défensif",
  "défiler",
  "défrayer",
  "dégager",
  "dégivrer",
  "déglutir",
  "dégrafer",
  "déjeuner",
  "délice",
  "déloger",
  "demander",
  "demeurer",
  "démolir",
  "dénicher",
  "dénouer",
  "dentelle",
  "dénuder",
  "départ",
  "dépenser",
  "déphaser",
  "déplacer",
  "déposer",
  "déranger",
  "dérober",
  "désastre",
  "descente",
  "désert",
  "désigner",
  "désobéir",
  "dessiner",
  "destrier",
  "détacher",
  "détester",
  "détourer",
  "détresse",
  "devancer",
  "devenir",
  "deviner",
  "devoir",
  "diable",
  "dialogue",
  "diamant",
  "dicter",
  "différer",
  "digérer",
  "digital",
  "digne",
  "diluer",
  "dimanche",
  "diminuer",
  "dioxyde",
  "directif",
  "diriger",
  "discuter",
  "disposer",
  "dissiper",
  "distance",
  "divertir",
  "diviser",
  "docile",
  "docteur",
  "dogme",
  "doigt",
  "domaine",
  "domicile",
  "dompter",
  "donateur",
  "donjon",
  "donner",
  "dopamine",
  "dortoir",
  "dorure",
  "dosage",
  "doseur",
  "dossier",
  "dotation",
  "douanier",
  "double",
  "douceur",
  "douter",
  "doyen",
  "dragon",
  "draper",
  "dresser",
  "dribbler",
  "droiture",
  "duperie",
  "duplexe",
  "durable",
  "durcir",
  "dynastie",
  "éblouir",
  "écarter",
  "écharpe",
  "échelle",
  "éclairer",
  "éclipse",
  "éclore",
  "écluse",
  "école",
  "économie",
  "écorce",
  "écouter",
  "écraser",
  "écrémer",
  "écrivain",
  "écrou",
  "écume",
  "écureuil",
  "édifier",
  "éduquer",
  "effacer",
  "effectif",
  "effigie",
  "effort",
  "effrayer",
  "effusion",
  "égaliser",
  "égarer",
  "éjecter",
  "élaborer",
  "élargir",
  "électron",
  "élégant",
  "éléphant",
  "élève",
  "éligible",
  "élitisme",
  "éloge",
  "élucider",
  "éluder",
  "emballer",
  "embellir",
  "embryon",
  "émeraude",
  "émission",
  "emmener",
  "émotion",
  "émouvoir",
  "empereur",
  "employer",
  "emporter",
  "emprise",
  "émulsion",
  "encadrer",
  "enchère",
  "enclave",
  "encoche",
  "endiguer",
  "endosser",
  "endroit",
  "enduire",
  "énergie",
  "enfance",
  "enfermer",
  "enfouir",
  "engager",
  "engin",
  "englober",
  "énigme",
  "enjamber",
  "enjeu",
  "enlever",
  "ennemi",
  "ennuyeux",
  "enrichir",
  "enrobage",
  "enseigne",
  "entasser",
  "entendre",
  "entier",
  "entourer",
  "entraver",
  "énumérer",
  "envahir",
  "enviable",
  "envoyer",
  "enzyme",
  "éolien",
  "épaissir",
  "épargne",
  "épatant",
  "épaule",
  "épicerie",
  "épidémie",
  "épier",
  "épilogue",
  "épine",
  "épisode",
  "épitaphe",
  "époque",
  "épreuve",
  "éprouver",
  "épuisant",
  "équerre",
  "équipe",
  "ériger",
  "érosion",
  "erreur",
  "éruption",
  "escalier",
  "espadon",
  "espèce",
  "espiègle",
  "espoir",
  "esprit",
  "esquiver",
  "essayer",
  "essence",
  "essieu",
  "essorer",
  "estime",
  "estomac",
  "estrade",
  "étagère",
  "étaler",
  "étanche",
  "étatique",
  "éteindre",
  "étendoir",
  "éternel",
  "éthanol",
  "éthique",
  "ethnie",
  "étirer",
  "étoffer",
  "étoile",
  "étonnant",
  "étourdir",
  "étrange",
  "étroit",
  "étude",
  "euphorie",
  "évaluer",
  "évasion",
  "éventail",
  "évidence",
  "éviter",
  "évolutif",
  "évoquer",
  "exact",
  "exagérer",
  "exaucer",
  "exceller",
  "excitant",
  "exclusif",
  "excuse",
  "exécuter",
  "exemple",
  "exercer",
  "exhaler",
  "exhorter",
  "exigence",
  "exiler",
  "exister",
  "exotique",
  "expédier",
  "explorer",
  "exposer",
  "exprimer",
  "exquis",
  "extensif",
  "extraire",
  "exulter",
  "fable",
  "fabuleux",
  "facette",
  "facile",
  "facture",
  "faiblir",
  "falaise",
  "fameux",
  "famille",
  "farceur",
  "farfelu",
  "farine",
  "farouche",
  "fasciner",
  "fatal",
  "fatigue",
  "faucon",
  "fautif",
  "faveur",
  "favori",
  "fébrile",
  "féconder",
  "fédérer",
  "félin",
  "femme",
  "fémur",
  "fendoir",
  "féodal",
  "fermer",
  "féroce",
  "ferveur",
  "festival",
  "feuille",
  "feutre",
  "février",
  "fiasco",
  "ficeler",
  "fictif",
  "fidèle",
  "figure",
  "filature",
  "filetage",
  "filière",
  "filleul",
  "filmer",
  "filou",
  "filtrer",
  "financer",
  "finir",
  "fiole",
  "firme",
  "fissure",
  "fixer",
  "flairer",
  "flamme",
  "flasque",
  "flatteur",
  "fléau",
  "flèche",
  "fleur",
  "flexion",
  "flocon",
  "flore",
  "fluctuer",
  "fluide",
  "fluvial",
  "folie",
  "fonderie",
  "fongible",
  "fontaine",
  "forcer",
  "forgeron",
  "formuler",
  "fortune",
  "fossile",
  "foudre",
  "fougère",
  "fouiller",
  "foulure",
  "fourmi",
  "fragile",
  "fraise",
  "franchir",
  "frapper",
  "frayeur",
  "frégate",
  "freiner",
  "frelon",
  "frémir",
  "frénésie",
  "frère",
  "friable",
  "friction",
  "frisson",
  "frivole",
  "froid",
  "fromage",
  "frontal",
  "frotter",
  "fruit",
  "fugitif",
  "fuite",
  "fureur",
  "furieux",
  "furtif",
  "fusion",
  "futur",
  "gagner",
  "galaxie",
  "galerie",
  "gambader",
  "garantir",
  "gardien",
  "garnir",
  "garrigue",
  "gazelle",
  "gazon",
  "géant",
  "gélatine",
  "gélule",
  "gendarme",
  "général",
  "génie",
  "genou",
  "gentil",
  "géologie",
  "géomètre",
  "géranium",
  "germe",
  "gestuel",
  "geyser",
  "gibier",
  "gicler",
  "girafe",
  "givre",
  "glace",
  "glaive",
  "glisser",
  "globe",
  "gloire",
  "glorieux",
  "golfeur",
  "gomme",
  "gonfler",
  "gorge",
  "gorille",
  "goudron",
  "gouffre",
  "goulot",
  "goupille",
  "gourmand",
  "goutte",
  "graduel",
  "graffiti",
  "graine",
  "grand",
  "grappin",
  "gratuit",
  "gravir",
  "grenat",
  "griffure",
  "griller",
  "grimper",
  "grogner",
  "gronder",
  "grotte",
  "groupe",
  "gruger",
  "grutier",
  "gruyère",
  "guépard",
  "guerrier",
  "guide",
  "guimauve",
  "guitare",
  "gustatif",
  "gymnaste",
  "gyrostat",
  "habitude",
  "hachoir",
  "halte",
  "hameau",
  "hangar",
  "hanneton",
  "haricot",
  "harmonie",
  "harpon",
  "hasard",
  "hélium",
  "hématome",
  "herbe",
  "hérisson",
  "hermine",
  "héron",
  "hésiter",
  "heureux",
  "hiberner",
  "hibou",
  "hilarant",
  "histoire",
  "hiver",
  "homard",
  "hommage",
  "homogène",
  "honneur",
  "honorer",
  "honteux",
  "horde",
  "horizon",
  "horloge",
  "hormone",
  "horrible",
  "houleux",
  "housse",
  "hublot",
  "huileux",
  "humain",
  "humble",
  "humide",
  "humour",
  "hurler",
  "hydromel",
  "hygiène",
  "hymne",
  "hypnose",
  "idylle",
  "ignorer",
  "iguane",
  "illicite",
  "illusion",
  "image",
  "imbiber",
  "imiter",
  "immense",
  "immobile",
  "immuable",
  "impact",
  "impérial",
  "implorer",
  "imposer",
  "imprimer",
  "imputer",
  "incarner",
  "incendie",
  "incident",
  "incliner",
  "incolore",
  "indexer",
  "indice",
  "inductif",
  "inédit",
  "ineptie",
  "inexact",
  "infini",
  "infliger",
  "informer",
  "infusion",
  "ingérer",
  "inhaler",
  "inhiber",
  "injecter",
  "injure",
  "innocent",
  "inoculer",
  "inonder",
  "inscrire",
  "insecte",
  "insigne",
  "insolite",
  "inspirer",
  "instinct",
  "insulter",
  "intact",
  "intense",
  "intime",
  "intrigue",
  "intuitif",
  "inutile",
  "invasion",
  "inventer",
  "inviter",
  "invoquer",
  "ironique",
  "irradier",
  "irréel",
  "irriter",
  "isoler",
  "ivoire",
  "ivresse",
  "jaguar",
  "jaillir",
  "jambe",
  "janvier",
  "jardin",
  "jauger",
  "jaune",
  "javelot",
  "jetable",
  "jeton",
  "jeudi",
  "jeunesse",
  "joindre",
  "joncher",
  "jongler",
  "joueur",
  "jouissif",
  "journal",
  "jovial",
  "joyau",
  "joyeux",
  "jubiler",
  "jugement",
  "junior",
  "jupon",
  "juriste",
  "justice",
  "juteux",
  "juvénile",
  "kayak",
  "kimono",
  "kiosque",
  "label",
  "labial",
  "labourer",
  "lacérer",
  "lactose",
  "lagune",
  "laine",
  "laisser",
  "laitier",
  "lambeau",
  "lamelle",
  "lampe",
  "lanceur",
  "langage",
  "lanterne",
  "lapin",
  "largeur",
  "larme",
  "laurier",
  "lavabo",
  "lavoir",
  "lecture",
  "légal",
  "léger",
  "légume",
  "lessive",
  "lettre",
  "levier",
  "lexique",
  "lézard",
  "liasse",
  "libérer",
  "libre",
  "licence",
  "licorne",
  "liège",
  "lièvre",
  "ligature",
  "ligoter",
  "ligue",
  "limer",
  "limite",
  "limonade",
  "limpide",
  "linéaire",
  "lingot",
  "lionceau",
  "liquide",
  "lisière",
  "lister",
  "lithium",
  "litige",
  "littoral",
  "livreur",
  "logique",
  "lointain",
  "loisir",
  "lombric",
  "loterie",
  "louer",
  "lourd",
  "loutre",
  "louve",
  "loyal",
  "lubie",
  "lucide",
  "lucratif",
  "lueur",
  "lugubre",
  "luisant",
  "lumière",
  "lunaire",
  "lundi",
  "luron",
  "lutter",
  "luxueux",
  "machine",
  "magasin",
  "magenta",
  "magique",
  "maigre",
  "maillon",
  "maintien",
  "mairie",
  "maison",
  "majorer",
  "malaxer",
  "maléfice",
  "malheur",
  "malice",
  "mallette",
  "mammouth",
  "mandater",
  "maniable",
  "manquant",
  "manteau",
  "manuel",
  "marathon",
  "marbre",
  "marchand",
  "mardi",
  "maritime",
  "marqueur",
  "marron",
  "marteler",
  "mascotte",
  "massif",
  "matériel",
  "matière",
  "matraque",
  "maudire",
  "maussade",
  "mauve",
  "maximal",
  "méchant",
  "méconnu",
  "médaille",
  "médecin",
  "méditer",
  "méduse",
  "meilleur",
  "mélange",
  "mélodie",
  "membre",
  "mémoire",
  "menacer",
  "mener",
  "menhir",
  "mensonge",
  "mentor",
  "mercredi",
  "mérite",
  "merle",
  "messager",
  "mesure",
  "métal",
  "météore",
  "méthode",
  "métier",
  "meuble",
  "miauler",
  "microbe",
  "miette",
  "mignon",
  "migrer",
  "milieu",
  "million",
  "mimique",
  "mince",
  "minéral",
  "minimal",
  "minorer",
  "minute",
  "miracle",
  "miroiter",
  "missile",
  "mixte",
  "mobile",
  "moderne",
  "moelleux",
  "mondial",
  "moniteur",
  "monnaie",
  "monotone",
  "monstre",
  "montagne",
  "monument",
  "moqueur",
  "morceau",
  "morsure",
  "mortier",
  "moteur",
  "motif",
  "mouche",
  "moufle",
  "moulin",
  "mousson",
  "mouton",
  "mouvant",
  "multiple",
  "munition",
  "muraille",
  "murène",
  "murmure",
  "muscle",
  "muséum",
  "musicien",
  "mutation",
  "muter",
  "mutuel",
  "myriade",
  "myrtille",
  "mystère",
  "mythique",
  "nageur",
  "nappe",
  "narquois",
  "narrer",
  "natation",
  "nation",
  "nature",
  "naufrage",
  "nautique",
  "navire",
  "nébuleux",
  "nectar",
  "néfaste",
  "négation",
  "négliger",
  "négocier",
  "neige",
  "nerveux",
  "nettoyer",
  "neurone",
  "neutron",
  "neveu",
  "niche",
  "nickel",
  "nitrate",
  "niveau",
  "noble",
  "nocif",
  "nocturne",
  "noirceur",
  "noisette",
  "nomade",
  "nombreux",
  "nommer",
  "normatif",
  "notable",
  "notifier",
  "notoire",
  "nourrir",
  "nouveau",
  "novateur",
  "novembre",
  "novice",
  "nuage",
  "nuancer",
  "nuire",
  "nuisible",
  "numéro",
  "nuptial",
  "nuque",
  "nutritif",
  "obéir",
  "objectif",
  "obliger",
  "obscur",
  "observer",
  "obstacle",
  "obtenir",
  "obturer",
  "occasion",
  "occuper",
  "océan",
  "octobre",
  "octroyer",
  "octupler",
  "oculaire",
  "odeur",
  "odorant",
  "offenser",
  "officier",
  "offrir",
  "ogive",
  "oiseau",
  "oisillon",
  "olfactif",
  "olivier",
  "ombrage",
  "omettre",
  "onctueux",
  "onduler",
  "onéreux",
  "onirique",
  "opale",
  "opaque",
  "opérer",
  "opinion",
  "opportun",
  "opprimer",
  "opter",
  "optique",
  "orageux",
  "orange",
  "orbite",
  "ordonner",
  "oreille",
  "organe",
  "orgueil",
  "orifice",
  "ornement",
  "orque",
  "ortie",
  "osciller",
  "osmose",
  "ossature",
  "otarie",
  "ouragan",
  "ourson",
  "outil",
  "outrager",
  "ouvrage",
  "ovation",
  "oxyde",
  "oxygène",
  "ozone",
  "paisible",
  "palace",
  "palmarès",
  "palourde",
  "palper",
  "panache",
  "panda",
  "pangolin",
  "paniquer",
  "panneau",
  "panorama",
  "pantalon",
  "papaye",
  "papier",
  "papoter",
  "papyrus",
  "paradoxe",
  "parcelle",
  "paresse",
  "parfumer",
  "parler",
  "parole",
  "parrain",
  "parsemer",
  "partager",
  "parure",
  "parvenir",
  "passion",
  "pastèque",
  "paternel",
  "patience",
  "patron",
  "pavillon",
  "pavoiser",
  "payer",
  "paysage",
  "peigne",
  "peintre",
  "pelage",
  "pélican",
  "pelle",
  "pelouse",
  "peluche",
  "pendule",
  "pénétrer",
  "pénible",
  "pensif",
  "pénurie",
  "pépite",
  "péplum",
  "perdrix",
  "perforer",
  "période",
  "permuter",
  "perplexe",
  "persil",
  "perte",
  "peser",
  "pétale",
  "petit",
  "pétrir",
  "peuple",
  "pharaon",
  "phobie",
  "phoque",
  "photon",
  "phrase",
  "physique",
  "piano",
  "pictural",
  "pièce",
  "pierre",
  "pieuvre",
  "pilote",
  "pinceau",
  "pipette",
  "piquer",
  "pirogue",
  "piscine",
  "piston",
  "pivoter",
  "pixel",
  "pizza",
  "placard",
  "plafond",
  "plaisir",
  "planer",
  "plaque",
  "plastron",
  "plateau",
  "pleurer",
  "plexus",
  "pliage",
  "plomb",
  "plonger",
  "pluie",
  "plumage",
  "pochette",
  "poésie",
  "poète",
  "pointe",
  "poirier",
  "poisson",
  "poivre",
  "polaire",
  "policier",
  "pollen",
  "polygone",
  "pommade",
  "pompier",
  "ponctuel",
  "pondérer",
  "poney",
  "portique",
  "position",
  "posséder",
  "posture",
  "potager",
  "poteau",
  "potion",
  "pouce",
  "poulain",
  "poumon",
  "pourpre",
  "poussin",
  "pouvoir",
  "prairie",
  "pratique",
  "précieux",
  "prédire",
  "préfixe",
  "prélude",
  "prénom",
  "présence",
  "prétexte",
  "prévoir",
  "primitif",
  "prince",
  "prison",
  "priver",
  "problème",
  "procéder",
  "prodige",
  "profond",
  "progrès",
  "proie",
  "projeter",
  "prologue",
  "promener",
  "propre",
  "prospère",
  "protéger",
  "prouesse",
  "proverbe",
  "prudence",
  "pruneau",
  "psychose",
  "public",
  "puceron",
  "puiser",
  "pulpe",
  "pulsar",
  "punaise",
  "punitif",
  "pupitre",
  "purifier",
  "puzzle",
  "pyramide",
  "quasar",
  "querelle",
  "question",
  "quiétude",
  "quitter",
  "quotient",
  "racine",
  "raconter",
  "radieux",
  "ragondin",
  "raideur",
  "raisin",
  "ralentir",
  "rallonge",
  "ramasser",
  "rapide",
  "rasage",
  "ratisser",
  "ravager",
  "ravin",
  "rayonner",
  "réactif",
  "réagir",
  "réaliser",
  "réanimer",
  "recevoir",
  "réciter",
  "réclamer",
  "récolter",
  "recruter",
  "reculer",
  "recycler",
  "rédiger",
  "redouter",
  "refaire",
  "réflexe",
  "réformer",
  "refrain",
  "refuge",
  "régalien",
  "région",
  "réglage",
  "régulier",
  "réitérer",
  "rejeter",
  "rejouer",
  "relatif",
  "relever",
  "relief",
  "remarque",
  "remède",
  "remise",
  "remonter",
  "remplir",
  "remuer",
  "renard",
  "renfort",
  "renifler",
  "renoncer",
  "rentrer",
  "renvoi",
  "replier",
  "reporter",
  "reprise",
  "reptile",
  "requin",
  "réserve",
  "résineux",
  "résoudre",
  "respect",
  "rester",
  "résultat",
  "rétablir",
  "retenir",
  "réticule",
  "retomber",
  "retracer",
  "réunion",
  "réussir",
  "revanche",
  "revivre",
  "révolte",
  "révulsif",
  "richesse",
  "rideau",
  "rieur",
  "rigide",
  "rigoler",
  "rincer",
  "riposter",
  "risible",
  "risque",
  "rituel",
  "rival",
  "rivière",
  "rocheux",
  "romance",
  "rompre",
  "ronce",
  "rondin",
  "roseau",
  "rosier",
  "rotatif",
  "rotor",
  "rotule",
  "rouge",
  "rouille",
  "rouleau",
  "routine",
  "royaume",
  "ruban",
  "rubis",
  "ruche",
  "ruelle",
  "rugueux",
  "ruiner",
  "ruisseau",
  "ruser",
  "rustique",
  "rythme",
  "sabler",
  "saboter",
  "sabre",
  "sacoche",
  "safari",
  "sagesse",
  "saisir",
  "salade",
  "salive",
  "salon",
  "saluer",
  "samedi",
  "sanction",
  "sanglier",
  "sarcasme",
  "sardine",
  "saturer",
  "saugrenu",
  "saumon",
  "sauter",
  "sauvage",
  "savant",
  "savonner",
  "scalpel",
  "scandale",
  "scélérat",
  "scénario",
  "sceptre",
  "schéma",
  "science",
  "scinder",
  "score",
  "scrutin",
  "sculpter",
  "séance",
  "sécable",
  "sécher",
  "secouer",
  "sécréter",
  "sédatif",
  "séduire",
  "seigneur",
  "séjour",
  "sélectif",
  "semaine",
  "sembler",
  "semence",
  "séminal",
  "sénateur",
  "sensible",
  "sentence",
  "séparer",
  "séquence",
  "serein",
  "sergent",
  "sérieux",
  "serrure",
  "sérum",
  "service",
  "sésame",
  "sévir",
  "sevrage",
  "sextuple",
  "sidéral",
  "siècle",
  "siéger",
  "siffler",
  "sigle",
  "signal",
  "silence",
  "silicium",
  "simple",
  "sincère",
  "sinistre",
  "siphon",
  "sirop",
  "sismique",
  "situer",
  "skier",
  "social",
  "socle",
  "sodium",
  "soigneux",
  "soldat",
  "soleil",
  "solitude",
  "soluble",
  "sombre",
  "sommeil",
  "somnoler",
  "sonde",
  "songeur",
  "sonnette",
  "sonore",
  "sorcier",
  "sortir",
  "sosie",
  "sottise",
  "soucieux",
  "soudure",
  "souffle",
  "soulever",
  "soupape",
  "source",
  "soutirer",
  "souvenir",
  "spacieux",
  "spatial",
  "spécial",
  "sphère",
  "spiral",
  "stable",
  "station",
  "sternum",
  "stimulus",
  "stipuler",
  "strict",
  "studieux",
  "stupeur",
  "styliste",
  "sublime",
  "substrat",
  "subtil",
  "subvenir",
  "succès",
  "sucre",
  "suffixe",
  "suggérer",
  "suiveur",
  "sulfate",
  "superbe",
  "supplier",
  "surface",
  "suricate",
  "surmener",
  "surprise",
  "sursaut",
  "survie",
  "suspect",
  "syllabe",
  "symbole",
  "symétrie",
  "synapse",
  "syntaxe",
  "système",
  "tabac",
  "tablier",
  "tactile",
  "tailler",
  "talent",
  "talisman",
  "talonner",
  "tambour",
  "tamiser",
  "tangible",
  "tapis",
  "taquiner",
  "tarder",
  "tarif",
  "tartine",
  "tasse",
  "tatami",
  "tatouage",
  "taupe",
  "taureau",
  "taxer",
  "témoin",
  "temporel",
  "tenaille",
  "tendre",
  "teneur",
  "tenir",
  "tension",
  "terminer",
  "terne",
  "terrible",
  "tétine",
  "texte",
  "thème",
  "théorie",
  "thérapie",
  "thorax",
  "tibia",
  "tiède",
  "timide",
  "tirelire",
  "tiroir",
  "tissu",
  "titane",
  "titre",
  "tituber",
  "toboggan",
  "tolérant",
  "tomate",
  "tonique",
  "tonneau",
  "toponyme",
  "torche",
  "tordre",
  "tornade",
  "torpille",
  "torrent",
  "torse",
  "tortue",
  "totem",
  "toucher",
  "tournage",
  "tousser",
  "toxine",
  "traction",
  "trafic",
  "tragique",
  "trahir",
  "train",
  "trancher",
  "travail",
  "trèfle",
  "tremper",
  "trésor",
  "treuil",
  "triage",
  "tribunal",
  "tricoter",
  "trilogie",
  "triomphe",
  "tripler",
  "triturer",
  "trivial",
  "trombone",
  "tronc",
  "tropical",
  "troupeau",
  "tuile",
  "tulipe",
  "tumulte",
  "tunnel",
  "turbine",
  "tuteur",
  "tutoyer",
  "tuyau",
  "tympan",
  "typhon",
  "typique",
  "tyran",
  "ubuesque",
  "ultime",
  "ultrason",
  "unanime",
  "unifier",
  "union",
  "unique",
  "unitaire",
  "univers",
  "uranium",
  "urbain",
  "urticant",
  "usage",
  "usine",
  "usuel",
  "usure",
  "utile",
  "utopie",
  "vacarme",
  "vaccin",
  "vagabond",
  "vague",
  "vaillant",
  "vaincre",
  "vaisseau",
  "valable",
  "valise",
  "vallon",
  "valve",
  "vampire",
  "vanille",
  "vapeur",
  "varier",
  "vaseux",
  "vassal",
  "vaste",
  "vecteur",
  "vedette",
  "végétal",
  "véhicule",
  "veinard",
  "véloce",
  "vendredi",
  "vénérer",
  "venger",
  "venimeux",
  "ventouse",
  "verdure",
  "vérin",
  "vernir",
  "verrou",
  "verser",
  "vertu",
  "veston",
  "vétéran",
  "vétuste",
  "vexant",
  "vexer",
  "viaduc",
  "viande",
  "victoire",
  "vidange",
  "vidéo",
  "vignette",
  "vigueur",
  "vilain",
  "village",
  "vinaigre",
  "violon",
  "vipère",
  "virement",
  "virtuose",
  "virus",
  "visage",
  "viseur",
  "vision",
  "visqueux",
  "visuel",
  "vital",
  "vitesse",
  "viticole",
  "vitrine",
  "vivace",
  "vivipare",
  "vocation",
  "voguer",
  "voile",
  "voisin",
  "voiture",
  "volaille",
  "volcan",
  "voltiger",
  "volume",
  "vorace",
  "vortex",
  "voter",
  "vouloir",
  "voyage",
  "voyelle",
  "wagon",
  "xénon",
  "yacht",
  "zèbre",
  "zénith",
  "zeste",
  "zoologie"
], ON = [
  "abaco",
  "abbaglio",
  "abbinato",
  "abete",
  "abisso",
  "abolire",
  "abrasivo",
  "abrogato",
  "accadere",
  "accenno",
  "accusato",
  "acetone",
  "achille",
  "acido",
  "acqua",
  "acre",
  "acrilico",
  "acrobata",
  "acuto",
  "adagio",
  "addebito",
  "addome",
  "adeguato",
  "aderire",
  "adipe",
  "adottare",
  "adulare",
  "affabile",
  "affetto",
  "affisso",
  "affranto",
  "aforisma",
  "afoso",
  "africano",
  "agave",
  "agente",
  "agevole",
  "aggancio",
  "agire",
  "agitare",
  "agonismo",
  "agricolo",
  "agrumeto",
  "aguzzo",
  "alabarda",
  "alato",
  "albatro",
  "alberato",
  "albo",
  "albume",
  "alce",
  "alcolico",
  "alettone",
  "alfa",
  "algebra",
  "aliante",
  "alibi",
  "alimento",
  "allagato",
  "allegro",
  "allievo",
  "allodola",
  "allusivo",
  "almeno",
  "alogeno",
  "alpaca",
  "alpestre",
  "altalena",
  "alterno",
  "alticcio",
  "altrove",
  "alunno",
  "alveolo",
  "alzare",
  "amalgama",
  "amanita",
  "amarena",
  "ambito",
  "ambrato",
  "ameba",
  "america",
  "ametista",
  "amico",
  "ammasso",
  "ammenda",
  "ammirare",
  "ammonito",
  "amore",
  "ampio",
  "ampliare",
  "amuleto",
  "anacardo",
  "anagrafe",
  "analista",
  "anarchia",
  "anatra",
  "anca",
  "ancella",
  "ancora",
  "andare",
  "andrea",
  "anello",
  "angelo",
  "angolare",
  "angusto",
  "anima",
  "annegare",
  "annidato",
  "anno",
  "annuncio",
  "anonimo",
  "anticipo",
  "anzi",
  "apatico",
  "apertura",
  "apode",
  "apparire",
  "appetito",
  "appoggio",
  "approdo",
  "appunto",
  "aprile",
  "arabica",
  "arachide",
  "aragosta",
  "araldica",
  "arancio",
  "aratura",
  "arazzo",
  "arbitro",
  "archivio",
  "ardito",
  "arenile",
  "argento",
  "argine",
  "arguto",
  "aria",
  "armonia",
  "arnese",
  "arredato",
  "arringa",
  "arrosto",
  "arsenico",
  "arso",
  "artefice",
  "arzillo",
  "asciutto",
  "ascolto",
  "asepsi",
  "asettico",
  "asfalto",
  "asino",
  "asola",
  "aspirato",
  "aspro",
  "assaggio",
  "asse",
  "assoluto",
  "assurdo",
  "asta",
  "astenuto",
  "astice",
  "astratto",
  "atavico",
  "ateismo",
  "atomico",
  "atono",
  "attesa",
  "attivare",
  "attorno",
  "attrito",
  "attuale",
  "ausilio",
  "austria",
  "autista",
  "autonomo",
  "autunno",
  "avanzato",
  "avere",
  "avvenire",
  "avviso",
  "avvolgere",
  "azione",
  "azoto",
  "azzimo",
  "azzurro",
  "babele",
  "baccano",
  "bacino",
  "baco",
  "badessa",
  "badilata",
  "bagnato",
  "baita",
  "balcone",
  "baldo",
  "balena",
  "ballata",
  "balzano",
  "bambino",
  "bandire",
  "baraonda",
  "barbaro",
  "barca",
  "baritono",
  "barlume",
  "barocco",
  "basilico",
  "basso",
  "batosta",
  "battuto",
  "baule",
  "bava",
  "bavosa",
  "becco",
  "beffa",
  "belgio",
  "belva",
  "benda",
  "benevole",
  "benigno",
  "benzina",
  "bere",
  "berlina",
  "beta",
  "bibita",
  "bici",
  "bidone",
  "bifido",
  "biga",
  "bilancia",
  "bimbo",
  "binocolo",
  "biologo",
  "bipede",
  "bipolare",
  "birbante",
  "birra",
  "biscotto",
  "bisesto",
  "bisnonno",
  "bisonte",
  "bisturi",
  "bizzarro",
  "blando",
  "blatta",
  "bollito",
  "bonifico",
  "bordo",
  "bosco",
  "botanico",
  "bottino",
  "bozzolo",
  "braccio",
  "bradipo",
  "brama",
  "branca",
  "bravura",
  "bretella",
  "brevetto",
  "brezza",
  "briglia",
  "brillante",
  "brindare",
  "broccolo",
  "brodo",
  "bronzina",
  "brullo",
  "bruno",
  "bubbone",
  "buca",
  "budino",
  "buffone",
  "buio",
  "bulbo",
  "buono",
  "burlone",
  "burrasca",
  "bussola",
  "busta",
  "cadetto",
  "caduco",
  "calamaro",
  "calcolo",
  "calesse",
  "calibro",
  "calmo",
  "caloria",
  "cambusa",
  "camerata",
  "camicia",
  "cammino",
  "camola",
  "campale",
  "canapa",
  "candela",
  "cane",
  "canino",
  "canotto",
  "cantina",
  "capace",
  "capello",
  "capitolo",
  "capogiro",
  "cappero",
  "capra",
  "capsula",
  "carapace",
  "carcassa",
  "cardo",
  "carisma",
  "carovana",
  "carretto",
  "cartolina",
  "casaccio",
  "cascata",
  "caserma",
  "caso",
  "cassone",
  "castello",
  "casuale",
  "catasta",
  "catena",
  "catrame",
  "cauto",
  "cavillo",
  "cedibile",
  "cedrata",
  "cefalo",
  "celebre",
  "cellulare",
  "cena",
  "cenone",
  "centesimo",
  "ceramica",
  "cercare",
  "certo",
  "cerume",
  "cervello",
  "cesoia",
  "cespo",
  "ceto",
  "chela",
  "chiaro",
  "chicca",
  "chiedere",
  "chimera",
  "china",
  "chirurgo",
  "chitarra",
  "ciao",
  "ciclismo",
  "cifrare",
  "cigno",
  "cilindro",
  "ciottolo",
  "circa",
  "cirrosi",
  "citrico",
  "cittadino",
  "ciuffo",
  "civetta",
  "civile",
  "classico",
  "clinica",
  "cloro",
  "cocco",
  "codardo",
  "codice",
  "coerente",
  "cognome",
  "collare",
  "colmato",
  "colore",
  "colposo",
  "coltivato",
  "colza",
  "coma",
  "cometa",
  "commando",
  "comodo",
  "computer",
  "comune",
  "conciso",
  "condurre",
  "conferma",
  "congelare",
  "coniuge",
  "connesso",
  "conoscere",
  "consumo",
  "continuo",
  "convegno",
  "coperto",
  "copione",
  "coppia",
  "copricapo",
  "corazza",
  "cordata",
  "coricato",
  "cornice",
  "corolla",
  "corpo",
  "corredo",
  "corsia",
  "cortese",
  "cosmico",
  "costante",
  "cottura",
  "covato",
  "cratere",
  "cravatta",
  "creato",
  "credere",
  "cremoso",
  "crescita",
  "creta",
  "criceto",
  "crinale",
  "crisi",
  "critico",
  "croce",
  "cronaca",
  "crostata",
  "cruciale",
  "crusca",
  "cucire",
  "cuculo",
  "cugino",
  "cullato",
  "cupola",
  "curatore",
  "cursore",
  "curvo",
  "cuscino",
  "custode",
  "dado",
  "daino",
  "dalmata",
  "damerino",
  "daniela",
  "dannoso",
  "danzare",
  "datato",
  "davanti",
  "davvero",
  "debutto",
  "decennio",
  "deciso",
  "declino",
  "decollo",
  "decreto",
  "dedicato",
  "definito",
  "deforme",
  "degno",
  "delegare",
  "delfino",
  "delirio",
  "delta",
  "demenza",
  "denotato",
  "dentro",
  "deposito",
  "derapata",
  "derivare",
  "deroga",
  "descritto",
  "deserto",
  "desiderio",
  "desumere",
  "detersivo",
  "devoto",
  "diametro",
  "dicembre",
  "diedro",
  "difeso",
  "diffuso",
  "digerire",
  "digitale",
  "diluvio",
  "dinamico",
  "dinnanzi",
  "dipinto",
  "diploma",
  "dipolo",
  "diradare",
  "dire",
  "dirotto",
  "dirupo",
  "disagio",
  "discreto",
  "disfare",
  "disgelo",
  "disposto",
  "distanza",
  "disumano",
  "dito",
  "divano",
  "divelto",
  "dividere",
  "divorato",
  "doblone",
  "docente",
  "doganale",
  "dogma",
  "dolce",
  "domato",
  "domenica",
  "dominare",
  "dondolo",
  "dono",
  "dormire",
  "dote",
  "dottore",
  "dovuto",
  "dozzina",
  "drago",
  "druido",
  "dubbio",
  "dubitare",
  "ducale",
  "duna",
  "duomo",
  "duplice",
  "duraturo",
  "ebano",
  "eccesso",
  "ecco",
  "eclissi",
  "economia",
  "edera",
  "edicola",
  "edile",
  "editoria",
  "educare",
  "egemonia",
  "egli",
  "egoismo",
  "egregio",
  "elaborato",
  "elargire",
  "elegante",
  "elencato",
  "eletto",
  "elevare",
  "elfico",
  "elica",
  "elmo",
  "elsa",
  "eluso",
  "emanato",
  "emblema",
  "emesso",
  "emiro",
  "emotivo",
  "emozione",
  "empirico",
  "emulo",
  "endemico",
  "enduro",
  "energia",
  "enfasi",
  "enoteca",
  "entrare",
  "enzima",
  "epatite",
  "epilogo",
  "episodio",
  "epocale",
  "eppure",
  "equatore",
  "erario",
  "erba",
  "erboso",
  "erede",
  "eremita",
  "erigere",
  "ermetico",
  "eroe",
  "erosivo",
  "errante",
  "esagono",
  "esame",
  "esanime",
  "esaudire",
  "esca",
  "esempio",
  "esercito",
  "esibito",
  "esigente",
  "esistere",
  "esito",
  "esofago",
  "esortato",
  "esoso",
  "espanso",
  "espresso",
  "essenza",
  "esso",
  "esteso",
  "estimare",
  "estonia",
  "estroso",
  "esultare",
  "etilico",
  "etnico",
  "etrusco",
  "etto",
  "euclideo",
  "europa",
  "evaso",
  "evidenza",
  "evitato",
  "evoluto",
  "evviva",
  "fabbrica",
  "faccenda",
  "fachiro",
  "falco",
  "famiglia",
  "fanale",
  "fanfara",
  "fango",
  "fantasma",
  "fare",
  "farfalla",
  "farinoso",
  "farmaco",
  "fascia",
  "fastoso",
  "fasullo",
  "faticare",
  "fato",
  "favoloso",
  "febbre",
  "fecola",
  "fede",
  "fegato",
  "felpa",
  "feltro",
  "femmina",
  "fendere",
  "fenomeno",
  "fermento",
  "ferro",
  "fertile",
  "fessura",
  "festivo",
  "fetta",
  "feudo",
  "fiaba",
  "fiducia",
  "fifa",
  "figurato",
  "filo",
  "finanza",
  "finestra",
  "finire",
  "fiore",
  "fiscale",
  "fisico",
  "fiume",
  "flacone",
  "flamenco",
  "flebo",
  "flemma",
  "florido",
  "fluente",
  "fluoro",
  "fobico",
  "focaccia",
  "focoso",
  "foderato",
  "foglio",
  "folata",
  "folclore",
  "folgore",
  "fondente",
  "fonetico",
  "fonia",
  "fontana",
  "forbito",
  "forchetta",
  "foresta",
  "formica",
  "fornaio",
  "foro",
  "fortezza",
  "forzare",
  "fosfato",
  "fosso",
  "fracasso",
  "frana",
  "frassino",
  "fratello",
  "freccetta",
  "frenata",
  "fresco",
  "frigo",
  "frollino",
  "fronde",
  "frugale",
  "frutta",
  "fucilata",
  "fucsia",
  "fuggente",
  "fulmine",
  "fulvo",
  "fumante",
  "fumetto",
  "fumoso",
  "fune",
  "funzione",
  "fuoco",
  "furbo",
  "furgone",
  "furore",
  "fuso",
  "futile",
  "gabbiano",
  "gaffe",
  "galateo",
  "gallina",
  "galoppo",
  "gambero",
  "gamma",
  "garanzia",
  "garbo",
  "garofano",
  "garzone",
  "gasdotto",
  "gasolio",
  "gastrico",
  "gatto",
  "gaudio",
  "gazebo",
  "gazzella",
  "geco",
  "gelatina",
  "gelso",
  "gemello",
  "gemmato",
  "gene",
  "genitore",
  "gennaio",
  "genotipo",
  "gergo",
  "ghepardo",
  "ghiaccio",
  "ghisa",
  "giallo",
  "gilda",
  "ginepro",
  "giocare",
  "gioiello",
  "giorno",
  "giove",
  "girato",
  "girone",
  "gittata",
  "giudizio",
  "giurato",
  "giusto",
  "globulo",
  "glutine",
  "gnomo",
  "gobba",
  "golf",
  "gomito",
  "gommone",
  "gonfio",
  "gonna",
  "governo",
  "gracile",
  "grado",
  "grafico",
  "grammo",
  "grande",
  "grattare",
  "gravoso",
  "grazia",
  "greca",
  "gregge",
  "grifone",
  "grigio",
  "grinza",
  "grotta",
  "gruppo",
  "guadagno",
  "guaio",
  "guanto",
  "guardare",
  "gufo",
  "guidare",
  "ibernato",
  "icona",
  "identico",
  "idillio",
  "idolo",
  "idra",
  "idrico",
  "idrogeno",
  "igiene",
  "ignaro",
  "ignorato",
  "ilare",
  "illeso",
  "illogico",
  "illudere",
  "imballo",
  "imbevuto",
  "imbocco",
  "imbuto",
  "immane",
  "immerso",
  "immolato",
  "impacco",
  "impeto",
  "impiego",
  "importo",
  "impronta",
  "inalare",
  "inarcare",
  "inattivo",
  "incanto",
  "incendio",
  "inchino",
  "incisivo",
  "incluso",
  "incontro",
  "incrocio",
  "incubo",
  "indagine",
  "india",
  "indole",
  "inedito",
  "infatti",
  "infilare",
  "inflitto",
  "ingaggio",
  "ingegno",
  "inglese",
  "ingordo",
  "ingrosso",
  "innesco",
  "inodore",
  "inoltrare",
  "inondato",
  "insano",
  "insetto",
  "insieme",
  "insonnia",
  "insulina",
  "intasato",
  "intero",
  "intonaco",
  "intuito",
  "inumidire",
  "invalido",
  "invece",
  "invito",
  "iperbole",
  "ipnotico",
  "ipotesi",
  "ippica",
  "iride",
  "irlanda",
  "ironico",
  "irrigato",
  "irrorare",
  "isolato",
  "isotopo",
  "isterico",
  "istituto",
  "istrice",
  "italia",
  "iterare",
  "labbro",
  "labirinto",
  "lacca",
  "lacerato",
  "lacrima",
  "lacuna",
  "laddove",
  "lago",
  "lampo",
  "lancetta",
  "lanterna",
  "lardoso",
  "larga",
  "laringe",
  "lastra",
  "latenza",
  "latino",
  "lattuga",
  "lavagna",
  "lavoro",
  "legale",
  "leggero",
  "lembo",
  "lentezza",
  "lenza",
  "leone",
  "lepre",
  "lesivo",
  "lessato",
  "lesto",
  "letterale",
  "leva",
  "levigato",
  "libero",
  "lido",
  "lievito",
  "lilla",
  "limatura",
  "limitare",
  "limpido",
  "lineare",
  "lingua",
  "liquido",
  "lira",
  "lirica",
  "lisca",
  "lite",
  "litigio",
  "livrea",
  "locanda",
  "lode",
  "logica",
  "lombare",
  "londra",
  "longevo",
  "loquace",
  "lorenzo",
  "loto",
  "lotteria",
  "luce",
  "lucidato",
  "lumaca",
  "luminoso",
  "lungo",
  "lupo",
  "luppolo",
  "lusinga",
  "lusso",
  "lutto",
  "macabro",
  "macchina",
  "macero",
  "macinato",
  "madama",
  "magico",
  "maglia",
  "magnete",
  "magro",
  "maiolica",
  "malafede",
  "malgrado",
  "malinteso",
  "malsano",
  "malto",
  "malumore",
  "mana",
  "mancia",
  "mandorla",
  "mangiare",
  "manifesto",
  "mannaro",
  "manovra",
  "mansarda",
  "mantide",
  "manubrio",
  "mappa",
  "maratona",
  "marcire",
  "maretta",
  "marmo",
  "marsupio",
  "maschera",
  "massaia",
  "mastino",
  "materasso",
  "matricola",
  "mattone",
  "maturo",
  "mazurca",
  "meandro",
  "meccanico",
  "mecenate",
  "medesimo",
  "meditare",
  "mega",
  "melassa",
  "melis",
  "melodia",
  "meninge",
  "meno",
  "mensola",
  "mercurio",
  "merenda",
  "merlo",
  "meschino",
  "mese",
  "messere",
  "mestolo",
  "metallo",
  "metodo",
  "mettere",
  "miagolare",
  "mica",
  "micelio",
  "michele",
  "microbo",
  "midollo",
  "miele",
  "migliore",
  "milano",
  "milite",
  "mimosa",
  "minerale",
  "mini",
  "minore",
  "mirino",
  "mirtillo",
  "miscela",
  "missiva",
  "misto",
  "misurare",
  "mitezza",
  "mitigare",
  "mitra",
  "mittente",
  "mnemonico",
  "modello",
  "modifica",
  "modulo",
  "mogano",
  "mogio",
  "mole",
  "molosso",
  "monastero",
  "monco",
  "mondina",
  "monetario",
  "monile",
  "monotono",
  "monsone",
  "montato",
  "monviso",
  "mora",
  "mordere",
  "morsicato",
  "mostro",
  "motivato",
  "motosega",
  "motto",
  "movenza",
  "movimento",
  "mozzo",
  "mucca",
  "mucosa",
  "muffa",
  "mughetto",
  "mugnaio",
  "mulatto",
  "mulinello",
  "multiplo",
  "mummia",
  "munto",
  "muovere",
  "murale",
  "musa",
  "muscolo",
  "musica",
  "mutevole",
  "muto",
  "nababbo",
  "nafta",
  "nanometro",
  "narciso",
  "narice",
  "narrato",
  "nascere",
  "nastrare",
  "naturale",
  "nautica",
  "naviglio",
  "nebulosa",
  "necrosi",
  "negativo",
  "negozio",
  "nemmeno",
  "neofita",
  "neretto",
  "nervo",
  "nessuno",
  "nettuno",
  "neutrale",
  "neve",
  "nevrotico",
  "nicchia",
  "ninfa",
  "nitido",
  "nobile",
  "nocivo",
  "nodo",
  "nome",
  "nomina",
  "nordico",
  "normale",
  "norvegese",
  "nostrano",
  "notare",
  "notizia",
  "notturno",
  "novella",
  "nucleo",
  "nulla",
  "numero",
  "nuovo",
  "nutrire",
  "nuvola",
  "nuziale",
  "oasi",
  "obbedire",
  "obbligo",
  "obelisco",
  "oblio",
  "obolo",
  "obsoleto",
  "occasione",
  "occhio",
  "occidente",
  "occorrere",
  "occultare",
  "ocra",
  "oculato",
  "odierno",
  "odorare",
  "offerta",
  "offrire",
  "offuscato",
  "oggetto",
  "oggi",
  "ognuno",
  "olandese",
  "olfatto",
  "oliato",
  "oliva",
  "ologramma",
  "oltre",
  "omaggio",
  "ombelico",
  "ombra",
  "omega",
  "omissione",
  "ondoso",
  "onere",
  "onice",
  "onnivoro",
  "onorevole",
  "onta",
  "operato",
  "opinione",
  "opposto",
  "oracolo",
  "orafo",
  "ordine",
  "orecchino",
  "orefice",
  "orfano",
  "organico",
  "origine",
  "orizzonte",
  "orma",
  "ormeggio",
  "ornativo",
  "orologio",
  "orrendo",
  "orribile",
  "ortensia",
  "ortica",
  "orzata",
  "orzo",
  "osare",
  "oscurare",
  "osmosi",
  "ospedale",
  "ospite",
  "ossa",
  "ossidare",
  "ostacolo",
  "oste",
  "otite",
  "otre",
  "ottagono",
  "ottimo",
  "ottobre",
  "ovale",
  "ovest",
  "ovino",
  "oviparo",
  "ovocito",
  "ovunque",
  "ovviare",
  "ozio",
  "pacchetto",
  "pace",
  "pacifico",
  "padella",
  "padrone",
  "paese",
  "paga",
  "pagina",
  "palazzina",
  "palesare",
  "pallido",
  "palo",
  "palude",
  "pandoro",
  "pannello",
  "paolo",
  "paonazzo",
  "paprica",
  "parabola",
  "parcella",
  "parere",
  "pargolo",
  "pari",
  "parlato",
  "parola",
  "partire",
  "parvenza",
  "parziale",
  "passivo",
  "pasticca",
  "patacca",
  "patologia",
  "pattume",
  "pavone",
  "peccato",
  "pedalare",
  "pedonale",
  "peggio",
  "peloso",
  "penare",
  "pendice",
  "penisola",
  "pennuto",
  "penombra",
  "pensare",
  "pentola",
  "pepe",
  "pepita",
  "perbene",
  "percorso",
  "perdonato",
  "perforare",
  "pergamena",
  "periodo",
  "permesso",
  "perno",
  "perplesso",
  "persuaso",
  "pertugio",
  "pervaso",
  "pesatore",
  "pesista",
  "peso",
  "pestifero",
  "petalo",
  "pettine",
  "petulante",
  "pezzo",
  "piacere",
  "pianta",
  "piattino",
  "piccino",
  "picozza",
  "piega",
  "pietra",
  "piffero",
  "pigiama",
  "pigolio",
  "pigro",
  "pila",
  "pilifero",
  "pillola",
  "pilota",
  "pimpante",
  "pineta",
  "pinna",
  "pinolo",
  "pioggia",
  "piombo",
  "piramide",
  "piretico",
  "pirite",
  "pirolisi",
  "pitone",
  "pizzico",
  "placebo",
  "planare",
  "plasma",
  "platano",
  "plenario",
  "pochezza",
  "poderoso",
  "podismo",
  "poesia",
  "poggiare",
  "polenta",
  "poligono",
  "pollice",
  "polmonite",
  "polpetta",
  "polso",
  "poltrona",
  "polvere",
  "pomice",
  "pomodoro",
  "ponte",
  "popoloso",
  "porfido",
  "poroso",
  "porpora",
  "porre",
  "portata",
  "posa",
  "positivo",
  "possesso",
  "postulato",
  "potassio",
  "potere",
  "pranzo",
  "prassi",
  "pratica",
  "precluso",
  "predica",
  "prefisso",
  "pregiato",
  "prelievo",
  "premere",
  "prenotare",
  "preparato",
  "presenza",
  "pretesto",
  "prevalso",
  "prima",
  "principe",
  "privato",
  "problema",
  "procura",
  "produrre",
  "profumo",
  "progetto",
  "prolunga",
  "promessa",
  "pronome",
  "proposta",
  "proroga",
  "proteso",
  "prova",
  "prudente",
  "prugna",
  "prurito",
  "psiche",
  "pubblico",
  "pudica",
  "pugilato",
  "pugno",
  "pulce",
  "pulito",
  "pulsante",
  "puntare",
  "pupazzo",
  "pupilla",
  "puro",
  "quadro",
  "qualcosa",
  "quasi",
  "querela",
  "quota",
  "raccolto",
  "raddoppio",
  "radicale",
  "radunato",
  "raffica",
  "ragazzo",
  "ragione",
  "ragno",
  "ramarro",
  "ramingo",
  "ramo",
  "randagio",
  "rantolare",
  "rapato",
  "rapina",
  "rappreso",
  "rasatura",
  "raschiato",
  "rasente",
  "rassegna",
  "rastrello",
  "rata",
  "ravveduto",
  "reale",
  "recepire",
  "recinto",
  "recluta",
  "recondito",
  "recupero",
  "reddito",
  "redimere",
  "regalato",
  "registro",
  "regola",
  "regresso",
  "relazione",
  "remare",
  "remoto",
  "renna",
  "replica",
  "reprimere",
  "reputare",
  "resa",
  "residente",
  "responso",
  "restauro",
  "rete",
  "retina",
  "retorica",
  "rettifica",
  "revocato",
  "riassunto",
  "ribadire",
  "ribelle",
  "ribrezzo",
  "ricarica",
  "ricco",
  "ricevere",
  "riciclato",
  "ricordo",
  "ricreduto",
  "ridicolo",
  "ridurre",
  "rifasare",
  "riflesso",
  "riforma",
  "rifugio",
  "rigare",
  "rigettato",
  "righello",
  "rilassato",
  "rilevato",
  "rimanere",
  "rimbalzo",
  "rimedio",
  "rimorchio",
  "rinascita",
  "rincaro",
  "rinforzo",
  "rinnovo",
  "rinomato",
  "rinsavito",
  "rintocco",
  "rinuncia",
  "rinvenire",
  "riparato",
  "ripetuto",
  "ripieno",
  "riportare",
  "ripresa",
  "ripulire",
  "risata",
  "rischio",
  "riserva",
  "risibile",
  "riso",
  "rispetto",
  "ristoro",
  "risultato",
  "risvolto",
  "ritardo",
  "ritegno",
  "ritmico",
  "ritrovo",
  "riunione",
  "riva",
  "riverso",
  "rivincita",
  "rivolto",
  "rizoma",
  "roba",
  "robotico",
  "robusto",
  "roccia",
  "roco",
  "rodaggio",
  "rodere",
  "roditore",
  "rogito",
  "rollio",
  "romantico",
  "rompere",
  "ronzio",
  "rosolare",
  "rospo",
  "rotante",
  "rotondo",
  "rotula",
  "rovescio",
  "rubizzo",
  "rubrica",
  "ruga",
  "rullino",
  "rumine",
  "rumoroso",
  "ruolo",
  "rupe",
  "russare",
  "rustico",
  "sabato",
  "sabbiare",
  "sabotato",
  "sagoma",
  "salasso",
  "saldatura",
  "salgemma",
  "salivare",
  "salmone",
  "salone",
  "saltare",
  "saluto",
  "salvo",
  "sapere",
  "sapido",
  "saporito",
  "saraceno",
  "sarcasmo",
  "sarto",
  "sassoso",
  "satellite",
  "satira",
  "satollo",
  "saturno",
  "savana",
  "savio",
  "saziato",
  "sbadiglio",
  "sbalzo",
  "sbancato",
  "sbarra",
  "sbattere",
  "sbavare",
  "sbendare",
  "sbirciare",
  "sbloccato",
  "sbocciato",
  "sbrinare",
  "sbruffone",
  "sbuffare",
  "scabroso",
  "scadenza",
  "scala",
  "scambiare",
  "scandalo",
  "scapola",
  "scarso",
  "scatenare",
  "scavato",
  "scelto",
  "scenico",
  "scettro",
  "scheda",
  "schiena",
  "sciarpa",
  "scienza",
  "scindere",
  "scippo",
  "sciroppo",
  "scivolo",
  "sclerare",
  "scodella",
  "scolpito",
  "scomparto",
  "sconforto",
  "scoprire",
  "scorta",
  "scossone",
  "scozzese",
  "scriba",
  "scrollare",
  "scrutinio",
  "scuderia",
  "scultore",
  "scuola",
  "scuro",
  "scusare",
  "sdebitare",
  "sdoganare",
  "seccatura",
  "secondo",
  "sedano",
  "seggiola",
  "segnalato",
  "segregato",
  "seguito",
  "selciato",
  "selettivo",
  "sella",
  "selvaggio",
  "semaforo",
  "sembrare",
  "seme",
  "seminato",
  "sempre",
  "senso",
  "sentire",
  "sepolto",
  "sequenza",
  "serata",
  "serbato",
  "sereno",
  "serio",
  "serpente",
  "serraglio",
  "servire",
  "sestina",
  "setola",
  "settimana",
  "sfacelo",
  "sfaldare",
  "sfamato",
  "sfarzoso",
  "sfaticato",
  "sfera",
  "sfida",
  "sfilato",
  "sfinge",
  "sfocato",
  "sfoderare",
  "sfogo",
  "sfoltire",
  "sforzato",
  "sfratto",
  "sfruttato",
  "sfuggito",
  "sfumare",
  "sfuso",
  "sgabello",
  "sgarbato",
  "sgonfiare",
  "sgorbio",
  "sgrassato",
  "sguardo",
  "sibilo",
  "siccome",
  "sierra",
  "sigla",
  "signore",
  "silenzio",
  "sillaba",
  "simbolo",
  "simpatico",
  "simulato",
  "sinfonia",
  "singolo",
  "sinistro",
  "sino",
  "sintesi",
  "sinusoide",
  "sipario",
  "sisma",
  "sistole",
  "situato",
  "slitta",
  "slogatura",
  "sloveno",
  "smarrito",
  "smemorato",
  "smentito",
  "smeraldo",
  "smilzo",
  "smontare",
  "smottato",
  "smussato",
  "snellire",
  "snervato",
  "snodo",
  "sobbalzo",
  "sobrio",
  "soccorso",
  "sociale",
  "sodale",
  "soffitto",
  "sogno",
  "soldato",
  "solenne",
  "solido",
  "sollazzo",
  "solo",
  "solubile",
  "solvente",
  "somatico",
  "somma",
  "sonda",
  "sonetto",
  "sonnifero",
  "sopire",
  "soppeso",
  "sopra",
  "sorgere",
  "sorpasso",
  "sorriso",
  "sorso",
  "sorteggio",
  "sorvolato",
  "sospiro",
  "sosta",
  "sottile",
  "spada",
  "spalla",
  "spargere",
  "spatola",
  "spavento",
  "spazzola",
  "specie",
  "spedire",
  "spegnere",
  "spelatura",
  "speranza",
  "spessore",
  "spettrale",
  "spezzato",
  "spia",
  "spigoloso",
  "spillato",
  "spinoso",
  "spirale",
  "splendido",
  "sportivo",
  "sposo",
  "spranga",
  "sprecare",
  "spronato",
  "spruzzo",
  "spuntino",
  "squillo",
  "sradicare",
  "srotolato",
  "stabile",
  "stacco",
  "staffa",
  "stagnare",
  "stampato",
  "stantio",
  "starnuto",
  "stasera",
  "statuto",
  "stelo",
  "steppa",
  "sterzo",
  "stiletto",
  "stima",
  "stirpe",
  "stivale",
  "stizzoso",
  "stonato",
  "storico",
  "strappo",
  "stregato",
  "stridulo",
  "strozzare",
  "strutto",
  "stuccare",
  "stufo",
  "stupendo",
  "subentro",
  "succoso",
  "sudore",
  "suggerito",
  "sugo",
  "sultano",
  "suonare",
  "superbo",
  "supporto",
  "surgelato",
  "surrogato",
  "sussurro",
  "sutura",
  "svagare",
  "svedese",
  "sveglio",
  "svelare",
  "svenuto",
  "svezia",
  "sviluppo",
  "svista",
  "svizzera",
  "svolta",
  "svuotare",
  "tabacco",
  "tabulato",
  "tacciare",
  "taciturno",
  "tale",
  "talismano",
  "tampone",
  "tannino",
  "tara",
  "tardivo",
  "targato",
  "tariffa",
  "tarpare",
  "tartaruga",
  "tasto",
  "tattico",
  "taverna",
  "tavolata",
  "tazza",
  "teca",
  "tecnico",
  "telefono",
  "temerario",
  "tempo",
  "temuto",
  "tendone",
  "tenero",
  "tensione",
  "tentacolo",
  "teorema",
  "terme",
  "terrazzo",
  "terzetto",
  "tesi",
  "tesserato",
  "testato",
  "tetro",
  "tettoia",
  "tifare",
  "tigella",
  "timbro",
  "tinto",
  "tipico",
  "tipografo",
  "tiraggio",
  "tiro",
  "titanio",
  "titolo",
  "titubante",
  "tizio",
  "tizzone",
  "toccare",
  "tollerare",
  "tolto",
  "tombola",
  "tomo",
  "tonfo",
  "tonsilla",
  "topazio",
  "topologia",
  "toppa",
  "torba",
  "tornare",
  "torrone",
  "tortora",
  "toscano",
  "tossire",
  "tostatura",
  "totano",
  "trabocco",
  "trachea",
  "trafila",
  "tragedia",
  "tralcio",
  "tramonto",
  "transito",
  "trapano",
  "trarre",
  "trasloco",
  "trattato",
  "trave",
  "treccia",
  "tremolio",
  "trespolo",
  "tributo",
  "tricheco",
  "trifoglio",
  "trillo",
  "trincea",
  "trio",
  "tristezza",
  "triturato",
  "trivella",
  "tromba",
  "trono",
  "troppo",
  "trottola",
  "trovare",
  "truccato",
  "tubatura",
  "tuffato",
  "tulipano",
  "tumulto",
  "tunisia",
  "turbare",
  "turchino",
  "tuta",
  "tutela",
  "ubicato",
  "uccello",
  "uccisore",
  "udire",
  "uditivo",
  "uffa",
  "ufficio",
  "uguale",
  "ulisse",
  "ultimato",
  "umano",
  "umile",
  "umorismo",
  "uncinetto",
  "ungere",
  "ungherese",
  "unicorno",
  "unificato",
  "unisono",
  "unitario",
  "unte",
  "uovo",
  "upupa",
  "uragano",
  "urgenza",
  "urlo",
  "usanza",
  "usato",
  "uscito",
  "usignolo",
  "usuraio",
  "utensile",
  "utilizzo",
  "utopia",
  "vacante",
  "vaccinato",
  "vagabondo",
  "vagliato",
  "valanga",
  "valgo",
  "valico",
  "valletta",
  "valoroso",
  "valutare",
  "valvola",
  "vampata",
  "vangare",
  "vanitoso",
  "vano",
  "vantaggio",
  "vanvera",
  "vapore",
  "varano",
  "varcato",
  "variante",
  "vasca",
  "vedetta",
  "vedova",
  "veduto",
  "vegetale",
  "veicolo",
  "velcro",
  "velina",
  "velluto",
  "veloce",
  "venato",
  "vendemmia",
  "vento",
  "verace",
  "verbale",
  "vergogna",
  "verifica",
  "vero",
  "verruca",
  "verticale",
  "vescica",
  "vessillo",
  "vestale",
  "veterano",
  "vetrina",
  "vetusto",
  "viandante",
  "vibrante",
  "vicenda",
  "vichingo",
  "vicinanza",
  "vidimare",
  "vigilia",
  "vigneto",
  "vigore",
  "vile",
  "villano",
  "vimini",
  "vincitore",
  "viola",
  "vipera",
  "virgola",
  "virologo",
  "virulento",
  "viscoso",
  "visione",
  "vispo",
  "vissuto",
  "visura",
  "vita",
  "vitello",
  "vittima",
  "vivanda",
  "vivido",
  "viziare",
  "voce",
  "voga",
  "volatile",
  "volere",
  "volpe",
  "voragine",
  "vulcano",
  "zampogna",
  "zanna",
  "zappato",
  "zattera",
  "zavorra",
  "zefiro",
  "zelante",
  "zelo",
  "zenzero",
  "zerbino",
  "zibetto",
  "zinco",
  "zircone",
  "zitto",
  "zolla",
  "zotico",
  "zucchero",
  "zufolo",
  "zulu",
  "zuppa"
], BN = [
  "ábaco",
  "abdomen",
  "abeja",
  "abierto",
  "abogado",
  "abono",
  "aborto",
  "abrazo",
  "abrir",
  "abuelo",
  "abuso",
  "acabar",
  "academia",
  "acceso",
  "acción",
  "aceite",
  "acelga",
  "acento",
  "aceptar",
  "ácido",
  "aclarar",
  "acné",
  "acoger",
  "acoso",
  "activo",
  "acto",
  "actriz",
  "actuar",
  "acudir",
  "acuerdo",
  "acusar",
  "adicto",
  "admitir",
  "adoptar",
  "adorno",
  "aduana",
  "adulto",
  "aéreo",
  "afectar",
  "afición",
  "afinar",
  "afirmar",
  "ágil",
  "agitar",
  "agonía",
  "agosto",
  "agotar",
  "agregar",
  "agrio",
  "agua",
  "agudo",
  "águila",
  "aguja",
  "ahogo",
  "ahorro",
  "aire",
  "aislar",
  "ajedrez",
  "ajeno",
  "ajuste",
  "alacrán",
  "alambre",
  "alarma",
  "alba",
  "álbum",
  "alcalde",
  "aldea",
  "alegre",
  "alejar",
  "alerta",
  "aleta",
  "alfiler",
  "alga",
  "algodón",
  "aliado",
  "aliento",
  "alivio",
  "alma",
  "almeja",
  "almíbar",
  "altar",
  "alteza",
  "altivo",
  "alto",
  "altura",
  "alumno",
  "alzar",
  "amable",
  "amante",
  "amapola",
  "amargo",
  "amasar",
  "ámbar",
  "ámbito",
  "ameno",
  "amigo",
  "amistad",
  "amor",
  "amparo",
  "amplio",
  "ancho",
  "anciano",
  "ancla",
  "andar",
  "andén",
  "anemia",
  "ángulo",
  "anillo",
  "ánimo",
  "anís",
  "anotar",
  "antena",
  "antiguo",
  "antojo",
  "anual",
  "anular",
  "anuncio",
  "añadir",
  "añejo",
  "año",
  "apagar",
  "aparato",
  "apetito",
  "apio",
  "aplicar",
  "apodo",
  "aporte",
  "apoyo",
  "aprender",
  "aprobar",
  "apuesta",
  "apuro",
  "arado",
  "araña",
  "arar",
  "árbitro",
  "árbol",
  "arbusto",
  "archivo",
  "arco",
  "arder",
  "ardilla",
  "arduo",
  "área",
  "árido",
  "aries",
  "armonía",
  "arnés",
  "aroma",
  "arpa",
  "arpón",
  "arreglo",
  "arroz",
  "arruga",
  "arte",
  "artista",
  "asa",
  "asado",
  "asalto",
  "ascenso",
  "asegurar",
  "aseo",
  "asesor",
  "asiento",
  "asilo",
  "asistir",
  "asno",
  "asombro",
  "áspero",
  "astilla",
  "astro",
  "astuto",
  "asumir",
  "asunto",
  "atajo",
  "ataque",
  "atar",
  "atento",
  "ateo",
  "ático",
  "atleta",
  "átomo",
  "atraer",
  "atroz",
  "atún",
  "audaz",
  "audio",
  "auge",
  "aula",
  "aumento",
  "ausente",
  "autor",
  "aval",
  "avance",
  "avaro",
  "ave",
  "avellana",
  "avena",
  "avestruz",
  "avión",
  "aviso",
  "ayer",
  "ayuda",
  "ayuno",
  "azafrán",
  "azar",
  "azote",
  "azúcar",
  "azufre",
  "azul",
  "baba",
  "babor",
  "bache",
  "bahía",
  "baile",
  "bajar",
  "balanza",
  "balcón",
  "balde",
  "bambú",
  "banco",
  "banda",
  "baño",
  "barba",
  "barco",
  "barniz",
  "barro",
  "báscula",
  "bastón",
  "basura",
  "batalla",
  "batería",
  "batir",
  "batuta",
  "baúl",
  "bazar",
  "bebé",
  "bebida",
  "bello",
  "besar",
  "beso",
  "bestia",
  "bicho",
  "bien",
  "bingo",
  "blanco",
  "bloque",
  "blusa",
  "boa",
  "bobina",
  "bobo",
  "boca",
  "bocina",
  "boda",
  "bodega",
  "boina",
  "bola",
  "bolero",
  "bolsa",
  "bomba",
  "bondad",
  "bonito",
  "bono",
  "bonsái",
  "borde",
  "borrar",
  "bosque",
  "bote",
  "botín",
  "bóveda",
  "bozal",
  "bravo",
  "brazo",
  "brecha",
  "breve",
  "brillo",
  "brinco",
  "brisa",
  "broca",
  "broma",
  "bronce",
  "brote",
  "bruja",
  "brusco",
  "bruto",
  "buceo",
  "bucle",
  "bueno",
  "buey",
  "bufanda",
  "bufón",
  "búho",
  "buitre",
  "bulto",
  "burbuja",
  "burla",
  "burro",
  "buscar",
  "butaca",
  "buzón",
  "caballo",
  "cabeza",
  "cabina",
  "cabra",
  "cacao",
  "cadáver",
  "cadena",
  "caer",
  "café",
  "caída",
  "caimán",
  "caja",
  "cajón",
  "cal",
  "calamar",
  "calcio",
  "caldo",
  "calidad",
  "calle",
  "calma",
  "calor",
  "calvo",
  "cama",
  "cambio",
  "camello",
  "camino",
  "campo",
  "cáncer",
  "candil",
  "canela",
  "canguro",
  "canica",
  "canto",
  "caña",
  "cañón",
  "caoba",
  "caos",
  "capaz",
  "capitán",
  "capote",
  "captar",
  "capucha",
  "cara",
  "carbón",
  "cárcel",
  "careta",
  "carga",
  "cariño",
  "carne",
  "carpeta",
  "carro",
  "carta",
  "casa",
  "casco",
  "casero",
  "caspa",
  "castor",
  "catorce",
  "catre",
  "caudal",
  "causa",
  "cazo",
  "cebolla",
  "ceder",
  "cedro",
  "celda",
  "célebre",
  "celoso",
  "célula",
  "cemento",
  "ceniza",
  "centro",
  "cerca",
  "cerdo",
  "cereza",
  "cero",
  "cerrar",
  "certeza",
  "césped",
  "cetro",
  "chacal",
  "chaleco",
  "champú",
  "chancla",
  "chapa",
  "charla",
  "chico",
  "chiste",
  "chivo",
  "choque",
  "choza",
  "chuleta",
  "chupar",
  "ciclón",
  "ciego",
  "cielo",
  "cien",
  "cierto",
  "cifra",
  "cigarro",
  "cima",
  "cinco",
  "cine",
  "cinta",
  "ciprés",
  "circo",
  "ciruela",
  "cisne",
  "cita",
  "ciudad",
  "clamor",
  "clan",
  "claro",
  "clase",
  "clave",
  "cliente",
  "clima",
  "clínica",
  "cobre",
  "cocción",
  "cochino",
  "cocina",
  "coco",
  "código",
  "codo",
  "cofre",
  "coger",
  "cohete",
  "cojín",
  "cojo",
  "cola",
  "colcha",
  "colegio",
  "colgar",
  "colina",
  "collar",
  "colmo",
  "columna",
  "combate",
  "comer",
  "comida",
  "cómodo",
  "compra",
  "conde",
  "conejo",
  "conga",
  "conocer",
  "consejo",
  "contar",
  "copa",
  "copia",
  "corazón",
  "corbata",
  "corcho",
  "cordón",
  "corona",
  "correr",
  "coser",
  "cosmos",
  "costa",
  "cráneo",
  "cráter",
  "crear",
  "crecer",
  "creído",
  "crema",
  "cría",
  "crimen",
  "cripta",
  "crisis",
  "cromo",
  "crónica",
  "croqueta",
  "crudo",
  "cruz",
  "cuadro",
  "cuarto",
  "cuatro",
  "cubo",
  "cubrir",
  "cuchara",
  "cuello",
  "cuento",
  "cuerda",
  "cuesta",
  "cueva",
  "cuidar",
  "culebra",
  "culpa",
  "culto",
  "cumbre",
  "cumplir",
  "cuna",
  "cuneta",
  "cuota",
  "cupón",
  "cúpula",
  "curar",
  "curioso",
  "curso",
  "curva",
  "cutis",
  "dama",
  "danza",
  "dar",
  "dardo",
  "dátil",
  "deber",
  "débil",
  "década",
  "decir",
  "dedo",
  "defensa",
  "definir",
  "dejar",
  "delfín",
  "delgado",
  "delito",
  "demora",
  "denso",
  "dental",
  "deporte",
  "derecho",
  "derrota",
  "desayuno",
  "deseo",
  "desfile",
  "desnudo",
  "destino",
  "desvío",
  "detalle",
  "detener",
  "deuda",
  "día",
  "diablo",
  "diadema",
  "diamante",
  "diana",
  "diario",
  "dibujo",
  "dictar",
  "diente",
  "dieta",
  "diez",
  "difícil",
  "digno",
  "dilema",
  "diluir",
  "dinero",
  "directo",
  "dirigir",
  "disco",
  "diseño",
  "disfraz",
  "diva",
  "divino",
  "doble",
  "doce",
  "dolor",
  "domingo",
  "don",
  "donar",
  "dorado",
  "dormir",
  "dorso",
  "dos",
  "dosis",
  "dragón",
  "droga",
  "ducha",
  "duda",
  "duelo",
  "dueño",
  "dulce",
  "dúo",
  "duque",
  "durar",
  "dureza",
  "duro",
  "ébano",
  "ebrio",
  "echar",
  "eco",
  "ecuador",
  "edad",
  "edición",
  "edificio",
  "editor",
  "educar",
  "efecto",
  "eficaz",
  "eje",
  "ejemplo",
  "elefante",
  "elegir",
  "elemento",
  "elevar",
  "elipse",
  "élite",
  "elixir",
  "elogio",
  "eludir",
  "embudo",
  "emitir",
  "emoción",
  "empate",
  "empeño",
  "empleo",
  "empresa",
  "enano",
  "encargo",
  "enchufe",
  "encía",
  "enemigo",
  "enero",
  "enfado",
  "enfermo",
  "engaño",
  "enigma",
  "enlace",
  "enorme",
  "enredo",
  "ensayo",
  "enseñar",
  "entero",
  "entrar",
  "envase",
  "envío",
  "época",
  "equipo",
  "erizo",
  "escala",
  "escena",
  "escolar",
  "escribir",
  "escudo",
  "esencia",
  "esfera",
  "esfuerzo",
  "espada",
  "espejo",
  "espía",
  "esposa",
  "espuma",
  "esquí",
  "estar",
  "este",
  "estilo",
  "estufa",
  "etapa",
  "eterno",
  "ética",
  "etnia",
  "evadir",
  "evaluar",
  "evento",
  "evitar",
  "exacto",
  "examen",
  "exceso",
  "excusa",
  "exento",
  "exigir",
  "exilio",
  "existir",
  "éxito",
  "experto",
  "explicar",
  "exponer",
  "extremo",
  "fábrica",
  "fábula",
  "fachada",
  "fácil",
  "factor",
  "faena",
  "faja",
  "falda",
  "fallo",
  "falso",
  "faltar",
  "fama",
  "familia",
  "famoso",
  "faraón",
  "farmacia",
  "farol",
  "farsa",
  "fase",
  "fatiga",
  "fauna",
  "favor",
  "fax",
  "febrero",
  "fecha",
  "feliz",
  "feo",
  "feria",
  "feroz",
  "fértil",
  "fervor",
  "festín",
  "fiable",
  "fianza",
  "fiar",
  "fibra",
  "ficción",
  "ficha",
  "fideo",
  "fiebre",
  "fiel",
  "fiera",
  "fiesta",
  "figura",
  "fijar",
  "fijo",
  "fila",
  "filete",
  "filial",
  "filtro",
  "fin",
  "finca",
  "fingir",
  "finito",
  "firma",
  "flaco",
  "flauta",
  "flecha",
  "flor",
  "flota",
  "fluir",
  "flujo",
  "flúor",
  "fobia",
  "foca",
  "fogata",
  "fogón",
  "folio",
  "folleto",
  "fondo",
  "forma",
  "forro",
  "fortuna",
  "forzar",
  "fosa",
  "foto",
  "fracaso",
  "frágil",
  "franja",
  "frase",
  "fraude",
  "freír",
  "freno",
  "fresa",
  "frío",
  "frito",
  "fruta",
  "fuego",
  "fuente",
  "fuerza",
  "fuga",
  "fumar",
  "función",
  "funda",
  "furgón",
  "furia",
  "fusil",
  "fútbol",
  "futuro",
  "gacela",
  "gafas",
  "gaita",
  "gajo",
  "gala",
  "galería",
  "gallo",
  "gamba",
  "ganar",
  "gancho",
  "ganga",
  "ganso",
  "garaje",
  "garza",
  "gasolina",
  "gastar",
  "gato",
  "gavilán",
  "gemelo",
  "gemir",
  "gen",
  "género",
  "genio",
  "gente",
  "geranio",
  "gerente",
  "germen",
  "gesto",
  "gigante",
  "gimnasio",
  "girar",
  "giro",
  "glaciar",
  "globo",
  "gloria",
  "gol",
  "golfo",
  "goloso",
  "golpe",
  "goma",
  "gordo",
  "gorila",
  "gorra",
  "gota",
  "goteo",
  "gozar",
  "grada",
  "gráfico",
  "grano",
  "grasa",
  "gratis",
  "grave",
  "grieta",
  "grillo",
  "gripe",
  "gris",
  "grito",
  "grosor",
  "grúa",
  "grueso",
  "grumo",
  "grupo",
  "guante",
  "guapo",
  "guardia",
  "guerra",
  "guía",
  "guiño",
  "guion",
  "guiso",
  "guitarra",
  "gusano",
  "gustar",
  "haber",
  "hábil",
  "hablar",
  "hacer",
  "hacha",
  "hada",
  "hallar",
  "hamaca",
  "harina",
  "haz",
  "hazaña",
  "hebilla",
  "hebra",
  "hecho",
  "helado",
  "helio",
  "hembra",
  "herir",
  "hermano",
  "héroe",
  "hervir",
  "hielo",
  "hierro",
  "hígado",
  "higiene",
  "hijo",
  "himno",
  "historia",
  "hocico",
  "hogar",
  "hoguera",
  "hoja",
  "hombre",
  "hongo",
  "honor",
  "honra",
  "hora",
  "hormiga",
  "horno",
  "hostil",
  "hoyo",
  "hueco",
  "huelga",
  "huerta",
  "hueso",
  "huevo",
  "huida",
  "huir",
  "humano",
  "húmedo",
  "humilde",
  "humo",
  "hundir",
  "huracán",
  "hurto",
  "icono",
  "ideal",
  "idioma",
  "ídolo",
  "iglesia",
  "iglú",
  "igual",
  "ilegal",
  "ilusión",
  "imagen",
  "imán",
  "imitar",
  "impar",
  "imperio",
  "imponer",
  "impulso",
  "incapaz",
  "índice",
  "inerte",
  "infiel",
  "informe",
  "ingenio",
  "inicio",
  "inmenso",
  "inmune",
  "innato",
  "insecto",
  "instante",
  "interés",
  "íntimo",
  "intuir",
  "inútil",
  "invierno",
  "ira",
  "iris",
  "ironía",
  "isla",
  "islote",
  "jabalí",
  "jabón",
  "jamón",
  "jarabe",
  "jardín",
  "jarra",
  "jaula",
  "jazmín",
  "jefe",
  "jeringa",
  "jinete",
  "jornada",
  "joroba",
  "joven",
  "joya",
  "juerga",
  "jueves",
  "juez",
  "jugador",
  "jugo",
  "juguete",
  "juicio",
  "junco",
  "jungla",
  "junio",
  "juntar",
  "júpiter",
  "jurar",
  "justo",
  "juvenil",
  "juzgar",
  "kilo",
  "koala",
  "labio",
  "lacio",
  "lacra",
  "lado",
  "ladrón",
  "lagarto",
  "lágrima",
  "laguna",
  "laico",
  "lamer",
  "lámina",
  "lámpara",
  "lana",
  "lancha",
  "langosta",
  "lanza",
  "lápiz",
  "largo",
  "larva",
  "lástima",
  "lata",
  "látex",
  "latir",
  "laurel",
  "lavar",
  "lazo",
  "leal",
  "lección",
  "leche",
  "lector",
  "leer",
  "legión",
  "legumbre",
  "lejano",
  "lengua",
  "lento",
  "leña",
  "león",
  "leopardo",
  "lesión",
  "letal",
  "letra",
  "leve",
  "leyenda",
  "libertad",
  "libro",
  "licor",
  "líder",
  "lidiar",
  "lienzo",
  "liga",
  "ligero",
  "lima",
  "límite",
  "limón",
  "limpio",
  "lince",
  "lindo",
  "línea",
  "lingote",
  "lino",
  "linterna",
  "líquido",
  "liso",
  "lista",
  "litera",
  "litio",
  "litro",
  "llaga",
  "llama",
  "llanto",
  "llave",
  "llegar",
  "llenar",
  "llevar",
  "llorar",
  "llover",
  "lluvia",
  "lobo",
  "loción",
  "loco",
  "locura",
  "lógica",
  "logro",
  "lombriz",
  "lomo",
  "lonja",
  "lote",
  "lucha",
  "lucir",
  "lugar",
  "lujo",
  "luna",
  "lunes",
  "lupa",
  "lustro",
  "luto",
  "luz",
  "maceta",
  "macho",
  "madera",
  "madre",
  "maduro",
  "maestro",
  "mafia",
  "magia",
  "mago",
  "maíz",
  "maldad",
  "maleta",
  "malla",
  "malo",
  "mamá",
  "mambo",
  "mamut",
  "manco",
  "mando",
  "manejar",
  "manga",
  "maniquí",
  "manjar",
  "mano",
  "manso",
  "manta",
  "mañana",
  "mapa",
  "máquina",
  "mar",
  "marco",
  "marea",
  "marfil",
  "margen",
  "marido",
  "mármol",
  "marrón",
  "martes",
  "marzo",
  "masa",
  "máscara",
  "masivo",
  "matar",
  "materia",
  "matiz",
  "matriz",
  "máximo",
  "mayor",
  "mazorca",
  "mecha",
  "medalla",
  "medio",
  "médula",
  "mejilla",
  "mejor",
  "melena",
  "melón",
  "memoria",
  "menor",
  "mensaje",
  "mente",
  "menú",
  "mercado",
  "merengue",
  "mérito",
  "mes",
  "mesón",
  "meta",
  "meter",
  "método",
  "metro",
  "mezcla",
  "miedo",
  "miel",
  "miembro",
  "miga",
  "mil",
  "milagro",
  "militar",
  "millón",
  "mimo",
  "mina",
  "minero",
  "mínimo",
  "minuto",
  "miope",
  "mirar",
  "misa",
  "miseria",
  "misil",
  "mismo",
  "mitad",
  "mito",
  "mochila",
  "moción",
  "moda",
  "modelo",
  "moho",
  "mojar",
  "molde",
  "moler",
  "molino",
  "momento",
  "momia",
  "monarca",
  "moneda",
  "monja",
  "monto",
  "moño",
  "morada",
  "morder",
  "moreno",
  "morir",
  "morro",
  "morsa",
  "mortal",
  "mosca",
  "mostrar",
  "motivo",
  "mover",
  "móvil",
  "mozo",
  "mucho",
  "mudar",
  "mueble",
  "muela",
  "muerte",
  "muestra",
  "mugre",
  "mujer",
  "mula",
  "muleta",
  "multa",
  "mundo",
  "muñeca",
  "mural",
  "muro",
  "músculo",
  "museo",
  "musgo",
  "música",
  "muslo",
  "nácar",
  "nación",
  "nadar",
  "naipe",
  "naranja",
  "nariz",
  "narrar",
  "nasal",
  "natal",
  "nativo",
  "natural",
  "náusea",
  "naval",
  "nave",
  "navidad",
  "necio",
  "néctar",
  "negar",
  "negocio",
  "negro",
  "neón",
  "nervio",
  "neto",
  "neutro",
  "nevar",
  "nevera",
  "nicho",
  "nido",
  "niebla",
  "nieto",
  "niñez",
  "niño",
  "nítido",
  "nivel",
  "nobleza",
  "noche",
  "nómina",
  "noria",
  "norma",
  "norte",
  "nota",
  "noticia",
  "novato",
  "novela",
  "novio",
  "nube",
  "nuca",
  "núcleo",
  "nudillo",
  "nudo",
  "nuera",
  "nueve",
  "nuez",
  "nulo",
  "número",
  "nutria",
  "oasis",
  "obeso",
  "obispo",
  "objeto",
  "obra",
  "obrero",
  "observar",
  "obtener",
  "obvio",
  "oca",
  "ocaso",
  "océano",
  "ochenta",
  "ocho",
  "ocio",
  "ocre",
  "octavo",
  "octubre",
  "oculto",
  "ocupar",
  "ocurrir",
  "odiar",
  "odio",
  "odisea",
  "oeste",
  "ofensa",
  "oferta",
  "oficio",
  "ofrecer",
  "ogro",
  "oído",
  "oír",
  "ojo",
  "ola",
  "oleada",
  "olfato",
  "olivo",
  "olla",
  "olmo",
  "olor",
  "olvido",
  "ombligo",
  "onda",
  "onza",
  "opaco",
  "opción",
  "ópera",
  "opinar",
  "oponer",
  "optar",
  "óptica",
  "opuesto",
  "oración",
  "orador",
  "oral",
  "órbita",
  "orca",
  "orden",
  "oreja",
  "órgano",
  "orgía",
  "orgullo",
  "oriente",
  "origen",
  "orilla",
  "oro",
  "orquesta",
  "oruga",
  "osadía",
  "oscuro",
  "osezno",
  "oso",
  "ostra",
  "otoño",
  "otro",
  "oveja",
  "óvulo",
  "óxido",
  "oxígeno",
  "oyente",
  "ozono",
  "pacto",
  "padre",
  "paella",
  "página",
  "pago",
  "país",
  "pájaro",
  "palabra",
  "palco",
  "paleta",
  "pálido",
  "palma",
  "paloma",
  "palpar",
  "pan",
  "panal",
  "pánico",
  "pantera",
  "pañuelo",
  "papá",
  "papel",
  "papilla",
  "paquete",
  "parar",
  "parcela",
  "pared",
  "parir",
  "paro",
  "párpado",
  "parque",
  "párrafo",
  "parte",
  "pasar",
  "paseo",
  "pasión",
  "paso",
  "pasta",
  "pata",
  "patio",
  "patria",
  "pausa",
  "pauta",
  "pavo",
  "payaso",
  "peatón",
  "pecado",
  "pecera",
  "pecho",
  "pedal",
  "pedir",
  "pegar",
  "peine",
  "pelar",
  "peldaño",
  "pelea",
  "peligro",
  "pellejo",
  "pelo",
  "peluca",
  "pena",
  "pensar",
  "peñón",
  "peón",
  "peor",
  "pepino",
  "pequeño",
  "pera",
  "percha",
  "perder",
  "pereza",
  "perfil",
  "perico",
  "perla",
  "permiso",
  "perro",
  "persona",
  "pesa",
  "pesca",
  "pésimo",
  "pestaña",
  "pétalo",
  "petróleo",
  "pez",
  "pezuña",
  "picar",
  "pichón",
  "pie",
  "piedra",
  "pierna",
  "pieza",
  "pijama",
  "pilar",
  "piloto",
  "pimienta",
  "pino",
  "pintor",
  "pinza",
  "piña",
  "piojo",
  "pipa",
  "pirata",
  "pisar",
  "piscina",
  "piso",
  "pista",
  "pitón",
  "pizca",
  "placa",
  "plan",
  "plata",
  "playa",
  "plaza",
  "pleito",
  "pleno",
  "plomo",
  "pluma",
  "plural",
  "pobre",
  "poco",
  "poder",
  "podio",
  "poema",
  "poesía",
  "poeta",
  "polen",
  "policía",
  "pollo",
  "polvo",
  "pomada",
  "pomelo",
  "pomo",
  "pompa",
  "poner",
  "porción",
  "portal",
  "posada",
  "poseer",
  "posible",
  "poste",
  "potencia",
  "potro",
  "pozo",
  "prado",
  "precoz",
  "pregunta",
  "premio",
  "prensa",
  "preso",
  "previo",
  "primo",
  "príncipe",
  "prisión",
  "privar",
  "proa",
  "probar",
  "proceso",
  "producto",
  "proeza",
  "profesor",
  "programa",
  "prole",
  "promesa",
  "pronto",
  "propio",
  "próximo",
  "prueba",
  "público",
  "puchero",
  "pudor",
  "pueblo",
  "puerta",
  "puesto",
  "pulga",
  "pulir",
  "pulmón",
  "pulpo",
  "pulso",
  "puma",
  "punto",
  "puñal",
  "puño",
  "pupa",
  "pupila",
  "puré",
  "quedar",
  "queja",
  "quemar",
  "querer",
  "queso",
  "quieto",
  "química",
  "quince",
  "quitar",
  "rábano",
  "rabia",
  "rabo",
  "ración",
  "radical",
  "raíz",
  "rama",
  "rampa",
  "rancho",
  "rango",
  "rapaz",
  "rápido",
  "rapto",
  "rasgo",
  "raspa",
  "rato",
  "rayo",
  "raza",
  "razón",
  "reacción",
  "realidad",
  "rebaño",
  "rebote",
  "recaer",
  "receta",
  "rechazo",
  "recoger",
  "recreo",
  "recto",
  "recurso",
  "red",
  "redondo",
  "reducir",
  "reflejo",
  "reforma",
  "refrán",
  "refugio",
  "regalo",
  "regir",
  "regla",
  "regreso",
  "rehén",
  "reino",
  "reír",
  "reja",
  "relato",
  "relevo",
  "relieve",
  "relleno",
  "reloj",
  "remar",
  "remedio",
  "remo",
  "rencor",
  "rendir",
  "renta",
  "reparto",
  "repetir",
  "reposo",
  "reptil",
  "res",
  "rescate",
  "resina",
  "respeto",
  "resto",
  "resumen",
  "retiro",
  "retorno",
  "retrato",
  "reunir",
  "revés",
  "revista",
  "rey",
  "rezar",
  "rico",
  "riego",
  "rienda",
  "riesgo",
  "rifa",
  "rígido",
  "rigor",
  "rincón",
  "riñón",
  "río",
  "riqueza",
  "risa",
  "ritmo",
  "rito",
  "rizo",
  "roble",
  "roce",
  "rociar",
  "rodar",
  "rodeo",
  "rodilla",
  "roer",
  "rojizo",
  "rojo",
  "romero",
  "romper",
  "ron",
  "ronco",
  "ronda",
  "ropa",
  "ropero",
  "rosa",
  "rosca",
  "rostro",
  "rotar",
  "rubí",
  "rubor",
  "rudo",
  "rueda",
  "rugir",
  "ruido",
  "ruina",
  "ruleta",
  "rulo",
  "rumbo",
  "rumor",
  "ruptura",
  "ruta",
  "rutina",
  "sábado",
  "saber",
  "sabio",
  "sable",
  "sacar",
  "sagaz",
  "sagrado",
  "sala",
  "saldo",
  "salero",
  "salir",
  "salmón",
  "salón",
  "salsa",
  "salto",
  "salud",
  "salvar",
  "samba",
  "sanción",
  "sandía",
  "sanear",
  "sangre",
  "sanidad",
  "sano",
  "santo",
  "sapo",
  "saque",
  "sardina",
  "sartén",
  "sastre",
  "satán",
  "sauna",
  "saxofón",
  "sección",
  "seco",
  "secreto",
  "secta",
  "sed",
  "seguir",
  "seis",
  "sello",
  "selva",
  "semana",
  "semilla",
  "senda",
  "sensor",
  "señal",
  "señor",
  "separar",
  "sepia",
  "sequía",
  "ser",
  "serie",
  "sermón",
  "servir",
  "sesenta",
  "sesión",
  "seta",
  "setenta",
  "severo",
  "sexo",
  "sexto",
  "sidra",
  "siesta",
  "siete",
  "siglo",
  "signo",
  "sílaba",
  "silbar",
  "silencio",
  "silla",
  "símbolo",
  "simio",
  "sirena",
  "sistema",
  "sitio",
  "situar",
  "sobre",
  "socio",
  "sodio",
  "sol",
  "solapa",
  "soldado",
  "soledad",
  "sólido",
  "soltar",
  "solución",
  "sombra",
  "sondeo",
  "sonido",
  "sonoro",
  "sonrisa",
  "sopa",
  "soplar",
  "soporte",
  "sordo",
  "sorpresa",
  "sorteo",
  "sostén",
  "sótano",
  "suave",
  "subir",
  "suceso",
  "sudor",
  "suegra",
  "suelo",
  "sueño",
  "suerte",
  "sufrir",
  "sujeto",
  "sultán",
  "sumar",
  "superar",
  "suplir",
  "suponer",
  "supremo",
  "sur",
  "surco",
  "sureño",
  "surgir",
  "susto",
  "sutil",
  "tabaco",
  "tabique",
  "tabla",
  "tabú",
  "taco",
  "tacto",
  "tajo",
  "talar",
  "talco",
  "talento",
  "talla",
  "talón",
  "tamaño",
  "tambor",
  "tango",
  "tanque",
  "tapa",
  "tapete",
  "tapia",
  "tapón",
  "taquilla",
  "tarde",
  "tarea",
  "tarifa",
  "tarjeta",
  "tarot",
  "tarro",
  "tarta",
  "tatuaje",
  "tauro",
  "taza",
  "tazón",
  "teatro",
  "techo",
  "tecla",
  "técnica",
  "tejado",
  "tejer",
  "tejido",
  "tela",
  "teléfono",
  "tema",
  "temor",
  "templo",
  "tenaz",
  "tender",
  "tener",
  "tenis",
  "tenso",
  "teoría",
  "terapia",
  "terco",
  "término",
  "ternura",
  "terror",
  "tesis",
  "tesoro",
  "testigo",
  "tetera",
  "texto",
  "tez",
  "tibio",
  "tiburón",
  "tiempo",
  "tienda",
  "tierra",
  "tieso",
  "tigre",
  "tijera",
  "tilde",
  "timbre",
  "tímido",
  "timo",
  "tinta",
  "tío",
  "típico",
  "tipo",
  "tira",
  "tirón",
  "titán",
  "títere",
  "título",
  "tiza",
  "toalla",
  "tobillo",
  "tocar",
  "tocino",
  "todo",
  "toga",
  "toldo",
  "tomar",
  "tono",
  "tonto",
  "topar",
  "tope",
  "toque",
  "tórax",
  "torero",
  "tormenta",
  "torneo",
  "toro",
  "torpedo",
  "torre",
  "torso",
  "tortuga",
  "tos",
  "tosco",
  "toser",
  "tóxico",
  "trabajo",
  "tractor",
  "traer",
  "tráfico",
  "trago",
  "traje",
  "tramo",
  "trance",
  "trato",
  "trauma",
  "trazar",
  "trébol",
  "tregua",
  "treinta",
  "tren",
  "trepar",
  "tres",
  "tribu",
  "trigo",
  "tripa",
  "triste",
  "triunfo",
  "trofeo",
  "trompa",
  "tronco",
  "tropa",
  "trote",
  "trozo",
  "truco",
  "trueno",
  "trufa",
  "tubería",
  "tubo",
  "tuerto",
  "tumba",
  "tumor",
  "túnel",
  "túnica",
  "turbina",
  "turismo",
  "turno",
  "tutor",
  "ubicar",
  "úlcera",
  "umbral",
  "unidad",
  "unir",
  "universo",
  "uno",
  "untar",
  "uña",
  "urbano",
  "urbe",
  "urgente",
  "urna",
  "usar",
  "usuario",
  "útil",
  "utopía",
  "uva",
  "vaca",
  "vacío",
  "vacuna",
  "vagar",
  "vago",
  "vaina",
  "vajilla",
  "vale",
  "válido",
  "valle",
  "valor",
  "válvula",
  "vampiro",
  "vara",
  "variar",
  "varón",
  "vaso",
  "vecino",
  "vector",
  "vehículo",
  "veinte",
  "vejez",
  "vela",
  "velero",
  "veloz",
  "vena",
  "vencer",
  "venda",
  "veneno",
  "vengar",
  "venir",
  "venta",
  "venus",
  "ver",
  "verano",
  "verbo",
  "verde",
  "vereda",
  "verja",
  "verso",
  "verter",
  "vía",
  "viaje",
  "vibrar",
  "vicio",
  "víctima",
  "vida",
  "vídeo",
  "vidrio",
  "viejo",
  "viernes",
  "vigor",
  "vil",
  "villa",
  "vinagre",
  "vino",
  "viñedo",
  "violín",
  "viral",
  "virgo",
  "virtud",
  "visor",
  "víspera",
  "vista",
  "vitamina",
  "viudo",
  "vivaz",
  "vivero",
  "vivir",
  "vivo",
  "volcán",
  "volumen",
  "volver",
  "voraz",
  "votar",
  "voto",
  "voz",
  "vuelo",
  "vulgar",
  "yacer",
  "yate",
  "yegua",
  "yema",
  "yerno",
  "yeso",
  "yodo",
  "yoga",
  "yogur",
  "zafiro",
  "zanja",
  "zapato",
  "zarza",
  "zona",
  "zorro",
  "zumo",
  "zurdo"
], NN = [
  "あいこくしん",
  "あいさつ",
  "あいだ",
  "あおぞら",
  "あかちゃん",
  "あきる",
  "あけがた",
  "あける",
  "あこがれる",
  "あさい",
  "あさひ",
  "あしあと",
  "あじわう",
  "あずかる",
  "あずき",
  "あそぶ",
  "あたえる",
  "あたためる",
  "あたりまえ",
  "あたる",
  "あつい",
  "あつかう",
  "あっしゅく",
  "あつまり",
  "あつめる",
  "あてな",
  "あてはまる",
  "あひる",
  "あぶら",
  "あぶる",
  "あふれる",
  "あまい",
  "あまど",
  "あまやかす",
  "あまり",
  "あみもの",
  "あめりか",
  "あやまる",
  "あゆむ",
  "あらいぐま",
  "あらし",
  "あらすじ",
  "あらためる",
  "あらゆる",
  "あらわす",
  "ありがとう",
  "あわせる",
  "あわてる",
  "あんい",
  "あんがい",
  "あんこ",
  "あんぜん",
  "あんてい",
  "あんない",
  "あんまり",
  "いいだす",
  "いおん",
  "いがい",
  "いがく",
  "いきおい",
  "いきなり",
  "いきもの",
  "いきる",
  "いくじ",
  "いくぶん",
  "いけばな",
  "いけん",
  "いこう",
  "いこく",
  "いこつ",
  "いさましい",
  "いさん",
  "いしき",
  "いじゅう",
  "いじょう",
  "いじわる",
  "いずみ",
  "いずれ",
  "いせい",
  "いせえび",
  "いせかい",
  "いせき",
  "いぜん",
  "いそうろう",
  "いそがしい",
  "いだい",
  "いだく",
  "いたずら",
  "いたみ",
  "いたりあ",
  "いちおう",
  "いちじ",
  "いちど",
  "いちば",
  "いちぶ",
  "いちりゅう",
  "いつか",
  "いっしゅん",
  "いっせい",
  "いっそう",
  "いったん",
  "いっち",
  "いってい",
  "いっぽう",
  "いてざ",
  "いてん",
  "いどう",
  "いとこ",
  "いない",
  "いなか",
  "いねむり",
  "いのち",
  "いのる",
  "いはつ",
  "いばる",
  "いはん",
  "いびき",
  "いひん",
  "いふく",
  "いへん",
  "いほう",
  "いみん",
  "いもうと",
  "いもたれ",
  "いもり",
  "いやがる",
  "いやす",
  "いよかん",
  "いよく",
  "いらい",
  "いらすと",
  "いりぐち",
  "いりょう",
  "いれい",
  "いれもの",
  "いれる",
  "いろえんぴつ",
  "いわい",
  "いわう",
  "いわかん",
  "いわば",
  "いわゆる",
  "いんげんまめ",
  "いんさつ",
  "いんしょう",
  "いんよう",
  "うえき",
  "うえる",
  "うおざ",
  "うがい",
  "うかぶ",
  "うかべる",
  "うきわ",
  "うくらいな",
  "うくれれ",
  "うけたまわる",
  "うけつけ",
  "うけとる",
  "うけもつ",
  "うける",
  "うごかす",
  "うごく",
  "うこん",
  "うさぎ",
  "うしなう",
  "うしろがみ",
  "うすい",
  "うすぎ",
  "うすぐらい",
  "うすめる",
  "うせつ",
  "うちあわせ",
  "うちがわ",
  "うちき",
  "うちゅう",
  "うっかり",
  "うつくしい",
  "うったえる",
  "うつる",
  "うどん",
  "うなぎ",
  "うなじ",
  "うなずく",
  "うなる",
  "うねる",
  "うのう",
  "うぶげ",
  "うぶごえ",
  "うまれる",
  "うめる",
  "うもう",
  "うやまう",
  "うよく",
  "うらがえす",
  "うらぐち",
  "うらない",
  "うりあげ",
  "うりきれ",
  "うるさい",
  "うれしい",
  "うれゆき",
  "うれる",
  "うろこ",
  "うわき",
  "うわさ",
  "うんこう",
  "うんちん",
  "うんてん",
  "うんどう",
  "えいえん",
  "えいが",
  "えいきょう",
  "えいご",
  "えいせい",
  "えいぶん",
  "えいよう",
  "えいわ",
  "えおり",
  "えがお",
  "えがく",
  "えきたい",
  "えくせる",
  "えしゃく",
  "えすて",
  "えつらん",
  "えのぐ",
  "えほうまき",
  "えほん",
  "えまき",
  "えもじ",
  "えもの",
  "えらい",
  "えらぶ",
  "えりあ",
  "えんえん",
  "えんかい",
  "えんぎ",
  "えんげき",
  "えんしゅう",
  "えんぜつ",
  "えんそく",
  "えんちょう",
  "えんとつ",
  "おいかける",
  "おいこす",
  "おいしい",
  "おいつく",
  "おうえん",
  "おうさま",
  "おうじ",
  "おうせつ",
  "おうたい",
  "おうふく",
  "おうべい",
  "おうよう",
  "おえる",
  "おおい",
  "おおう",
  "おおどおり",
  "おおや",
  "おおよそ",
  "おかえり",
  "おかず",
  "おがむ",
  "おかわり",
  "おぎなう",
  "おきる",
  "おくさま",
  "おくじょう",
  "おくりがな",
  "おくる",
  "おくれる",
  "おこす",
  "おこなう",
  "おこる",
  "おさえる",
  "おさない",
  "おさめる",
  "おしいれ",
  "おしえる",
  "おじぎ",
  "おじさん",
  "おしゃれ",
  "おそらく",
  "おそわる",
  "おたがい",
  "おたく",
  "おだやか",
  "おちつく",
  "おっと",
  "おつり",
  "おでかけ",
  "おとしもの",
  "おとなしい",
  "おどり",
  "おどろかす",
  "おばさん",
  "おまいり",
  "おめでとう",
  "おもいで",
  "おもう",
  "おもたい",
  "おもちゃ",
  "おやつ",
  "おやゆび",
  "およぼす",
  "おらんだ",
  "おろす",
  "おんがく",
  "おんけい",
  "おんしゃ",
  "おんせん",
  "おんだん",
  "おんちゅう",
  "おんどけい",
  "かあつ",
  "かいが",
  "がいき",
  "がいけん",
  "がいこう",
  "かいさつ",
  "かいしゃ",
  "かいすいよく",
  "かいぜん",
  "かいぞうど",
  "かいつう",
  "かいてん",
  "かいとう",
  "かいふく",
  "がいへき",
  "かいほう",
  "かいよう",
  "がいらい",
  "かいわ",
  "かえる",
  "かおり",
  "かかえる",
  "かがく",
  "かがし",
  "かがみ",
  "かくご",
  "かくとく",
  "かざる",
  "がぞう",
  "かたい",
  "かたち",
  "がちょう",
  "がっきゅう",
  "がっこう",
  "がっさん",
  "がっしょう",
  "かなざわし",
  "かのう",
  "がはく",
  "かぶか",
  "かほう",
  "かほご",
  "かまう",
  "かまぼこ",
  "かめれおん",
  "かゆい",
  "かようび",
  "からい",
  "かるい",
  "かろう",
  "かわく",
  "かわら",
  "がんか",
  "かんけい",
  "かんこう",
  "かんしゃ",
  "かんそう",
  "かんたん",
  "かんち",
  "がんばる",
  "きあい",
  "きあつ",
  "きいろ",
  "ぎいん",
  "きうい",
  "きうん",
  "きえる",
  "きおう",
  "きおく",
  "きおち",
  "きおん",
  "きかい",
  "きかく",
  "きかんしゃ",
  "ききて",
  "きくばり",
  "きくらげ",
  "きけんせい",
  "きこう",
  "きこえる",
  "きこく",
  "きさい",
  "きさく",
  "きさま",
  "きさらぎ",
  "ぎじかがく",
  "ぎしき",
  "ぎじたいけん",
  "ぎじにってい",
  "ぎじゅつしゃ",
  "きすう",
  "きせい",
  "きせき",
  "きせつ",
  "きそう",
  "きぞく",
  "きぞん",
  "きたえる",
  "きちょう",
  "きつえん",
  "ぎっちり",
  "きつつき",
  "きつね",
  "きてい",
  "きどう",
  "きどく",
  "きない",
  "きなが",
  "きなこ",
  "きぬごし",
  "きねん",
  "きのう",
  "きのした",
  "きはく",
  "きびしい",
  "きひん",
  "きふく",
  "きぶん",
  "きぼう",
  "きほん",
  "きまる",
  "きみつ",
  "きむずかしい",
  "きめる",
  "きもだめし",
  "きもち",
  "きもの",
  "きゃく",
  "きやく",
  "ぎゅうにく",
  "きよう",
  "きょうりゅう",
  "きらい",
  "きらく",
  "きりん",
  "きれい",
  "きれつ",
  "きろく",
  "ぎろん",
  "きわめる",
  "ぎんいろ",
  "きんかくじ",
  "きんじょ",
  "きんようび",
  "ぐあい",
  "くいず",
  "くうかん",
  "くうき",
  "くうぐん",
  "くうこう",
  "ぐうせい",
  "くうそう",
  "ぐうたら",
  "くうふく",
  "くうぼ",
  "くかん",
  "くきょう",
  "くげん",
  "ぐこう",
  "くさい",
  "くさき",
  "くさばな",
  "くさる",
  "くしゃみ",
  "くしょう",
  "くすのき",
  "くすりゆび",
  "くせげ",
  "くせん",
  "ぐたいてき",
  "くださる",
  "くたびれる",
  "くちこみ",
  "くちさき",
  "くつした",
  "ぐっすり",
  "くつろぐ",
  "くとうてん",
  "くどく",
  "くなん",
  "くねくね",
  "くのう",
  "くふう",
  "くみあわせ",
  "くみたてる",
  "くめる",
  "くやくしょ",
  "くらす",
  "くらべる",
  "くるま",
  "くれる",
  "くろう",
  "くわしい",
  "ぐんかん",
  "ぐんしょく",
  "ぐんたい",
  "ぐんて",
  "けあな",
  "けいかく",
  "けいけん",
  "けいこ",
  "けいさつ",
  "げいじゅつ",
  "けいたい",
  "げいのうじん",
  "けいれき",
  "けいろ",
  "けおとす",
  "けおりもの",
  "げきか",
  "げきげん",
  "げきだん",
  "げきちん",
  "げきとつ",
  "げきは",
  "げきやく",
  "げこう",
  "げこくじょう",
  "げざい",
  "けさき",
  "げざん",
  "けしき",
  "けしごむ",
  "けしょう",
  "げすと",
  "けたば",
  "けちゃっぷ",
  "けちらす",
  "けつあつ",
  "けつい",
  "けつえき",
  "けっこん",
  "けつじょ",
  "けっせき",
  "けってい",
  "けつまつ",
  "げつようび",
  "げつれい",
  "けつろん",
  "げどく",
  "けとばす",
  "けとる",
  "けなげ",
  "けなす",
  "けなみ",
  "けぬき",
  "げねつ",
  "けねん",
  "けはい",
  "げひん",
  "けぶかい",
  "げぼく",
  "けまり",
  "けみかる",
  "けむし",
  "けむり",
  "けもの",
  "けらい",
  "けろけろ",
  "けわしい",
  "けんい",
  "けんえつ",
  "けんお",
  "けんか",
  "げんき",
  "けんげん",
  "けんこう",
  "けんさく",
  "けんしゅう",
  "けんすう",
  "げんそう",
  "けんちく",
  "けんてい",
  "けんとう",
  "けんない",
  "けんにん",
  "げんぶつ",
  "けんま",
  "けんみん",
  "けんめい",
  "けんらん",
  "けんり",
  "こあくま",
  "こいぬ",
  "こいびと",
  "ごうい",
  "こうえん",
  "こうおん",
  "こうかん",
  "ごうきゅう",
  "ごうけい",
  "こうこう",
  "こうさい",
  "こうじ",
  "こうすい",
  "ごうせい",
  "こうそく",
  "こうたい",
  "こうちゃ",
  "こうつう",
  "こうてい",
  "こうどう",
  "こうない",
  "こうはい",
  "ごうほう",
  "ごうまん",
  "こうもく",
  "こうりつ",
  "こえる",
  "こおり",
  "ごかい",
  "ごがつ",
  "ごかん",
  "こくご",
  "こくさい",
  "こくとう",
  "こくない",
  "こくはく",
  "こぐま",
  "こけい",
  "こける",
  "ここのか",
  "こころ",
  "こさめ",
  "こしつ",
  "こすう",
  "こせい",
  "こせき",
  "こぜん",
  "こそだて",
  "こたい",
  "こたえる",
  "こたつ",
  "こちょう",
  "こっか",
  "こつこつ",
  "こつばん",
  "こつぶ",
  "こてい",
  "こてん",
  "ことがら",
  "ことし",
  "ことば",
  "ことり",
  "こなごな",
  "こねこね",
  "このまま",
  "このみ",
  "このよ",
  "ごはん",
  "こひつじ",
  "こふう",
  "こふん",
  "こぼれる",
  "ごまあぶら",
  "こまかい",
  "ごますり",
  "こまつな",
  "こまる",
  "こむぎこ",
  "こもじ",
  "こもち",
  "こもの",
  "こもん",
  "こやく",
  "こやま",
  "こゆう",
  "こゆび",
  "こよい",
  "こよう",
  "こりる",
  "これくしょん",
  "ころっけ",
  "こわもて",
  "こわれる",
  "こんいん",
  "こんかい",
  "こんき",
  "こんしゅう",
  "こんすい",
  "こんだて",
  "こんとん",
  "こんなん",
  "こんびに",
  "こんぽん",
  "こんまけ",
  "こんや",
  "こんれい",
  "こんわく",
  "ざいえき",
  "さいかい",
  "さいきん",
  "ざいげん",
  "ざいこ",
  "さいしょ",
  "さいせい",
  "ざいたく",
  "ざいちゅう",
  "さいてき",
  "ざいりょう",
  "さうな",
  "さかいし",
  "さがす",
  "さかな",
  "さかみち",
  "さがる",
  "さぎょう",
  "さくし",
  "さくひん",
  "さくら",
  "さこく",
  "さこつ",
  "さずかる",
  "ざせき",
  "さたん",
  "さつえい",
  "ざつおん",
  "ざっか",
  "ざつがく",
  "さっきょく",
  "ざっし",
  "さつじん",
  "ざっそう",
  "さつたば",
  "さつまいも",
  "さてい",
  "さといも",
  "さとう",
  "さとおや",
  "さとし",
  "さとる",
  "さのう",
  "さばく",
  "さびしい",
  "さべつ",
  "さほう",
  "さほど",
  "さます",
  "さみしい",
  "さみだれ",
  "さむけ",
  "さめる",
  "さやえんどう",
  "さゆう",
  "さよう",
  "さよく",
  "さらだ",
  "ざるそば",
  "さわやか",
  "さわる",
  "さんいん",
  "さんか",
  "さんきゃく",
  "さんこう",
  "さんさい",
  "ざんしょ",
  "さんすう",
  "さんせい",
  "さんそ",
  "さんち",
  "さんま",
  "さんみ",
  "さんらん",
  "しあい",
  "しあげ",
  "しあさって",
  "しあわせ",
  "しいく",
  "しいん",
  "しうち",
  "しえい",
  "しおけ",
  "しかい",
  "しかく",
  "じかん",
  "しごと",
  "しすう",
  "じだい",
  "したうけ",
  "したぎ",
  "したて",
  "したみ",
  "しちょう",
  "しちりん",
  "しっかり",
  "しつじ",
  "しつもん",
  "してい",
  "してき",
  "してつ",
  "じてん",
  "じどう",
  "しなぎれ",
  "しなもの",
  "しなん",
  "しねま",
  "しねん",
  "しのぐ",
  "しのぶ",
  "しはい",
  "しばかり",
  "しはつ",
  "しはらい",
  "しはん",
  "しひょう",
  "しふく",
  "じぶん",
  "しへい",
  "しほう",
  "しほん",
  "しまう",
  "しまる",
  "しみん",
  "しむける",
  "じむしょ",
  "しめい",
  "しめる",
  "しもん",
  "しゃいん",
  "しゃうん",
  "しゃおん",
  "じゃがいも",
  "しやくしょ",
  "しゃくほう",
  "しゃけん",
  "しゃこ",
  "しゃざい",
  "しゃしん",
  "しゃせん",
  "しゃそう",
  "しゃたい",
  "しゃちょう",
  "しゃっきん",
  "じゃま",
  "しゃりん",
  "しゃれい",
  "じゆう",
  "じゅうしょ",
  "しゅくはく",
  "じゅしん",
  "しゅっせき",
  "しゅみ",
  "しゅらば",
  "じゅんばん",
  "しょうかい",
  "しょくたく",
  "しょっけん",
  "しょどう",
  "しょもつ",
  "しらせる",
  "しらべる",
  "しんか",
  "しんこう",
  "じんじゃ",
  "しんせいじ",
  "しんちく",
  "しんりん",
  "すあげ",
  "すあし",
  "すあな",
  "ずあん",
  "すいえい",
  "すいか",
  "すいとう",
  "ずいぶん",
  "すいようび",
  "すうがく",
  "すうじつ",
  "すうせん",
  "すおどり",
  "すきま",
  "すくう",
  "すくない",
  "すける",
  "すごい",
  "すこし",
  "ずさん",
  "すずしい",
  "すすむ",
  "すすめる",
  "すっかり",
  "ずっしり",
  "ずっと",
  "すてき",
  "すてる",
  "すねる",
  "すのこ",
  "すはだ",
  "すばらしい",
  "ずひょう",
  "ずぶぬれ",
  "すぶり",
  "すふれ",
  "すべて",
  "すべる",
  "ずほう",
  "すぼん",
  "すまい",
  "すめし",
  "すもう",
  "すやき",
  "すらすら",
  "するめ",
  "すれちがう",
  "すろっと",
  "すわる",
  "すんぜん",
  "すんぽう",
  "せあぶら",
  "せいかつ",
  "せいげん",
  "せいじ",
  "せいよう",
  "せおう",
  "せかいかん",
  "せきにん",
  "せきむ",
  "せきゆ",
  "せきらんうん",
  "せけん",
  "せこう",
  "せすじ",
  "せたい",
  "せたけ",
  "せっかく",
  "せっきゃく",
  "ぜっく",
  "せっけん",
  "せっこつ",
  "せっさたくま",
  "せつぞく",
  "せつだん",
  "せつでん",
  "せっぱん",
  "せつび",
  "せつぶん",
  "せつめい",
  "せつりつ",
  "せなか",
  "せのび",
  "せはば",
  "せびろ",
  "せぼね",
  "せまい",
  "せまる",
  "せめる",
  "せもたれ",
  "せりふ",
  "ぜんあく",
  "せんい",
  "せんえい",
  "せんか",
  "せんきょ",
  "せんく",
  "せんげん",
  "ぜんご",
  "せんさい",
  "せんしゅ",
  "せんすい",
  "せんせい",
  "せんぞ",
  "せんたく",
  "せんちょう",
  "せんてい",
  "せんとう",
  "せんぬき",
  "せんねん",
  "せんぱい",
  "ぜんぶ",
  "ぜんぽう",
  "せんむ",
  "せんめんじょ",
  "せんもん",
  "せんやく",
  "せんゆう",
  "せんよう",
  "ぜんら",
  "ぜんりゃく",
  "せんれい",
  "せんろ",
  "そあく",
  "そいとげる",
  "そいね",
  "そうがんきょう",
  "そうき",
  "そうご",
  "そうしん",
  "そうだん",
  "そうなん",
  "そうび",
  "そうめん",
  "そうり",
  "そえもの",
  "そえん",
  "そがい",
  "そげき",
  "そこう",
  "そこそこ",
  "そざい",
  "そしな",
  "そせい",
  "そせん",
  "そそぐ",
  "そだてる",
  "そつう",
  "そつえん",
  "そっかん",
  "そつぎょう",
  "そっけつ",
  "そっこう",
  "そっせん",
  "そっと",
  "そとがわ",
  "そとづら",
  "そなえる",
  "そなた",
  "そふぼ",
  "そぼく",
  "そぼろ",
  "そまつ",
  "そまる",
  "そむく",
  "そむりえ",
  "そめる",
  "そもそも",
  "そよかぜ",
  "そらまめ",
  "そろう",
  "そんかい",
  "そんけい",
  "そんざい",
  "そんしつ",
  "そんぞく",
  "そんちょう",
  "ぞんび",
  "ぞんぶん",
  "そんみん",
  "たあい",
  "たいいん",
  "たいうん",
  "たいえき",
  "たいおう",
  "だいがく",
  "たいき",
  "たいぐう",
  "たいけん",
  "たいこ",
  "たいざい",
  "だいじょうぶ",
  "だいすき",
  "たいせつ",
  "たいそう",
  "だいたい",
  "たいちょう",
  "たいてい",
  "だいどころ",
  "たいない",
  "たいねつ",
  "たいのう",
  "たいはん",
  "だいひょう",
  "たいふう",
  "たいへん",
  "たいほ",
  "たいまつばな",
  "たいみんぐ",
  "たいむ",
  "たいめん",
  "たいやき",
  "たいよう",
  "たいら",
  "たいりょく",
  "たいる",
  "たいわん",
  "たうえ",
  "たえる",
  "たおす",
  "たおる",
  "たおれる",
  "たかい",
  "たかね",
  "たきび",
  "たくさん",
  "たこく",
  "たこやき",
  "たさい",
  "たしざん",
  "だじゃれ",
  "たすける",
  "たずさわる",
  "たそがれ",
  "たたかう",
  "たたく",
  "ただしい",
  "たたみ",
  "たちばな",
  "だっかい",
  "だっきゃく",
  "だっこ",
  "だっしゅつ",
  "だったい",
  "たてる",
  "たとえる",
  "たなばた",
  "たにん",
  "たぬき",
  "たのしみ",
  "たはつ",
  "たぶん",
  "たべる",
  "たぼう",
  "たまご",
  "たまる",
  "だむる",
  "ためいき",
  "ためす",
  "ためる",
  "たもつ",
  "たやすい",
  "たよる",
  "たらす",
  "たりきほんがん",
  "たりょう",
  "たりる",
  "たると",
  "たれる",
  "たれんと",
  "たろっと",
  "たわむれる",
  "だんあつ",
  "たんい",
  "たんおん",
  "たんか",
  "たんき",
  "たんけん",
  "たんご",
  "たんさん",
  "たんじょうび",
  "だんせい",
  "たんそく",
  "たんたい",
  "だんち",
  "たんてい",
  "たんとう",
  "だんな",
  "たんにん",
  "だんねつ",
  "たんのう",
  "たんぴん",
  "だんぼう",
  "たんまつ",
  "たんめい",
  "だんれつ",
  "だんろ",
  "だんわ",
  "ちあい",
  "ちあん",
  "ちいき",
  "ちいさい",
  "ちえん",
  "ちかい",
  "ちから",
  "ちきゅう",
  "ちきん",
  "ちけいず",
  "ちけん",
  "ちこく",
  "ちさい",
  "ちしき",
  "ちしりょう",
  "ちせい",
  "ちそう",
  "ちたい",
  "ちたん",
  "ちちおや",
  "ちつじょ",
  "ちてき",
  "ちてん",
  "ちぬき",
  "ちぬり",
  "ちのう",
  "ちひょう",
  "ちへいせん",
  "ちほう",
  "ちまた",
  "ちみつ",
  "ちみどろ",
  "ちめいど",
  "ちゃんこなべ",
  "ちゅうい",
  "ちゆりょく",
  "ちょうし",
  "ちょさくけん",
  "ちらし",
  "ちらみ",
  "ちりがみ",
  "ちりょう",
  "ちるど",
  "ちわわ",
  "ちんたい",
  "ちんもく",
  "ついか",
  "ついたち",
  "つうか",
  "つうじょう",
  "つうはん",
  "つうわ",
  "つかう",
  "つかれる",
  "つくね",
  "つくる",
  "つけね",
  "つける",
  "つごう",
  "つたえる",
  "つづく",
  "つつじ",
  "つつむ",
  "つとめる",
  "つながる",
  "つなみ",
  "つねづね",
  "つのる",
  "つぶす",
  "つまらない",
  "つまる",
  "つみき",
  "つめたい",
  "つもり",
  "つもる",
  "つよい",
  "つるぼ",
  "つるみく",
  "つわもの",
  "つわり",
  "てあし",
  "てあて",
  "てあみ",
  "ていおん",
  "ていか",
  "ていき",
  "ていけい",
  "ていこく",
  "ていさつ",
  "ていし",
  "ていせい",
  "ていたい",
  "ていど",
  "ていねい",
  "ていひょう",
  "ていへん",
  "ていぼう",
  "てうち",
  "ておくれ",
  "てきとう",
  "てくび",
  "でこぼこ",
  "てさぎょう",
  "てさげ",
  "てすり",
  "てそう",
  "てちがい",
  "てちょう",
  "てつがく",
  "てつづき",
  "でっぱ",
  "てつぼう",
  "てつや",
  "でぬかえ",
  "てぬき",
  "てぬぐい",
  "てのひら",
  "てはい",
  "てぶくろ",
  "てふだ",
  "てほどき",
  "てほん",
  "てまえ",
  "てまきずし",
  "てみじか",
  "てみやげ",
  "てらす",
  "てれび",
  "てわけ",
  "てわたし",
  "でんあつ",
  "てんいん",
  "てんかい",
  "てんき",
  "てんぐ",
  "てんけん",
  "てんごく",
  "てんさい",
  "てんし",
  "てんすう",
  "でんち",
  "てんてき",
  "てんとう",
  "てんない",
  "てんぷら",
  "てんぼうだい",
  "てんめつ",
  "てんらんかい",
  "でんりょく",
  "でんわ",
  "どあい",
  "といれ",
  "どうかん",
  "とうきゅう",
  "どうぐ",
  "とうし",
  "とうむぎ",
  "とおい",
  "とおか",
  "とおく",
  "とおす",
  "とおる",
  "とかい",
  "とかす",
  "ときおり",
  "ときどき",
  "とくい",
  "とくしゅう",
  "とくてん",
  "とくに",
  "とくべつ",
  "とけい",
  "とける",
  "とこや",
  "とさか",
  "としょかん",
  "とそう",
  "とたん",
  "とちゅう",
  "とっきゅう",
  "とっくん",
  "とつぜん",
  "とつにゅう",
  "とどける",
  "ととのえる",
  "とない",
  "となえる",
  "となり",
  "とのさま",
  "とばす",
  "どぶがわ",
  "とほう",
  "とまる",
  "とめる",
  "ともだち",
  "ともる",
  "どようび",
  "とらえる",
  "とんかつ",
  "どんぶり",
  "ないかく",
  "ないこう",
  "ないしょ",
  "ないす",
  "ないせん",
  "ないそう",
  "なおす",
  "ながい",
  "なくす",
  "なげる",
  "なこうど",
  "なさけ",
  "なたでここ",
  "なっとう",
  "なつやすみ",
  "ななおし",
  "なにごと",
  "なにもの",
  "なにわ",
  "なのか",
  "なふだ",
  "なまいき",
  "なまえ",
  "なまみ",
  "なみだ",
  "なめらか",
  "なめる",
  "なやむ",
  "ならう",
  "ならび",
  "ならぶ",
  "なれる",
  "なわとび",
  "なわばり",
  "にあう",
  "にいがた",
  "にうけ",
  "におい",
  "にかい",
  "にがて",
  "にきび",
  "にくしみ",
  "にくまん",
  "にげる",
  "にさんかたんそ",
  "にしき",
  "にせもの",
  "にちじょう",
  "にちようび",
  "にっか",
  "にっき",
  "にっけい",
  "にっこう",
  "にっさん",
  "にっしょく",
  "にっすう",
  "にっせき",
  "にってい",
  "になう",
  "にほん",
  "にまめ",
  "にもつ",
  "にやり",
  "にゅういん",
  "にりんしゃ",
  "にわとり",
  "にんい",
  "にんか",
  "にんき",
  "にんげん",
  "にんしき",
  "にんずう",
  "にんそう",
  "にんたい",
  "にんち",
  "にんてい",
  "にんにく",
  "にんぷ",
  "にんまり",
  "にんむ",
  "にんめい",
  "にんよう",
  "ぬいくぎ",
  "ぬかす",
  "ぬぐいとる",
  "ぬぐう",
  "ぬくもり",
  "ぬすむ",
  "ぬまえび",
  "ぬめり",
  "ぬらす",
  "ぬんちゃく",
  "ねあげ",
  "ねいき",
  "ねいる",
  "ねいろ",
  "ねぐせ",
  "ねくたい",
  "ねくら",
  "ねこぜ",
  "ねこむ",
  "ねさげ",
  "ねすごす",
  "ねそべる",
  "ねだん",
  "ねつい",
  "ねっしん",
  "ねつぞう",
  "ねったいぎょ",
  "ねぶそく",
  "ねふだ",
  "ねぼう",
  "ねほりはほり",
  "ねまき",
  "ねまわし",
  "ねみみ",
  "ねむい",
  "ねむたい",
  "ねもと",
  "ねらう",
  "ねわざ",
  "ねんいり",
  "ねんおし",
  "ねんかん",
  "ねんきん",
  "ねんぐ",
  "ねんざ",
  "ねんし",
  "ねんちゃく",
  "ねんど",
  "ねんぴ",
  "ねんぶつ",
  "ねんまつ",
  "ねんりょう",
  "ねんれい",
  "のいず",
  "のおづま",
  "のがす",
  "のきなみ",
  "のこぎり",
  "のこす",
  "のこる",
  "のせる",
  "のぞく",
  "のぞむ",
  "のたまう",
  "のちほど",
  "のっく",
  "のばす",
  "のはら",
  "のべる",
  "のぼる",
  "のみもの",
  "のやま",
  "のらいぬ",
  "のらねこ",
  "のりもの",
  "のりゆき",
  "のれん",
  "のんき",
  "ばあい",
  "はあく",
  "ばあさん",
  "ばいか",
  "ばいく",
  "はいけん",
  "はいご",
  "はいしん",
  "はいすい",
  "はいせん",
  "はいそう",
  "はいち",
  "ばいばい",
  "はいれつ",
  "はえる",
  "はおる",
  "はかい",
  "ばかり",
  "はかる",
  "はくしゅ",
  "はけん",
  "はこぶ",
  "はさみ",
  "はさん",
  "はしご",
  "ばしょ",
  "はしる",
  "はせる",
  "ぱそこん",
  "はそん",
  "はたん",
  "はちみつ",
  "はつおん",
  "はっかく",
  "はづき",
  "はっきり",
  "はっくつ",
  "はっけん",
  "はっこう",
  "はっさん",
  "はっしん",
  "はったつ",
  "はっちゅう",
  "はってん",
  "はっぴょう",
  "はっぽう",
  "はなす",
  "はなび",
  "はにかむ",
  "はぶらし",
  "はみがき",
  "はむかう",
  "はめつ",
  "はやい",
  "はやし",
  "はらう",
  "はろうぃん",
  "はわい",
  "はんい",
  "はんえい",
  "はんおん",
  "はんかく",
  "はんきょう",
  "ばんぐみ",
  "はんこ",
  "はんしゃ",
  "はんすう",
  "はんだん",
  "ぱんち",
  "ぱんつ",
  "はんてい",
  "はんとし",
  "はんのう",
  "はんぱ",
  "はんぶん",
  "はんぺん",
  "はんぼうき",
  "はんめい",
  "はんらん",
  "はんろん",
  "ひいき",
  "ひうん",
  "ひえる",
  "ひかく",
  "ひかり",
  "ひかる",
  "ひかん",
  "ひくい",
  "ひけつ",
  "ひこうき",
  "ひこく",
  "ひさい",
  "ひさしぶり",
  "ひさん",
  "びじゅつかん",
  "ひしょ",
  "ひそか",
  "ひそむ",
  "ひたむき",
  "ひだり",
  "ひたる",
  "ひつぎ",
  "ひっこし",
  "ひっし",
  "ひつじゅひん",
  "ひっす",
  "ひつぜん",
  "ぴったり",
  "ぴっちり",
  "ひつよう",
  "ひてい",
  "ひとごみ",
  "ひなまつり",
  "ひなん",
  "ひねる",
  "ひはん",
  "ひびく",
  "ひひょう",
  "ひほう",
  "ひまわり",
  "ひまん",
  "ひみつ",
  "ひめい",
  "ひめじし",
  "ひやけ",
  "ひやす",
  "ひよう",
  "びょうき",
  "ひらがな",
  "ひらく",
  "ひりつ",
  "ひりょう",
  "ひるま",
  "ひるやすみ",
  "ひれい",
  "ひろい",
  "ひろう",
  "ひろき",
  "ひろゆき",
  "ひんかく",
  "ひんけつ",
  "ひんこん",
  "ひんしゅ",
  "ひんそう",
  "ぴんち",
  "ひんぱん",
  "びんぼう",
  "ふあん",
  "ふいうち",
  "ふうけい",
  "ふうせん",
  "ぷうたろう",
  "ふうとう",
  "ふうふ",
  "ふえる",
  "ふおん",
  "ふかい",
  "ふきん",
  "ふくざつ",
  "ふくぶくろ",
  "ふこう",
  "ふさい",
  "ふしぎ",
  "ふじみ",
  "ふすま",
  "ふせい",
  "ふせぐ",
  "ふそく",
  "ぶたにく",
  "ふたん",
  "ふちょう",
  "ふつう",
  "ふつか",
  "ふっかつ",
  "ふっき",
  "ふっこく",
  "ぶどう",
  "ふとる",
  "ふとん",
  "ふのう",
  "ふはい",
  "ふひょう",
  "ふへん",
  "ふまん",
  "ふみん",
  "ふめつ",
  "ふめん",
  "ふよう",
  "ふりこ",
  "ふりる",
  "ふるい",
  "ふんいき",
  "ぶんがく",
  "ぶんぐ",
  "ふんしつ",
  "ぶんせき",
  "ふんそう",
  "ぶんぽう",
  "へいあん",
  "へいおん",
  "へいがい",
  "へいき",
  "へいげん",
  "へいこう",
  "へいさ",
  "へいしゃ",
  "へいせつ",
  "へいそ",
  "へいたく",
  "へいてん",
  "へいねつ",
  "へいわ",
  "へきが",
  "へこむ",
  "べにいろ",
  "べにしょうが",
  "へらす",
  "へんかん",
  "べんきょう",
  "べんごし",
  "へんさい",
  "へんたい",
  "べんり",
  "ほあん",
  "ほいく",
  "ぼうぎょ",
  "ほうこく",
  "ほうそう",
  "ほうほう",
  "ほうもん",
  "ほうりつ",
  "ほえる",
  "ほおん",
  "ほかん",
  "ほきょう",
  "ぼきん",
  "ほくろ",
  "ほけつ",
  "ほけん",
  "ほこう",
  "ほこる",
  "ほしい",
  "ほしつ",
  "ほしゅ",
  "ほしょう",
  "ほせい",
  "ほそい",
  "ほそく",
  "ほたて",
  "ほたる",
  "ぽちぶくろ",
  "ほっきょく",
  "ほっさ",
  "ほったん",
  "ほとんど",
  "ほめる",
  "ほんい",
  "ほんき",
  "ほんけ",
  "ほんしつ",
  "ほんやく",
  "まいにち",
  "まかい",
  "まかせる",
  "まがる",
  "まける",
  "まこと",
  "まさつ",
  "まじめ",
  "ますく",
  "まぜる",
  "まつり",
  "まとめ",
  "まなぶ",
  "まぬけ",
  "まねく",
  "まほう",
  "まもる",
  "まゆげ",
  "まよう",
  "まろやか",
  "まわす",
  "まわり",
  "まわる",
  "まんが",
  "まんきつ",
  "まんぞく",
  "まんなか",
  "みいら",
  "みうち",
  "みえる",
  "みがく",
  "みかた",
  "みかん",
  "みけん",
  "みこん",
  "みじかい",
  "みすい",
  "みすえる",
  "みせる",
  "みっか",
  "みつかる",
  "みつける",
  "みてい",
  "みとめる",
  "みなと",
  "みなみかさい",
  "みねらる",
  "みのう",
  "みのがす",
  "みほん",
  "みもと",
  "みやげ",
  "みらい",
  "みりょく",
  "みわく",
  "みんか",
  "みんぞく",
  "むいか",
  "むえき",
  "むえん",
  "むかい",
  "むかう",
  "むかえ",
  "むかし",
  "むぎちゃ",
  "むける",
  "むげん",
  "むさぼる",
  "むしあつい",
  "むしば",
  "むじゅん",
  "むしろ",
  "むすう",
  "むすこ",
  "むすぶ",
  "むすめ",
  "むせる",
  "むせん",
  "むちゅう",
  "むなしい",
  "むのう",
  "むやみ",
  "むよう",
  "むらさき",
  "むりょう",
  "むろん",
  "めいあん",
  "めいうん",
  "めいえん",
  "めいかく",
  "めいきょく",
  "めいさい",
  "めいし",
  "めいそう",
  "めいぶつ",
  "めいれい",
  "めいわく",
  "めぐまれる",
  "めざす",
  "めした",
  "めずらしい",
  "めだつ",
  "めまい",
  "めやす",
  "めんきょ",
  "めんせき",
  "めんどう",
  "もうしあげる",
  "もうどうけん",
  "もえる",
  "もくし",
  "もくてき",
  "もくようび",
  "もちろん",
  "もどる",
  "もらう",
  "もんく",
  "もんだい",
  "やおや",
  "やける",
  "やさい",
  "やさしい",
  "やすい",
  "やすたろう",
  "やすみ",
  "やせる",
  "やそう",
  "やたい",
  "やちん",
  "やっと",
  "やっぱり",
  "やぶる",
  "やめる",
  "ややこしい",
  "やよい",
  "やわらかい",
  "ゆうき",
  "ゆうびんきょく",
  "ゆうべ",
  "ゆうめい",
  "ゆけつ",
  "ゆしゅつ",
  "ゆせん",
  "ゆそう",
  "ゆたか",
  "ゆちゃく",
  "ゆでる",
  "ゆにゅう",
  "ゆびわ",
  "ゆらい",
  "ゆれる",
  "ようい",
  "ようか",
  "ようきゅう",
  "ようじ",
  "ようす",
  "ようちえん",
  "よかぜ",
  "よかん",
  "よきん",
  "よくせい",
  "よくぼう",
  "よけい",
  "よごれる",
  "よさん",
  "よしゅう",
  "よそう",
  "よそく",
  "よっか",
  "よてい",
  "よどがわく",
  "よねつ",
  "よやく",
  "よゆう",
  "よろこぶ",
  "よろしい",
  "らいう",
  "らくがき",
  "らくご",
  "らくさつ",
  "らくだ",
  "らしんばん",
  "らせん",
  "らぞく",
  "らたい",
  "らっか",
  "られつ",
  "りえき",
  "りかい",
  "りきさく",
  "りきせつ",
  "りくぐん",
  "りくつ",
  "りけん",
  "りこう",
  "りせい",
  "りそう",
  "りそく",
  "りてん",
  "りねん",
  "りゆう",
  "りゅうがく",
  "りよう",
  "りょうり",
  "りょかん",
  "りょくちゃ",
  "りょこう",
  "りりく",
  "りれき",
  "りろん",
  "りんご",
  "るいけい",
  "るいさい",
  "るいじ",
  "るいせき",
  "るすばん",
  "るりがわら",
  "れいかん",
  "れいぎ",
  "れいせい",
  "れいぞうこ",
  "れいとう",
  "れいぼう",
  "れきし",
  "れきだい",
  "れんあい",
  "れんけい",
  "れんこん",
  "れんさい",
  "れんしゅう",
  "れんぞく",
  "れんらく",
  "ろうか",
  "ろうご",
  "ろうじん",
  "ろうそく",
  "ろくが",
  "ろこつ",
  "ろじうら",
  "ろしゅつ",
  "ろせん",
  "ろてん",
  "ろめん",
  "ろれつ",
  "ろんぎ",
  "ろんぱ",
  "ろんぶん",
  "ろんり",
  "わかす",
  "わかめ",
  "わかやま",
  "わかれる",
  "わしつ",
  "わじまし",
  "わすれもの",
  "わらう",
  "われる"
], $N = [
  "abacate",
  "abaixo",
  "abalar",
  "abater",
  "abduzir",
  "abelha",
  "aberto",
  "abismo",
  "abotoar",
  "abranger",
  "abreviar",
  "abrigar",
  "abrupto",
  "absinto",
  "absoluto",
  "absurdo",
  "abutre",
  "acabado",
  "acalmar",
  "acampar",
  "acanhar",
  "acaso",
  "aceitar",
  "acelerar",
  "acenar",
  "acervo",
  "acessar",
  "acetona",
  "achatar",
  "acidez",
  "acima",
  "acionado",
  "acirrar",
  "aclamar",
  "aclive",
  "acolhida",
  "acomodar",
  "acoplar",
  "acordar",
  "acumular",
  "acusador",
  "adaptar",
  "adega",
  "adentro",
  "adepto",
  "adequar",
  "aderente",
  "adesivo",
  "adeus",
  "adiante",
  "aditivo",
  "adjetivo",
  "adjunto",
  "admirar",
  "adorar",
  "adquirir",
  "adubo",
  "adverso",
  "advogado",
  "aeronave",
  "afastar",
  "aferir",
  "afetivo",
  "afinador",
  "afivelar",
  "aflito",
  "afluente",
  "afrontar",
  "agachar",
  "agarrar",
  "agasalho",
  "agenciar",
  "agilizar",
  "agiota",
  "agitado",
  "agora",
  "agradar",
  "agreste",
  "agrupar",
  "aguardar",
  "agulha",
  "ajoelhar",
  "ajudar",
  "ajustar",
  "alameda",
  "alarme",
  "alastrar",
  "alavanca",
  "albergue",
  "albino",
  "alcatra",
  "aldeia",
  "alecrim",
  "alegria",
  "alertar",
  "alface",
  "alfinete",
  "algum",
  "alheio",
  "aliar",
  "alicate",
  "alienar",
  "alinhar",
  "aliviar",
  "almofada",
  "alocar",
  "alpiste",
  "alterar",
  "altitude",
  "alucinar",
  "alugar",
  "aluno",
  "alusivo",
  "alvo",
  "amaciar",
  "amador",
  "amarelo",
  "amassar",
  "ambas",
  "ambiente",
  "ameixa",
  "amenizar",
  "amido",
  "amistoso",
  "amizade",
  "amolador",
  "amontoar",
  "amoroso",
  "amostra",
  "amparar",
  "ampliar",
  "ampola",
  "anagrama",
  "analisar",
  "anarquia",
  "anatomia",
  "andaime",
  "anel",
  "anexo",
  "angular",
  "animar",
  "anjo",
  "anomalia",
  "anotado",
  "ansioso",
  "anterior",
  "anuidade",
  "anunciar",
  "anzol",
  "apagador",
  "apalpar",
  "apanhado",
  "apego",
  "apelido",
  "apertada",
  "apesar",
  "apetite",
  "apito",
  "aplauso",
  "aplicada",
  "apoio",
  "apontar",
  "aposta",
  "aprendiz",
  "aprovar",
  "aquecer",
  "arame",
  "aranha",
  "arara",
  "arcada",
  "ardente",
  "areia",
  "arejar",
  "arenito",
  "aresta",
  "argiloso",
  "argola",
  "arma",
  "arquivo",
  "arraial",
  "arrebate",
  "arriscar",
  "arroba",
  "arrumar",
  "arsenal",
  "arterial",
  "artigo",
  "arvoredo",
  "asfaltar",
  "asilado",
  "aspirar",
  "assador",
  "assinar",
  "assoalho",
  "assunto",
  "astral",
  "atacado",
  "atadura",
  "atalho",
  "atarefar",
  "atear",
  "atender",
  "aterro",
  "ateu",
  "atingir",
  "atirador",
  "ativo",
  "atoleiro",
  "atracar",
  "atrevido",
  "atriz",
  "atual",
  "atum",
  "auditor",
  "aumentar",
  "aura",
  "aurora",
  "autismo",
  "autoria",
  "autuar",
  "avaliar",
  "avante",
  "avaria",
  "avental",
  "avesso",
  "aviador",
  "avisar",
  "avulso",
  "axila",
  "azarar",
  "azedo",
  "azeite",
  "azulejo",
  "babar",
  "babosa",
  "bacalhau",
  "bacharel",
  "bacia",
  "bagagem",
  "baiano",
  "bailar",
  "baioneta",
  "bairro",
  "baixista",
  "bajular",
  "baleia",
  "baliza",
  "balsa",
  "banal",
  "bandeira",
  "banho",
  "banir",
  "banquete",
  "barato",
  "barbado",
  "baronesa",
  "barraca",
  "barulho",
  "baseado",
  "bastante",
  "batata",
  "batedor",
  "batida",
  "batom",
  "batucar",
  "baunilha",
  "beber",
  "beijo",
  "beirada",
  "beisebol",
  "beldade",
  "beleza",
  "belga",
  "beliscar",
  "bendito",
  "bengala",
  "benzer",
  "berimbau",
  "berlinda",
  "berro",
  "besouro",
  "bexiga",
  "bezerro",
  "bico",
  "bicudo",
  "bienal",
  "bifocal",
  "bifurcar",
  "bigorna",
  "bilhete",
  "bimestre",
  "bimotor",
  "biologia",
  "biombo",
  "biosfera",
  "bipolar",
  "birrento",
  "biscoito",
  "bisneto",
  "bispo",
  "bissexto",
  "bitola",
  "bizarro",
  "blindado",
  "bloco",
  "bloquear",
  "boato",
  "bobagem",
  "bocado",
  "bocejo",
  "bochecha",
  "boicotar",
  "bolada",
  "boletim",
  "bolha",
  "bolo",
  "bombeiro",
  "bonde",
  "boneco",
  "bonita",
  "borbulha",
  "borda",
  "boreal",
  "borracha",
  "bovino",
  "boxeador",
  "branco",
  "brasa",
  "braveza",
  "breu",
  "briga",
  "brilho",
  "brincar",
  "broa",
  "brochura",
  "bronzear",
  "broto",
  "bruxo",
  "bucha",
  "budismo",
  "bufar",
  "bule",
  "buraco",
  "busca",
  "busto",
  "buzina",
  "cabana",
  "cabelo",
  "cabide",
  "cabo",
  "cabrito",
  "cacau",
  "cacetada",
  "cachorro",
  "cacique",
  "cadastro",
  "cadeado",
  "cafezal",
  "caiaque",
  "caipira",
  "caixote",
  "cajado",
  "caju",
  "calafrio",
  "calcular",
  "caldeira",
  "calibrar",
  "calmante",
  "calota",
  "camada",
  "cambista",
  "camisa",
  "camomila",
  "campanha",
  "camuflar",
  "canavial",
  "cancelar",
  "caneta",
  "canguru",
  "canhoto",
  "canivete",
  "canoa",
  "cansado",
  "cantar",
  "canudo",
  "capacho",
  "capela",
  "capinar",
  "capotar",
  "capricho",
  "captador",
  "capuz",
  "caracol",
  "carbono",
  "cardeal",
  "careca",
  "carimbar",
  "carneiro",
  "carpete",
  "carreira",
  "cartaz",
  "carvalho",
  "casaco",
  "casca",
  "casebre",
  "castelo",
  "casulo",
  "catarata",
  "cativar",
  "caule",
  "causador",
  "cautelar",
  "cavalo",
  "caverna",
  "cebola",
  "cedilha",
  "cegonha",
  "celebrar",
  "celular",
  "cenoura",
  "censo",
  "centeio",
  "cercar",
  "cerrado",
  "certeiro",
  "cerveja",
  "cetim",
  "cevada",
  "chacota",
  "chaleira",
  "chamado",
  "chapada",
  "charme",
  "chatice",
  "chave",
  "chefe",
  "chegada",
  "cheiro",
  "cheque",
  "chicote",
  "chifre",
  "chinelo",
  "chocalho",
  "chover",
  "chumbo",
  "chutar",
  "chuva",
  "cicatriz",
  "ciclone",
  "cidade",
  "cidreira",
  "ciente",
  "cigana",
  "cimento",
  "cinto",
  "cinza",
  "ciranda",
  "circuito",
  "cirurgia",
  "citar",
  "clareza",
  "clero",
  "clicar",
  "clone",
  "clube",
  "coado",
  "coagir",
  "cobaia",
  "cobertor",
  "cobrar",
  "cocada",
  "coelho",
  "coentro",
  "coeso",
  "cogumelo",
  "coibir",
  "coifa",
  "coiote",
  "colar",
  "coleira",
  "colher",
  "colidir",
  "colmeia",
  "colono",
  "coluna",
  "comando",
  "combinar",
  "comentar",
  "comitiva",
  "comover",
  "complexo",
  "comum",
  "concha",
  "condor",
  "conectar",
  "confuso",
  "congelar",
  "conhecer",
  "conjugar",
  "consumir",
  "contrato",
  "convite",
  "cooperar",
  "copeiro",
  "copiador",
  "copo",
  "coquetel",
  "coragem",
  "cordial",
  "corneta",
  "coronha",
  "corporal",
  "correio",
  "cortejo",
  "coruja",
  "corvo",
  "cosseno",
  "costela",
  "cotonete",
  "couro",
  "couve",
  "covil",
  "cozinha",
  "cratera",
  "cravo",
  "creche",
  "credor",
  "creme",
  "crer",
  "crespo",
  "criada",
  "criminal",
  "crioulo",
  "crise",
  "criticar",
  "crosta",
  "crua",
  "cruzeiro",
  "cubano",
  "cueca",
  "cuidado",
  "cujo",
  "culatra",
  "culminar",
  "culpar",
  "cultura",
  "cumprir",
  "cunhado",
  "cupido",
  "curativo",
  "curral",
  "cursar",
  "curto",
  "cuspir",
  "custear",
  "cutelo",
  "damasco",
  "datar",
  "debater",
  "debitar",
  "deboche",
  "debulhar",
  "decalque",
  "decimal",
  "declive",
  "decote",
  "decretar",
  "dedal",
  "dedicado",
  "deduzir",
  "defesa",
  "defumar",
  "degelo",
  "degrau",
  "degustar",
  "deitado",
  "deixar",
  "delator",
  "delegado",
  "delinear",
  "delonga",
  "demanda",
  "demitir",
  "demolido",
  "dentista",
  "depenado",
  "depilar",
  "depois",
  "depressa",
  "depurar",
  "deriva",
  "derramar",
  "desafio",
  "desbotar",
  "descanso",
  "desenho",
  "desfiado",
  "desgaste",
  "desigual",
  "deslize",
  "desmamar",
  "desova",
  "despesa",
  "destaque",
  "desviar",
  "detalhar",
  "detentor",
  "detonar",
  "detrito",
  "deusa",
  "dever",
  "devido",
  "devotado",
  "dezena",
  "diagrama",
  "dialeto",
  "didata",
  "difuso",
  "digitar",
  "dilatado",
  "diluente",
  "diminuir",
  "dinastia",
  "dinheiro",
  "diocese",
  "direto",
  "discreta",
  "disfarce",
  "disparo",
  "disquete",
  "dissipar",
  "distante",
  "ditador",
  "diurno",
  "diverso",
  "divisor",
  "divulgar",
  "dizer",
  "dobrador",
  "dolorido",
  "domador",
  "dominado",
  "donativo",
  "donzela",
  "dormente",
  "dorsal",
  "dosagem",
  "dourado",
  "doutor",
  "drenagem",
  "drible",
  "drogaria",
  "duelar",
  "duende",
  "dueto",
  "duplo",
  "duquesa",
  "durante",
  "duvidoso",
  "eclodir",
  "ecoar",
  "ecologia",
  "edificar",
  "edital",
  "educado",
  "efeito",
  "efetivar",
  "ejetar",
  "elaborar",
  "eleger",
  "eleitor",
  "elenco",
  "elevador",
  "eliminar",
  "elogiar",
  "embargo",
  "embolado",
  "embrulho",
  "embutido",
  "emenda",
  "emergir",
  "emissor",
  "empatia",
  "empenho",
  "empinado",
  "empolgar",
  "emprego",
  "empurrar",
  "emulador",
  "encaixe",
  "encenado",
  "enchente",
  "encontro",
  "endeusar",
  "endossar",
  "enfaixar",
  "enfeite",
  "enfim",
  "engajado",
  "engenho",
  "englobar",
  "engomado",
  "engraxar",
  "enguia",
  "enjoar",
  "enlatar",
  "enquanto",
  "enraizar",
  "enrolado",
  "enrugar",
  "ensaio",
  "enseada",
  "ensino",
  "ensopado",
  "entanto",
  "enteado",
  "entidade",
  "entortar",
  "entrada",
  "entulho",
  "envergar",
  "enviado",
  "envolver",
  "enxame",
  "enxerto",
  "enxofre",
  "enxuto",
  "epiderme",
  "equipar",
  "ereto",
  "erguido",
  "errata",
  "erva",
  "ervilha",
  "esbanjar",
  "esbelto",
  "escama",
  "escola",
  "escrita",
  "escuta",
  "esfinge",
  "esfolar",
  "esfregar",
  "esfumado",
  "esgrima",
  "esmalte",
  "espanto",
  "espelho",
  "espiga",
  "esponja",
  "espreita",
  "espumar",
  "esquerda",
  "estaca",
  "esteira",
  "esticar",
  "estofado",
  "estrela",
  "estudo",
  "esvaziar",
  "etanol",
  "etiqueta",
  "euforia",
  "europeu",
  "evacuar",
  "evaporar",
  "evasivo",
  "eventual",
  "evidente",
  "evoluir",
  "exagero",
  "exalar",
  "examinar",
  "exato",
  "exausto",
  "excesso",
  "excitar",
  "exclamar",
  "executar",
  "exemplo",
  "exibir",
  "exigente",
  "exonerar",
  "expandir",
  "expelir",
  "expirar",
  "explanar",
  "exposto",
  "expresso",
  "expulsar",
  "externo",
  "extinto",
  "extrato",
  "fabricar",
  "fabuloso",
  "faceta",
  "facial",
  "fada",
  "fadiga",
  "faixa",
  "falar",
  "falta",
  "familiar",
  "fandango",
  "fanfarra",
  "fantoche",
  "fardado",
  "farelo",
  "farinha",
  "farofa",
  "farpa",
  "fartura",
  "fatia",
  "fator",
  "favorita",
  "faxina",
  "fazenda",
  "fechado",
  "feijoada",
  "feirante",
  "felino",
  "feminino",
  "fenda",
  "feno",
  "fera",
  "feriado",
  "ferrugem",
  "ferver",
  "festejar",
  "fetal",
  "feudal",
  "fiapo",
  "fibrose",
  "ficar",
  "ficheiro",
  "figurado",
  "fileira",
  "filho",
  "filme",
  "filtrar",
  "firmeza",
  "fisgada",
  "fissura",
  "fita",
  "fivela",
  "fixador",
  "fixo",
  "flacidez",
  "flamingo",
  "flanela",
  "flechada",
  "flora",
  "flutuar",
  "fluxo",
  "focal",
  "focinho",
  "fofocar",
  "fogo",
  "foguete",
  "foice",
  "folgado",
  "folheto",
  "forjar",
  "formiga",
  "forno",
  "forte",
  "fosco",
  "fossa",
  "fragata",
  "fralda",
  "frango",
  "frasco",
  "fraterno",
  "freira",
  "frente",
  "fretar",
  "frieza",
  "friso",
  "fritura",
  "fronha",
  "frustrar",
  "fruteira",
  "fugir",
  "fulano",
  "fuligem",
  "fundar",
  "fungo",
  "funil",
  "furador",
  "furioso",
  "futebol",
  "gabarito",
  "gabinete",
  "gado",
  "gaiato",
  "gaiola",
  "gaivota",
  "galega",
  "galho",
  "galinha",
  "galocha",
  "ganhar",
  "garagem",
  "garfo",
  "gargalo",
  "garimpo",
  "garoupa",
  "garrafa",
  "gasoduto",
  "gasto",
  "gata",
  "gatilho",
  "gaveta",
  "gazela",
  "gelado",
  "geleia",
  "gelo",
  "gemada",
  "gemer",
  "gemido",
  "generoso",
  "gengiva",
  "genial",
  "genoma",
  "genro",
  "geologia",
  "gerador",
  "germinar",
  "gesso",
  "gestor",
  "ginasta",
  "gincana",
  "gingado",
  "girafa",
  "girino",
  "glacial",
  "glicose",
  "global",
  "glorioso",
  "goela",
  "goiaba",
  "golfe",
  "golpear",
  "gordura",
  "gorjeta",
  "gorro",
  "gostoso",
  "goteira",
  "governar",
  "gracejo",
  "gradual",
  "grafite",
  "gralha",
  "grampo",
  "granada",
  "gratuito",
  "graveto",
  "graxa",
  "grego",
  "grelhar",
  "greve",
  "grilo",
  "grisalho",
  "gritaria",
  "grosso",
  "grotesco",
  "grudado",
  "grunhido",
  "gruta",
  "guache",
  "guarani",
  "guaxinim",
  "guerrear",
  "guiar",
  "guincho",
  "guisado",
  "gula",
  "guloso",
  "guru",
  "habitar",
  "harmonia",
  "haste",
  "haver",
  "hectare",
  "herdar",
  "heresia",
  "hesitar",
  "hiato",
  "hibernar",
  "hidratar",
  "hiena",
  "hino",
  "hipismo",
  "hipnose",
  "hipoteca",
  "hoje",
  "holofote",
  "homem",
  "honesto",
  "honrado",
  "hormonal",
  "hospedar",
  "humorado",
  "iate",
  "ideia",
  "idoso",
  "ignorado",
  "igreja",
  "iguana",
  "ileso",
  "ilha",
  "iludido",
  "iluminar",
  "ilustrar",
  "imagem",
  "imediato",
  "imenso",
  "imersivo",
  "iminente",
  "imitador",
  "imortal",
  "impacto",
  "impedir",
  "implante",
  "impor",
  "imprensa",
  "impune",
  "imunizar",
  "inalador",
  "inapto",
  "inativo",
  "incenso",
  "inchar",
  "incidir",
  "incluir",
  "incolor",
  "indeciso",
  "indireto",
  "indutor",
  "ineficaz",
  "inerente",
  "infantil",
  "infestar",
  "infinito",
  "inflamar",
  "informal",
  "infrator",
  "ingerir",
  "inibido",
  "inicial",
  "inimigo",
  "injetar",
  "inocente",
  "inodoro",
  "inovador",
  "inox",
  "inquieto",
  "inscrito",
  "inseto",
  "insistir",
  "inspetor",
  "instalar",
  "insulto",
  "intacto",
  "integral",
  "intimar",
  "intocado",
  "intriga",
  "invasor",
  "inverno",
  "invicto",
  "invocar",
  "iogurte",
  "iraniano",
  "ironizar",
  "irreal",
  "irritado",
  "isca",
  "isento",
  "isolado",
  "isqueiro",
  "italiano",
  "janeiro",
  "jangada",
  "janta",
  "jararaca",
  "jardim",
  "jarro",
  "jasmim",
  "jato",
  "javali",
  "jazida",
  "jejum",
  "joaninha",
  "joelhada",
  "jogador",
  "joia",
  "jornal",
  "jorrar",
  "jovem",
  "juba",
  "judeu",
  "judoca",
  "juiz",
  "julgador",
  "julho",
  "jurado",
  "jurista",
  "juro",
  "justa",
  "labareda",
  "laboral",
  "lacre",
  "lactante",
  "ladrilho",
  "lagarta",
  "lagoa",
  "laje",
  "lamber",
  "lamentar",
  "laminar",
  "lampejo",
  "lanche",
  "lapidar",
  "lapso",
  "laranja",
  "lareira",
  "largura",
  "lasanha",
  "lastro",
  "lateral",
  "latido",
  "lavanda",
  "lavoura",
  "lavrador",
  "laxante",
  "lazer",
  "lealdade",
  "lebre",
  "legado",
  "legendar",
  "legista",
  "leigo",
  "leiloar",
  "leitura",
  "lembrete",
  "leme",
  "lenhador",
  "lentilha",
  "leoa",
  "lesma",
  "leste",
  "letivo",
  "letreiro",
  "levar",
  "leveza",
  "levitar",
  "liberal",
  "libido",
  "liderar",
  "ligar",
  "ligeiro",
  "limitar",
  "limoeiro",
  "limpador",
  "linda",
  "linear",
  "linhagem",
  "liquidez",
  "listagem",
  "lisura",
  "litoral",
  "livro",
  "lixa",
  "lixeira",
  "locador",
  "locutor",
  "lojista",
  "lombo",
  "lona",
  "longe",
  "lontra",
  "lorde",
  "lotado",
  "loteria",
  "loucura",
  "lousa",
  "louvar",
  "luar",
  "lucidez",
  "lucro",
  "luneta",
  "lustre",
  "lutador",
  "luva",
  "macaco",
  "macete",
  "machado",
  "macio",
  "madeira",
  "madrinha",
  "magnata",
  "magreza",
  "maior",
  "mais",
  "malandro",
  "malha",
  "malote",
  "maluco",
  "mamilo",
  "mamoeiro",
  "mamute",
  "manada",
  "mancha",
  "mandato",
  "manequim",
  "manhoso",
  "manivela",
  "manobrar",
  "mansa",
  "manter",
  "manusear",
  "mapeado",
  "maquinar",
  "marcador",
  "maresia",
  "marfim",
  "margem",
  "marinho",
  "marmita",
  "maroto",
  "marquise",
  "marreco",
  "martelo",
  "marujo",
  "mascote",
  "masmorra",
  "massagem",
  "mastigar",
  "matagal",
  "materno",
  "matinal",
  "matutar",
  "maxilar",
  "medalha",
  "medida",
  "medusa",
  "megafone",
  "meiga",
  "melancia",
  "melhor",
  "membro",
  "memorial",
  "menino",
  "menos",
  "mensagem",
  "mental",
  "merecer",
  "mergulho",
  "mesada",
  "mesclar",
  "mesmo",
  "mesquita",
  "mestre",
  "metade",
  "meteoro",
  "metragem",
  "mexer",
  "mexicano",
  "micro",
  "migalha",
  "migrar",
  "milagre",
  "milenar",
  "milhar",
  "mimado",
  "minerar",
  "minhoca",
  "ministro",
  "minoria",
  "miolo",
  "mirante",
  "mirtilo",
  "misturar",
  "mocidade",
  "moderno",
  "modular",
  "moeda",
  "moer",
  "moinho",
  "moita",
  "moldura",
  "moleza",
  "molho",
  "molinete",
  "molusco",
  "montanha",
  "moqueca",
  "morango",
  "morcego",
  "mordomo",
  "morena",
  "mosaico",
  "mosquete",
  "mostarda",
  "motel",
  "motim",
  "moto",
  "motriz",
  "muda",
  "muito",
  "mulata",
  "mulher",
  "multar",
  "mundial",
  "munido",
  "muralha",
  "murcho",
  "muscular",
  "museu",
  "musical",
  "nacional",
  "nadador",
  "naja",
  "namoro",
  "narina",
  "narrado",
  "nascer",
  "nativa",
  "natureza",
  "navalha",
  "navegar",
  "navio",
  "neblina",
  "nebuloso",
  "negativa",
  "negociar",
  "negrito",
  "nervoso",
  "neta",
  "neural",
  "nevasca",
  "nevoeiro",
  "ninar",
  "ninho",
  "nitidez",
  "nivelar",
  "nobreza",
  "noite",
  "noiva",
  "nomear",
  "nominal",
  "nordeste",
  "nortear",
  "notar",
  "noticiar",
  "noturno",
  "novelo",
  "novilho",
  "novo",
  "nublado",
  "nudez",
  "numeral",
  "nupcial",
  "nutrir",
  "nuvem",
  "obcecado",
  "obedecer",
  "objetivo",
  "obrigado",
  "obscuro",
  "obstetra",
  "obter",
  "obturar",
  "ocidente",
  "ocioso",
  "ocorrer",
  "oculista",
  "ocupado",
  "ofegante",
  "ofensiva",
  "oferenda",
  "oficina",
  "ofuscado",
  "ogiva",
  "olaria",
  "oleoso",
  "olhar",
  "oliveira",
  "ombro",
  "omelete",
  "omisso",
  "omitir",
  "ondulado",
  "oneroso",
  "ontem",
  "opcional",
  "operador",
  "oponente",
  "oportuno",
  "oposto",
  "orar",
  "orbitar",
  "ordem",
  "ordinal",
  "orfanato",
  "orgasmo",
  "orgulho",
  "oriental",
  "origem",
  "oriundo",
  "orla",
  "ortodoxo",
  "orvalho",
  "oscilar",
  "ossada",
  "osso",
  "ostentar",
  "otimismo",
  "ousadia",
  "outono",
  "outubro",
  "ouvido",
  "ovelha",
  "ovular",
  "oxidar",
  "oxigenar",
  "pacato",
  "paciente",
  "pacote",
  "pactuar",
  "padaria",
  "padrinho",
  "pagar",
  "pagode",
  "painel",
  "pairar",
  "paisagem",
  "palavra",
  "palestra",
  "palheta",
  "palito",
  "palmada",
  "palpitar",
  "pancada",
  "panela",
  "panfleto",
  "panqueca",
  "pantanal",
  "papagaio",
  "papelada",
  "papiro",
  "parafina",
  "parcial",
  "pardal",
  "parede",
  "partida",
  "pasmo",
  "passado",
  "pastel",
  "patamar",
  "patente",
  "patinar",
  "patrono",
  "paulada",
  "pausar",
  "peculiar",
  "pedalar",
  "pedestre",
  "pediatra",
  "pedra",
  "pegada",
  "peitoral",
  "peixe",
  "pele",
  "pelicano",
  "penca",
  "pendurar",
  "peneira",
  "penhasco",
  "pensador",
  "pente",
  "perceber",
  "perfeito",
  "pergunta",
  "perito",
  "permitir",
  "perna",
  "perplexo",
  "persiana",
  "pertence",
  "peruca",
  "pescado",
  "pesquisa",
  "pessoa",
  "petiscar",
  "piada",
  "picado",
  "piedade",
  "pigmento",
  "pilastra",
  "pilhado",
  "pilotar",
  "pimenta",
  "pincel",
  "pinguim",
  "pinha",
  "pinote",
  "pintar",
  "pioneiro",
  "pipoca",
  "piquete",
  "piranha",
  "pires",
  "pirueta",
  "piscar",
  "pistola",
  "pitanga",
  "pivete",
  "planta",
  "plaqueta",
  "platina",
  "plebeu",
  "plumagem",
  "pluvial",
  "pneu",
  "poda",
  "poeira",
  "poetisa",
  "polegada",
  "policiar",
  "poluente",
  "polvilho",
  "pomar",
  "pomba",
  "ponderar",
  "pontaria",
  "populoso",
  "porta",
  "possuir",
  "postal",
  "pote",
  "poupar",
  "pouso",
  "povoar",
  "praia",
  "prancha",
  "prato",
  "praxe",
  "prece",
  "predador",
  "prefeito",
  "premiar",
  "prensar",
  "preparar",
  "presilha",
  "pretexto",
  "prevenir",
  "prezar",
  "primata",
  "princesa",
  "prisma",
  "privado",
  "processo",
  "produto",
  "profeta",
  "proibido",
  "projeto",
  "prometer",
  "propagar",
  "prosa",
  "protetor",
  "provador",
  "publicar",
  "pudim",
  "pular",
  "pulmonar",
  "pulseira",
  "punhal",
  "punir",
  "pupilo",
  "pureza",
  "puxador",
  "quadra",
  "quantia",
  "quarto",
  "quase",
  "quebrar",
  "queda",
  "queijo",
  "quente",
  "querido",
  "quimono",
  "quina",
  "quiosque",
  "rabanada",
  "rabisco",
  "rachar",
  "racionar",
  "radial",
  "raiar",
  "rainha",
  "raio",
  "raiva",
  "rajada",
  "ralado",
  "ramal",
  "ranger",
  "ranhura",
  "rapadura",
  "rapel",
  "rapidez",
  "raposa",
  "raquete",
  "raridade",
  "rasante",
  "rascunho",
  "rasgar",
  "raspador",
  "rasteira",
  "rasurar",
  "ratazana",
  "ratoeira",
  "realeza",
  "reanimar",
  "reaver",
  "rebaixar",
  "rebelde",
  "rebolar",
  "recado",
  "recente",
  "recheio",
  "recibo",
  "recordar",
  "recrutar",
  "recuar",
  "rede",
  "redimir",
  "redonda",
  "reduzida",
  "reenvio",
  "refinar",
  "refletir",
  "refogar",
  "refresco",
  "refugiar",
  "regalia",
  "regime",
  "regra",
  "reinado",
  "reitor",
  "rejeitar",
  "relativo",
  "remador",
  "remendo",
  "remorso",
  "renovado",
  "reparo",
  "repelir",
  "repleto",
  "repolho",
  "represa",
  "repudiar",
  "requerer",
  "resenha",
  "resfriar",
  "resgatar",
  "residir",
  "resolver",
  "respeito",
  "ressaca",
  "restante",
  "resumir",
  "retalho",
  "reter",
  "retirar",
  "retomada",
  "retratar",
  "revelar",
  "revisor",
  "revolta",
  "riacho",
  "rica",
  "rigidez",
  "rigoroso",
  "rimar",
  "ringue",
  "risada",
  "risco",
  "risonho",
  "robalo",
  "rochedo",
  "rodada",
  "rodeio",
  "rodovia",
  "roedor",
  "roleta",
  "romano",
  "roncar",
  "rosado",
  "roseira",
  "rosto",
  "rota",
  "roteiro",
  "rotina",
  "rotular",
  "rouco",
  "roupa",
  "roxo",
  "rubro",
  "rugido",
  "rugoso",
  "ruivo",
  "rumo",
  "rupestre",
  "russo",
  "sabor",
  "saciar",
  "sacola",
  "sacudir",
  "sadio",
  "safira",
  "saga",
  "sagrada",
  "saibro",
  "salada",
  "saleiro",
  "salgado",
  "saliva",
  "salpicar",
  "salsicha",
  "saltar",
  "salvador",
  "sambar",
  "samurai",
  "sanar",
  "sanfona",
  "sangue",
  "sanidade",
  "sapato",
  "sarda",
  "sargento",
  "sarjeta",
  "saturar",
  "saudade",
  "saxofone",
  "sazonal",
  "secar",
  "secular",
  "seda",
  "sedento",
  "sediado",
  "sedoso",
  "sedutor",
  "segmento",
  "segredo",
  "segundo",
  "seiva",
  "seleto",
  "selvagem",
  "semanal",
  "semente",
  "senador",
  "senhor",
  "sensual",
  "sentado",
  "separado",
  "sereia",
  "seringa",
  "serra",
  "servo",
  "setembro",
  "setor",
  "sigilo",
  "silhueta",
  "silicone",
  "simetria",
  "simpatia",
  "simular",
  "sinal",
  "sincero",
  "singular",
  "sinopse",
  "sintonia",
  "sirene",
  "siri",
  "situado",
  "soberano",
  "sobra",
  "socorro",
  "sogro",
  "soja",
  "solda",
  "soletrar",
  "solteiro",
  "sombrio",
  "sonata",
  "sondar",
  "sonegar",
  "sonhador",
  "sono",
  "soprano",
  "soquete",
  "sorrir",
  "sorteio",
  "sossego",
  "sotaque",
  "soterrar",
  "sovado",
  "sozinho",
  "suavizar",
  "subida",
  "submerso",
  "subsolo",
  "subtrair",
  "sucata",
  "sucesso",
  "suco",
  "sudeste",
  "sufixo",
  "sugador",
  "sugerir",
  "sujeito",
  "sulfato",
  "sumir",
  "suor",
  "superior",
  "suplicar",
  "suposto",
  "suprimir",
  "surdina",
  "surfista",
  "surpresa",
  "surreal",
  "surtir",
  "suspiro",
  "sustento",
  "tabela",
  "tablete",
  "tabuada",
  "tacho",
  "tagarela",
  "talher",
  "talo",
  "talvez",
  "tamanho",
  "tamborim",
  "tampa",
  "tangente",
  "tanto",
  "tapar",
  "tapioca",
  "tardio",
  "tarefa",
  "tarja",
  "tarraxa",
  "tatuagem",
  "taurino",
  "taxativo",
  "taxista",
  "teatral",
  "tecer",
  "tecido",
  "teclado",
  "tedioso",
  "teia",
  "teimar",
  "telefone",
  "telhado",
  "tempero",
  "tenente",
  "tensor",
  "tentar",
  "termal",
  "terno",
  "terreno",
  "tese",
  "tesoura",
  "testado",
  "teto",
  "textura",
  "texugo",
  "tiara",
  "tigela",
  "tijolo",
  "timbrar",
  "timidez",
  "tingido",
  "tinteiro",
  "tiragem",
  "titular",
  "toalha",
  "tocha",
  "tolerar",
  "tolice",
  "tomada",
  "tomilho",
  "tonel",
  "tontura",
  "topete",
  "tora",
  "torcido",
  "torneio",
  "torque",
  "torrada",
  "torto",
  "tostar",
  "touca",
  "toupeira",
  "toxina",
  "trabalho",
  "tracejar",
  "tradutor",
  "trafegar",
  "trajeto",
  "trama",
  "trancar",
  "trapo",
  "traseiro",
  "tratador",
  "travar",
  "treino",
  "tremer",
  "trepidar",
  "trevo",
  "triagem",
  "tribo",
  "triciclo",
  "tridente",
  "trilogia",
  "trindade",
  "triplo",
  "triturar",
  "triunfal",
  "trocar",
  "trombeta",
  "trova",
  "trunfo",
  "truque",
  "tubular",
  "tucano",
  "tudo",
  "tulipa",
  "tupi",
  "turbo",
  "turma",
  "turquesa",
  "tutelar",
  "tutorial",
  "uivar",
  "umbigo",
  "unha",
  "unidade",
  "uniforme",
  "urologia",
  "urso",
  "urtiga",
  "urubu",
  "usado",
  "usina",
  "usufruir",
  "vacina",
  "vadiar",
  "vagaroso",
  "vaidoso",
  "vala",
  "valente",
  "validade",
  "valores",
  "vantagem",
  "vaqueiro",
  "varanda",
  "vareta",
  "varrer",
  "vascular",
  "vasilha",
  "vassoura",
  "vazar",
  "vazio",
  "veado",
  "vedar",
  "vegetar",
  "veicular",
  "veleiro",
  "velhice",
  "veludo",
  "vencedor",
  "vendaval",
  "venerar",
  "ventre",
  "verbal",
  "verdade",
  "vereador",
  "vergonha",
  "vermelho",
  "verniz",
  "versar",
  "vertente",
  "vespa",
  "vestido",
  "vetorial",
  "viaduto",
  "viagem",
  "viajar",
  "viatura",
  "vibrador",
  "videira",
  "vidraria",
  "viela",
  "viga",
  "vigente",
  "vigiar",
  "vigorar",
  "vilarejo",
  "vinco",
  "vinheta",
  "vinil",
  "violeta",
  "virada",
  "virtude",
  "visitar",
  "visto",
  "vitral",
  "viveiro",
  "vizinho",
  "voador",
  "voar",
  "vogal",
  "volante",
  "voleibol",
  "voltagem",
  "volumoso",
  "vontade",
  "vulto",
  "vuvuzela",
  "xadrez",
  "xarope",
  "xeque",
  "xeretar",
  "xerife",
  "xingar",
  "zangado",
  "zarpar",
  "zebu",
  "zelador",
  "zombar",
  "zoologia",
  "zumbido"
], UN = [
  "abandon",
  "ability",
  "able",
  "about",
  "above",
  "absent",
  "absorb",
  "abstract",
  "absurd",
  "abuse",
  "access",
  "accident",
  "account",
  "accuse",
  "achieve",
  "acid",
  "acoustic",
  "acquire",
  "across",
  "act",
  "action",
  "actor",
  "actress",
  "actual",
  "adapt",
  "add",
  "addict",
  "address",
  "adjust",
  "admit",
  "adult",
  "advance",
  "advice",
  "aerobic",
  "affair",
  "afford",
  "afraid",
  "again",
  "age",
  "agent",
  "agree",
  "ahead",
  "aim",
  "air",
  "airport",
  "aisle",
  "alarm",
  "album",
  "alcohol",
  "alert",
  "alien",
  "all",
  "alley",
  "allow",
  "almost",
  "alone",
  "alpha",
  "already",
  "also",
  "alter",
  "always",
  "amateur",
  "amazing",
  "among",
  "amount",
  "amused",
  "analyst",
  "anchor",
  "ancient",
  "anger",
  "angle",
  "angry",
  "animal",
  "ankle",
  "announce",
  "annual",
  "another",
  "answer",
  "antenna",
  "antique",
  "anxiety",
  "any",
  "apart",
  "apology",
  "appear",
  "apple",
  "approve",
  "april",
  "arch",
  "arctic",
  "area",
  "arena",
  "argue",
  "arm",
  "armed",
  "armor",
  "army",
  "around",
  "arrange",
  "arrest",
  "arrive",
  "arrow",
  "art",
  "artefact",
  "artist",
  "artwork",
  "ask",
  "aspect",
  "assault",
  "asset",
  "assist",
  "assume",
  "asthma",
  "athlete",
  "atom",
  "attack",
  "attend",
  "attitude",
  "attract",
  "auction",
  "audit",
  "august",
  "aunt",
  "author",
  "auto",
  "autumn",
  "average",
  "avocado",
  "avoid",
  "awake",
  "aware",
  "away",
  "awesome",
  "awful",
  "awkward",
  "axis",
  "baby",
  "bachelor",
  "bacon",
  "badge",
  "bag",
  "balance",
  "balcony",
  "ball",
  "bamboo",
  "banana",
  "banner",
  "bar",
  "barely",
  "bargain",
  "barrel",
  "base",
  "basic",
  "basket",
  "battle",
  "beach",
  "bean",
  "beauty",
  "because",
  "become",
  "beef",
  "before",
  "begin",
  "behave",
  "behind",
  "believe",
  "below",
  "belt",
  "bench",
  "benefit",
  "best",
  "betray",
  "better",
  "between",
  "beyond",
  "bicycle",
  "bid",
  "bike",
  "bind",
  "biology",
  "bird",
  "birth",
  "bitter",
  "black",
  "blade",
  "blame",
  "blanket",
  "blast",
  "bleak",
  "bless",
  "blind",
  "blood",
  "blossom",
  "blouse",
  "blue",
  "blur",
  "blush",
  "board",
  "boat",
  "body",
  "boil",
  "bomb",
  "bone",
  "bonus",
  "book",
  "boost",
  "border",
  "boring",
  "borrow",
  "boss",
  "bottom",
  "bounce",
  "box",
  "boy",
  "bracket",
  "brain",
  "brand",
  "brass",
  "brave",
  "bread",
  "breeze",
  "brick",
  "bridge",
  "brief",
  "bright",
  "bring",
  "brisk",
  "broccoli",
  "broken",
  "bronze",
  "broom",
  "brother",
  "brown",
  "brush",
  "bubble",
  "buddy",
  "budget",
  "buffalo",
  "build",
  "bulb",
  "bulk",
  "bullet",
  "bundle",
  "bunker",
  "burden",
  "burger",
  "burst",
  "bus",
  "business",
  "busy",
  "butter",
  "buyer",
  "buzz",
  "cabbage",
  "cabin",
  "cable",
  "cactus",
  "cage",
  "cake",
  "call",
  "calm",
  "camera",
  "camp",
  "can",
  "canal",
  "cancel",
  "candy",
  "cannon",
  "canoe",
  "canvas",
  "canyon",
  "capable",
  "capital",
  "captain",
  "car",
  "carbon",
  "card",
  "cargo",
  "carpet",
  "carry",
  "cart",
  "case",
  "cash",
  "casino",
  "castle",
  "casual",
  "cat",
  "catalog",
  "catch",
  "category",
  "cattle",
  "caught",
  "cause",
  "caution",
  "cave",
  "ceiling",
  "celery",
  "cement",
  "census",
  "century",
  "cereal",
  "certain",
  "chair",
  "chalk",
  "champion",
  "change",
  "chaos",
  "chapter",
  "charge",
  "chase",
  "chat",
  "cheap",
  "check",
  "cheese",
  "chef",
  "cherry",
  "chest",
  "chicken",
  "chief",
  "child",
  "chimney",
  "choice",
  "choose",
  "chronic",
  "chuckle",
  "chunk",
  "churn",
  "cigar",
  "cinnamon",
  "circle",
  "citizen",
  "city",
  "civil",
  "claim",
  "clap",
  "clarify",
  "claw",
  "clay",
  "clean",
  "clerk",
  "clever",
  "click",
  "client",
  "cliff",
  "climb",
  "clinic",
  "clip",
  "clock",
  "clog",
  "close",
  "cloth",
  "cloud",
  "clown",
  "club",
  "clump",
  "cluster",
  "clutch",
  "coach",
  "coast",
  "coconut",
  "code",
  "coffee",
  "coil",
  "coin",
  "collect",
  "color",
  "column",
  "combine",
  "come",
  "comfort",
  "comic",
  "common",
  "company",
  "concert",
  "conduct",
  "confirm",
  "congress",
  "connect",
  "consider",
  "control",
  "convince",
  "cook",
  "cool",
  "copper",
  "copy",
  "coral",
  "core",
  "corn",
  "correct",
  "cost",
  "cotton",
  "couch",
  "country",
  "couple",
  "course",
  "cousin",
  "cover",
  "coyote",
  "crack",
  "cradle",
  "craft",
  "cram",
  "crane",
  "crash",
  "crater",
  "crawl",
  "crazy",
  "cream",
  "credit",
  "creek",
  "crew",
  "cricket",
  "crime",
  "crisp",
  "critic",
  "crop",
  "cross",
  "crouch",
  "crowd",
  "crucial",
  "cruel",
  "cruise",
  "crumble",
  "crunch",
  "crush",
  "cry",
  "crystal",
  "cube",
  "culture",
  "cup",
  "cupboard",
  "curious",
  "current",
  "curtain",
  "curve",
  "cushion",
  "custom",
  "cute",
  "cycle",
  "dad",
  "damage",
  "damp",
  "dance",
  "danger",
  "daring",
  "dash",
  "daughter",
  "dawn",
  "day",
  "deal",
  "debate",
  "debris",
  "decade",
  "december",
  "decide",
  "decline",
  "decorate",
  "decrease",
  "deer",
  "defense",
  "define",
  "defy",
  "degree",
  "delay",
  "deliver",
  "demand",
  "demise",
  "denial",
  "dentist",
  "deny",
  "depart",
  "depend",
  "deposit",
  "depth",
  "deputy",
  "derive",
  "describe",
  "desert",
  "design",
  "desk",
  "despair",
  "destroy",
  "detail",
  "detect",
  "develop",
  "device",
  "devote",
  "diagram",
  "dial",
  "diamond",
  "diary",
  "dice",
  "diesel",
  "diet",
  "differ",
  "digital",
  "dignity",
  "dilemma",
  "dinner",
  "dinosaur",
  "direct",
  "dirt",
  "disagree",
  "discover",
  "disease",
  "dish",
  "dismiss",
  "disorder",
  "display",
  "distance",
  "divert",
  "divide",
  "divorce",
  "dizzy",
  "doctor",
  "document",
  "dog",
  "doll",
  "dolphin",
  "domain",
  "donate",
  "donkey",
  "donor",
  "door",
  "dose",
  "double",
  "dove",
  "draft",
  "dragon",
  "drama",
  "drastic",
  "draw",
  "dream",
  "dress",
  "drift",
  "drill",
  "drink",
  "drip",
  "drive",
  "drop",
  "drum",
  "dry",
  "duck",
  "dumb",
  "dune",
  "during",
  "dust",
  "dutch",
  "duty",
  "dwarf",
  "dynamic",
  "eager",
  "eagle",
  "early",
  "earn",
  "earth",
  "easily",
  "east",
  "easy",
  "echo",
  "ecology",
  "economy",
  "edge",
  "edit",
  "educate",
  "effort",
  "egg",
  "eight",
  "either",
  "elbow",
  "elder",
  "electric",
  "elegant",
  "element",
  "elephant",
  "elevator",
  "elite",
  "else",
  "embark",
  "embody",
  "embrace",
  "emerge",
  "emotion",
  "employ",
  "empower",
  "empty",
  "enable",
  "enact",
  "end",
  "endless",
  "endorse",
  "enemy",
  "energy",
  "enforce",
  "engage",
  "engine",
  "enhance",
  "enjoy",
  "enlist",
  "enough",
  "enrich",
  "enroll",
  "ensure",
  "enter",
  "entire",
  "entry",
  "envelope",
  "episode",
  "equal",
  "equip",
  "era",
  "erase",
  "erode",
  "erosion",
  "error",
  "erupt",
  "escape",
  "essay",
  "essence",
  "estate",
  "eternal",
  "ethics",
  "evidence",
  "evil",
  "evoke",
  "evolve",
  "exact",
  "example",
  "excess",
  "exchange",
  "excite",
  "exclude",
  "excuse",
  "execute",
  "exercise",
  "exhaust",
  "exhibit",
  "exile",
  "exist",
  "exit",
  "exotic",
  "expand",
  "expect",
  "expire",
  "explain",
  "expose",
  "express",
  "extend",
  "extra",
  "eye",
  "eyebrow",
  "fabric",
  "face",
  "faculty",
  "fade",
  "faint",
  "faith",
  "fall",
  "false",
  "fame",
  "family",
  "famous",
  "fan",
  "fancy",
  "fantasy",
  "farm",
  "fashion",
  "fat",
  "fatal",
  "father",
  "fatigue",
  "fault",
  "favorite",
  "feature",
  "february",
  "federal",
  "fee",
  "feed",
  "feel",
  "female",
  "fence",
  "festival",
  "fetch",
  "fever",
  "few",
  "fiber",
  "fiction",
  "field",
  "figure",
  "file",
  "film",
  "filter",
  "final",
  "find",
  "fine",
  "finger",
  "finish",
  "fire",
  "firm",
  "first",
  "fiscal",
  "fish",
  "fit",
  "fitness",
  "fix",
  "flag",
  "flame",
  "flash",
  "flat",
  "flavor",
  "flee",
  "flight",
  "flip",
  "float",
  "flock",
  "floor",
  "flower",
  "fluid",
  "flush",
  "fly",
  "foam",
  "focus",
  "fog",
  "foil",
  "fold",
  "follow",
  "food",
  "foot",
  "force",
  "forest",
  "forget",
  "fork",
  "fortune",
  "forum",
  "forward",
  "fossil",
  "foster",
  "found",
  "fox",
  "fragile",
  "frame",
  "frequent",
  "fresh",
  "friend",
  "fringe",
  "frog",
  "front",
  "frost",
  "frown",
  "frozen",
  "fruit",
  "fuel",
  "fun",
  "funny",
  "furnace",
  "fury",
  "future",
  "gadget",
  "gain",
  "galaxy",
  "gallery",
  "game",
  "gap",
  "garage",
  "garbage",
  "garden",
  "garlic",
  "garment",
  "gas",
  "gasp",
  "gate",
  "gather",
  "gauge",
  "gaze",
  "general",
  "genius",
  "genre",
  "gentle",
  "genuine",
  "gesture",
  "ghost",
  "giant",
  "gift",
  "giggle",
  "ginger",
  "giraffe",
  "girl",
  "give",
  "glad",
  "glance",
  "glare",
  "glass",
  "glide",
  "glimpse",
  "globe",
  "gloom",
  "glory",
  "glove",
  "glow",
  "glue",
  "goat",
  "goddess",
  "gold",
  "good",
  "goose",
  "gorilla",
  "gospel",
  "gossip",
  "govern",
  "gown",
  "grab",
  "grace",
  "grain",
  "grant",
  "grape",
  "grass",
  "gravity",
  "great",
  "green",
  "grid",
  "grief",
  "grit",
  "grocery",
  "group",
  "grow",
  "grunt",
  "guard",
  "guess",
  "guide",
  "guilt",
  "guitar",
  "gun",
  "gym",
  "habit",
  "hair",
  "half",
  "hammer",
  "hamster",
  "hand",
  "happy",
  "harbor",
  "hard",
  "harsh",
  "harvest",
  "hat",
  "have",
  "hawk",
  "hazard",
  "head",
  "health",
  "heart",
  "heavy",
  "hedgehog",
  "height",
  "hello",
  "helmet",
  "help",
  "hen",
  "hero",
  "hidden",
  "high",
  "hill",
  "hint",
  "hip",
  "hire",
  "history",
  "hobby",
  "hockey",
  "hold",
  "hole",
  "holiday",
  "hollow",
  "home",
  "honey",
  "hood",
  "hope",
  "horn",
  "horror",
  "horse",
  "hospital",
  "host",
  "hotel",
  "hour",
  "hover",
  "hub",
  "huge",
  "human",
  "humble",
  "humor",
  "hundred",
  "hungry",
  "hunt",
  "hurdle",
  "hurry",
  "hurt",
  "husband",
  "hybrid",
  "ice",
  "icon",
  "idea",
  "identify",
  "idle",
  "ignore",
  "ill",
  "illegal",
  "illness",
  "image",
  "imitate",
  "immense",
  "immune",
  "impact",
  "impose",
  "improve",
  "impulse",
  "inch",
  "include",
  "income",
  "increase",
  "index",
  "indicate",
  "indoor",
  "industry",
  "infant",
  "inflict",
  "inform",
  "inhale",
  "inherit",
  "initial",
  "inject",
  "injury",
  "inmate",
  "inner",
  "innocent",
  "input",
  "inquiry",
  "insane",
  "insect",
  "inside",
  "inspire",
  "install",
  "intact",
  "interest",
  "into",
  "invest",
  "invite",
  "involve",
  "iron",
  "island",
  "isolate",
  "issue",
  "item",
  "ivory",
  "jacket",
  "jaguar",
  "jar",
  "jazz",
  "jealous",
  "jeans",
  "jelly",
  "jewel",
  "job",
  "join",
  "joke",
  "journey",
  "joy",
  "judge",
  "juice",
  "jump",
  "jungle",
  "junior",
  "junk",
  "just",
  "kangaroo",
  "keen",
  "keep",
  "ketchup",
  "key",
  "kick",
  "kid",
  "kidney",
  "kind",
  "kingdom",
  "kiss",
  "kit",
  "kitchen",
  "kite",
  "kitten",
  "kiwi",
  "knee",
  "knife",
  "knock",
  "know",
  "lab",
  "label",
  "labor",
  "ladder",
  "lady",
  "lake",
  "lamp",
  "language",
  "laptop",
  "large",
  "later",
  "latin",
  "laugh",
  "laundry",
  "lava",
  "law",
  "lawn",
  "lawsuit",
  "layer",
  "lazy",
  "leader",
  "leaf",
  "learn",
  "leave",
  "lecture",
  "left",
  "leg",
  "legal",
  "legend",
  "leisure",
  "lemon",
  "lend",
  "length",
  "lens",
  "leopard",
  "lesson",
  "letter",
  "level",
  "liar",
  "liberty",
  "library",
  "license",
  "life",
  "lift",
  "light",
  "like",
  "limb",
  "limit",
  "link",
  "lion",
  "liquid",
  "list",
  "little",
  "live",
  "lizard",
  "load",
  "loan",
  "lobster",
  "local",
  "lock",
  "logic",
  "lonely",
  "long",
  "loop",
  "lottery",
  "loud",
  "lounge",
  "love",
  "loyal",
  "lucky",
  "luggage",
  "lumber",
  "lunar",
  "lunch",
  "luxury",
  "lyrics",
  "machine",
  "mad",
  "magic",
  "magnet",
  "maid",
  "mail",
  "main",
  "major",
  "make",
  "mammal",
  "man",
  "manage",
  "mandate",
  "mango",
  "mansion",
  "manual",
  "maple",
  "marble",
  "march",
  "margin",
  "marine",
  "market",
  "marriage",
  "mask",
  "mass",
  "master",
  "match",
  "material",
  "math",
  "matrix",
  "matter",
  "maximum",
  "maze",
  "meadow",
  "mean",
  "measure",
  "meat",
  "mechanic",
  "medal",
  "media",
  "melody",
  "melt",
  "member",
  "memory",
  "mention",
  "menu",
  "mercy",
  "merge",
  "merit",
  "merry",
  "mesh",
  "message",
  "metal",
  "method",
  "middle",
  "midnight",
  "milk",
  "million",
  "mimic",
  "mind",
  "minimum",
  "minor",
  "minute",
  "miracle",
  "mirror",
  "misery",
  "miss",
  "mistake",
  "mix",
  "mixed",
  "mixture",
  "mobile",
  "model",
  "modify",
  "mom",
  "moment",
  "monitor",
  "monkey",
  "monster",
  "month",
  "moon",
  "moral",
  "more",
  "morning",
  "mosquito",
  "mother",
  "motion",
  "motor",
  "mountain",
  "mouse",
  "move",
  "movie",
  "much",
  "muffin",
  "mule",
  "multiply",
  "muscle",
  "museum",
  "mushroom",
  "music",
  "must",
  "mutual",
  "myself",
  "mystery",
  "myth",
  "naive",
  "name",
  "napkin",
  "narrow",
  "nasty",
  "nation",
  "nature",
  "near",
  "neck",
  "need",
  "negative",
  "neglect",
  "neither",
  "nephew",
  "nerve",
  "nest",
  "net",
  "network",
  "neutral",
  "never",
  "news",
  "next",
  "nice",
  "night",
  "noble",
  "noise",
  "nominee",
  "noodle",
  "normal",
  "north",
  "nose",
  "notable",
  "note",
  "nothing",
  "notice",
  "novel",
  "now",
  "nuclear",
  "number",
  "nurse",
  "nut",
  "oak",
  "obey",
  "object",
  "oblige",
  "obscure",
  "observe",
  "obtain",
  "obvious",
  "occur",
  "ocean",
  "october",
  "odor",
  "off",
  "offer",
  "office",
  "often",
  "oil",
  "okay",
  "old",
  "olive",
  "olympic",
  "omit",
  "once",
  "one",
  "onion",
  "online",
  "only",
  "open",
  "opera",
  "opinion",
  "oppose",
  "option",
  "orange",
  "orbit",
  "orchard",
  "order",
  "ordinary",
  "organ",
  "orient",
  "original",
  "orphan",
  "ostrich",
  "other",
  "outdoor",
  "outer",
  "output",
  "outside",
  "oval",
  "oven",
  "over",
  "own",
  "owner",
  "oxygen",
  "oyster",
  "ozone",
  "pact",
  "paddle",
  "page",
  "pair",
  "palace",
  "palm",
  "panda",
  "panel",
  "panic",
  "panther",
  "paper",
  "parade",
  "parent",
  "park",
  "parrot",
  "party",
  "pass",
  "patch",
  "path",
  "patient",
  "patrol",
  "pattern",
  "pause",
  "pave",
  "payment",
  "peace",
  "peanut",
  "pear",
  "peasant",
  "pelican",
  "pen",
  "penalty",
  "pencil",
  "people",
  "pepper",
  "perfect",
  "permit",
  "person",
  "pet",
  "phone",
  "photo",
  "phrase",
  "physical",
  "piano",
  "picnic",
  "picture",
  "piece",
  "pig",
  "pigeon",
  "pill",
  "pilot",
  "pink",
  "pioneer",
  "pipe",
  "pistol",
  "pitch",
  "pizza",
  "place",
  "planet",
  "plastic",
  "plate",
  "play",
  "please",
  "pledge",
  "pluck",
  "plug",
  "plunge",
  "poem",
  "poet",
  "point",
  "polar",
  "pole",
  "police",
  "pond",
  "pony",
  "pool",
  "popular",
  "portion",
  "position",
  "possible",
  "post",
  "potato",
  "pottery",
  "poverty",
  "powder",
  "power",
  "practice",
  "praise",
  "predict",
  "prefer",
  "prepare",
  "present",
  "pretty",
  "prevent",
  "price",
  "pride",
  "primary",
  "print",
  "priority",
  "prison",
  "private",
  "prize",
  "problem",
  "process",
  "produce",
  "profit",
  "program",
  "project",
  "promote",
  "proof",
  "property",
  "prosper",
  "protect",
  "proud",
  "provide",
  "public",
  "pudding",
  "pull",
  "pulp",
  "pulse",
  "pumpkin",
  "punch",
  "pupil",
  "puppy",
  "purchase",
  "purity",
  "purpose",
  "purse",
  "push",
  "put",
  "puzzle",
  "pyramid",
  "quality",
  "quantum",
  "quarter",
  "question",
  "quick",
  "quit",
  "quiz",
  "quote",
  "rabbit",
  "raccoon",
  "race",
  "rack",
  "radar",
  "radio",
  "rail",
  "rain",
  "raise",
  "rally",
  "ramp",
  "ranch",
  "random",
  "range",
  "rapid",
  "rare",
  "rate",
  "rather",
  "raven",
  "raw",
  "razor",
  "ready",
  "real",
  "reason",
  "rebel",
  "rebuild",
  "recall",
  "receive",
  "recipe",
  "record",
  "recycle",
  "reduce",
  "reflect",
  "reform",
  "refuse",
  "region",
  "regret",
  "regular",
  "reject",
  "relax",
  "release",
  "relief",
  "rely",
  "remain",
  "remember",
  "remind",
  "remove",
  "render",
  "renew",
  "rent",
  "reopen",
  "repair",
  "repeat",
  "replace",
  "report",
  "require",
  "rescue",
  "resemble",
  "resist",
  "resource",
  "response",
  "result",
  "retire",
  "retreat",
  "return",
  "reunion",
  "reveal",
  "review",
  "reward",
  "rhythm",
  "rib",
  "ribbon",
  "rice",
  "rich",
  "ride",
  "ridge",
  "rifle",
  "right",
  "rigid",
  "ring",
  "riot",
  "ripple",
  "risk",
  "ritual",
  "rival",
  "river",
  "road",
  "roast",
  "robot",
  "robust",
  "rocket",
  "romance",
  "roof",
  "rookie",
  "room",
  "rose",
  "rotate",
  "rough",
  "round",
  "route",
  "royal",
  "rubber",
  "rude",
  "rug",
  "rule",
  "run",
  "runway",
  "rural",
  "sad",
  "saddle",
  "sadness",
  "safe",
  "sail",
  "salad",
  "salmon",
  "salon",
  "salt",
  "salute",
  "same",
  "sample",
  "sand",
  "satisfy",
  "satoshi",
  "sauce",
  "sausage",
  "save",
  "say",
  "scale",
  "scan",
  "scare",
  "scatter",
  "scene",
  "scheme",
  "school",
  "science",
  "scissors",
  "scorpion",
  "scout",
  "scrap",
  "screen",
  "script",
  "scrub",
  "sea",
  "search",
  "season",
  "seat",
  "second",
  "secret",
  "section",
  "security",
  "seed",
  "seek",
  "segment",
  "select",
  "sell",
  "seminar",
  "senior",
  "sense",
  "sentence",
  "series",
  "service",
  "session",
  "settle",
  "setup",
  "seven",
  "shadow",
  "shaft",
  "shallow",
  "share",
  "shed",
  "shell",
  "sheriff",
  "shield",
  "shift",
  "shine",
  "ship",
  "shiver",
  "shock",
  "shoe",
  "shoot",
  "shop",
  "short",
  "shoulder",
  "shove",
  "shrimp",
  "shrug",
  "shuffle",
  "shy",
  "sibling",
  "sick",
  "side",
  "siege",
  "sight",
  "sign",
  "silent",
  "silk",
  "silly",
  "silver",
  "similar",
  "simple",
  "since",
  "sing",
  "siren",
  "sister",
  "situate",
  "six",
  "size",
  "skate",
  "sketch",
  "ski",
  "skill",
  "skin",
  "skirt",
  "skull",
  "slab",
  "slam",
  "sleep",
  "slender",
  "slice",
  "slide",
  "slight",
  "slim",
  "slogan",
  "slot",
  "slow",
  "slush",
  "small",
  "smart",
  "smile",
  "smoke",
  "smooth",
  "snack",
  "snake",
  "snap",
  "sniff",
  "snow",
  "soap",
  "soccer",
  "social",
  "sock",
  "soda",
  "soft",
  "solar",
  "soldier",
  "solid",
  "solution",
  "solve",
  "someone",
  "song",
  "soon",
  "sorry",
  "sort",
  "soul",
  "sound",
  "soup",
  "source",
  "south",
  "space",
  "spare",
  "spatial",
  "spawn",
  "speak",
  "special",
  "speed",
  "spell",
  "spend",
  "sphere",
  "spice",
  "spider",
  "spike",
  "spin",
  "spirit",
  "split",
  "spoil",
  "sponsor",
  "spoon",
  "sport",
  "spot",
  "spray",
  "spread",
  "spring",
  "spy",
  "square",
  "squeeze",
  "squirrel",
  "stable",
  "stadium",
  "staff",
  "stage",
  "stairs",
  "stamp",
  "stand",
  "start",
  "state",
  "stay",
  "steak",
  "steel",
  "stem",
  "step",
  "stereo",
  "stick",
  "still",
  "sting",
  "stock",
  "stomach",
  "stone",
  "stool",
  "story",
  "stove",
  "strategy",
  "street",
  "strike",
  "strong",
  "struggle",
  "student",
  "stuff",
  "stumble",
  "style",
  "subject",
  "submit",
  "subway",
  "success",
  "such",
  "sudden",
  "suffer",
  "sugar",
  "suggest",
  "suit",
  "summer",
  "sun",
  "sunny",
  "sunset",
  "super",
  "supply",
  "supreme",
  "sure",
  "surface",
  "surge",
  "surprise",
  "surround",
  "survey",
  "suspect",
  "sustain",
  "swallow",
  "swamp",
  "swap",
  "swarm",
  "swear",
  "sweet",
  "swift",
  "swim",
  "swing",
  "switch",
  "sword",
  "symbol",
  "symptom",
  "syrup",
  "system",
  "table",
  "tackle",
  "tag",
  "tail",
  "talent",
  "talk",
  "tank",
  "tape",
  "target",
  "task",
  "taste",
  "tattoo",
  "taxi",
  "teach",
  "team",
  "tell",
  "ten",
  "tenant",
  "tennis",
  "tent",
  "term",
  "test",
  "text",
  "thank",
  "that",
  "theme",
  "then",
  "theory",
  "there",
  "they",
  "thing",
  "this",
  "thought",
  "three",
  "thrive",
  "throw",
  "thumb",
  "thunder",
  "ticket",
  "tide",
  "tiger",
  "tilt",
  "timber",
  "time",
  "tiny",
  "tip",
  "tired",
  "tissue",
  "title",
  "toast",
  "tobacco",
  "today",
  "toddler",
  "toe",
  "together",
  "toilet",
  "token",
  "tomato",
  "tomorrow",
  "tone",
  "tongue",
  "tonight",
  "tool",
  "tooth",
  "top",
  "topic",
  "topple",
  "torch",
  "tornado",
  "tortoise",
  "toss",
  "total",
  "tourist",
  "toward",
  "tower",
  "town",
  "toy",
  "track",
  "trade",
  "traffic",
  "tragic",
  "train",
  "transfer",
  "trap",
  "trash",
  "travel",
  "tray",
  "treat",
  "tree",
  "trend",
  "trial",
  "tribe",
  "trick",
  "trigger",
  "trim",
  "trip",
  "trophy",
  "trouble",
  "truck",
  "true",
  "truly",
  "trumpet",
  "trust",
  "truth",
  "try",
  "tube",
  "tuition",
  "tumble",
  "tuna",
  "tunnel",
  "turkey",
  "turn",
  "turtle",
  "twelve",
  "twenty",
  "twice",
  "twin",
  "twist",
  "two",
  "type",
  "typical",
  "ugly",
  "umbrella",
  "unable",
  "unaware",
  "uncle",
  "uncover",
  "under",
  "undo",
  "unfair",
  "unfold",
  "unhappy",
  "uniform",
  "unique",
  "unit",
  "universe",
  "unknown",
  "unlock",
  "until",
  "unusual",
  "unveil",
  "update",
  "upgrade",
  "uphold",
  "upon",
  "upper",
  "upset",
  "urban",
  "urge",
  "usage",
  "use",
  "used",
  "useful",
  "useless",
  "usual",
  "utility",
  "vacant",
  "vacuum",
  "vague",
  "valid",
  "valley",
  "valve",
  "van",
  "vanish",
  "vapor",
  "various",
  "vast",
  "vault",
  "vehicle",
  "velvet",
  "vendor",
  "venture",
  "venue",
  "verb",
  "verify",
  "version",
  "very",
  "vessel",
  "veteran",
  "viable",
  "vibrant",
  "vicious",
  "victory",
  "video",
  "view",
  "village",
  "vintage",
  "violin",
  "virtual",
  "virus",
  "visa",
  "visit",
  "visual",
  "vital",
  "vivid",
  "vocal",
  "voice",
  "void",
  "volcano",
  "volume",
  "vote",
  "voyage",
  "wage",
  "wagon",
  "wait",
  "walk",
  "wall",
  "walnut",
  "want",
  "warfare",
  "warm",
  "warrior",
  "wash",
  "wasp",
  "waste",
  "water",
  "wave",
  "way",
  "wealth",
  "weapon",
  "wear",
  "weasel",
  "weather",
  "web",
  "wedding",
  "weekend",
  "weird",
  "welcome",
  "west",
  "wet",
  "whale",
  "what",
  "wheat",
  "wheel",
  "when",
  "where",
  "whip",
  "whisper",
  "wide",
  "width",
  "wife",
  "wild",
  "will",
  "win",
  "window",
  "wine",
  "wing",
  "wink",
  "winner",
  "winter",
  "wire",
  "wisdom",
  "wise",
  "wish",
  "witness",
  "wolf",
  "woman",
  "wonder",
  "wood",
  "wool",
  "word",
  "work",
  "world",
  "worry",
  "worth",
  "wrap",
  "wreck",
  "wrestle",
  "wrist",
  "write",
  "wrong",
  "yard",
  "year",
  "yellow",
  "you",
  "young",
  "youth",
  "zebra",
  "zero",
  "zone",
  "zoo"
];
Object.defineProperty(rr, "__esModule", { value: !0 });
const gr = {};
rr.wordlists = gr;
let ft;
var wn = rr._default = ft;
try {
  wn = rr._default = ft = AN, gr.czech = ft;
} catch {
}
try {
  wn = rr._default = ft = kN, gr.chinese_simplified = ft;
} catch {
}
try {
  wn = rr._default = ft = TN, gr.chinese_traditional = ft;
} catch {
}
try {
  wn = rr._default = ft = IN, gr.korean = ft;
} catch {
}
try {
  wn = rr._default = ft = PN, gr.french = ft;
} catch {
}
try {
  wn = rr._default = ft = ON, gr.italian = ft;
} catch {
}
try {
  wn = rr._default = ft = BN, gr.spanish = ft;
} catch {
}
try {
  wn = rr._default = ft = NN, gr.japanese = ft, gr.JA = ft;
} catch {
}
try {
  wn = rr._default = ft = $N, gr.portuguese = ft;
} catch {
}
try {
  wn = rr._default = ft = UN, gr.english = ft, gr.EN = ft;
} catch {
}
Object.defineProperty(yn, "__esModule", { value: !0 });
const RN = Kr, Y1 = $t, J1 = ll, CN = $o, _u = rr;
let ba = _u._default;
const wg = "Invalid mnemonic", ni = "Invalid entropy", HN = "Invalid mnemonic checksum", Q1 = `A wordlist is required but a default could not be found.
Please pass a 2048 word array explicitly.`;
function ya(e) {
  return (e || "").normalize("NFKD");
}
function ev(e, t, r) {
  for (; e.length < r; )
    e = t + e;
  return e;
}
function tv(e) {
  return parseInt(e, 2);
}
function rv(e) {
  return e.map((t) => ev(t.toString(2), "0", 8)).join("");
}
function nv(e) {
  const r = e.length * 8 / 32, n = RN.sha256(Uint8Array.from(e));
  return rv(Array.from(n)).slice(0, r);
}
function ov(e) {
  return "mnemonic" + (e || "");
}
function LN(e, t) {
  const r = Uint8Array.from(Buffer.from(ya(e), "utf8")), n = Uint8Array.from(Buffer.from(ov(ya(t)), "utf8")), o = J1.pbkdf2(Y1.sha512, r, n, {
    c: 2048,
    dkLen: 64
  });
  return Buffer.from(o);
}
yn.mnemonicToSeedSync = LN;
function zN(e, t) {
  const r = Uint8Array.from(Buffer.from(ya(e), "utf8")), n = Uint8Array.from(Buffer.from(ov(ya(t)), "utf8"));
  return J1.pbkdf2Async(Y1.sha512, r, n, {
    c: 2048,
    dkLen: 64
  }).then((o) => Buffer.from(o));
}
var jN = yn.mnemonicToSeed = zN;
function iv(e, t) {
  if (t = t || ba, !t)
    throw new Error(Q1);
  const r = ya(e).split(" ");
  if (r.length % 3 !== 0)
    throw new Error(wg);
  const n = r.map((f) => {
    const l = t.indexOf(f);
    if (l === -1)
      throw new Error(wg);
    return ev(l.toString(2), "0", 11);
  }).join(""), o = Math.floor(n.length / 33) * 32, i = n.slice(0, o), s = n.slice(o), a = i.match(/(.{1,8})/g).map(tv);
  if (a.length < 16)
    throw new Error(ni);
  if (a.length > 32)
    throw new Error(ni);
  if (a.length % 4 !== 0)
    throw new Error(ni);
  const c = Buffer.from(a);
  if (nv(c) !== s)
    throw new Error(HN);
  return c.toString("hex");
}
yn.mnemonicToEntropy = iv;
function sv(e, t) {
  if (Buffer.isBuffer(e) || (e = Buffer.from(e, "hex")), t = t || ba, !t)
    throw new Error(Q1);
  if (e.length < 16)
    throw new TypeError(ni);
  if (e.length > 32)
    throw new TypeError(ni);
  if (e.length % 4 !== 0)
    throw new TypeError(ni);
  const r = rv(Array.from(e)), n = nv(e), s = (r + n).match(/(.{1,11})/g).map((a) => {
    const c = tv(a);
    return t[c];
  });
  return t[0] === "あいこくしん" ? s.join("　") : s.join(" ");
}
var MN = yn.entropyToMnemonic = sv;
function DN(e, t, r) {
  if (e = e || 128, e % 32 !== 0)
    throw new TypeError(ni);
  return t = t || ((n) => Buffer.from(CN.randomBytes(n))), sv(t(e / 8), r);
}
yn.generateMnemonic = DN;
function FN(e, t) {
  try {
    iv(e, t);
  } catch {
    return !1;
  }
  return !0;
}
yn.validateMnemonic = FN;
function KN(e) {
  const t = _u.wordlists[e];
  if (t)
    ba = t;
  else
    throw new Error('Could not find wordlist for language "' + e + '"');
}
yn.setDefaultWordlist = KN;
function VN() {
  if (!ba)
    throw new Error("No Default Wordlist set");
  return Object.keys(_u.wordlists).filter((e) => e === "JA" || e === "EN" ? !1 : _u.wordlists[e].every((t, r) => t === ba[r]))[0];
}
yn.getDefaultWordlist = VN;
var qN = rr;
yn.wordlists = qN.wordlists;
function GN(e) {
  return wm(Ut(e));
}
function vg(e, t) {
  return hh(U8, e, t);
}
const ke = (e) => PE(e);
function WN(e) {
  if (Tt(e.isPoint(ke("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"))), Tt(!e.isPoint(ke("030000000000000000000000000000000000000000000000000000000000000005"))), Tt(e.isPrivate(ke("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"))), Tt(e.isPrivate(ke("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140"))), Tt(!e.isPrivate(ke("0000000000000000000000000000000000000000000000000000000000000000"))), Tt(!e.isPrivate(ke("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"))), Tt(!e.isPrivate(ke("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142"))), Tt(xn(e.pointFromScalar(ke("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af")), ke("02b07ba9dca9523b7ef4bd97703d43d20399eb698e194704791a25ce77a400df99")) === 0), e.xOnlyPointAddTweak) {
    Tt(e.xOnlyPointAddTweak(ke("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), ke("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")) === null);
    let t = e.xOnlyPointAddTweak(ke("1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b"), ke("a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac"));
    Tt(xn(t.xOnlyPubkey, ke("e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf")) === 0 && t.parity === 1), t = e.xOnlyPointAddTweak(ke("2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991"), ke("823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47"));
  }
  Tt(xn(e.pointAddScalar(ke("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), ke("0000000000000000000000000000000000000000000000000000000000000003")), ke("02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5")) === 0), Tt(xn(e.privateAdd(ke("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e"), ke("0000000000000000000000000000000000000000000000000000000000000002")), ke("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")) === 0), e.privateNegate && (Tt(xn(e.privateNegate(ke("0000000000000000000000000000000000000000000000000000000000000001")), ke("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")) === 0), Tt(xn(e.privateNegate(ke("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e")), ke("0000000000000000000000000000000000000000000000000000000000000003")) === 0), Tt(xn(e.privateNegate(ke("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af")), ke("4eede1bf775995d70a494f0a7bb6bc11e0b8cccd41cce8009ab1132c8b0a3792")) === 0)), Tt(xn(e.sign(ke("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"), ke("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")), ke("54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5")) === 0), Tt(e.verify(ke("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"), ke("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), ke("54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5"))), e.signSchnorr && Tt(xn(e.signSchnorr(ke("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"), ke("c90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b14e5c9"), ke("c87aa53824b4d7ae2eb035a2b5bbbccc080e76cdc6d1692c4b0b62d798e6d906")), ke("5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7")) === 0), e.verifySchnorr && Tt(e.verifySchnorr(ke("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"), ke("dd308afec5777e13121fa72b9cc1b7cc0139715309b086c960e18fd969774eb8"), ke("5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7")));
}
function Tt(e) {
  if (!e)
    throw new Error("ecc library invalid");
}
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function jd(e) {
  return e instanceof Uint8Array || e != null && typeof e == "object" && e.constructor.name === "Uint8Array";
}
// @__NO_SIDE_EFFECTS__
function av(...e) {
  const t = (i) => i, r = (i, s) => (a) => i(s(a)), n = e.map((i) => i.encode).reduceRight(r, t), o = e.map((i) => i.decode).reduce(r, t);
  return { encode: n, decode: o };
}
// @__NO_SIDE_EFFECTS__
function ZN(e) {
  return {
    encode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return t.map((r) => {
        if (r < 0 || r >= e.length)
          throw new Error(`Digit index outside alphabet: ${r} (alphabet: ${e.length})`);
        return e[r];
      });
    },
    decode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "string")
        throw new Error("alphabet.decode input should be array of strings");
      return t.map((r) => {
        if (typeof r != "string")
          throw new Error(`alphabet.decode: not string element=${r}`);
        const n = e.indexOf(r);
        if (n === -1)
          throw new Error(`Unknown letter: "${r}". Allowed: ${e}`);
        return n;
      });
    }
  };
}
// @__NO_SIDE_EFFECTS__
function XN(e = "") {
  if (typeof e != "string")
    throw new Error("join separator should be string");
  return {
    encode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "string")
        throw new Error("join.encode input should be array of strings");
      for (let r of t)
        if (typeof r != "string")
          throw new Error(`join.encode: non-string input=${r}`);
      return t.join(e);
    },
    decode: (t) => {
      if (typeof t != "string")
        throw new Error("join.decode input should be string");
      return t.split(e);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function Eg(e, t, r) {
  if (t < 2)
    throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);
  if (r < 2)
    throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);
  if (!Array.isArray(e))
    throw new Error("convertRadix: data should be array");
  if (!e.length)
    return [];
  let n = 0;
  const o = [], i = Array.from(e);
  for (i.forEach((s) => {
    if (s < 0 || s >= t)
      throw new Error(`Wrong integer: ${s}`);
  }); ; ) {
    let s = 0, a = !0;
    for (let c = n; c < i.length; c++) {
      const u = i[c], f = t * s + u;
      if (!Number.isSafeInteger(f) || t * s / t !== s || f - u !== t * s)
        throw new Error("convertRadix: carry overflow");
      s = f % r;
      const l = Math.floor(f / r);
      if (i[c] = l, !Number.isSafeInteger(l) || l * r + s !== f)
        throw new Error("convertRadix: carry overflow");
      if (a)
        l ? a = !1 : n = c;
      else continue;
    }
    if (o.push(s), a)
      break;
  }
  for (let s = 0; s < e.length - 1 && e[s] === 0; s++)
    o.push(0);
  return o.reverse();
}
// @__NO_SIDE_EFFECTS__
function YN(e) {
  return {
    encode: (t) => {
      if (!jd(t))
        throw new Error("radix.encode input should be Uint8Array");
      return /* @__PURE__ */ Eg(Array.from(t), 2 ** 8, e);
    },
    decode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "number")
        throw new Error("radix.decode input should be array of numbers");
      return Uint8Array.from(/* @__PURE__ */ Eg(t, e, 2 ** 8));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function JN(e, t) {
  if (typeof t != "function")
    throw new Error("checksum fn should be function");
  return {
    encode(r) {
      if (!jd(r))
        throw new Error("checksum.encode: input should be Uint8Array");
      const n = t(r).slice(0, e), o = new Uint8Array(r.length + e);
      return o.set(r), o.set(n, r.length), o;
    },
    decode(r) {
      if (!jd(r))
        throw new Error("checksum.decode: input should be Uint8Array");
      const n = r.slice(0, -e), o = t(n).slice(0, e), i = r.slice(-e);
      for (let s = 0; s < e; s++)
        if (o[s] !== i[s])
          throw new Error("Invalid checksum");
      return n;
    }
  };
}
const QN = (e) => /* @__PURE__ */ av(/* @__PURE__ */ YN(58), /* @__PURE__ */ ZN(e), /* @__PURE__ */ XN("")), e$ = /* @__PURE__ */ QN("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"), t$ = (e) => /* @__PURE__ */ av(/* @__PURE__ */ JN(4, (t) => e(e(t))), e$), r$ = t$;
var An;
function n$(e) {
  return {
    lang: (e == null ? void 0 : e.lang) ?? (An == null ? void 0 : An.lang),
    message: e == null ? void 0 : e.message,
    abortEarly: (e == null ? void 0 : e.abortEarly) ?? (An == null ? void 0 : An.abortEarly),
    abortPipeEarly: (e == null ? void 0 : e.abortPipeEarly) ?? (An == null ? void 0 : An.abortPipeEarly)
  };
}
var Of;
function o$(e) {
  return Of == null ? void 0 : Of.get(e);
}
var Bf;
function i$(e) {
  return Bf == null ? void 0 : Bf.get(e);
}
var Nf;
function s$(e, t) {
  var r;
  return (r = Nf == null ? void 0 : Nf.get(e)) == null ? void 0 : r.get(t);
}
function wa(e) {
  var r, n;
  const t = typeof e;
  return t === "string" ? `"${e}"` : t === "number" || t === "bigint" || t === "boolean" ? `${e}` : t === "object" || t === "function" ? (e && ((n = (r = Object.getPrototypeOf(e)) == null ? void 0 : r.constructor) == null ? void 0 : n.name)) ?? "null" : t;
}
function Vn(e, t, r, n, o) {
  const i = o && "input" in o ? o.input : r.value, s = (o == null ? void 0 : o.expected) ?? e.expects ?? null, a = (o == null ? void 0 : o.received) ?? wa(i), c = {
    kind: e.kind,
    type: e.type,
    input: i,
    expected: s,
    received: a,
    message: `Invalid ${t}: ${s ? `Expected ${s} but r` : "R"}eceived ${a}`,
    // @ts-expect-error
    requirement: e.requirement,
    path: o == null ? void 0 : o.path,
    issues: o == null ? void 0 : o.issues,
    lang: n.lang,
    abortEarly: n.abortEarly,
    abortPipeEarly: n.abortPipeEarly
  }, u = e.kind === "schema", f = (o == null ? void 0 : o.message) ?? // @ts-expect-error
  e.message ?? s$(e.reference, c.lang) ?? (u ? i$(c.lang) : null) ?? n.message ?? o$(c.lang);
  f && (c.message = typeof f == "function" ? f(c) : f), u && (r.typed = !1), r.issues ? r.issues.push(c) : r.issues = [c];
}
var a$ = class extends Error {
  /**
   * Creates a Valibot error with useful information.
   *
   * @param issues The error issues.
   */
  constructor(t) {
    super(t[0].message);
    /**
     * The error issues.
     */
    oe(this, "issues");
    this.name = "ValiError", this.issues = t;
  }
};
function fl(e) {
  return {
    kind: "validation",
    type: "integer",
    reference: fl,
    async: !1,
    expects: null,
    requirement: Number.isInteger,
    message: e,
    _run(t, r) {
      return t.typed && !this.requirement(t.value) && Vn(this, "integer", t, r), t;
    }
  };
}
function bp(e, t) {
  return {
    kind: "validation",
    type: "length",
    reference: bp,
    async: !1,
    expects: `${e}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && r.value.length !== this.requirement && Vn(this, "length", r, n, {
        received: `${r.value.length}`
      }), r;
    }
  };
}
function dl(e, t) {
  return {
    kind: "validation",
    type: "max_value",
    reference: dl,
    async: !1,
    expects: `<=${e instanceof Date ? e.toJSON() : wa(e)}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && r.value > this.requirement && Vn(this, "value", r, n, {
        received: r.value instanceof Date ? r.value.toJSON() : wa(r.value)
      }), r;
    }
  };
}
function hl(e, t) {
  return {
    kind: "validation",
    type: "min_value",
    reference: hl,
    async: !1,
    expects: `>=${e instanceof Date ? e.toJSON() : wa(e)}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && r.value < this.requirement && Vn(this, "value", r, n, {
        received: r.value instanceof Date ? r.value.toJSON() : wa(r.value)
      }), r;
    }
  };
}
function cv(e, t) {
  return {
    kind: "validation",
    type: "regex",
    reference: cv,
    async: !1,
    expects: `${e}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && !this.requirement.test(r.value) && Vn(this, "format", r, n), r;
    }
  };
}
function pl(e, t) {
  return {
    kind: "schema",
    type: "instance",
    reference: pl,
    expects: e.name,
    async: !1,
    class: e,
    message: t,
    _run(r, n) {
      return r.value instanceof this.class ? r.typed = !0 : Vn(this, "type", r, n), r;
    }
  };
}
function gl(e) {
  return {
    kind: "schema",
    type: "number",
    reference: gl,
    expects: "number",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "number" && !isNaN(t.value) ? t.typed = !0 : Vn(this, "type", t, r), t;
    }
  };
}
function Md(e, t) {
  return {
    kind: "schema",
    type: "object",
    reference: Md,
    expects: "Object",
    async: !1,
    entries: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (o && typeof o == "object") {
        r.typed = !0, r.value = {};
        for (const s in this.entries) {
          const a = o[s], c = this.entries[s]._run(
            { typed: !1, value: a },
            n
          );
          if (c.issues) {
            const u = {
              type: "object",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), (c.value !== void 0 || s in o) && (r.value[s] = c.value);
        }
      } else
        Vn(this, "type", r, n);
      return r;
    }
  };
}
function uv(e) {
  return {
    kind: "schema",
    type: "string",
    reference: uv,
    expects: "string",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "string" ? t.typed = !0 : Vn(this, "type", t, r), t;
    }
  };
}
function kn(e, t, r) {
  const n = e._run(
    { typed: !1, value: t },
    n$(r)
  );
  if (n.issues)
    throw new a$(n.issues);
  return n.value;
}
function ws(...e) {
  return {
    ...e[0],
    pipe: e,
    _run(t, r) {
      for (const n of e)
        if (n.kind !== "metadata") {
          if (t.issues && (n.kind === "schema" || n.kind === "transformation")) {
            t.typed = !1;
            break;
          }
          (!t.issues || !r.abortEarly && !r.abortPipeEarly) && (t = n._run(t, r));
        }
      return t;
    }
  };
}
const Dd = ws(gl(), fl(), hl(0), dl(4294967295)), c$ = ws(gl(), fl(), hl(0), dl(2147483647)), u$ = ws(gl(), fl(), hl(0), dl(255)), $f = ws(pl(Uint8Array), bp(32)), l$ = ws(pl(Uint8Array), bp(33)), f$ = Md({
  wif: u$,
  bip32: Md({
    public: Dd,
    private: Dd
  })
}), d$ = ws(uv(), cv(/^(m\/)?(\d+'?\/)*\d+'?$/));
function h$(e, t, r) {
  if (t.length !== 32)
    throw new TypeError("Invalid privateKey length");
  var n = new Uint8Array(34), o = new DataView(n.buffer);
  return o.setUint8(0, e), n.set(t, 1), n[33] = 1, n;
}
function p$(e) {
  return Wi.encode(h$(e.version, e.privateKey));
}
const xg = r$(Ut), _g = {
  encode: (e) => xg.encode(e),
  decode: (e) => xg.decode(e)
};
function g$(e) {
  WN(e);
  const t = {
    messagePrefix: `Bitcoin Signed Message:
`,
    bech32: "bc",
    bip32: {
      public: 76067358,
      private: 76066276
    },
    pubKeyHash: 0,
    scriptHash: 5,
    wif: 128
  }, r = 2147483648;
  function n(d) {
    return d.length === 32 ? d : d.slice(1, 33);
  }
  class o {
    constructor(m, g) {
      oe(this, "__D");
      oe(this, "__Q");
      oe(this, "lowR", !1);
      this.__D = m, this.__Q = g;
    }
    get publicKey() {
      return this.__Q === void 0 && (this.__Q = e.pointFromScalar(this.__D, !0)), this.__Q;
    }
    get privateKey() {
      return this.__D;
    }
    sign(m, g) {
      if (!this.privateKey)
        throw new Error("Missing private key");
      if (g === void 0 && (g = this.lowR), g === !1)
        return e.sign(m, this.privateKey);
      {
        let y = e.sign(m, this.privateKey);
        const b = new Uint8Array(32);
        let E = 0;
        for (; y[0] > 127; )
          E++, Mo(b, 0, E, "LE"), y = e.sign(m, this.privateKey, b);
        return y;
      }
    }
    signSchnorr(m) {
      if (!this.privateKey)
        throw new Error("Missing private key");
      if (!e.signSchnorr)
        throw new Error("signSchnorr not supported by ecc library");
      return e.signSchnorr(m, this.privateKey);
    }
    verify(m, g) {
      return e.verify(m, this.publicKey, g);
    }
    verifySchnorr(m, g) {
      if (!e.verifySchnorr)
        throw new Error("verifySchnorr not supported by ecc library");
      return e.verifySchnorr(m, this.publicKey.subarray(1, 33), g);
    }
  }
  class i extends o {
    constructor(g, y, b, E, x = 0, w = 0, k = 0) {
      super(g, y);
      oe(this, "chainCode");
      oe(this, "network");
      oe(this, "__DEPTH");
      oe(this, "__INDEX");
      oe(this, "__PARENT_FINGERPRINT");
      this.chainCode = b, this.network = E, this.__DEPTH = x, this.__INDEX = w, this.__PARENT_FINGERPRINT = k, kn(f$, E);
    }
    get depth() {
      return this.__DEPTH;
    }
    get index() {
      return this.__INDEX;
    }
    get parentFingerprint() {
      return this.__PARENT_FINGERPRINT;
    }
    get identifier() {
      return GN(this.publicKey);
    }
    get fingerprint() {
      return this.identifier.slice(0, 4);
    }
    get compressed() {
      return !0;
    }
    // Private === not neutered
    // Public === neutered
    isNeutered() {
      return this.__D === void 0;
    }
    neutered() {
      return f(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);
    }
    toBase58() {
      const g = this.network, y = this.isNeutered() ? g.bip32.public : g.bip32.private, b = new Uint8Array(78);
      return Mo(b, 0, y, "BE"), e0(b, 4, this.depth), Mo(b, 5, this.parentFingerprint, "BE"), Mo(b, 9, this.index, "BE"), b.set(this.chainCode, 13), this.isNeutered() ? b.set(this.publicKey, 45) : (e0(b, 45, 0), b.set(this.privateKey, 46)), _g.encode(b);
    }
    toWIF() {
      if (!this.privateKey)
        throw new TypeError("Missing private key");
      return p$({
        version: this.network.wif,
        privateKey: this.privateKey,
        compressed: !0
      });
    }
    // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions
    derive(g) {
      kn(Dd, g);
      const y = g >= r, b = new Uint8Array(37);
      if (y) {
        if (this.isNeutered())
          throw new TypeError("Missing private key for hardened child key");
        b[0] = 0, b.set(this.privateKey, 1), Mo(b, 33, g, "BE");
      } else
        b.set(this.publicKey, 0), Mo(b, 33, g, "BE");
      const E = vg(this.chainCode, b), x = E.slice(0, 32), w = E.slice(32);
      if (!e.isPrivate(x))
        return this.derive(g + 1);
      let k;
      if (this.isNeutered()) {
        const S = e.pointAddScalar(this.publicKey, x, !0);
        if (S === null)
          return this.derive(g + 1);
        k = f(S, w, this.network, this.depth + 1, g, Ui(this.fingerprint, 0, "BE"));
      } else {
        const S = e.privateAdd(this.privateKey, x);
        if (S == null)
          return this.derive(g + 1);
        k = c(S, w, this.network, this.depth + 1, g, Ui(this.fingerprint, 0, "BE"));
      }
      return k;
    }
    deriveHardened(g) {
      if (typeof kn(c$, g) == "number")
        return this.derive(g + r);
      throw new TypeError("Expected UInt31, got " + g);
    }
    derivePath(g) {
      kn(d$, g);
      let y = g.split("/");
      if (y[0] === "m") {
        if (this.parentFingerprint)
          throw new TypeError("Expected master, got child");
        y = y.slice(1);
      }
      return y.reduce((b, E) => {
        let x;
        return E.slice(-1) === "'" ? (x = parseInt(E.slice(0, -1), 10), b.deriveHardened(x)) : (x = parseInt(E, 10), b.derive(x));
      }, this);
    }
    tweak(g) {
      return this.privateKey ? this.tweakFromPrivateKey(g) : this.tweakFromPublicKey(g);
    }
    tweakFromPublicKey(g) {
      const y = n(this.publicKey);
      if (!e.xOnlyPointAddTweak)
        throw new Error("xOnlyPointAddTweak not supported by ecc library");
      const b = e.xOnlyPointAddTweak(y, g);
      if (!b || b.xOnlyPubkey === null)
        throw new Error("Cannot tweak public key!");
      const E = Uint8Array.from([
        b.parity === 0 ? 2 : 3
      ]), x = IE([
        E,
        b.xOnlyPubkey
      ]);
      return new o(void 0, x);
    }
    tweakFromPrivateKey(g) {
      const y = this.publicKey[0] === 3 || this.publicKey[0] === 4 && (this.publicKey[64] & 1) === 1, b = (() => {
        if (y) {
          if (e.privateNegate)
            return e.privateNegate(this.privateKey);
          throw new Error("privateNegate not supported by ecc library");
        } else return this.privateKey;
      })(), E = e.privateAdd(b, g);
      if (!E)
        throw new Error("Invalid tweaked private key!");
      return new o(E, void 0);
    }
  }
  function s(d, m) {
    const g = _g.decode(d);
    if (g.length !== 78)
      throw new TypeError("Invalid buffer length");
    m = m || t;
    const y = Ui(g, 0, "BE");
    if (y !== m.bip32.private && y !== m.bip32.public)
      throw new TypeError("Invalid network version");
    const b = g[4], E = Ui(g, 5, "BE");
    if (b === 0 && E !== 0)
      throw new TypeError("Invalid parent fingerprint");
    const x = Ui(g, 9, "BE");
    if (b === 0 && x !== 0)
      throw new TypeError("Invalid index");
    const w = g.slice(13, 45);
    let k;
    if (y === m.bip32.private) {
      if (g[45] !== 0)
        throw new TypeError("Invalid private key");
      const S = g.slice(46, 78);
      k = c(S, w, m, b, x, E);
    } else {
      const S = g.slice(45, 78);
      k = f(S, w, m, b, x, E);
    }
    return k;
  }
  function a(d, m, g) {
    return c(d, m, g);
  }
  function c(d, m, g, y, b, E) {
    if (kn($f, d), kn($f, m), g = g || t, !e.isPrivate(d))
      throw new TypeError("Private key not in range [1, n)");
    return new i(d, void 0, m, g, y, b, E);
  }
  function u(d, m, g) {
    return f(d, m, g);
  }
  function f(d, m, g, y, b, E) {
    if (kn(l$, d), kn($f, m), g = g || t, !e.isPoint(d))
      throw new TypeError("Point is not on the curve");
    return new i(void 0, d, m, g, y, b, E);
  }
  function l(d, m) {
    if (kn(pl(Uint8Array), d), d.length < 16)
      throw new TypeError("Seed should be at least 128 bits");
    if (d.length > 64)
      throw new TypeError("Seed should be at most 512 bits");
    m = m || t;
    const g = vg(TE("Bitcoin seed"), d), y = g.slice(0, 32), b = g.slice(32);
    return a(y, b, m);
  }
  return {
    fromSeed: l,
    fromBase58: s,
    fromPublicKey: u,
    fromPrivateKey: a
  };
}
const rC = "text/html", nC = "text/css", m$ = "text/plain", oC = "text/javascript", iC = "text/markdown", sC = "application/json", aC = "application/javascript", cC = "application/xml", uC = "application/pdf", lC = "application/zip", fC = "application/gzip", dC = "application/xhtml+xml", hC = "application/rss+xml", pC = "application/atom+xml", gC = "application/x-www-form-urlencoded", mC = "application/octet-stream", bC = "image/jpeg", yC = "image/png", wC = "image/gif", vC = "image/svg+xml", EC = "image/webp", xC = "image/x-icon", _C = "video/mp4", SC = "video/webm", AC = "video/ogg", kC = "audio/mpeg", TC = "audio/wav", IC = "audio/ogg", PC = "multipart/form-data", Sg = "btc", OC = "brc20", Ag = "runes", BC = "alkanes", yp = "bip322", Ma = "ecdsa", ml = "bip322-simple";
async function lv(e, t = Ce) {
  try {
    return await st.get(`${cl(t)}/api/tx/${e}`).then((r) => r.data);
  } catch (r) {
    throw r;
  }
}
const fv = async (e) => await st.get(`${cl(e)}/api/v1/fees/recommended`, {
  headers: {
    "Content-Type": "application/json"
  }
}).then((t) => t.data), b$ = g$(rl);
ih(rl);
async function y$(e) {
  const t = crypto.getRandomValues(new Uint8Array(32)), r = MN(Buffer.from(t)), n = await jN(r), o = b$.fromSeed(n, mt(e));
  return o == null ? void 0 : o.derivePath("m/44'/0'/0'/0/0").privateKey;
}
const dv = (e, t) => {
  try {
    const r = mt(t), n = Nm(e);
    if (n.version === r.pubKeyHash) return h2;
    if (n.version === r.scriptHash) {
      const o = lt(n.hash);
      return o && o.length === 2 && o[0] === Ze.OP_0 ? p2 : qd;
    }
  } catch {
    try {
      const n = ah(e);
      if (n.version === 0 && n.data.length === 20) return Vf;
      if (n.version === 0 && n.data.length === 32) return g2;
      if (n.version === 1 && n.data.length === 32) return Di;
    } catch {
      return "unknown";
    }
  }
  return "unknown";
};
function w$(e, t) {
  const r = mt(t);
  return Ta(e, r);
}
function wp(e, t) {
  var o;
  const r = _a({
    pubkey: Buffer.from(e, "hex"),
    network: mt(t)
  }), n = fs({
    redeem: r,
    network: mt(t)
  });
  return (o = n == null ? void 0 : n.redeem) == null ? void 0 : o.output;
}
async function v$(e, t) {
  const n = Date.now();
  for (; ; )
    try {
      if (await lv(e, t))
        return console.log("Transaction found in mempool:", e), !0;
      if (Date.now() - n > 6e4)
        return !1;
      await new Promise((i) => setTimeout(i, 5e3));
    } catch {
      if (Date.now() - n > 6e4)
        return !1;
      await new Promise((i) => setTimeout(i, 5e3));
    }
}
async function E$(e, t, r) {
  const o = Date.now();
  for (; ; )
    try {
      const i = await lv(e, r);
      if (i && i.vout && i.vout.length > 0)
        return Math.floor(i.vout[t].value);
      if (Date.now() - o > 6e4)
        return null;
      await new Promise((s) => setTimeout(s, 5e3));
    } catch (i) {
      if (console.error("Error fetching transaction output value:", i), Date.now() - o > 6e4)
        return null;
      await new Promise((s) => setTimeout(s, 5e3));
    }
}
ih(rl);
const mt = (e) => e === tt || e === Ht || e === Ft ? m2 : Zr, vp = (e) => e.find(
  ({ purpose: t }) => t === "ordinals"
), Ep = (e) => e.find(
  ({ purpose: t }) => t === "payment"
), jn = async (e, t) => {
  try {
    const r = await bl(
      e,
      t
    );
    return r ? r.reduce((n, o) => n + BigInt(o.value), 0n) : 0n;
  } catch (r) {
    throw console.error("Error fetching BTC balance:", r), new Error("Failed to fetch BTC balance");
  }
};
function hv(e, t, r) {
  const a = e * 57 + t * 41, c = r * 34;
  return 10 + a + c;
}
async function bl(e, t) {
  if (e.startsWith("t")) {
    if (t === Ce)
      return [];
    if (t === Br)
      return [];
    if (t === Lt)
      return [];
  }
  return await st.get(`${cl(t)}/api/address/${e}/utxo`).then((r) => r.data);
}
async function xp(e, t, r, n, o, i, s = 7) {
  const a = e === t, c = await bl(
    t,
    i
  );
  if (!c)
    throw new Error("No UTXOs found");
  const u = c.sort(
    (y, b) => b.value - y.value
  ), f = new Qe({ network: mt(i) }), l = hv(1, 0, 2), d = Math.floor(l * s) + n;
  let m = 0, g = 0;
  for await (let y of u) {
    const { txid: b, vout: E, value: x } = y, w = Ta(
      t,
      mt(i)
    );
    if (f.addInput({
      hash: b,
      index: E,
      witnessUtxo: {
        script: w,
        value: BigInt(x)
      }
    }), !a) {
      const k = wp(o, i);
      f.updateInput(g, { redeemScript: k });
    }
    if (m += x, m >= d)
      break;
  }
  if (m < d)
    throw new Error("Insufficient funds");
  return f.addOutput({
    address: r,
    value: BigInt(n)
  }), m > d && f.addOutput({
    address: t,
    value: BigInt(m - d)
  }), {
    psbtBase64: f.toBase64(),
    psbtHex: f.toHex()
  };
}
function pv(e) {
  return e == null ? void 0 : e.reduce((t, r) => t + r.value, 0);
}
async function yl(e, t) {
  return (await st.post(
    `${cl(t)}/api/tx`,
    e,
    {
      headers: {
        "Content-Type": "text/plain"
      }
    }
  )).data;
}
const _p = (e) => e === tt || e === Ht || e === Ft, vs = (e) => e === Ce || e === Br || e === Lt;
ih(rl);
const x$ = async ({
  contentBase64: e,
  mimeType: t,
  quantity: r = 1,
  inscriptions: n,
  ordinalAddress: o,
  paymentAddress: i,
  paymentPublicKey: s,
  signPsbt: a,
  network: c = Ce
}) => {
  try {
    if (!e && !n)
      throw new Error("contentBase64 or inscriptions is required");
    const u = await y$(c), f = Buffer.from(u).toString("hex"), l = n || Array(r).fill({
      content: e,
      mimeType: t
    }), d = await _$({
      inscriptions: l,
      paymentAddress: i,
      paymentPublicKey: s,
      privKey: f,
      network: c
    });
    if (!d || !(d != null && d.psbtHex))
      throw new Error("couldn't get commit tx");
    const m = String(d == null ? void 0 : d.psbtHex), g = String(d == null ? void 0 : d.psbtBase64), y = await a(
      "",
      m,
      g,
      !0,
      !1,
      c
    );
    if (!y) throw new Error("sign psbt failed");
    const E = Qe.fromHex((y == null ? void 0 : y.signedPsbtHex) || "").extractTransaction(), x = await yl(E.toHex(), c);
    if (!x) throw new Error("commit tx failed");
    return await S$({
      inscriptions: l,
      ordinalAddress: o,
      privKey: f,
      commitTxId: x,
      network: c
    });
  } catch (u) {
    throw u;
  }
}, _$ = async ({
  inscriptions: e,
  paymentAddress: t,
  paymentPublicKey: r,
  privKey: n,
  network: o
}) => {
  try {
    const i = e.length, s = e.reduce(
      (I, T) => I + Buffer.from(T.content).length,
      0
    );
    if (s > 39e4)
      throw new Error("Content size is too large, must be less than 390kb");
    const { fastestFee: a } = await fv(o), c = _b(String(n), !0), u = new Qe({
      network: mt(o)
    }), { inscriberAddress: f } = A$(
      c,
      e,
      o
    ), l = 5 * 34 * i, d = Math.floor(l * a * i), m = Math.floor(s * a / 3) + 1e3 + 546 * i, g = Math.floor(d + m), b = (await bl(
      t,
      o
    )).filter((I) => I.value > 3e3).sort((I, T) => T.value - I.value), E = pv(b);
    if (E === 0)
      throw new Error("insufficient funds");
    if (E < g)
      throw new Error("insufficient funds");
    let x = 0;
    const w = Ta(
      t,
      mt(o)
    );
    let k = 0;
    for await (const I of b) {
      const T = dv(t, o);
      if (u.addInput({
        hash: I.txid,
        index: I.vout,
        witnessUtxo: { value: BigInt(I.value), script: w }
      }), T === Di && u.updateInput(k, {
        tapInternalKey: Jo(Buffer.from(r, "hex"))
      }), T === qd) {
        let B = wp(r, o);
        u.updateInput(k, { redeemScript: B });
      }
      if (k++, x += I.value, x > g)
        break;
    }
    const S = x - g;
    return u.addOutput({
      value: BigInt(m),
      address: f
    }), S > 546 && u.addOutput({
      value: BigInt(S),
      address: t
    }), {
      psbtHex: u.toHex(),
      psbtBase64: u.toBase64()
    };
  } catch (i) {
    throw i;
  }
}, S$ = async ({
  inscriptions: e,
  ordinalAddress: t,
  commitTxId: r,
  privKey: n,
  network: o,
  isDry: i
}) => {
  try {
    const s = R8(n), a = _b(n, !0), c = gv(a, e), u = cu.encodeScript(c), [f, l] = cu.getPubKey(a, { target: u });
    if (!await v$(String(r), o))
      throw new Error("ERROR WAITING FOR COMMIT TX");
    const m = await E$(
      r,
      0,
      o
    );
    if (m === 0 || !m)
      throw new Error("ERROR GETTING FIRST INPUT VALUE");
    const g = Mr.create({
      vin: [
        {
          txid: r,
          vout: 0,
          prevout: {
            value: m,
            scriptPubKey: ["OP_1", f]
          }
        }
      ],
      vout: [
        ...Array(e.length).fill({
          value: 546,
          scriptPubKey: mw.toScriptPubKey(t)
        })
      ]
    }), y = gP.taproot.sign(s, g, 0, { extension: u });
    return g.vin[0].witness = [y, c, l], i ? Mr.util.getTxid(g) : await yl(Mr.encode(g).hex, o);
  } catch (s) {
    throw s;
  }
}, gv = (e, t) => {
  const r = new TextEncoder(), n = r.encode("ord"), o = 546, i = (a, c) => {
    let u;
    if (c === m$) {
      const l = Buffer.from(a, "base64").toString("utf-8");
      u = Buffer.from(l, "utf-8");
    } else
      u = Buffer.from(a, "base64");
    const f = [];
    for (let l = 0; l < u.length; l += 520)
      f.push(u.slice(l, l + 520));
    return f;
  }, s = [e, "OP_CHECKSIG"];
  return t.forEach((a, c) => {
    const { content: u, mimeType: f } = a, l = i(u, f);
    if (s.push("OP_0", "OP_IF", n, "01", r.encode(f), "OP_0"), c > 0) {
      const d = o * (c + 1), m = Buffer.from([d]);
      s.push(Buffer.from([2])), s.push(m);
    }
    s.push(...l.map((d) => d), "OP_ENDIF");
  }), s;
}, A$ = (e, t, r = Ce) => {
  const n = gv(e, t), o = cu.encodeScript(n), [i] = cu.getPubKey(e, { target: o });
  return {
    inscriberAddress: mw.p2tr.fromPubKey(
      i,
      R5(r)
    ),
    tpubkey: i,
    tapleaf: o
  };
};
var k$ = {}, Da = {};
Object.defineProperty(Da, "__esModule", { value: !0 });
Da.isRunestone = void 0;
function T$(e) {
  return !("flaws" in e);
}
Da.isRunestone = T$;
var it = {}, br = {}, Sp = {}, yr = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.isNone = e.isSome = e.None = e.Some = e.OptionType = void 0, e.OptionType = {
    Some: Symbol(":some"),
    None: Symbol(":none")
  };
  class t {
    constructor(a) {
      this.val = a;
    }
    get type() {
      return e.OptionType.Some;
    }
    isSome() {
      return !0;
    }
    isNone() {
      return !1;
    }
    match(a) {
      return a.some(this.val);
    }
    map(a) {
      return n(a(this.val));
    }
    inspect(a) {
      return a(this.val), this;
    }
    andThen(a) {
      return a(this.val);
    }
    or(a) {
      return this;
    }
    orElse(a) {
      return this;
    }
    and(a) {
      return a;
    }
    unwrapOr(a) {
      return this.val;
    }
    unwrap() {
      return this.val;
    }
  }
  class r {
    get type() {
      return e.OptionType.None;
    }
    isSome() {
      return !1;
    }
    isNone() {
      return !0;
    }
    match({ none: a }) {
      return typeof a == "function" ? a() : a;
    }
    map(a) {
      return new r();
    }
    inspect(a) {
      return this;
    }
    andThen(a) {
      return new r();
    }
    or(a) {
      return a;
    }
    orElse(a) {
      return a();
    }
    and(a) {
      return new r();
    }
    unwrapOr(a) {
      return a;
    }
    unwrap() {
      throw new ReferenceError("Trying to unwrap None.");
    }
  }
  function n(s) {
    return new t(s);
  }
  e.Some = n, e.None = new r();
  function o(s) {
    return s.isSome();
  }
  e.isSome = o;
  function i(s) {
    return s.isNone();
  }
  e.isNone = i;
})(yr);
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.u8 = e.U8_MAX_BIGINT = void 0;
  const t = yr;
  e.U8_MAX_BIGINT = 0xffn;
  function r(n) {
    return (typeof n == "bigint" ? n : BigInt(n)) & e.U8_MAX_BIGINT;
  }
  e.u8 = r, function(n) {
    n.MAX = n(e.U8_MAX_BIGINT);
    function o(s, a) {
      const c = s + a;
      return c > n.MAX ? t.None : (0, t.Some)(n(c));
    }
    n.checkedAdd = o;
    function i(s, a) {
      const c = s - a;
      return c < 0n ? t.None : (0, t.Some)(n(c));
    }
    n.checkedSub = i;
  }(r || (e.u8 = r = {}));
})(Sp);
var Ap = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.u32 = e.U32_MAX_BIGINT = void 0;
  const t = yr;
  e.U32_MAX_BIGINT = 0xffffffffn;
  function r(n) {
    return (typeof n == "bigint" ? n : BigInt(n)) & e.U32_MAX_BIGINT;
  }
  e.u32 = r, function(n) {
    n.MAX = n(e.U32_MAX_BIGINT);
    function o(s, a) {
      const c = s + a;
      return c > n.MAX ? t.None : (0, t.Some)(n(c));
    }
    n.checkedAdd = o;
    function i(s, a) {
      const c = s - a;
      return c < 0n ? t.None : (0, t.Some)(n(c));
    }
    n.checkedSub = i;
  }(r || (e.u32 = r = {}));
})(Ap);
var kp = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.u64 = e.U64_MAX_BIGINT = void 0;
  const t = yr;
  e.U64_MAX_BIGINT = 0xffffffffffffffffn;
  function r(n) {
    return (typeof n == "bigint" ? n : BigInt(n)) & e.U64_MAX_BIGINT;
  }
  e.u64 = r, function(n) {
    n.MAX = n(e.U64_MAX_BIGINT);
    function o(s, a) {
      const c = s + a;
      return c > n.MAX ? t.None : (0, t.Some)(n(c));
    }
    n.checkedAdd = o;
    function i(s, a) {
      const c = s - a;
      return c < 0n ? t.None : (0, t.Some)(n(c));
    }
    n.checkedSub = i;
  }(r || (e.u64 = r = {}));
})(kp);
var mv = {}, Fa = {};
Object.defineProperty(Fa, "__esModule", { value: !0 });
Fa.SeekBuffer = void 0;
class I$ {
  constructor(t) {
    this.buffer = t, this.seekIndex = 0;
  }
  readUInt8() {
    if (!this.isFinished())
      return this.buffer.readUInt8(this.seekIndex++);
  }
  isFinished() {
    return this.seekIndex >= this.buffer.length;
  }
}
Fa.SeekBuffer = I$;
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.getAllU128 = e.u128 = e.U128_MAX_BIGINT = void 0;
  const t = yr, r = Fa, n = kp, o = Ap, i = Sp;
  e.U128_MAX_BIGINT = 0xffffffffffffffffffffffffffffffffn;
  function s(c) {
    return (typeof c == "bigint" ? c : BigInt(c)) & e.U128_MAX_BIGINT;
  }
  e.u128 = s, function(c) {
    c.MAX = c(e.U128_MAX_BIGINT);
    function u(T, B) {
      const C = T + B;
      return C > c.MAX ? t.None : (0, t.Some)(c(C));
    }
    c.checkedAdd = u;
    function f(T, B) {
      const C = c.checkedAdd(T, B);
      if (C.isNone())
        throw new Error("checked add overflow");
      return C.unwrap();
    }
    c.checkedAddThrow = f;
    function l(T, B) {
      const C = T - B;
      return C < 0n ? t.None : (0, t.Some)(c(C));
    }
    c.checkedSub = l;
    function d(T, B) {
      const C = c.checkedSub(T, B);
      if (C.isNone())
        throw new Error("checked sub overflow");
      return C.unwrap();
    }
    c.checkedSubThrow = d;
    function m(T, B) {
      const C = T * B;
      return C > c.MAX ? t.None : (0, t.Some)(c(C));
    }
    c.checkedMultiply = m;
    function g(T, B) {
      const C = T + B;
      return C > c.MAX ? c.MAX : c(C);
    }
    c.saturatingAdd = g;
    function y(T, B) {
      const C = T * B;
      return C > c.MAX ? c.MAX : c(C);
    }
    c.saturatingMultiply = y;
    function b(T, B) {
      return c(T < B ? 0 : T - B);
    }
    c.saturatingSub = b;
    function E(T) {
      try {
        return (0, t.Some)(x(T));
      } catch {
        return t.None;
      }
    }
    c.decodeVarInt = E;
    function x(T) {
      let B = c(0);
      for (let C = 0; C <= 18; C++) {
        const F = T.readUInt8();
        if (F === void 0)
          throw new Error("Unterminated");
        const V = c(F) & 127n;
        if (C === 18 && (V & 124n) !== 0n)
          throw new Error("Overflow");
        if (B = c(B | V << c(7 * C)), !(F & 128))
          return B;
      }
      throw new Error("Overlong");
    }
    c.tryDecodeVarInt = x;
    function w(T) {
      const B = [];
      for (; T >> 7n > 0n; )
        B.push(Number(T & 0xffn) | 128), T = c(T >> 7n);
      return B.push(Number(T & 0xffn)), Buffer.from(B);
    }
    c.encodeVarInt = w;
    function k(T) {
      return T > n.u64.MAX ? t.None : (0, t.Some)((0, n.u64)(T));
    }
    c.tryIntoU64 = k;
    function S(T) {
      return T > o.u32.MAX ? t.None : (0, t.Some)((0, o.u32)(T));
    }
    c.tryIntoU32 = S;
    function I(T) {
      return T > i.u8.MAX ? t.None : (0, t.Some)((0, i.u8)(T));
    }
    c.tryIntoU8 = I;
  }(s || (e.u128 = s = {}));
  function* a(c) {
    const u = new r.SeekBuffer(c);
    for (; !u.isFinished(); ) {
      const f = s.tryDecodeVarInt(u);
      if (f === void 0)
        return;
      yield f;
    }
  }
  e.getAllU128 = a;
})(mv);
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.u128 = e.u64 = e.u32 = e.u8 = void 0;
  var t = Sp;
  Object.defineProperty(e, "u8", { enumerable: !0, get: function() {
    return t.u8;
  } });
  var r = Ap;
  Object.defineProperty(e, "u32", { enumerable: !0, get: function() {
    return r.u32;
  } });
  var n = kp;
  Object.defineProperty(e, "u64", { enumerable: !0, get: function() {
    return n.u64;
  } });
  var o = mv;
  Object.defineProperty(e, "u128", { enumerable: !0, get: function() {
    return o.u128;
  } });
})(br);
var No = {};
Object.defineProperty(No, "__esModule", { value: !0 });
No.script = No.opcodes = void 0;
var qs;
(function(e) {
  function t(o) {
    return o < Tr.OP_PUSHDATA1 ? 1 : o <= 255 ? 2 : o <= 65535 ? 3 : 5;
  }
  e.encodingLength = t;
  function r(o, i, s) {
    const a = t(i);
    return a === 1 ? o.writeUInt8(i, s) : a === 2 ? (o.writeUInt8(Tr.OP_PUSHDATA1, s), o.writeUInt8(i, s + 1)) : a === 3 ? (o.writeUInt8(Tr.OP_PUSHDATA2, s), o.writeUInt16LE(i, s + 1)) : (o.writeUInt8(Tr.OP_PUSHDATA4, s), o.writeUInt32LE(i, s + 1)), a;
  }
  e.encode = r;
  function n(o, i) {
    const s = o.readUInt8(i);
    let a, c;
    if (s < Tr.OP_PUSHDATA1)
      a = s, c = 1;
    else if (s === Tr.OP_PUSHDATA1) {
      if (i + 2 > o.length)
        return null;
      a = o.readUInt8(i + 1), c = 2;
    } else if (s === Tr.OP_PUSHDATA2) {
      if (i + 3 > o.length)
        return null;
      a = o.readUInt16LE(i + 1), c = 3;
    } else {
      if (i + 5 > o.length)
        return null;
      if (s !== Tr.OP_PUSHDATA4)
        throw new Error("Unexpected opcode");
      a = o.readUInt32LE(i + 1), c = 5;
    }
    return {
      opcode: s,
      number: a,
      size: c
    };
  }
  e.decode = n;
})(qs || (qs = {}));
const Tr = {
  OP_FALSE: 0,
  OP_0: 0,
  OP_PUSHDATA1: 76,
  OP_PUSHDATA2: 77,
  OP_PUSHDATA4: 78,
  OP_1NEGATE: 79,
  OP_RESERVED: 80,
  OP_TRUE: 81,
  OP_1: 81,
  OP_2: 82,
  OP_3: 83,
  OP_4: 84,
  OP_5: 85,
  OP_6: 86,
  OP_7: 87,
  OP_8: 88,
  OP_9: 89,
  OP_10: 90,
  OP_11: 91,
  OP_12: 92,
  OP_13: 93,
  OP_14: 94,
  OP_15: 95,
  OP_16: 96,
  OP_NOP: 97,
  OP_VER: 98,
  OP_IF: 99,
  OP_NOTIF: 100,
  OP_VERIF: 101,
  OP_VERNOTIF: 102,
  OP_ELSE: 103,
  OP_ENDIF: 104,
  OP_VERIFY: 105,
  OP_RETURN: 106,
  OP_TOALTSTACK: 107,
  OP_FROMALTSTACK: 108,
  OP_2DROP: 109,
  OP_2DUP: 110,
  OP_3DUP: 111,
  OP_2OVER: 112,
  OP_2ROT: 113,
  OP_2SWAP: 114,
  OP_IFDUP: 115,
  OP_DEPTH: 116,
  OP_DROP: 117,
  OP_DUP: 118,
  OP_NIP: 119,
  OP_OVER: 120,
  OP_PICK: 121,
  OP_ROLL: 122,
  OP_ROT: 123,
  OP_SWAP: 124,
  OP_TUCK: 125,
  OP_CAT: 126,
  OP_SUBSTR: 127,
  OP_LEFT: 128,
  OP_RIGHT: 129,
  OP_SIZE: 130,
  OP_INVERT: 131,
  OP_AND: 132,
  OP_OR: 133,
  OP_XOR: 134,
  OP_EQUAL: 135,
  OP_EQUALVERIFY: 136,
  OP_RESERVED1: 137,
  OP_RESERVED2: 138,
  OP_1ADD: 139,
  OP_1SUB: 140,
  OP_2MUL: 141,
  OP_2DIV: 142,
  OP_NEGATE: 143,
  OP_ABS: 144,
  OP_NOT: 145,
  OP_0NOTEQUAL: 146,
  OP_ADD: 147,
  OP_SUB: 148,
  OP_MUL: 149,
  OP_DIV: 150,
  OP_MOD: 151,
  OP_LSHIFT: 152,
  OP_RSHIFT: 153,
  OP_BOOLAND: 154,
  OP_BOOLOR: 155,
  OP_NUMEQUAL: 156,
  OP_NUMEQUALVERIFY: 157,
  OP_NUMNOTEQUAL: 158,
  OP_LESSTHAN: 159,
  OP_GREATERTHAN: 160,
  OP_LESSTHANOREQUAL: 161,
  OP_GREATERTHANOREQUAL: 162,
  OP_MIN: 163,
  OP_MAX: 164,
  OP_WITHIN: 165,
  OP_RIPEMD160: 166,
  OP_SHA1: 167,
  OP_SHA256: 168,
  OP_HASH160: 169,
  OP_HASH256: 170,
  OP_CODESEPARATOR: 171,
  OP_CHECKSIG: 172,
  OP_CHECKSIGVERIFY: 173,
  OP_CHECKMULTISIG: 174,
  OP_CHECKMULTISIGVERIFY: 175,
  OP_NOP1: 176,
  OP_NOP2: 177,
  OP_CHECKLOCKTIMEVERIFY: 177,
  OP_NOP3: 178,
  OP_CHECKSEQUENCEVERIFY: 178,
  OP_NOP4: 179,
  OP_NOP5: 180,
  OP_NOP6: 181,
  OP_NOP7: 182,
  OP_NOP8: 183,
  OP_NOP9: 184,
  OP_NOP10: 185,
  OP_CHECKSIGADD: 186,
  OP_PUBKEYHASH: 253,
  OP_PUBKEY: 254,
  OP_INVALIDOPCODE: 255
};
No.opcodes = Tr;
Tr.OP_RESERVED;
function kg(e) {
  return Buffer.isBuffer(e);
}
var Tg;
(function(e) {
  function t(n) {
    const o = n.reduce((a, c) => kg(c) ? a + qs.encodingLength(c.length) + c.length : a + 1, 0), i = Buffer.allocUnsafe(o);
    let s = 0;
    if (n.forEach((a) => {
      kg(a) ? (s += qs.encode(i, a.length, s), a.copy(i, s), s += a.length) : (i.writeUInt8(a, s), s += 1);
    }), s !== i.length)
      throw new Error("Could not decode chunks");
    return i;
  }
  e.compile = t;
  function* r(n) {
    let o = 0;
    for (; o < n.length; ) {
      const i = n[o];
      if (i >= Tr.OP_0 && i <= Tr.OP_PUSHDATA4) {
        const s = qs.decode(n, o);
        if (s === null || (o += s.size, o + s.number > n.length))
          return !1;
        const a = n.slice(o, o + s.number);
        o += s.number, yield a;
      } else
        yield i, o += 1;
    }
    return !0;
  }
  e.decompile = r;
})(Tg || (No.script = Tg = {}));
Object.defineProperty(it, "__esModule", { value: !0 });
it.TAPROOT_SCRIPT_PUBKEY_TYPE = it.COMMIT_CONFIRMATIONS = it.TAPROOT_ANNEX_PREFIX = it.MAGIC_NUMBER = it.OP_RETURN = it.MAX_SCRIPT_ELEMENT_SIZE = it.SUBSIDY_HALVING_INTERVAL = it.RESERVED = it.MAX_DIVISIBILITY = void 0;
const bv = br, yv = No;
it.MAX_DIVISIBILITY = (0, bv.u8)(38);
it.RESERVED = (0, bv.u128)(6402364363415443603228541259936211926n);
it.SUBSIDY_HALVING_INTERVAL = 21e4;
it.MAX_SCRIPT_ELEMENT_SIZE = 520;
it.OP_RETURN = yv.opcodes.OP_RETURN;
it.MAGIC_NUMBER = yv.opcodes.OP_13;
it.TAPROOT_ANNEX_PREFIX = 80;
it.COMMIT_CONFIRMATIONS = 6;
it.TAPROOT_SCRIPT_PUBKEY_TYPE = "witness_v1_taproot";
var Ka = {};
Object.defineProperty(Ka, "__esModule", { value: !0 });
Ka.Etching = void 0;
const Ig = yr, Rs = br;
class P$ {
  constructor(t, r, n, o, i, s, a) {
    this.divisibility = t, this.rune = r, this.spacers = n, this.terms = i, this.premine = s, this.turbo = a, this.symbol = o.andThen((c) => {
      const u = c.codePointAt(0);
      return u !== void 0 ? (0, Ig.Some)(String.fromCodePoint(u)) : Ig.None;
    });
  }
  get supply() {
    const t = this.premine.unwrapOr((0, Rs.u128)(0)), r = this.terms.andThen((o) => o.cap).unwrapOr((0, Rs.u128)(0)), n = this.terms.andThen((o) => o.amount).unwrapOr((0, Rs.u128)(0));
    return Rs.u128.checkedMultiply(r, n).andThen((o) => Rs.u128.checkedAdd(t, o));
  }
}
Ka.Etching = P$;
var Es = {};
Object.defineProperty(Es, "__esModule", { value: !0 });
Es.Flaw = void 0;
var Pg;
(function(e) {
  e[e.EDICT_OUTPUT = 0] = "EDICT_OUTPUT", e[e.EDICT_RUNE_ID = 1] = "EDICT_RUNE_ID", e[e.INVALID_SCRIPT = 2] = "INVALID_SCRIPT", e[e.OPCODE = 3] = "OPCODE", e[e.SUPPLY_OVERFLOW = 4] = "SUPPLY_OVERFLOW", e[e.TRAILING_INTEGERS = 5] = "TRAILING_INTEGERS", e[e.TRUNCATED_FIELD = 6] = "TRUNCATED_FIELD", e[e.UNRECOGNIZED_EVEN_TAG = 7] = "UNRECOGNIZED_EVEN_TAG", e[e.UNRECOGNIZED_FLAG = 8] = "UNRECOGNIZED_FLAG", e[e.VARINT = 9] = "VARINT";
})(Pg || (Es.Flaw = Pg = {}));
var xs = {};
Object.defineProperty(xs, "__esModule", { value: !0 });
xs.RuneId = void 0;
const bo = yr, an = br;
class Gs {
  constructor(t, r) {
    this.block = t, this.tx = r;
  }
  static new(t, r) {
    const n = new Gs(t, r);
    return n.block === 0n && n.tx > 0 ? bo.None : (0, bo.Some)(n);
  }
  static sort(t) {
    return [...t].sort((r, n) => Number(r.block - n.block || r.tx - n.tx));
  }
  delta(t) {
    const r = an.u64.checkedSub(t.block, this.block);
    if (r.isNone())
      return bo.None;
    const n = r.unwrap();
    let o;
    if (n === 0n) {
      const i = an.u32.checkedSub(t.tx, this.tx);
      if (i.isNone())
        return bo.None;
      o = i.unwrap();
    } else
      o = t.tx;
    return (0, bo.Some)([(0, an.u128)(n), (0, an.u128)(o)]);
  }
  next(t, r) {
    const n = an.u128.tryIntoU64(t), o = an.u128.tryIntoU32(r);
    if (n.isNone() || o.isNone())
      return bo.None;
    const i = n.unwrap(), s = o.unwrap(), a = an.u64.checkedAdd(this.block, i);
    if (a.isNone())
      return bo.None;
    let c;
    if (i === 0n) {
      const u = an.u32.checkedAdd(this.tx, s);
      if (u.isNone())
        return bo.None;
      c = u.unwrap();
    } else
      c = s;
    return Gs.new(a.unwrap(), c);
  }
  toString() {
    return `${this.block}:${this.tx}`;
  }
  static fromString(t) {
    const r = t.split(":");
    if (r.length !== 2)
      throw new Error(`invalid rune ID: ${t}`);
    const [n, o] = r;
    if (!/^\d+$/.test(n) || !/^\d+$/.test(o))
      throw new Error(`invalid rune ID: ${t}`);
    return new Gs((0, an.u64)(BigInt(n)), (0, an.u32)(BigInt(o)));
  }
}
xs.RuneId = Gs;
var Tp = {}, _s = {};
Object.defineProperty(_s, "__esModule", { value: !0 });
_s.Tag = void 0;
const wc = yr, Bi = br;
var Su;
(function(e) {
  e[e.BODY = 0] = "BODY", e[e.FLAGS = 2] = "FLAGS", e[e.RUNE = 4] = "RUNE", e[e.PREMINE = 6] = "PREMINE", e[e.CAP = 8] = "CAP", e[e.AMOUNT = 10] = "AMOUNT", e[e.HEIGHT_START = 12] = "HEIGHT_START", e[e.HEIGHT_END = 14] = "HEIGHT_END", e[e.OFFSET_START = 16] = "OFFSET_START", e[e.OFFSET_END = 18] = "OFFSET_END", e[e.MINT = 20] = "MINT", e[e.POINTER = 22] = "POINTER", e[e.CENOTAPH = 126] = "CENOTAPH", e[e.DIVISIBILITY = 1] = "DIVISIBILITY", e[e.SPACERS = 3] = "SPACERS", e[e.SYMBOL = 5] = "SYMBOL", e[e.NOP = 127] = "NOP";
})(Su || (_s.Tag = Su = {}));
(function(e) {
  function t(o, i, s, a) {
    const c = i.get((0, Bi.u128)(o));
    if (c === void 0)
      return wc.None;
    const u = [];
    for (const l of [...Array(s).keys()]) {
      if (c[l] === void 0)
        return wc.None;
      u[l] = c[l];
    }
    const f = a(u);
    return f.isNone() ? wc.None : (c.splice(0, s), c.length === 0 && i.delete((0, Bi.u128)(o)), (0, wc.Some)(f.unwrap()));
  }
  e.take = t;
  function r(o, i) {
    return Buffer.concat(i.map((s) => [Bi.u128.encodeVarInt((0, Bi.u128)(o)), Bi.u128.encodeVarInt(s)]).flat());
  }
  e.encode = r;
  function n(o, i) {
    return i.map((s) => e.encode(o, [(0, Bi.u128)(s)])).unwrapOr(Buffer.alloc(0));
  }
  e.encodeOptionInt = n;
})(Su || (_s.Tag = Su = {}));
var Ss = {}, wi = {};
Object.defineProperty(wi, "__esModule", { value: !0 });
wi.Network = void 0;
const vc = it;
var Au;
(function(e) {
  e[e.MAINNET = 0] = "MAINNET", e[e.SIGNET = 1] = "SIGNET", e[e.TESTNET = 2] = "TESTNET", e[e.REGTEST = 3] = "REGTEST";
})(Au || (wi.Network = Au = {}));
(function(e) {
  function t(r) {
    switch (r) {
      case e.MAINNET:
        return vc.SUBSIDY_HALVING_INTERVAL * 4;
      case e.REGTEST:
        return vc.SUBSIDY_HALVING_INTERVAL * 0;
      case e.SIGNET:
        return vc.SUBSIDY_HALVING_INTERVAL * 0;
      case e.TESTNET:
        return vc.SUBSIDY_HALVING_INTERVAL * 12;
    }
  }
  e.getFirstRuneHeight = t;
})(Au || (wi.Network = Au = {}));
Object.defineProperty(Ss, "__esModule", { value: !0 });
Ss.Rune = void 0;
const O$ = wi, Ec = it, ce = br;
class Cr {
  constructor(t) {
    this.value = t;
  }
  static getMinimumAtHeight(t, r) {
    let n = ce.u128.saturatingAdd(r, (0, ce.u128)(1));
    const o = (0, ce.u128)(Ec.SUBSIDY_HALVING_INTERVAL / 12);
    let i = (0, ce.u128)(O$.Network.getFirstRuneHeight(t)), s = ce.u128.saturatingAdd(i, (0, ce.u128)(Ec.SUBSIDY_HALVING_INTERVAL));
    if (n < i)
      return new Cr(Cr.STEPS[12]);
    if (n >= s)
      return new Cr((0, ce.u128)(0));
    let a = ce.u128.saturatingSub(n, i), c = ce.u128.saturatingSub((0, ce.u128)(12n), (0, ce.u128)(a / o)), u = Number(c & (0, ce.u128)(ce.u32.MAX)), f = Cr.STEPS[u], l = Cr.STEPS[u - 1], d = (0, ce.u128)(a % o);
    return new Cr((0, ce.u128)(f - (f - l) * d / o));
  }
  get reserved() {
    return this.value >= Ec.RESERVED;
  }
  get commitment() {
    const t = Buffer.alloc(16);
    t.writeBigUInt64LE(0xffffffffffffffffn & this.value, 0), t.writeBigUInt64LE(this.value >> 64n, 8);
    let r = t.length;
    for (; r > 0 && t.at(r - 1) === 0; )
      r--;
    return t.subarray(0, r);
  }
  static getReserved(t, r) {
    return new Cr(ce.u128.checkedAdd(Ec.RESERVED, (0, ce.u128)(t << 32n | r)).unwrap());
  }
  toString() {
    let t = this.value;
    if (t === ce.u128.MAX)
      return "BCGDENLQRQWDSLRUGSNLBTMFIJAV";
    t = (0, ce.u128)(t + 1n);
    let r = "";
    for (; t > 0; )
      r = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[Number((t - 1n) % 26n)] + r, t = (0, ce.u128)((t - 1n) / 26n);
    return r;
  }
  static fromString(t) {
    let r = (0, ce.u128)(0);
    for (const n of [...Array(t.length).keys()]) {
      const o = t[n];
      if (n > 0 && (r = (0, ce.u128)(r + 1n)), r = ce.u128.checkedMultiply(r, (0, ce.u128)(26)).unwrap(), "A" <= o && o <= "Z")
        r = ce.u128.checkedAdd(r, (0, ce.u128)(o.charCodeAt(0) - 65)).unwrap();
      else
        throw new Error(`invalid character in rune name: ${o}`);
    }
    return new Cr(r);
  }
}
Ss.Rune = Cr;
Cr.STEPS = [
  (0, ce.u128)(0n),
  (0, ce.u128)(26n),
  (0, ce.u128)(702n),
  (0, ce.u128)(18278n),
  (0, ce.u128)(475254n),
  (0, ce.u128)(12356630n),
  (0, ce.u128)(321272406n),
  (0, ce.u128)(8353082582n),
  (0, ce.u128)(217180147158n),
  (0, ce.u128)(5646683826134n),
  (0, ce.u128)(146813779479510n),
  (0, ce.u128)(3817158266467286n),
  (0, ce.u128)(99246114928149462n),
  (0, ce.u128)(2580398988131886038n),
  (0, ce.u128)(67090373691429037014n),
  (0, ce.u128)(1744349715977154962390n),
  (0, ce.u128)(45353092615406029022166n),
  (0, ce.u128)(1179180408000556754576342n),
  (0, ce.u128)(30658690608014475618984918n),
  (0, ce.u128)(797125955808376366093607894n),
  (0, ce.u128)(20725274851017785518433805270n),
  (0, ce.u128)(538857146126462423479278937046n),
  (0, ce.u128)(14010285799288023010461252363222n),
  (0, ce.u128)(364267430781488598271992561443798n),
  (0, ce.u128)(9470953200318703555071806597538774n),
  (0, ce.u128)(246244783208286292431866971536008150n),
  (0, ce.u128)(6402364363415443603228541259936211926n),
  (0, ce.u128)(166461473448801533683942072758341510102n)
];
var Va = {};
Object.defineProperty(Va, "__esModule", { value: !0 });
Va.Flag = void 0;
const Uf = br;
var ku;
(function(e) {
  e[e.ETCHING = 0] = "ETCHING", e[e.TERMS = 1] = "TERMS", e[e.TURBO = 2] = "TURBO", e[e.CENOTAPH = 127] = "CENOTAPH";
})(ku || (Va.Flag = ku = {}));
(function(e) {
  function t(o) {
    return (0, Uf.u128)(1n << BigInt(o));
  }
  e.mask = t;
  function r(o, i) {
    const s = e.mask(i), a = (o & s) !== 0n;
    return { set: a, flags: a ? (0, Uf.u128)(o - s) : o };
  }
  e.take = r;
  function n(o, i) {
    return (0, Uf.u128)(o | e.mask(i));
  }
  e.set = n;
})(ku || (Va.Flag = ku = {}));
var wl = {};
Object.defineProperty(wl, "__esModule", { value: !0 });
wl.Instruction = void 0;
var Og;
(function(e) {
  function t(n) {
    return typeof n == "number";
  }
  e.isNumber = t;
  function r(n) {
    return typeof n != "number";
  }
  e.isBuffer = r;
})(Og || (wl.Instruction = Og = {}));
var vl = {}, El = {};
Object.defineProperty(El, "__esModule", { value: !0 });
El.Edict = void 0;
const xc = yr, B$ = br;
var Bg;
(function(e) {
  function t(r, n, o, i) {
    if (n.block === 0n && n.tx > 0n)
      return xc.None;
    const s = B$.u128.tryIntoU32(i);
    if (s.isNone())
      return xc.None;
    const a = s.unwrap();
    return a > r ? xc.None : (0, xc.Some)({ id: n, amount: o, output: a });
  }
  e.fromIntegers = t;
})(Bg || (El.Edict = Bg = {}));
Object.defineProperty(vl, "__esModule", { value: !0 });
vl.Message = void 0;
const N$ = El, _c = Es, Rf = br, $$ = xs, U$ = _s;
class Ip {
  constructor(t, r, n) {
    this.flaws = t, this.edicts = r, this.fields = n;
  }
  static fromIntegers(t, r) {
    const n = [], o = /* @__PURE__ */ new Map(), i = [];
    for (const s of [...Array(Math.ceil(r.length / 2)).keys()].map((a) => a * 2)) {
      const a = r[s];
      if ((0, Rf.u128)(U$.Tag.BODY) === a) {
        let f = new $$.RuneId((0, Rf.u64)(0), (0, Rf.u32)(0));
        const l = 4, d = r.slice(s + 1);
        for (let m = 0; m < d.length; m += l) {
          const g = d.slice(m, m + l);
          if (g.length !== l) {
            i.push(_c.Flaw.TRAILING_INTEGERS);
            break;
          }
          const y = f.next(g[0], g[1]);
          if (y.isNone()) {
            i.push(_c.Flaw.EDICT_RUNE_ID);
            break;
          }
          const b = y.unwrap(), E = N$.Edict.fromIntegers(t, b, g[2], g[3]);
          if (E.isNone()) {
            i.push(_c.Flaw.EDICT_OUTPUT);
            break;
          }
          const x = E.unwrap();
          f = b, n.push(x);
        }
        break;
      }
      const c = r[s + 1];
      if (c === void 0) {
        i.push(_c.Flaw.TRUNCATED_FIELD);
        break;
      }
      const u = o.get(a) ?? [];
      u.push(c), o.set(a, u);
    }
    return new Ip(i, n, o);
  }
}
vl.Message = Ip;
var xl = {};
Object.defineProperty(xl, "__esModule", { value: !0 });
xl.Cenotaph = void 0;
const Ng = yr;
class R$ {
  constructor(t, r = Ng.None, n = Ng.None) {
    this.flaws = t, this.etching = r, this.mint = n;
  }
}
xl.Cenotaph = R$;
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.Runestone = e.isValidPayload = e.MAX_SPACERS = void 0;
  const t = it, r = Ka, n = Fa, o = _s, i = br, s = yr, a = Ss, c = Va, u = wl, f = xs, l = No, d = vl, m = Es, g = xl;
  e.MAX_SPACERS = 134217727;
  function y(E) {
    return Buffer.isBuffer(E);
  }
  e.isValidPayload = y;
  class b {
    constructor(x, w, k, S) {
      this.mint = x, this.pointer = w, this.edicts = k, this.etching = S;
    }
    static decipher(x) {
      const w = b.payload(x);
      if (w.isNone())
        return s.None;
      const k = w.unwrap();
      if (!y(k))
        return (0, s.Some)(new g.Cenotaph([k]));
      const S = b.integers(k);
      if (S.isNone())
        return (0, s.Some)(new g.Cenotaph([m.Flaw.VARINT]));
      const { flaws: I, edicts: T, fields: B } = d.Message.fromIntegers(x.vout.length, S.unwrap());
      let C = o.Tag.take(o.Tag.FLAGS, B, 1, ([N]) => (0, s.Some)(N)).unwrapOr((0, i.u128)(0));
      const F = c.Flag.take(C, c.Flag.ETCHING), V = F.set;
      C = F.flags;
      const R = V ? (() => {
        const N = o.Tag.take(o.Tag.DIVISIBILITY, B, 1, ([Ge]) => i.u128.tryIntoU8(Ge).andThen((Le) => Le <= t.MAX_DIVISIBILITY ? (0, s.Some)(Le) : s.None)), L = o.Tag.take(o.Tag.RUNE, B, 1, ([Ge]) => (0, s.Some)(new a.Rune(Ge))), q = o.Tag.take(o.Tag.SPACERS, B, 1, ([Ge]) => i.u128.tryIntoU32(Ge).andThen((Le) => Le <= e.MAX_SPACERS ? (0, s.Some)(Le) : s.None)), ee = o.Tag.take(o.Tag.SYMBOL, B, 1, ([Ge]) => i.u128.tryIntoU32(Ge).andThen((Le) => {
          try {
            return (0, s.Some)(String.fromCodePoint(Number(Le)));
          } catch {
            return s.None;
          }
        })), Y = c.Flag.take(C, c.Flag.TERMS), ae = Y.set;
        C = Y.flags;
        const ie = ae ? (() => {
          const Ge = o.Tag.take(o.Tag.AMOUNT, B, 1, ([ze]) => (0, s.Some)(ze)), Le = o.Tag.take(o.Tag.CAP, B, 1, ([ze]) => (0, s.Some)(ze)), Et = [
            o.Tag.take(o.Tag.OFFSET_START, B, 1, ([ze]) => i.u128.tryIntoU64(ze)),
            o.Tag.take(o.Tag.OFFSET_END, B, 1, ([ze]) => i.u128.tryIntoU64(ze))
          ], gt = [
            o.Tag.take(o.Tag.HEIGHT_START, B, 1, ([ze]) => i.u128.tryIntoU64(ze)),
            o.Tag.take(o.Tag.HEIGHT_END, B, 1, ([ze]) => i.u128.tryIntoU64(ze))
          ];
          return (0, s.Some)({ amount: Ge, cap: Le, offset: Et, height: gt });
        })() : s.None, ve = o.Tag.take(o.Tag.PREMINE, B, 1, ([Ge]) => (0, s.Some)(Ge)), W = c.Flag.take(C, c.Flag.TURBO), He = F.set;
        return C = W.flags, (0, s.Some)(new r.Etching(N, L, q, ee, ie, ve, He));
      })() : s.None, G = o.Tag.take(o.Tag.MINT, B, 2, ([N, L]) => {
        const q = i.u128.tryIntoU64(N), ee = i.u128.tryIntoU32(L);
        return q.isNone() || ee.isNone() ? s.None : f.RuneId.new(q.unwrap(), ee.unwrap());
      }), K = o.Tag.take(o.Tag.POINTER, B, 1, ([N]) => i.u128.tryIntoU32(N).andThen((L) => L < x.vout.length ? (0, s.Some)(L) : s.None));
      return R.map((N) => N.supply.isNone()).unwrapOr(!1) && I.push(m.Flaw.SUPPLY_OVERFLOW), C !== 0n && I.push(m.Flaw.UNRECOGNIZED_FLAG), [...B.keys()].find((N) => N % 2n === 0n) !== void 0 && I.push(m.Flaw.UNRECOGNIZED_EVEN_TAG), I.length !== 0 ? (0, s.Some)(new g.Cenotaph(I, R.andThen((N) => N.rune), G)) : (0, s.Some)(new b(G, K, T, R));
    }
    encipher() {
      const x = [];
      if (this.etching.isSome()) {
        const S = this.etching.unwrap();
        let I = (0, i.u128)(0);
        if (I = c.Flag.set(I, c.Flag.ETCHING), S.terms.isSome() && (I = c.Flag.set(I, c.Flag.TERMS)), S.turbo && (I = c.Flag.set(I, c.Flag.TURBO)), x.push(o.Tag.encode(o.Tag.FLAGS, [I])), x.push(o.Tag.encodeOptionInt(o.Tag.RUNE, S.rune.map((T) => T.value))), x.push(o.Tag.encodeOptionInt(o.Tag.DIVISIBILITY, S.divisibility.map(i.u128))), x.push(o.Tag.encodeOptionInt(o.Tag.SPACERS, S.spacers.map(i.u128))), x.push(o.Tag.encodeOptionInt(o.Tag.SYMBOL, S.symbol.map((T) => (0, i.u128)(T.codePointAt(0))))), x.push(o.Tag.encodeOptionInt(o.Tag.PREMINE, S.premine)), S.terms.isSome()) {
          const T = S.terms.unwrap();
          x.push(o.Tag.encodeOptionInt(o.Tag.AMOUNT, T.amount)), x.push(o.Tag.encodeOptionInt(o.Tag.CAP, T.cap)), x.push(o.Tag.encodeOptionInt(o.Tag.HEIGHT_START, T.height[0])), x.push(o.Tag.encodeOptionInt(o.Tag.HEIGHT_END, T.height[1])), x.push(o.Tag.encodeOptionInt(o.Tag.OFFSET_START, T.offset[0])), x.push(o.Tag.encodeOptionInt(o.Tag.OFFSET_END, T.offset[1]));
        }
      }
      if (this.mint.isSome()) {
        const S = this.mint.unwrap();
        x.push(o.Tag.encode(o.Tag.MINT, [S.block, S.tx].map(i.u128)));
      }
      if (x.push(o.Tag.encodeOptionInt(o.Tag.POINTER, this.pointer.map(i.u128))), this.edicts.length) {
        x.push(i.u128.encodeVarInt((0, i.u128)(o.Tag.BODY)));
        const S = [...this.edicts].sort((T, B) => Number(T.id.block - B.id.block || T.id.tx - B.id.tx));
        let I = new f.RuneId((0, i.u64)(0), (0, i.u32)(0));
        for (const T of S) {
          const [B, C] = I.delta(T.id).unwrap();
          x.push(i.u128.encodeVarInt(B)), x.push(i.u128.encodeVarInt(C)), x.push(i.u128.encodeVarInt(T.amount)), x.push(i.u128.encodeVarInt((0, i.u128)(T.output))), I = T.id;
        }
      }
      const w = [];
      w.push(t.OP_RETURN), w.push(t.MAGIC_NUMBER);
      const k = Buffer.concat(x);
      for (let S = 0; S < k.length; S += t.MAX_SCRIPT_ELEMENT_SIZE)
        w.push(k.subarray(S, S + t.MAX_SCRIPT_ELEMENT_SIZE));
      return l.script.compile(w);
    }
    static payload(x) {
      for (const w of x.vout) {
        const k = l.script.decompile(Buffer.from(w.scriptPubKey.hex, "hex"));
        if (k === null)
          throw new Error("unable to decompile");
        let S = k.next();
        if (S.done || S.value !== t.OP_RETURN || (S = k.next(), S.done || u.Instruction.isBuffer(S.value) || S.value !== t.MAGIC_NUMBER))
          continue;
        let I = [];
        do {
          if (S = k.next(), S.done) {
            if (!S.value)
              return (0, s.Some)(m.Flaw.INVALID_SCRIPT);
            break;
          }
          const T = S.value;
          if (u.Instruction.isBuffer(T))
            I.push(T);
          else
            return (0, s.Some)(m.Flaw.OPCODE);
        } while (!0);
        return (0, s.Some)(Buffer.concat(I));
      }
      return s.None;
    }
    static integers(x) {
      const w = [], k = new n.SeekBuffer(x);
      for (; !k.isFinished(); ) {
        const S = i.u128.decodeVarInt(k);
        if (S.isNone())
          return s.None;
        w.push(S.unwrap());
      }
      return (0, s.Some)(w);
    }
  }
  e.Runestone = b;
})(Tp);
var qa = {};
Object.defineProperty(qa, "__esModule", { value: !0 });
qa.SpacedRune = void 0;
const C$ = Ss;
class Pp {
  constructor(t, r) {
    this.rune = t, this.spacers = r;
  }
  static fromString(t) {
    let r = "", n = 0;
    for (const o of t)
      if ("A" <= o && o <= "Z")
        r += o;
      else if (o === "." || o === "•") {
        if (r.length === 0)
          throw new Error("leading spacer");
        const i = 1 << r.length - 1;
        if (n & i)
          throw new Error("double spacer");
        n |= i;
      } else
        throw new Error("invalid character");
    if (n >= 1 << r.length - 1)
      throw new Error("trailing spacer");
    return new Pp(C$.Rune.fromString(r), n);
  }
  toString() {
    const t = this.rune.toString();
    let r = 0, n = "";
    for (const o of t)
      n += o, r < t.length - 1 && this.spacers & 1 << r && (n += "•"), r++;
    return n;
  }
}
qa.SpacedRune = Pp;
var wv = {}, va = {}, Ga = {};
Object.defineProperty(Ga, "__esModule", { value: !0 });
Ga.RuneLocation = void 0;
var $g;
(function(e) {
  function t(r) {
    return `${r.block}:${r.tx}`;
  }
  e.toString = t;
})($g || (Ga.RuneLocation = $g = {}));
Object.defineProperty(va, "__esModule", { value: !0 });
va.RuneUpdater = void 0;
const Cs = Da, Rc = it, Te = br, Vt = yr, Ug = Ss, H$ = Tp, L$ = No, Rg = qa, Tn = Ga;
function Cf(e) {
  return e && Buffer.from(e, "hex")[0] === Rc.OP_RETURN;
}
class z$ {
  constructor(t, r, n, o, i) {
    this.reorg = n, this._storage = o, this._rpc = i, this.etchings = [], this.utxoBalances = [], this.spentBalances = [], this._mintCountsByRuneLocation = /* @__PURE__ */ new Map(), this._burnedBalancesByRuneLocation = /* @__PURE__ */ new Map(), this.block = {
      height: r.height,
      hash: r.hash,
      previousblockhash: r.previousblockhash,
      time: r.time
    }, this._minimum = Ug.Rune.getMinimumAtHeight(t, (0, Te.u128)(r.height));
  }
  get mintCounts() {
    return [...this._mintCountsByRuneLocation.values()];
  }
  get burnedBalances() {
    return [...this._burnedBalancesByRuneLocation.values()];
  }
  async indexRunes(t, r) {
    const n = H$.Runestone.decipher(t), o = await this.unallocated(t), i = [...new Array(t.vout.length)].map(() => /* @__PURE__ */ new Map());
    function s(f) {
      const l = Tn.RuneLocation.toString(f), d = o.get(l) ?? { runeId: f, amount: 0n };
      return o.set(l, d), d;
    }
    function a(f, l) {
      const d = Tn.RuneLocation.toString(l), m = i[f].get(d) ?? { runeId: l, amount: 0n };
      return i[f].set(d, m), m;
    }
    if (n.isSome()) {
      const f = n.unwrap(), l = f.mint;
      if (l.isSome()) {
        const m = l.unwrap(), g = {
          block: Number(m.block),
          tx: Number(m.tx)
        }, y = await this.mint(g, t.txid);
        if (y.isSome()) {
          const b = y.unwrap(), E = s(g);
          E.amount = Te.u128.checkedAddThrow((0, Te.u128)(E.amount), (0, Te.u128)(b));
        }
      }
      const d = await this.etched(r, t, f);
      if ((0, Cs.isRunestone)(f)) {
        const m = f;
        if (d.isSome()) {
          const g = d.unwrap(), y = s(g.runeId);
          y.amount = Te.u128.checkedAddThrow((0, Te.u128)(y.amount), m.etching.unwrap().premine.unwrapOr((0, Te.u128)(0)));
        }
        for (const { id: g, amount: y, output: b } of [...m.edicts]) {
          if (b > t.vout.length)
            throw new Error("Runestone edict output should never exceed transaction output size");
          if (g.block === 0n && g.tx === 0n && d.isNone())
            continue;
          const E = g.block === 0n && g.tx === 0n ? d.unwrap().runeId : { block: Number(g.block), tx: Number(g.tx) }, x = Tn.RuneLocation.toString(E), w = o.get(x);
          if (w === void 0)
            continue;
          let k = (S, I) => {
            if (S > 0n) {
              const T = a(I, E);
              w.amount = Te.u128.checkedSubThrow((0, Te.u128)(w.amount), S), T.amount = Te.u128.checkedAddThrow((0, Te.u128)(T.amount), S);
            }
          };
          if (Number(b) === t.vout.length) {
            const S = [...t.vout.entries()].filter(([I, T]) => !Cf(T.scriptPubKey.hex)).map(([I]) => I);
            if (S.length !== 0)
              if (y === 0n) {
                const I = (0, Te.u128)((0, Te.u128)(w.amount) / (0, Te.u128)(S.length)), T = (0, Te.u128)(w.amount) % (0, Te.u128)(S.length);
                for (const [B, C] of S.entries())
                  k(B < T ? Te.u128.checkedAddThrow(I, (0, Te.u128)(1)) : I, C);
              } else
                for (const I of S)
                  k(y < w.amount ? y : (0, Te.u128)(w.amount), I);
          } else
            k(y !== 0n && y < (0, Te.u128)(w.amount) ? y : (0, Te.u128)(w.amount), Number(b));
        }
      }
      if (d.isSome()) {
        const { runeId: m, rune: g } = d.unwrap();
        this.createEtching(t.txid, f, m, g);
      }
    }
    const c = /* @__PURE__ */ new Map();
    function u(f) {
      const l = Tn.RuneLocation.toString(f), d = c.get(l) ?? { runeId: f, amount: 0n };
      return c.set(l, d), d;
    }
    if (n.isSome() && !(0, Cs.isRunestone)(n.unwrap()))
      for (const f of o.values()) {
        const l = u(f.runeId);
        l.amount = Te.u128.checkedAddThrow((0, Te.u128)(l.amount), (0, Te.u128)(f.amount));
      }
    else {
      const l = n.map((d) => {
        if (!(0, Cs.isRunestone)(d))
          throw new Error("unreachable");
        return d.pointer;
      }).unwrapOr(Vt.None).map((d) => Number(d)).inspect((d) => {
        if (d < 0 || d >= i.length)
          throw new Error("Pointer is invalid");
      }).orElse(() => {
        const d = [...t.vout.entries()].find(([m, g]) => !Cf(g.scriptPubKey.hex));
        return d !== void 0 ? (0, Vt.Some)(d[0]) : Vt.None;
      });
      if (l.isSome()) {
        const d = l.unwrap();
        for (const m of o.values())
          if (m.amount > 0) {
            const g = a(d, m.runeId);
            g.amount = Te.u128.checkedAddThrow((0, Te.u128)(g.amount), (0, Te.u128)(m.amount));
          }
      } else
        for (const [d, m] of o)
          if (m.amount > 0) {
            const g = u(m.runeId);
            c.set(d, {
              runeId: m.runeId,
              amount: Te.u128.checkedAddThrow((0, Te.u128)(g.amount), (0, Te.u128)(m.amount))
            });
          }
    }
    for (const [f, l] of i.entries()) {
      if (l.size === 0)
        continue;
      const d = t.vout[f];
      if (Cf(d.scriptPubKey.hex)) {
        for (const [g, y] of l) {
          const b = u(y.runeId);
          b.amount = Te.u128.checkedAddThrow((0, Te.u128)(b.amount), (0, Te.u128)(y.amount));
        }
        continue;
      }
      const m = new Map(this.etchings.map((g) => [Tn.RuneLocation.toString(g.runeId), g]));
      for (const g of l.values()) {
        const y = Tn.RuneLocation.toString(g.runeId), b = m.get(y) ?? await this._storage.getEtching(y);
        if (b === null)
          throw new Error("Rune should exist at this point");
        this.utxoBalances.push({
          runeId: g.runeId,
          runeTicker: b.runeTicker,
          amount: g.amount,
          scriptPubKey: Buffer.from(d.scriptPubKey.hex),
          txid: t.txid,
          vout: f,
          address: d.scriptPubKey.address
        });
      }
    }
    for (const [f, l] of c)
      this._burnedBalancesByRuneLocation.set(f, l);
  }
  async etched(t, r, n) {
    let o;
    if ((0, Cs.isRunestone)(n)) {
      const s = n;
      if (s.etching.isNone())
        return Vt.None;
      o = s.etching.unwrap().rune;
    } else {
      const s = n;
      if (s.etching.isNone())
        return Vt.None;
      o = s.etching;
    }
    let i;
    if (o.isSome()) {
      if (i = o.unwrap(), i.value < this._minimum.value || i.reserved || this.etchings.find((c) => Rg.SpacedRune.fromString(c.runeName).rune.toString() === i.toString()))
        return Vt.None;
      const s = await this._storage.getRuneLocation(i.toString());
      if (s && s.block < this.block.height || !await this.txCommitsToRune(r, i))
        return Vt.None;
    } else
      i = Ug.Rune.getReserved((0, Te.u64)(this.block.height), (0, Te.u32)(t));
    return (0, Vt.Some)({
      runeId: {
        block: this.block.height,
        tx: t
      },
      rune: i
    });
  }
  async mint(t, r) {
    var E, x, w, k;
    const n = Tn.RuneLocation.toString(t), i = new Map(this.etchings.map((S) => [Tn.RuneLocation.toString(S.runeId), S])).get(n) ?? await this._storage.getEtching(n);
    if (i === null || !i.valid || !i.terms)
      return Vt.None;
    const s = i.terms, a = ((E = s.offset) == null ? void 0 : E.start) !== void 0 ? i.runeId.block + Number(s.offset.start) : null, c = ((x = s.height) == null ? void 0 : x.start) !== void 0 ? Number(s.height.start) : null, u = a !== null || c !== null ? Math.max(a ?? -1 / 0, c ?? -1 / 0) : null;
    if (u !== null && this.block.height < u)
      return Vt.None;
    const f = ((w = s.offset) == null ? void 0 : w.end) !== void 0 ? i.runeId.block + Number(s.offset.end) : null, l = ((k = s.height) == null ? void 0 : k.end) !== void 0 ? Number(s.height.end) : null, d = f !== null || l !== null ? Math.max(f ?? -1 / 0, l ?? -1 / 0) : null;
    if (d !== null && this.block.height >= d)
      return Vt.None;
    const m = s.cap ?? 0n, g = this._mintCountsByRuneLocation.get(n) ?? {
      mint: t,
      count: 0
    };
    if (this._mintCountsByRuneLocation.set(n, g), g.count + await this._storage.getValidMintCount(n, this.block.height - 1) >= m)
      return Vt.None;
    const b = s.amount ?? 0n;
    return g.count++, (0, Vt.Some)(b);
  }
  async unallocated(t) {
    const r = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Map();
    for (const o of this.utxoBalances) {
      const i = `${o.txid}:${o.vout}`, s = n.get(i) ?? [];
      s.push(o), n.set(i, s);
    }
    for (const o of t.vin) {
      if ("coinbase" in o)
        continue;
      const i = n.get(`${o.txid}:${o.vout}`) ?? await this._storage.getUtxoBalance(o.txid, o.vout);
      for (const s of i) {
        const a = s.runeId, c = Tn.RuneLocation.toString(a), u = r.get(c) ?? { runeId: a, amount: 0n };
        r.set(c, u), u.amount = Te.u128.checkedAddThrow((0, Te.u128)(u.amount), (0, Te.u128)(s.amount)), this.spentBalances.push({
          txid: o.txid,
          vout: o.vout,
          address: s.address,
          scriptPubKey: s.scriptPubKey,
          runeId: s.runeId,
          runeTicker: s.runeTicker,
          amount: s.amount,
          spentTxid: t.txid
        });
      }
    }
    return r;
  }
  async txCommitsToRune(t, r) {
    const n = r.commitment;
    for (const o of t.vin) {
      if ("coinbase" in o)
        continue;
      const i = o.txinwitness.map((f) => Buffer.from(f, "hex")), s = i[i.length - 1], a = i.length >= 2 && s[0] === Rc.TAPROOT_ANNEX_PREFIX ? 3 : 2;
      if (a > i.length)
        continue;
      const c = i[i.length - a];
      if (c === void 0)
        continue;
      const u = L$.script.decompile(c);
      for (const f of u) {
        if (!Buffer.isBuffer(f) || Buffer.compare(f, n) !== 0)
          continue;
        const l = await this._rpc.getrawtransaction({
          txid: o.txid,
          verbose: !0
        });
        if (l.error !== null)
          throw l.error;
        const d = l.result;
        if (!(d.vout[o.vout].scriptPubKey.type === Rc.TAPROOT_SCRIPT_PUBKEY_TYPE))
          continue;
        const g = await this._rpc.getblock({ blockhash: d.blockhash });
        if (g.error !== null)
          throw g.error;
        const y = g.result.height;
        if (Te.u128.checkedSubThrow((0, Te.u128)(this.block.height), (0, Te.u128)(y)) + 1n >= Rc.COMMIT_CONFIRMATIONS)
          return !0;
      }
    }
    return !1;
  }
  createEtching(t, r, n, o) {
    if ((0, Cs.isRunestone)(r)) {
      const { divisibility: i, terms: s, premine: a, spacers: c, symbol: u } = r.etching.unwrap();
      this.etchings.push({
        valid: !0,
        runeTicker: o.toString(),
        runeName: new Rg.SpacedRune(o, Number(c.map(Number).unwrapOr(0))).toString(),
        runeId: n,
        txid: t,
        ...i.isSome() ? { divisibility: i.map(Number).unwrap() } : {},
        ...a.isSome() ? { premine: a.unwrap() } : {},
        ...u.isSome() ? { symbol: u.unwrap() } : {},
        ...s.isSome() ? {
          terms: (() => {
            const f = s.unwrap();
            return {
              ...f.amount.isSome() ? { amount: f.amount.unwrap() } : {},
              ...f.cap.isSome() ? { cap: f.cap.unwrap() } : {},
              ...f.height.filter((l) => l.isSome()).length ? {
                height: {
                  ...f.height[0].isSome() ? { start: f.height[0].unwrap() } : {},
                  ...f.height[1].isSome() ? { end: f.height[1].unwrap() } : {}
                }
              } : {},
              ...f.offset.filter((l) => l.isSome()).length ? {
                offset: {
                  ...f.offset[0].isSome() ? { start: f.offset[0].unwrap() } : {},
                  ...f.offset[1].isSome() ? { end: f.offset[1].unwrap() } : {}
                }
              } : {}
            };
          })()
        } : {}
      });
    } else
      this.etchings.push({
        valid: !1,
        runeId: n,
        txid: t,
        runeTicker: o.toString(),
        runeName: o.toString()
      });
  }
}
va.RuneUpdater = z$;
(function(e) {
  var t = be && be.__createBinding || (Object.create ? function(c, u, f, l) {
    l === void 0 && (l = f);
    var d = Object.getOwnPropertyDescriptor(u, f);
    (!d || ("get" in d ? !u.__esModule : d.writable || d.configurable)) && (d = { enumerable: !0, get: function() {
      return u[f];
    } }), Object.defineProperty(c, l, d);
  } : function(c, u, f, l) {
    l === void 0 && (l = f), c[l] = u[f];
  }), r = be && be.__exportStar || function(c, u) {
    for (var f in c) f !== "default" && !Object.prototype.hasOwnProperty.call(u, f) && t(u, c, f);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.RunestoneIndexer = e.RuneUpdater = void 0;
  const n = wi, o = va, i = br;
  r(Ga, e);
  var s = va;
  Object.defineProperty(e, "RuneUpdater", { enumerable: !0, get: function() {
    return s.RuneUpdater;
  } });
  class a {
    constructor(u) {
      this._started = !1, this._updateInProgress = !1, this._rpc = u.bitcoinRpcClient, this._storage = u.storage, this._network = u.network;
    }
    async start() {
      this._started || (await this._storage.connect(), this._started = !0, this._network === n.Network.MAINNET && this._storage.seedEtchings([
        {
          runeTicker: "UNCOMMONGOODS",
          runeName: "UNCOMMON•GOODS",
          runeId: { block: 1, tx: 0 },
          txid: "0000000000000000000000000000000000000000000000000000000000000000",
          valid: !0,
          symbol: "⧉",
          terms: { amount: 1n, cap: i.u128.MAX, height: { start: 840000n, end: 1050000n } }
        }
      ]));
    }
    async stop() {
      this._started && (await this._storage.disconnect(), this._started = !1);
    }
    async updateRuneUtxoBalances() {
      if (!this._started)
        throw new Error("Runestone indexer is not started");
      if (!this._updateInProgress) {
        this._updateInProgress = !0;
        try {
          await this.updateRuneUtxoBalancesImpl();
        } finally {
          this._updateInProgress = !1;
        }
      }
    }
    async updateRuneUtxoBalancesImpl() {
      const u = await this._storage.getCurrentBlock();
      if (u) {
        const d = [];
        let m = u.height, g = (await this._rpc.getblockhash({ height: m })).result, y = u.hash;
        for (; y !== g; )
          g && d.push(g), m--, g = (await this._rpc.getblockhash({ height: m })).result, y = await this._storage.getBlockhash(m);
        d.reverse();
        for (const b of d) {
          const E = await this._rpc.getblock({ blockhash: b, verbosity: 2 });
          if (E.error !== null)
            throw E.error;
          const x = E.result, w = new o.RuneUpdater(this._network, x, !0, this._storage, this._rpc);
          for (const [k, S] of x.tx.entries())
            await w.indexRunes(S, k);
          await this._storage.saveBlockIndex(w);
        }
      }
      let f = Math.max(n.Network.getFirstRuneHeight(this._network), u ? u.height + 1 : 0), l = (await this._rpc.getblockhash({ height: f })).result;
      for (; l !== null; ) {
        const d = await this._rpc.getblock({ blockhash: l, verbosity: 2 });
        if (d.error !== null)
          throw d.error;
        const m = d.result, g = new o.RuneUpdater(this._network, m, !1, this._storage, this._rpc);
        for (const [y, b] of m.tx.entries())
          await g.indexRunes(b, y);
        await this._storage.saveBlockIndex(g), f++, l = (await this._rpc.getblockhash({ height: f })).result;
      }
    }
  }
  e.RunestoneIndexer = a;
})(wv);
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.tryDecodeRunestone = e.isRunestone = e.encodeRunestone = e.Network = e.RunestoneIndexer = e.RuneUpdater = e.RuneLocation = void 0;
  const t = Da, r = it, n = Ka, o = Es, i = br, s = yr, a = xs, c = Tp, u = qa;
  var f = wv;
  Object.defineProperty(e, "RuneLocation", { enumerable: !0, get: function() {
    return f.RuneLocation;
  } }), Object.defineProperty(e, "RuneUpdater", { enumerable: !0, get: function() {
    return f.RuneUpdater;
  } }), Object.defineProperty(e, "RunestoneIndexer", { enumerable: !0, get: function() {
    return f.RunestoneIndexer;
  } });
  var l = wi;
  Object.defineProperty(e, "Network", { enumerable: !0, get: function() {
    return l.Network;
  } });
  function d(k) {
    switch (k) {
      case o.Flaw.EDICT_OUTPUT:
        return "edict_output";
      case o.Flaw.EDICT_RUNE_ID:
        return "edict_rune_id";
      case o.Flaw.INVALID_SCRIPT:
        return "invalid_script";
      case o.Flaw.OPCODE:
        return "opcode";
      case o.Flaw.SUPPLY_OVERFLOW:
        return "supply_overflow";
      case o.Flaw.TRAILING_INTEGERS:
        return "trailing_integers";
      case o.Flaw.TRUNCATED_FIELD:
        return "truncated_field";
      case o.Flaw.UNRECOGNIZED_EVEN_TAG:
        return "unrecognized_even_tag";
      case o.Flaw.UNRECOGNIZED_FLAG:
        return "unrecognized_flag";
      case o.Flaw.VARINT:
        return "varint";
    }
  }
  const m = (k) => {
    const S = BigInt(k);
    if (S < 0n || S > i.u8.MAX)
      throw Error("u8 overflow");
    return (0, i.u8)(S);
  }, g = (k) => {
    const S = BigInt(k);
    if (S < 0n || S > i.u32.MAX)
      throw Error("u32 overflow");
    return (0, i.u32)(S);
  }, y = (k) => {
    const S = BigInt(k);
    if (S < 0n || S > i.u64.MAX)
      throw Error("u64 overflow");
    return (0, i.u64)(S);
  }, b = (k) => {
    const S = BigInt(k);
    if (S < 0n || S > i.u128.MAX)
      throw Error("u128 overflow");
    return (0, i.u128)(S);
  };
  function E(k) {
    const S = k.mint ? (0, s.Some)(new a.RuneId(y(k.mint.block), g(k.mint.tx))) : s.None, I = k.pointer !== void 0 ? (0, s.Some)(k.pointer).map(g) : s.None, T = (k.edicts ?? []).map((F) => ({
      id: new a.RuneId(y(F.id.block), g(F.id.tx)),
      amount: b(F.amount),
      output: g(F.output)
    }));
    let B = s.None, C;
    if (k.etching) {
      const F = k.etching, V = F.runeName ? u.SpacedRune.fromString(F.runeName) : void 0, R = (V == null ? void 0 : V.rune) !== void 0 ? (0, s.Some)(V.rune) : s.None;
      if (F.symbol && !(F.symbol.length === 1 || F.symbol.length === 2 && F.symbol.codePointAt(0) >= 65536))
        throw Error("Symbol must be one code point");
      const G = F.divisibility !== void 0 ? (0, s.Some)(F.divisibility).map(m) : s.None, K = F.premine !== void 0 ? (0, s.Some)(F.premine).map(b) : s.None, N = (V == null ? void 0 : V.spacers) !== void 0 && V.spacers !== 0 ? (0, s.Some)(g(V.spacers)) : s.None, L = F.symbol ? (0, s.Some)(F.symbol) : s.None;
      if (G.isSome() && G.unwrap() > r.MAX_DIVISIBILITY)
        throw Error(`Divisibility is greater than protocol max ${r.MAX_DIVISIBILITY}`);
      let q = s.None;
      if (F.terms) {
        const Y = F.terms, ae = Y.amount !== void 0 ? (0, s.Some)(Y.amount).map(b) : s.None, ie = Y.cap !== void 0 ? (0, s.Some)(Y.cap).map(b) : s.None, ve = Y.height ? [
          Y.height.start !== void 0 ? (0, s.Some)(Y.height.start).map(y) : s.None,
          Y.height.end !== void 0 ? (0, s.Some)(Y.height.end).map(y) : s.None
        ] : [s.None, s.None], W = Y.offset ? [
          Y.offset.start !== void 0 ? (0, s.Some)(Y.offset.start).map(y) : s.None,
          Y.offset.end !== void 0 ? (0, s.Some)(Y.offset.end).map(y) : s.None
        ] : [s.None, s.None];
        if (ae.isSome() && ie.isSome() && ae.unwrap() * ie.unwrap() > i.u128.MAX)
          throw Error("Terms overflow with amount times cap");
        q = (0, s.Some)({ amount: ae, cap: ie, height: ve, offset: W });
      }
      const ee = F.turbo ?? !1;
      B = (0, s.Some)(new n.Etching(G, R, N, L, q, K, ee)), C = R.isSome() ? R.unwrap().commitment : void 0;
    }
    return {
      encodedRunestone: new c.Runestone(S, I, T, B).encipher(),
      etchingCommitment: C
    };
  }
  e.encodeRunestone = E;
  function x(k) {
    return !("flaws" in k);
  }
  e.isRunestone = x;
  function w(k) {
    const S = c.Runestone.decipher(k);
    if (S.isNone())
      return null;
    const I = S.unwrap();
    if ((0, t.isRunestone)(I)) {
      const T = I, B = () => T.etching.unwrap(), C = () => B().terms.unwrap();
      return {
        ...T.etching.isSome() ? {
          etching: {
            ...B().divisibility.isSome() ? { divisibility: B().divisibility.map(Number).unwrap() } : {},
            ...B().premine.isSome() ? { premine: B().premine.unwrap() } : {},
            ...B().rune.isSome() ? {
              runeName: new u.SpacedRune(B().rune.unwrap(), B().spacers.map(Number).unwrapOr(0)).toString()
            } : {},
            ...B().symbol.isSome() ? { symbol: B().symbol.unwrap() } : {},
            ...B().terms.isSome() ? {
              terms: {
                ...C().amount.isSome() ? { amount: C().amount.unwrap() } : {},
                ...C().cap.isSome() ? { cap: C().cap.unwrap() } : {},
                ...C().height.find((F) => F.isSome()) ? {
                  height: {
                    ...C().height[0].isSome() ? { start: C().height[0].unwrap() } : {},
                    ...C().height[1].isSome() ? { end: C().height[1].unwrap() } : {}
                  }
                } : {},
                ...C().offset.find((F) => F.isSome()) ? {
                  offset: {
                    ...C().offset[0].isSome() ? { start: C().offset[0].unwrap() } : {},
                    ...C().offset[1].isSome() ? { end: C().offset[1].unwrap() } : {}
                  }
                } : {}
              }
            } : {},
            turbo: B().turbo
          }
        } : {},
        ...T.mint.isSome() ? {
          mint: {
            block: T.mint.unwrap().block,
            tx: Number(T.mint.unwrap().tx)
          }
        } : {},
        ...T.pointer.isSome() ? { pointer: Number(T.pointer.unwrap()) } : {},
        ...T.edicts.length ? {
          edicts: T.edicts.map((F) => ({
            id: {
              block: F.id.block,
              tx: Number(F.id.tx)
            },
            amount: F.amount,
            output: Number(F.output)
          }))
        } : {}
      };
    } else {
      const T = I;
      return {
        flaws: T.flaws.map(d),
        ...T.etching.isSome() ? { etching: T.etching.unwrap().toString() } : {},
        ...T.mint.isSome() ? { mint: { block: T.mint.unwrap().block, tx: Number(T.mint.unwrap().tx) } } : {}
      };
    }
  }
  e.tryDecodeRunestone = w;
})(k$);
const j$ = (e) => /^(?:[A-Za-z0-9+\/]{4})*?(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(e), M$ = (e) => /^[a-fA-F0-9]+$/.test(e), jo = (e) => {
  const t = [];
  let r = e;
  do {
    let n = r & BigInt(127);
    r >>= BigInt(7), r !== BigInt(0) && (n |= BigInt(128)), t.push(Number(n));
  } while (r !== BigInt(0));
  return { varint: Buffer.from(t) };
}, D$ = ({
  runeId: e,
  amount: t,
  divisibility: r = 0,
  sendOutputIndex: n = 1,
  pointer: o = 0
}) => {
  r === 0 && (t = Math.floor(t));
  const i = jo(BigInt(22)).varint, s = jo(BigInt(o)).varint, a = jo(BigInt(0)).varint, c = jo(BigInt(t * 10 ** r)).varint, u = jo(BigInt(n)).varint, f = e.split(":"), l = Number(f[0]), d = Number(f[1]), m = jo(BigInt(l)).varint, g = jo(BigInt(d)).varint, y = Buffer.concat([
    i,
    s,
    a,
    m,
    g,
    c,
    u
  ]);
  let b = y.byteLength.toString(16);
  return b.length % 2 !== 0 && (b = "0" + y.byteLength.toString(16)), Buffer.concat([
    Buffer.from("6a", "hex"),
    Buffer.from("5d", "hex"),
    Buffer.from(b, "hex"),
    y
  ]);
}, F$ = "https://mainnet.sandshrew.io/v1/lasereyes", _l = async (e, t) => {
  const r = JSON.stringify({
    jsonrpc: "2.0",
    id: e,
    method: e,
    params: t
  });
  return await st.post(F$, r, {
    headers: {
      "content-type": "application/json"
    }
  }).then((n) => n.data).catch((n) => {
    throw n;
  });
}, vv = async (e) => {
  try {
    return (await _l("ord_address", [
      e
    ])).result;
  } catch (t) {
    throw t;
  }
}, Ev = async (e) => {
  try {
    return (await _l("ord_rune", [e])).result;
  } catch (t) {
    throw t;
  }
}, K$ = async (e) => {
  try {
    return await _l("ord_rune", [e]);
  } catch (t) {
    throw t;
  }
}, V$ = async ({
  outpoints: e,
  rune_name: t
}) => {
  const n = [];
  for (let o = 0; o < e.length; o += 1e3) {
    const i = e.slice(o, o + 1e3), s = i.map((u) => ["ord_output", [u]]), { result: a } = await _l("sandshrew_multicall", s);
    for (let u = 0; u < a.length; u++)
      a[u].result.output = i[u];
    const c = a.filter(
      (u) => Object.keys(u.result.runes).includes(t)
    );
    n.push(...c);
  }
  return n;
}, q$ = async (e) => {
  try {
    const r = (await vv(e)).runes_balances;
    if (!r)
      throw new Error("No runes data found");
    return r.map((n) => ({
      name: n[0],
      balance: n[1],
      symbol: n[2]
    }));
  } catch (t) {
    console.error("Error fetching ord address:", t);
  }
}, G$ = async ({
  ordOutputs: e
}) => {
  var t;
  try {
    const r = [];
    for (let n = 0; n < e.length; n++) {
      const o = e[n], { result: i } = o;
      if (!((t = i.output) != null && t.split(":")))
        throw new Error("No output found");
      const { output: s, address: a, runes: c } = i, u = {
        output: s,
        wallet_addr: a,
        script: "",
        balances: [],
        decimals: [],
        rune_ids: [],
        value: i.value
      }, [f, l] = s.split(":");
      if (console.log(f, l, s), u.script = Buffer.from(
        w$(a, Ce)
      ).toString("hex"), typeof c == "object" && !Array.isArray(c))
        for (const d in c)
          u.balances.push(c[d].amount), u.decimals.push(c[d].divisibility), u.rune_ids.push((await K$(d)).id);
      r.push(u);
    }
    return r;
  } catch (r) {
    throw r;
  }
}, W$ = async ({
  address: e,
  runeId: t
}) => {
  const r = await vv(e), { entry: n } = await Ev(t), o = n.spaced_rune, i = await V$({
    outpoints: r.outputs,
    rune_name: o
  });
  return await G$({
    ordOutputs: i
  });
}, Z$ = async ({
  runeId: e,
  amount: t,
  ordinalAddress: r,
  ordinalPublicKey: n,
  paymentAddress: o,
  paymentPublicKey: i,
  toAddress: s,
  signPsbt: a,
  network: c = Ce
}) => {
  try {
    const u = await X$({
      fromAddress: r,
      fromAddressPublicKey: n,
      fromPaymentAddress: o,
      fromPaymentPublicKey: i,
      toAddress: s,
      runeId: e,
      amount: t,
      network: c
    });
    if (!u || !(u != null && u.psbtHex))
      throw new Error("couldn't get commit tx");
    const f = String(u == null ? void 0 : u.psbtHex), l = String(u == null ? void 0 : u.psbtBase64), d = await a(
      "",
      f,
      l,
      !0,
      !1,
      c
    );
    if (!d) throw new Error("sign psbt failed");
    const g = Qe.fromHex((d == null ? void 0 : d.signedPsbtHex) || "").extractTransaction();
    return await yl(g.toHex(), c);
  } catch (u) {
    throw u;
  }
}, X$ = async ({
  fromAddress: e,
  fromAddressPublicKey: t,
  fromPaymentAddress: r,
  fromPaymentPublicKey: n,
  toAddress: o,
  runeId: i,
  amount: s,
  network: a
}) => {
  try {
    const { fastestFee: c } = await fv(a);
    let f = (await bl(r, a)).sort((C, F) => F.value - C.value).filter((C) => C.value > 3e3);
    if (f.length === 0)
      throw new Error("No utxos found");
    let l = new Qe({ network: mt(a) }), d = 0;
    const m = await Ev(i), g = await W$({ runeId: i, address: e }), y = pv(f), b = hv(g.length, 2, 4);
    let x = b * c < 250 ? 250 : b * c, w = 0;
    for await (const C of g) {
      const { output: F, value: V, script: R } = C, G = F.split(":"), K = G[0], N = G[1];
      l.addInput({
        hash: K,
        index: parseInt(N),
        witnessUtxo: {
          value: BigInt(V),
          script: Buffer.from(R, "hex")
        },
        tapInternalKey: Jo(Buffer.from(t, "hex"))
      }), w++, d += V;
    }
    const k = dv(r, a);
    for (let C = 0; C < f.length; C++) {
      const F = Ta(
        r,
        mt(Ce)
      ), V = f[C];
      if (k === Di && l.addInput({
        hash: V.txid,
        index: V.vout,
        witnessUtxo: {
          value: BigInt(V.value),
          script: F
        },
        tapInternalKey: Jo(Buffer.from(n, "hex"))
      }), k === qd) {
        let R = wp(n, a);
        l.addInput({
          hash: V.txid,
          index: V.vout,
          witnessUtxo: {
            value: BigInt(V.value),
            script: F
          },
          redeemScript: R
        });
      }
      k === "p2wpkh" && l.addInput({
        hash: V.txid,
        index: V.vout,
        witnessUtxo: {
          value: BigInt(V.value),
          script: F
        }
      });
    }
    const I = { script: D$({
      runeId: m.id,
      amount: s,
      divisibility: m.entry.divisibility,
      sendOutputIndex: 2,
      pointer: 1
    }), value: BigInt(0) };
    l.addOutput(I);
    const T = 546, B = y - (x + T * 2);
    return l.addOutput({
      value: BigInt(T),
      address: e
    }), l.addOutput({
      value: BigInt(T),
      address: o
    }), l.addOutput({
      address: e,
      value: BigInt(B)
    }), { psbtBase64: l.toBase64(), psbtHex: l.toHex() };
  } catch (c) {
    throw c;
  }
}, Fd = new Error(
  "The connected wallet doesn't support this method..."
), Y$ = new Error("Wallet is not installed");
class Yr {
  constructor(t, r, n) {
    oe(this, "$store");
    oe(this, "$network");
    this.parent = r, this.config = n, this.$store = t.$store, this.$network = t.$network, this.initialize();
  }
  disconnect() {
  }
  async requestAccounts() {
    return [this.$store.get().address, this.$store.get().paymentAddress];
  }
  async switchNetwork(t) {
    throw this.parent.disconnect(), Fd;
  }
  async getNetwork() {
    const { address: t } = this.$store.get();
    return t.slice(0, 1) === "t" && [tt, Ht, Ft, Lt].includes(this.$network.get()) ? this.$network.get() : Ce;
  }
  async getPublicKey() {
    return this.$store.get().publicKey;
  }
  async getBalance() {
    const { paymentAddress: t } = this.$store.get();
    return await jn(t, this.$network.get());
  }
  async getMetaBalances(t) {
    switch (t) {
      case Sg:
        return await this.getBalance();
      case Ag:
        if (this.$network.get() !== Ce)
          throw new Error("Unsupported network");
        return await q$(this.$store.get().address);
      default:
        throw new Error("Unsupported protocol");
    }
  }
  async getInscriptions(t, r) {
    throw console.log("getInscriptions not implemented", t, r), Fd;
  }
  async pushPsbt(t) {
    let r = t;
    return r.startsWith("02") || (r = Qe.fromHex(r).extractTransaction().toHex()), await yl(r, this.$network.get());
  }
  async inscribe(t, r) {
    return await x$({
      contentBase64: t,
      mimeType: r,
      ordinalAddress: this.$store.get().address,
      paymentAddress: this.$store.get().paymentAddress,
      paymentPublicKey: this.$store.get().paymentPublicKey,
      signPsbt: this.signPsbt.bind(this),
      network: this.$network.get()
    });
  }
  async send(t, r) {
    switch (t) {
      case Sg:
        return await this.sendBTC(r.toAddress, r.amount);
      case Ag:
        const n = this.$network.get();
        if (n !== Ce)
          throw new Error("Unsupported network");
        const o = r;
        if (!o.runeId || !o.amount || !o.toAddress)
          throw new Error("Missing required parameters");
        return await Z$({
          runeId: o.runeId,
          amount: o.amount,
          ordinalAddress: this.$store.get().address,
          ordinalPublicKey: this.$store.get().publicKey,
          paymentAddress: this.$store.get().paymentAddress,
          paymentPublicKey: this.$store.get().paymentPublicKey,
          toAddress: o.toAddress,
          signPsbt: this.signPsbt.bind(this),
          network: n
        });
      default:
        throw new Error("Unsupported protocol");
    }
  }
}
class J$ extends Yr {
  constructor() {
    super(...arguments);
    oe(this, "observer");
  }
  get library() {
    return window.unisat;
  }
  get network() {
    return this.$network.get();
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var r;
      this.library && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Ci]: !0
      }), (r = this.observer) == null || r.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Or(this.$store, ["provider"], (r) => {
      if (r.provider !== Ci) {
        this.removeListeners();
        return;
      }
      this.library.getAccounts().then((n) => {
        this.handleAccountsChanged(n);
      }), this.addListeners();
    });
  }
  addListeners() {
    this.library.on("accountsChanged", this.handleAccountsChanged.bind(this)), this.library.on("networkChanged", this.handleNetworkChanged.bind(this));
  }
  removeListeners() {
    var r, n;
    this.library && ((r = this.library) == null || r.removeListener(
      "accountsChanged",
      this.handleAccountsChanged.bind(this)
    ), (n = this.library) == null || n.removeListener(
      "networkChanged",
      this.handleNetworkChanged.bind(this)
    ));
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect(), this.removeListeners();
  }
  handleAccountsChanged(r) {
    if (!r.length) {
      this.parent.disconnect();
      return;
    }
    this.$store.get().accounts[0] !== r[0] && (this.$store.setKey("accounts", r), r.length > 0 ? this.parent.connect(Ci) : this.parent.disconnect());
  }
  handleNetworkChanged(r) {
    const n = vu(r);
    this.network !== n && this.switchNetwork(n), this.parent.connect(Ci);
  }
  async connect(r) {
    if (!this.library) throw new Error("Unisat isn't installed");
    const n = await this.library.requestAccounts();
    if (!n) throw new Error("No accounts found");
    await this.getNetwork().then((i) => {
      this.network !== i && this.switchNetwork(this.network);
    });
    const o = await this.library.getPublicKey();
    if (!o) throw new Error("No public key found");
    this.$store.setKey("accounts", n), this.$store.setKey("address", n[0]), this.$store.setKey("paymentAddress", n[0]), this.$store.setKey("publicKey", o), this.$store.setKey("paymentPublicKey", o);
  }
  async getNetwork() {
    var n;
    const r = await ((n = this.library) == null ? void 0 : n.getChain());
    return r ? vu(r.enum) : this.network;
  }
  async sendBTC(r, n) {
    var i;
    const o = await ((i = this.library) == null ? void 0 : i.sendBitcoin(r, n));
    if (!o) throw new Error("Transaction failed");
    return o;
  }
  async signMessage(r, n) {
    var i;
    const o = (n == null ? void 0 : n.protocol) === yp ? ml : n == null ? void 0 : n.protocol;
    return await ((i = this.library) == null ? void 0 : i.signMessage(r, o));
  }
  async signPsbt(r, n, o, i, s) {
    var u;
    const a = await ((u = this.library) == null ? void 0 : u.signPsbt(n, {
      autoFinalized: i
    })), c = Qe.fromHex(a);
    if (i && s) {
      const f = await this.pushPsbt(a);
      return {
        signedPsbtHex: c.toHex(),
        signedPsbtBase64: c.toBase64(),
        txId: f
      };
    }
    return {
      signedPsbtHex: c.toHex(),
      signedPsbtBase64: c.toBase64(),
      txId: void 0
    };
  }
  async getPublicKey() {
    var r;
    return await ((r = this.library) == null ? void 0 : r.getPublicKey());
  }
  async getBalance() {
    return (await this.library.getBalance()).total;
  }
  async getInscriptions(r, n) {
    const o = r || 0, i = n || 10;
    return await this.library.getInscriptions(o, i);
  }
  async requestAccounts() {
    return await this.library.requestAccounts();
  }
  async switchNetwork(r) {
    var o;
    const n = e1(r);
    await ((o = this.library) == null ? void 0 : o.switchChain(n)), this.$network.set(r);
  }
}
function Q$(e) {
  typeof window < "u" && typeof localStorage < "u" && setTimeout(() => {
    const t = document.createTextNode(" ");
    document.body.appendChild(t), t.remove(), Promise.resolve().then(e);
  }, 1500);
}
function NC() {
  return {
    $store: Wg({
      provider: void 0,
      address: "",
      paymentAddress: "",
      publicKey: "",
      paymentPublicKey: "",
      connected: !1,
      isConnecting: !1,
      isInitializing: !0,
      accounts: [],
      balance: void 0,
      hasProvider: {
        [Ms]: !1,
        [Ci]: !1,
        [vo]: !1,
        [Ds]: !1,
        [Vo]: !1,
        [Ko]: !1,
        [js]: !1,
        [Li]: !0,
        [Fo]: !1,
        [Hi]: !1,
        [Do]: !1
      }
    }),
    $network: Kf(Ce),
    $library: Kf(void 0)
  };
}
function $C({ network: e }) {
  return {
    network: e
  };
}
const Co = [
  "address",
  "paymentAddress",
  "publicKey",
  "paymentPublicKey",
  "balance"
];
function vi(e, t, r, n) {
  var o, i, s;
  t.provider === e && (r ? r === "balance" ? n.setKey("balance", ((o = t.balance) == null ? void 0 : o.toString()) ?? "") : Co.includes(r) && n.setKey(
    r,
    ((i = t[r]) == null ? void 0 : i.toString()) ?? ""
  ) : n.set({
    address: t.address,
    paymentAddress: t.paymentAddress,
    paymentPublicKey: t.paymentPublicKey,
    publicKey: t.publicKey,
    balance: ((s = t.balance) == null ? void 0 : s.toString()) ?? ""
  }));
}
const eU = (e) => {
  const t = e.match(/.{1,2}/g);
  if (!t)
    throw new Error("Invalid hex string");
  return Uint8Array.from(t.map((r) => parseInt(r, 16)));
};
var Hf;
function tU(e) {
  return Hf == null ? void 0 : Hf.get(e);
}
var Lf;
function rU(e) {
  return Lf == null ? void 0 : Lf.get(e);
}
var zf;
function nU(e, t) {
  var r;
  return (r = zf == null ? void 0 : zf.get(e)) == null ? void 0 : r.get(t);
}
function Sl(e) {
  var r, n;
  let t = typeof e;
  return t === "object" && (t = (e && ((n = (r = Object.getPrototypeOf(e)) == null ? void 0 : r.constructor) == null ? void 0 : n.name)) ?? "null"), t === "string" ? `"${e}"` : t === "number" || t === "bigint" || t === "boolean" ? `${e}` : t;
}
function cr(e, t, r, n, o) {
  const i = o && "input" in o ? o.input : r.value, s = (o == null ? void 0 : o.expected) ?? e.expects ?? null, a = (o == null ? void 0 : o.received) ?? Sl(i), c = {
    kind: e.kind,
    type: e.type,
    input: i,
    expected: s,
    received: a,
    message: `Invalid ${t}: ${s ? `Expected ${s} but r` : "R"}eceived ${a}`,
    // @ts-expect-error
    requirement: e.requirement,
    path: o == null ? void 0 : o.path,
    issues: o == null ? void 0 : o.issues,
    lang: n.lang,
    abortEarly: n.abortEarly,
    abortPipeEarly: n.abortPipeEarly
  }, u = e.kind === "schema", f = (o == null ? void 0 : o.message) ?? // @ts-expect-error
  e.message ?? nU(e.reference, c.lang) ?? (u ? rU(c.lang) : null) ?? n.message ?? tU(c.lang);
  f && (c.message = typeof f == "function" ? f(c) : f), u && (r.typed = !1), r.issues ? r.issues.push(c) : r.issues = [c];
}
function oU(e, t) {
  return Object.hasOwn(e, t) && t !== "__proto__" && t !== "prototype" && t !== "constructor";
}
function xv(e, t, r) {
  return typeof e.default == "function" ? (
    // @ts-expect-error
    e.default(t, r)
  ) : (
    // @ts-expect-error
    e.default
  );
}
function Cg(e, t) {
  return !e._run({ typed: !1, value: t }, { abortEarly: !0 }).issues;
}
function Gr(e, t) {
  return {
    kind: "schema",
    type: "array",
    reference: Gr,
    expects: "Array",
    async: !1,
    item: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (Array.isArray(o)) {
        r.typed = !0, r.value = [];
        for (let s = 0; s < o.length; s++) {
          const a = o[s], c = this.item._run({ typed: !1, value: a }, n);
          if (c.issues) {
            const u = {
              type: "array",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), r.value.push(c.value);
        }
      } else
        cr(this, "type", r, n);
      return r;
    }
  };
}
function _v(e) {
  return {
    kind: "schema",
    type: "boolean",
    reference: _v,
    expects: "boolean",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "boolean" ? t.typed = !0 : cr(this, "type", t, r), t;
    }
  };
}
function fi(e, t) {
  const r = Object.entries(e).filter(([n]) => isNaN(+n)).map(([, n]) => n);
  return {
    kind: "schema",
    type: "enum",
    reference: fi,
    expects: r.map(Sl).join(" | ") || "never",
    async: !1,
    enum: e,
    options: r,
    message: t,
    _run(n, o) {
      return this.options.includes(n.value) ? n.typed = !0 : cr(this, "type", n, o), n;
    }
  };
}
function pt(e, t) {
  return {
    kind: "schema",
    type: "literal",
    reference: pt,
    expects: Sl(e),
    async: !1,
    literal: e,
    message: t,
    _run(r, n) {
      return r.value === this.literal ? r.typed = !0 : cr(this, "type", r, n), r;
    }
  };
}
function Sv(e, t) {
  return {
    kind: "schema",
    type: "loose_object",
    reference: Sv,
    expects: "Object",
    async: !1,
    entries: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (o && typeof o == "object") {
        r.typed = !0, r.value = {};
        for (const s in this.entries) {
          const a = o[s], c = this.entries[s]._run(
            { typed: !1, value: a },
            n
          );
          if (c.issues) {
            const u = {
              type: "object",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), (c.value !== void 0 || s in o) && (r.value[s] = c.value);
        }
        if (!r.issues || !n.abortEarly)
          for (const s in o)
            oU(o, s) && !(s in this.entries) && (r.value[s] = o[s]);
      } else
        cr(this, "type", r, n);
      return r;
    }
  };
}
function Op(e, t) {
  return {
    kind: "schema",
    type: "non_optional",
    reference: Op,
    expects: "!undefined",
    async: !1,
    wrapped: e,
    message: t,
    _run(r, n) {
      return r.value === void 0 ? (cr(this, "type", r, n), r) : this.wrapped._run(r, n);
    }
  };
}
function Ei(e) {
  return {
    kind: "schema",
    type: "null",
    reference: Ei,
    expects: "null",
    async: !1,
    message: e,
    _run(t, r) {
      return t.value === null ? t.typed = !0 : cr(this, "type", t, r), t;
    }
  };
}
function xi(e, ...t) {
  const r = {
    kind: "schema",
    type: "nullish",
    reference: xi,
    expects: `${e.expects} | null | undefined`,
    async: !1,
    wrapped: e,
    _run(n, o) {
      return (n.value === null || n.value === void 0) && ("default" in this && (n.value = xv(
        this,
        n,
        o
      )), n.value === null || n.value === void 0) ? (n.typed = !0, n) : this.wrapped._run(n, o);
    }
  };
  return 0 in t && (r.default = t[0]), r;
}
function fn(e) {
  return {
    kind: "schema",
    type: "number",
    reference: fn,
    expects: "number",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "number" && !isNaN(t.value) ? t.typed = !0 : cr(this, "type", t, r), t;
    }
  };
}
function ue(e, t) {
  return {
    kind: "schema",
    type: "object",
    reference: ue,
    expects: "Object",
    async: !1,
    entries: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (o && typeof o == "object") {
        r.typed = !0, r.value = {};
        for (const s in this.entries) {
          const a = o[s], c = this.entries[s]._run(
            { typed: !1, value: a },
            n
          );
          if (c.issues) {
            const u = {
              type: "object",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), (c.value !== void 0 || s in o) && (r.value[s] = c.value);
        }
      } else
        cr(this, "type", r, n);
      return r;
    }
  };
}
function Wr(e, ...t) {
  const r = {
    kind: "schema",
    type: "optional",
    reference: Wr,
    expects: `${e.expects} | undefined`,
    async: !1,
    wrapped: e,
    _run(n, o) {
      return n.value === void 0 && ("default" in this && (n.value = xv(
        this,
        n,
        o
      )), n.value === void 0) ? (n.typed = !0, n) : this.wrapped._run(n, o);
    }
  };
  return 0 in t && (r.default = t[0]), r;
}
function Av(e, t) {
  return {
    kind: "schema",
    type: "picklist",
    reference: Av,
    expects: e.map(Sl).join(" | ") || "never",
    async: !1,
    options: e,
    message: t,
    _run(r, n) {
      return this.options.includes(r.value) ? r.typed = !0 : cr(this, "type", r, n), r;
    }
  };
}
function he(e) {
  return {
    kind: "schema",
    type: "string",
    reference: he,
    expects: "string",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "string" ? t.typed = !0 : cr(this, "type", t, r), t;
    }
  };
}
function Bp(e) {
  return {
    kind: "schema",
    type: "undefined",
    reference: Bp,
    expects: "undefined",
    async: !1,
    message: e,
    _run(t, r) {
      return t.value === void 0 ? t.typed = !0 : cr(this, "type", t, r), t;
    }
  };
}
function Hg(e) {
  let t;
  if (e)
    for (const r of e)
      t ? t.push(...r.issues) : t = r.issues;
  return t;
}
function Al(e, t) {
  return {
    kind: "schema",
    type: "union",
    reference: Al,
    expects: [...new Set(e.map((r) => r.expects))].join(" | ") || "never",
    async: !1,
    options: e,
    message: t,
    _run(r, n) {
      let o, i, s;
      for (const a of this.options) {
        const c = a._run(
          { typed: !1, value: r.value },
          n
        );
        if (c.typed)
          if (c.issues)
            i ? i.push(c) : i = [c];
          else {
            o = c;
            break;
          }
        else
          s ? s.push(c) : s = [c];
      }
      if (o)
        return o;
      if (i) {
        if (i.length === 1)
          return i[0];
        cr(this, "type", r, n, {
          issues: Hg(i)
        }), r.typed = !0;
      } else {
        if ((s == null ? void 0 : s.length) === 1)
          return s[0];
        cr(this, "type", r, n, {
          issues: Hg(s)
        });
      }
      return r;
    }
  };
}
function kl() {
  return {
    kind: "schema",
    type: "unknown",
    reference: kl,
    expects: "unknown",
    async: !1,
    _run(e) {
      return e.typed = !0, e;
    }
  };
}
var wr = {}, as = {}, Yt = {}, As = {};
As.byteLength = aU;
As.toByteArray = uU;
As.fromByteArray = dU;
var dn = [], kr = [], iU = typeof Uint8Array < "u" ? Uint8Array : Array, jf = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var Ni = 0, sU = jf.length; Ni < sU; ++Ni)
  dn[Ni] = jf[Ni], kr[jf.charCodeAt(Ni)] = Ni;
kr[45] = 62;
kr[95] = 63;
function kv(e) {
  var t = e.length;
  if (t % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  var r = e.indexOf("=");
  r === -1 && (r = t);
  var n = r === t ? 0 : 4 - r % 4;
  return [r, n];
}
function aU(e) {
  var t = kv(e), r = t[0], n = t[1];
  return (r + n) * 3 / 4 - n;
}
function cU(e, t, r) {
  return (t + r) * 3 / 4 - r;
}
function uU(e) {
  var t, r = kv(e), n = r[0], o = r[1], i = new iU(cU(e, n, o)), s = 0, a = o > 0 ? n - 4 : n, c;
  for (c = 0; c < a; c += 4)
    t = kr[e.charCodeAt(c)] << 18 | kr[e.charCodeAt(c + 1)] << 12 | kr[e.charCodeAt(c + 2)] << 6 | kr[e.charCodeAt(c + 3)], i[s++] = t >> 16 & 255, i[s++] = t >> 8 & 255, i[s++] = t & 255;
  return o === 2 && (t = kr[e.charCodeAt(c)] << 2 | kr[e.charCodeAt(c + 1)] >> 4, i[s++] = t & 255), o === 1 && (t = kr[e.charCodeAt(c)] << 10 | kr[e.charCodeAt(c + 1)] << 4 | kr[e.charCodeAt(c + 2)] >> 2, i[s++] = t >> 8 & 255, i[s++] = t & 255), i;
}
function lU(e) {
  return dn[e >> 18 & 63] + dn[e >> 12 & 63] + dn[e >> 6 & 63] + dn[e & 63];
}
function fU(e, t, r) {
  for (var n, o = [], i = t; i < r; i += 3)
    n = (e[i] << 16 & 16711680) + (e[i + 1] << 8 & 65280) + (e[i + 2] & 255), o.push(lU(n));
  return o.join("");
}
function dU(e) {
  for (var t, r = e.length, n = r % 3, o = [], i = 16383, s = 0, a = r - n; s < a; s += i)
    o.push(fU(e, s, s + i > a ? a : s + i));
  return n === 1 ? (t = e[r - 1], o.push(
    dn[t >> 2] + dn[t << 4 & 63] + "=="
  )) : n === 2 && (t = (e[r - 2] << 8) + e[r - 1], o.push(
    dn[t >> 10] + dn[t >> 4 & 63] + dn[t << 2 & 63] + "="
  )), o.join("");
}
Object.defineProperty(Yt, "__esModule", { value: !0 });
Yt.decode = Yt.encode = Yt.unescape = Yt.escape = Yt.pad = void 0;
const Tv = As;
function Np(e) {
  return `${e}${"=".repeat(4 - (e.length % 4 || 4))}`;
}
Yt.pad = Np;
function Iv(e) {
  return e.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
Yt.escape = Iv;
function Pv(e) {
  return Np(e).replace(/-/g, "+").replace(/_/g, "/");
}
Yt.unescape = Pv;
function hU(e) {
  return Iv((0, Tv.fromByteArray)(new TextEncoder().encode(e)));
}
Yt.encode = hU;
function pU(e) {
  return new TextDecoder().decode((0, Tv.toByteArray)(Np(Pv(e))));
}
Yt.decode = pU;
var Tl = {}, Il = {}, cs = {};
Object.defineProperty(cs, "__esModule", { value: !0 });
cs.joseToDer = cs.derToJose = void 0;
const Ov = As, Bv = Yt;
function Mf(e) {
  return (e / 8 | 0) + (e % 8 === 0 ? 0 : 1);
}
const gU = {
  ES256: Mf(256),
  ES384: Mf(384),
  ES512: Mf(521)
};
function Nv(e) {
  const t = gU[e];
  if (t)
    return t;
  throw new Error(`Unknown algorithm "${e}"`);
}
const Tu = 128, $v = 0, mU = 32, bU = 16, yU = 2, Uv = bU | mU | $v << 6, Iu = yU | $v << 6;
function Rv(e) {
  if (e instanceof Uint8Array)
    return e;
  if (typeof e == "string")
    return (0, Ov.toByteArray)((0, Bv.pad)(e));
  throw new TypeError("ECDSA signature must be a Base64 string or a Uint8Array");
}
function wU(e, t) {
  const r = Rv(e), n = Nv(t), o = n + 1, i = r.length;
  let s = 0;
  if (r[s++] !== Uv)
    throw new Error('Could not find expected "seq"');
  let a = r[s++];
  if (a === (Tu | 1) && (a = r[s++]), i - s < a)
    throw new Error(`"seq" specified length of "${a}", only "${i - s}" remaining`);
  if (r[s++] !== Iu)
    throw new Error('Could not find expected "int" for "r"');
  const c = r[s++];
  if (i - s - 2 < c)
    throw new Error(`"r" specified length of "${c}", only "${i - s - 2}" available`);
  if (o < c)
    throw new Error(`"r" specified length of "${c}", max of "${o}" is acceptable`);
  const u = s;
  if (s += c, r[s++] !== Iu)
    throw new Error('Could not find expected "int" for "s"');
  const f = r[s++];
  if (i - s !== f)
    throw new Error(`"s" specified length of "${f}", expected "${i - s}"`);
  if (o < f)
    throw new Error(`"s" specified length of "${f}", max of "${o}" is acceptable`);
  const l = s;
  if (s += f, s !== i)
    throw new Error(`Expected to consume entire array, but "${i - s}" bytes remain`);
  const d = n - c, m = n - f, g = new Uint8Array(d + c + m + f);
  for (s = 0; s < d; ++s)
    g[s] = 0;
  g.set(r.subarray(u + Math.max(-d, 0), u + c), s), s = n;
  for (const y = s; s < y + m; ++s)
    g[s] = 0;
  return g.set(r.subarray(l + Math.max(-m, 0), l + f), s), (0, Bv.escape)((0, Ov.fromByteArray)(g));
}
cs.derToJose = wU;
function Lg(e, t, r) {
  let n = 0;
  for (; t + n < r && e[t + n] === 0; )
    ++n;
  return e[t + n] >= Tu && --n, n;
}
function vU(e, t) {
  e = Rv(e);
  const r = Nv(t), n = e.length;
  if (n !== r * 2)
    throw new TypeError(`"${t}" signatures must be "${r * 2}" bytes, saw "${n}"`);
  const o = Lg(e, 0, r), i = Lg(e, r, e.length), s = r - o, a = r - i, c = 2 + s + 1 + 1 + a, u = c < Tu, f = new Uint8Array((u ? 2 : 3) + c);
  let l = 0;
  return f[l++] = Uv, u ? f[l++] = c : (f[l++] = Tu | 1, f[l++] = c & 255), f[l++] = Iu, f[l++] = s, o < 0 ? (f[l++] = 0, f.set(e.subarray(0, r), l), l += r) : (f.set(e.subarray(o, r), l), l += r - o), f[l++] = Iu, f[l++] = a, i < 0 ? (f[l++] = 0, f.set(e.subarray(r), l)) : f.set(e.subarray(r + i), l), f;
}
cs.joseToDer = vU;
var Mn = {};
Object.defineProperty(Mn, "__esModule", { value: !0 });
Mn.InvalidTokenError = Mn.MissingParametersError = void 0;
class EU extends Error {
  constructor(t) {
    super(), this.name = "MissingParametersError", this.message = t || "";
  }
}
Mn.MissingParametersError = EU;
class xU extends Error {
  constructor(t) {
    super(), this.name = "InvalidTokenError", this.message = t || "";
  }
}
Mn.InvalidTokenError = xU;
Object.defineProperty(Il, "__esModule", { value: !0 });
Il.SECP256K1Client = void 0;
const _U = Qu, SU = Kr, Cc = rp, zg = cs, jg = Mn, Mg = $o;
Cc.utils.hmacSha256Sync = (e, ...t) => {
  const r = _U.hmac.create(SU.sha256, e);
  return t.forEach((n) => r.update(n)), r.digest();
};
class Cv {
  static derivePublicKey(t, r = !0) {
    return t.length === 66 && (t = t.slice(0, 64)), t.length < 64 && (t = t.padStart(64, "0")), (0, Mg.bytesToHex)(Cc.getPublicKey(t, r));
  }
  static signHash(t, r, n = "jose") {
    if (!t || !r)
      throw new jg.MissingParametersError("a signing input hash and private key are all required");
    const o = Cc.signSync(t, r.slice(0, 64), {
      der: !0,
      canonical: !1
    });
    if (n === "der")
      return (0, Mg.bytesToHex)(o);
    if (n === "jose")
      return (0, zg.derToJose)(o, "ES256");
    throw Error("Invalid signature format");
  }
  static loadSignature(t) {
    return (0, zg.joseToDer)(t, "ES256");
  }
  static verifyHash(t, r, n) {
    if (!t || !r || !n)
      throw new jg.MissingParametersError("a signing input hash, der signature, and public key are all required");
    return Cc.verify(r, t, n, { strict: !1 });
  }
}
Il.SECP256K1Client = Cv;
Cv.algorithmName = "ES256K";
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.cryptoClients = e.SECP256K1Client = void 0;
  const t = Il;
  Object.defineProperty(e, "SECP256K1Client", { enumerable: !0, get: function() {
    return t.SECP256K1Client;
  } });
  const r = {
    ES256K: t.SECP256K1Client
  };
  e.cryptoClients = r;
})(Tl);
var di = {}, AU = be && be.__awaiter || function(e, t, r, n) {
  function o(i) {
    return i instanceof r ? i : new r(function(s) {
      s(i);
    });
  }
  return new (r || (r = Promise))(function(i, s) {
    function a(f) {
      try {
        u(n.next(f));
      } catch (l) {
        s(l);
      }
    }
    function c(f) {
      try {
        u(n.throw(f));
      } catch (l) {
        s(l);
      }
    }
    function u(f) {
      f.done ? i(f.value) : o(f.value).then(a, c);
    }
    u((n = n.apply(e, t || [])).next());
  });
};
Object.defineProperty(di, "__esModule", { value: !0 });
di.hashSha256Async = di.hashSha256 = void 0;
const kU = Kr;
function Hv(e) {
  return (0, kU.sha256)(e);
}
di.hashSha256 = Hv;
function TU(e) {
  return AU(this, void 0, void 0, function* () {
    try {
      if (typeof crypto < "u" && typeof crypto.subtle < "u") {
        const r = typeof e == "string" ? new TextEncoder().encode(e) : e, n = yield crypto.subtle.digest("SHA-256", r);
        return new Uint8Array(n);
      } else {
        const r = Uw;
        if (!r.createHash)
          throw new Error("`crypto` module does not contain `createHash`");
        return Promise.resolve(r.createHash("sha256").update(e).digest());
      }
    } catch (t) {
      return console.log(t), console.log('Crypto lib not found. Neither the global `crypto.subtle` Web Crypto API, nor the or the Node.js `require("crypto").createHash` module is available. Falling back to JS implementation.'), Promise.resolve(Hv(e));
    }
  });
}
di.hashSha256Async = TU;
var IU = be && be.__awaiter || function(e, t, r, n) {
  function o(i) {
    return i instanceof r ? i : new r(function(s) {
      s(i);
    });
  }
  return new (r || (r = Promise))(function(i, s) {
    function a(f) {
      try {
        u(n.next(f));
      } catch (l) {
        s(l);
      }
    }
    function c(f) {
      try {
        u(n.throw(f));
      } catch (l) {
        s(l);
      }
    }
    function u(f) {
      f.done ? i(f.value) : o(f.value).then(a, c);
    }
    u((n = n.apply(e, t || [])).next());
  });
};
Object.defineProperty(as, "__esModule", { value: !0 });
as.TokenSigner = as.createUnsecuredToken = void 0;
const Kd = Yt, Dg = Tl, PU = Mn, Fg = di;
function Vd(e, t) {
  const r = [], n = Kd.encode(JSON.stringify(t));
  r.push(n);
  const o = Kd.encode(JSON.stringify(e));
  return r.push(o), r.join(".");
}
function OU(e) {
  return Vd(e, { typ: "JWT", alg: "none" }) + ".";
}
as.createUnsecuredToken = OU;
class BU {
  constructor(t, r) {
    if (!(t && r))
      throw new PU.MissingParametersError("a signing algorithm and private key are required");
    if (typeof t != "string")
      throw new Error("signing algorithm parameter must be a string");
    if (t = t.toUpperCase(), !Dg.cryptoClients.hasOwnProperty(t))
      throw new Error("invalid signing algorithm");
    this.tokenType = "JWT", this.cryptoClient = Dg.cryptoClients[t], this.rawPrivateKey = r;
  }
  header(t = {}) {
    const r = { typ: this.tokenType, alg: this.cryptoClient.algorithmName };
    return Object.assign({}, r, t);
  }
  sign(t, r = !1, n = {}) {
    const o = this.header(n), i = Vd(t, o), s = (0, Fg.hashSha256)(i);
    return this.createWithSignedHash(t, r, o, i, s);
  }
  signAsync(t, r = !1, n = {}) {
    return IU(this, void 0, void 0, function* () {
      const o = this.header(n), i = Vd(t, o), s = yield (0, Fg.hashSha256Async)(i);
      return this.createWithSignedHash(t, r, o, i, s);
    });
  }
  createWithSignedHash(t, r, n, o, i) {
    const s = this.cryptoClient.signHash(i, this.rawPrivateKey);
    return r ? {
      header: [Kd.encode(JSON.stringify(n))],
      payload: JSON.stringify(t),
      signature: [s]
    } : [o, s].join(".");
  }
}
as.TokenSigner = BU;
var Pl = {};
Object.defineProperty(Pl, "__esModule", { value: !0 });
Pl.TokenVerifier = void 0;
const NU = Yt, Kg = Tl, $U = Mn, Sc = di;
class UU {
  constructor(t, r) {
    if (!(t && r))
      throw new $U.MissingParametersError("a signing algorithm and public key are required");
    if (typeof t != "string")
      throw "signing algorithm parameter must be a string";
    if (t = t.toUpperCase(), !Kg.cryptoClients.hasOwnProperty(t))
      throw "invalid signing algorithm";
    this.tokenType = "JWT", this.cryptoClient = Kg.cryptoClients[t], this.rawPublicKey = r;
  }
  verify(t) {
    return typeof t == "string" ? this.verifyCompact(t, !1) : typeof t == "object" ? this.verifyExpanded(t, !1) : !1;
  }
  verifyAsync(t) {
    return typeof t == "string" ? this.verifyCompact(t, !0) : typeof t == "object" ? this.verifyExpanded(t, !0) : Promise.resolve(!1);
  }
  verifyCompact(t, r) {
    const n = t.split("."), o = n[0] + "." + n[1], i = (s) => {
      const a = this.cryptoClient.loadSignature(n[2]);
      return this.cryptoClient.verifyHash(s, a, this.rawPublicKey);
    };
    if (r)
      return (0, Sc.hashSha256Async)(o).then((s) => i(s));
    {
      const s = (0, Sc.hashSha256)(o);
      return i(s);
    }
  }
  verifyExpanded(t, r) {
    const n = [t.header.join("."), NU.encode(t.payload)].join(".");
    let o = !0;
    const i = (s) => (t.signature.map((a) => {
      const c = this.cryptoClient.loadSignature(a);
      this.cryptoClient.verifyHash(s, c, this.rawPublicKey) || (o = !1);
    }), o);
    if (r)
      return (0, Sc.hashSha256Async)(n).then((s) => i(s));
    {
      const s = (0, Sc.hashSha256)(n);
      return i(s);
    }
  }
}
Pl.TokenVerifier = UU;
var Ol = {};
Object.defineProperty(Ol, "__esModule", { value: !0 });
Ol.decodeToken = void 0;
const Ac = Yt;
function RU(e) {
  if (typeof e == "string") {
    const t = e.split("."), r = JSON.parse(Ac.decode(t[0])), n = JSON.parse(Ac.decode(t[1])), o = t[2];
    return {
      header: r,
      payload: n,
      signature: o
    };
  } else if (typeof e == "object") {
    if (typeof e.payload != "string")
      throw new Error("Expected token payload to be a base64 or json string");
    let t = e.payload;
    e.payload[0] !== "{" && (t = Ac.decode(t));
    const r = [];
    return e.header.map((n) => {
      const o = JSON.parse(Ac.decode(n));
      r.push(o);
    }), {
      header: r,
      payload: JSON.parse(t),
      signature: e.signature
    };
  }
}
Ol.decodeToken = RU;
(function(e) {
  var t = be && be.__createBinding || (Object.create ? function(n, o, i, s) {
    s === void 0 && (s = i);
    var a = Object.getOwnPropertyDescriptor(o, i);
    (!a || ("get" in a ? !o.__esModule : a.writable || a.configurable)) && (a = { enumerable: !0, get: function() {
      return o[i];
    } }), Object.defineProperty(n, s, a);
  } : function(n, o, i, s) {
    s === void 0 && (s = i), n[s] = o[i];
  }), r = be && be.__exportStar || function(n, o) {
    for (var i in n) i !== "default" && !Object.prototype.hasOwnProperty.call(o, i) && t(o, n, i);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), r(as, e), r(Pl, e), r(Ol, e), r(Mn, e), r(Tl, e);
})(wr);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var Vg = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
(() => {
  const e = Array(256).fill(-1);
  for (let t = 0; t < Vg.length; ++t) e[Vg.charCodeAt(t)] = t;
})();
var qg, Df, kc, $p = (qg = function(e, t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.bech32m = t.bech32 = void 0;
  const r = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", n = {};
  for (let l = 0; l < 32; l++) {
    const d = r.charAt(l);
    n[d] = l;
  }
  function o(l) {
    const d = l >> 25;
    return (33554431 & l) << 5 ^ 996825010 & -(d >> 0 & 1) ^ 642813549 & -(d >> 1 & 1) ^ 513874426 & -(d >> 2 & 1) ^ 1027748829 & -(d >> 3 & 1) ^ 705979059 & -(d >> 4 & 1);
  }
  function i(l) {
    let d = 1;
    for (let m = 0; m < l.length; ++m) {
      const g = l.charCodeAt(m);
      if (g < 33 || g > 126) return "Invalid prefix (" + l + ")";
      d = o(d) ^ g >> 5;
    }
    d = o(d);
    for (let m = 0; m < l.length; ++m) {
      const g = l.charCodeAt(m);
      d = o(d) ^ 31 & g;
    }
    return d;
  }
  function s(l, d, m, g) {
    let y = 0, b = 0;
    const E = (1 << m) - 1, x = [];
    for (let w = 0; w < l.length; ++w) for (y = y << d | l[w], b += d; b >= m; ) b -= m, x.push(y >> b & E);
    if (g) b > 0 && x.push(y << m - b & E);
    else {
      if (b >= d) return "Excess padding";
      if (y << m - b & E) return "Non-zero padding";
    }
    return x;
  }
  function a(l) {
    return s(l, 8, 5, !0);
  }
  function c(l) {
    const d = s(l, 5, 8, !1);
    if (Array.isArray(d)) return d;
  }
  function u(l) {
    const d = s(l, 5, 8, !1);
    if (Array.isArray(d)) return d;
    throw new Error(d);
  }
  function f(l) {
    let d;
    function m(g, y) {
      if (y = y || 90, g.length < 8) return g + " too short";
      if (g.length > y) return "Exceeds length limit";
      const b = g.toLowerCase(), E = g.toUpperCase();
      if (g !== b && g !== E) return "Mixed-case string " + g;
      const x = (g = b).lastIndexOf("1");
      if (x === -1) return "No separator character for " + g;
      if (x === 0) return "Missing prefix for " + g;
      const w = g.slice(0, x), k = g.slice(x + 1);
      if (k.length < 6) return "Data too short";
      let S = i(w);
      if (typeof S == "string") return S;
      const I = [];
      for (let T = 0; T < k.length; ++T) {
        const B = k.charAt(T), C = n[B];
        if (C === void 0) return "Unknown character " + B;
        S = o(S) ^ C, T + 6 >= k.length || I.push(C);
      }
      return S !== d ? "Invalid checksum for " + g : { prefix: w, words: I };
    }
    return d = l === "bech32" ? 1 : 734539939, { decodeUnsafe: function(g, y) {
      const b = m(g, y);
      if (typeof b == "object") return b;
    }, decode: function(g, y) {
      const b = m(g, y);
      if (typeof b == "object") return b;
      throw new Error(b);
    }, encode: function(g, y, b) {
      if (b = b || 90, g.length + 7 + y.length > b) throw new TypeError("Exceeds length limit");
      let E = i(g = g.toLowerCase());
      if (typeof E == "string") throw new Error(E);
      let x = g + "1";
      for (let w = 0; w < y.length; ++w) {
        const k = y[w];
        if (k >> 5) throw new Error("Non 5-bit word");
        E = o(E) ^ k, x += r.charAt(k);
      }
      for (let w = 0; w < 6; ++w) E = o(E);
      E ^= d;
      for (let w = 0; w < 6; ++w) x += r.charAt(E >> 5 * (5 - w) & 31);
      return x;
    }, toWords: a, fromWordsUnsafe: c, fromWords: u };
  }
  t.bech32 = f("bech32"), t.bech32m = f("bech32m");
}, qg(Df = { exports: {} }, Df.exports), Df.exports);
(kc = $p) && kc.__esModule && Object.prototype.hasOwnProperty.call(kc, "default") && kc.default;
$p.bech32m;
$p.bech32;
new Uint8Array(new Uint16Array([65279]).buffer)[0];
var ji, Mi;
(function(e) {
  e.mainnet = "mainnet", e.testnet = "testnet", e.regtest = "regtest";
})(ji || (ji = {})), function(e) {
  e.p2pkh = "p2pkh", e.p2sh = "p2sh", e.p2wpkh = "p2wpkh", e.p2wsh = "p2wsh", e.p2tr = "p2tr";
}(Mi || (Mi = {}));
Mi.p2pkh, ji.mainnet, Mi.p2pkh, ji.testnet, Mi.p2sh, ji.mainnet, Mi.p2sh, ji.testnet;
var CU = {}, Up = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
Up.read = function(e, t, r, n, o) {
  var i, s, a = o * 8 - n - 1, c = (1 << a) - 1, u = c >> 1, f = -7, l = r ? o - 1 : 0, d = r ? -1 : 1, m = e[t + l];
  for (l += d, i = m & (1 << -f) - 1, m >>= -f, f += a; f > 0; i = i * 256 + e[t + l], l += d, f -= 8)
    ;
  for (s = i & (1 << -f) - 1, i >>= -f, f += n; f > 0; s = s * 256 + e[t + l], l += d, f -= 8)
    ;
  if (i === 0)
    i = 1 - u;
  else {
    if (i === c)
      return s ? NaN : (m ? -1 : 1) * (1 / 0);
    s = s + Math.pow(2, n), i = i - u;
  }
  return (m ? -1 : 1) * s * Math.pow(2, i - n);
};
Up.write = function(e, t, r, n, o, i) {
  var s, a, c, u = i * 8 - o - 1, f = (1 << u) - 1, l = f >> 1, d = o === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, m = n ? 0 : i - 1, g = n ? 1 : -1, y = t < 0 || t === 0 && 1 / t < 0 ? 1 : 0;
  for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, s = f) : (s = Math.floor(Math.log(t) / Math.LN2), t * (c = Math.pow(2, -s)) < 1 && (s--, c *= 2), s + l >= 1 ? t += d / c : t += d * Math.pow(2, 1 - l), t * c >= 2 && (s++, c /= 2), s + l >= f ? (a = 0, s = f) : s + l >= 1 ? (a = (t * c - 1) * Math.pow(2, o), s = s + l) : (a = t * Math.pow(2, l - 1) * Math.pow(2, o), s = 0)); o >= 8; e[r + m] = a & 255, m += g, a /= 256, o -= 8)
    ;
  for (s = s << o | a, u += o; u > 0; e[r + m] = s & 255, m += g, s /= 256, u -= 8)
    ;
  e[r + m - g] |= y * 128;
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(e) {
  const t = As, r = Up, n = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
  e.Buffer = a, e.SlowBuffer = x, e.INSPECT_MAX_BYTES = 50;
  const o = 2147483647;
  e.kMaxLength = o, a.TYPED_ARRAY_SUPPORT = i(), !a.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error(
    "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
  );
  function i() {
    try {
      const v = new Uint8Array(1), h = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(h, Uint8Array.prototype), Object.setPrototypeOf(v, h), v.foo() === 42;
    } catch {
      return !1;
    }
  }
  Object.defineProperty(a.prototype, "parent", {
    enumerable: !0,
    get: function() {
      if (a.isBuffer(this))
        return this.buffer;
    }
  }), Object.defineProperty(a.prototype, "offset", {
    enumerable: !0,
    get: function() {
      if (a.isBuffer(this))
        return this.byteOffset;
    }
  });
  function s(v) {
    if (v > o)
      throw new RangeError('The value "' + v + '" is invalid for option "size"');
    const h = new Uint8Array(v);
    return Object.setPrototypeOf(h, a.prototype), h;
  }
  function a(v, h, p) {
    if (typeof v == "number") {
      if (typeof h == "string")
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        );
      return l(v);
    }
    return c(v, h, p);
  }
  a.poolSize = 8192;
  function c(v, h, p) {
    if (typeof v == "string")
      return d(v, h);
    if (ArrayBuffer.isView(v))
      return g(v);
    if (v == null)
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof v
      );
    if (Er(v, ArrayBuffer) || v && Er(v.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (Er(v, SharedArrayBuffer) || v && Er(v.buffer, SharedArrayBuffer)))
      return y(v, h, p);
    if (typeof v == "number")
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      );
    const A = v.valueOf && v.valueOf();
    if (A != null && A !== v)
      return a.from(A, h, p);
    const $ = b(v);
    if ($) return $;
    if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof v[Symbol.toPrimitive] == "function")
      return a.from(v[Symbol.toPrimitive]("string"), h, p);
    throw new TypeError(
      "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof v
    );
  }
  a.from = function(v, h, p) {
    return c(v, h, p);
  }, Object.setPrototypeOf(a.prototype, Uint8Array.prototype), Object.setPrototypeOf(a, Uint8Array);
  function u(v) {
    if (typeof v != "number")
      throw new TypeError('"size" argument must be of type number');
    if (v < 0)
      throw new RangeError('The value "' + v + '" is invalid for option "size"');
  }
  function f(v, h, p) {
    return u(v), v <= 0 ? s(v) : h !== void 0 ? typeof p == "string" ? s(v).fill(h, p) : s(v).fill(h) : s(v);
  }
  a.alloc = function(v, h, p) {
    return f(v, h, p);
  };
  function l(v) {
    return u(v), s(v < 0 ? 0 : E(v) | 0);
  }
  a.allocUnsafe = function(v) {
    return l(v);
  }, a.allocUnsafeSlow = function(v) {
    return l(v);
  };
  function d(v, h) {
    if ((typeof h != "string" || h === "") && (h = "utf8"), !a.isEncoding(h))
      throw new TypeError("Unknown encoding: " + h);
    const p = w(v, h) | 0;
    let A = s(p);
    const $ = A.write(v, h);
    return $ !== p && (A = A.slice(0, $)), A;
  }
  function m(v) {
    const h = v.length < 0 ? 0 : E(v.length) | 0, p = s(h);
    for (let A = 0; A < h; A += 1)
      p[A] = v[A] & 255;
    return p;
  }
  function g(v) {
    if (Er(v, Uint8Array)) {
      const h = new Uint8Array(v);
      return y(h.buffer, h.byteOffset, h.byteLength);
    }
    return m(v);
  }
  function y(v, h, p) {
    if (h < 0 || v.byteLength < h)
      throw new RangeError('"offset" is outside of buffer bounds');
    if (v.byteLength < h + (p || 0))
      throw new RangeError('"length" is outside of buffer bounds');
    let A;
    return h === void 0 && p === void 0 ? A = new Uint8Array(v) : p === void 0 ? A = new Uint8Array(v, h) : A = new Uint8Array(v, h, p), Object.setPrototypeOf(A, a.prototype), A;
  }
  function b(v) {
    if (a.isBuffer(v)) {
      const h = E(v.length) | 0, p = s(h);
      return p.length === 0 || v.copy(p, 0, 0, h), p;
    }
    if (v.length !== void 0)
      return typeof v.length != "number" || Si(v.length) ? s(0) : m(v);
    if (v.type === "Buffer" && Array.isArray(v.data))
      return m(v.data);
  }
  function E(v) {
    if (v >= o)
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + o.toString(16) + " bytes");
    return v | 0;
  }
  function x(v) {
    return +v != v && (v = 0), a.alloc(+v);
  }
  a.isBuffer = function(h) {
    return h != null && h._isBuffer === !0 && h !== a.prototype;
  }, a.compare = function(h, p) {
    if (Er(h, Uint8Array) && (h = a.from(h, h.offset, h.byteLength)), Er(p, Uint8Array) && (p = a.from(p, p.offset, p.byteLength)), !a.isBuffer(h) || !a.isBuffer(p))
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      );
    if (h === p) return 0;
    let A = h.length, $ = p.length;
    for (let z = 0, D = Math.min(A, $); z < D; ++z)
      if (h[z] !== p[z]) {
        A = h[z], $ = p[z];
        break;
      }
    return A < $ ? -1 : $ < A ? 1 : 0;
  }, a.isEncoding = function(h) {
    switch (String(h).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return !0;
      default:
        return !1;
    }
  }, a.concat = function(h, p) {
    if (!Array.isArray(h))
      throw new TypeError('"list" argument must be an Array of Buffers');
    if (h.length === 0)
      return a.alloc(0);
    let A;
    if (p === void 0)
      for (p = 0, A = 0; A < h.length; ++A)
        p += h[A].length;
    const $ = a.allocUnsafe(p);
    let z = 0;
    for (A = 0; A < h.length; ++A) {
      let D = h[A];
      if (Er(D, Uint8Array))
        z + D.length > $.length ? (a.isBuffer(D) || (D = a.from(D)), D.copy($, z)) : Uint8Array.prototype.set.call(
          $,
          D,
          z
        );
      else if (a.isBuffer(D))
        D.copy($, z);
      else
        throw new TypeError('"list" argument must be an Array of Buffers');
      z += D.length;
    }
    return $;
  };
  function w(v, h) {
    if (a.isBuffer(v))
      return v.length;
    if (ArrayBuffer.isView(v) || Er(v, ArrayBuffer))
      return v.byteLength;
    if (typeof v != "string")
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof v
      );
    const p = v.length, A = arguments.length > 2 && arguments[2] === !0;
    if (!A && p === 0) return 0;
    let $ = !1;
    for (; ; )
      switch (h) {
        case "ascii":
        case "latin1":
        case "binary":
          return p;
        case "utf8":
        case "utf-8":
          return Ho(v).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return p * 2;
        case "hex":
          return p >>> 1;
        case "base64":
          return Xa(v).length;
        default:
          if ($)
            return A ? -1 : Ho(v).length;
          h = ("" + h).toLowerCase(), $ = !0;
      }
  }
  a.byteLength = w;
  function k(v, h, p) {
    let A = !1;
    if ((h === void 0 || h < 0) && (h = 0), h > this.length || ((p === void 0 || p > this.length) && (p = this.length), p <= 0) || (p >>>= 0, h >>>= 0, p <= h))
      return "";
    for (v || (v = "utf8"); ; )
      switch (v) {
        case "hex":
          return Y(this, h, p);
        case "utf8":
        case "utf-8":
          return K(this, h, p);
        case "ascii":
          return q(this, h, p);
        case "latin1":
        case "binary":
          return ee(this, h, p);
        case "base64":
          return G(this, h, p);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return ae(this, h, p);
        default:
          if (A) throw new TypeError("Unknown encoding: " + v);
          v = (v + "").toLowerCase(), A = !0;
      }
  }
  a.prototype._isBuffer = !0;
  function S(v, h, p) {
    const A = v[h];
    v[h] = v[p], v[p] = A;
  }
  a.prototype.swap16 = function() {
    const h = this.length;
    if (h % 2 !== 0)
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (let p = 0; p < h; p += 2)
      S(this, p, p + 1);
    return this;
  }, a.prototype.swap32 = function() {
    const h = this.length;
    if (h % 4 !== 0)
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (let p = 0; p < h; p += 4)
      S(this, p, p + 3), S(this, p + 1, p + 2);
    return this;
  }, a.prototype.swap64 = function() {
    const h = this.length;
    if (h % 8 !== 0)
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (let p = 0; p < h; p += 8)
      S(this, p, p + 7), S(this, p + 1, p + 6), S(this, p + 2, p + 5), S(this, p + 3, p + 4);
    return this;
  }, a.prototype.toString = function() {
    const h = this.length;
    return h === 0 ? "" : arguments.length === 0 ? K(this, 0, h) : k.apply(this, arguments);
  }, a.prototype.toLocaleString = a.prototype.toString, a.prototype.equals = function(h) {
    if (!a.isBuffer(h)) throw new TypeError("Argument must be a Buffer");
    return this === h ? !0 : a.compare(this, h) === 0;
  }, a.prototype.inspect = function() {
    let h = "";
    const p = e.INSPECT_MAX_BYTES;
    return h = this.toString("hex", 0, p).replace(/(.{2})/g, "$1 ").trim(), this.length > p && (h += " ... "), "<Buffer " + h + ">";
  }, n && (a.prototype[n] = a.prototype.inspect), a.prototype.compare = function(h, p, A, $, z) {
    if (Er(h, Uint8Array) && (h = a.from(h, h.offset, h.byteLength)), !a.isBuffer(h))
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof h
      );
    if (p === void 0 && (p = 0), A === void 0 && (A = h ? h.length : 0), $ === void 0 && ($ = 0), z === void 0 && (z = this.length), p < 0 || A > h.length || $ < 0 || z > this.length)
      throw new RangeError("out of range index");
    if ($ >= z && p >= A)
      return 0;
    if ($ >= z)
      return -1;
    if (p >= A)
      return 1;
    if (p >>>= 0, A >>>= 0, $ >>>= 0, z >>>= 0, this === h) return 0;
    let D = z - $, Ne = A - p;
    const et = Math.min(D, Ne), Ye = this.slice($, z), nt = h.slice(p, A);
    for (let qe = 0; qe < et; ++qe)
      if (Ye[qe] !== nt[qe]) {
        D = Ye[qe], Ne = nt[qe];
        break;
      }
    return D < Ne ? -1 : Ne < D ? 1 : 0;
  };
  function I(v, h, p, A, $) {
    if (v.length === 0) return -1;
    if (typeof p == "string" ? (A = p, p = 0) : p > 2147483647 ? p = 2147483647 : p < -2147483648 && (p = -2147483648), p = +p, Si(p) && (p = $ ? 0 : v.length - 1), p < 0 && (p = v.length + p), p >= v.length) {
      if ($) return -1;
      p = v.length - 1;
    } else if (p < 0)
      if ($) p = 0;
      else return -1;
    if (typeof h == "string" && (h = a.from(h, A)), a.isBuffer(h))
      return h.length === 0 ? -1 : T(v, h, p, A, $);
    if (typeof h == "number")
      return h = h & 255, typeof Uint8Array.prototype.indexOf == "function" ? $ ? Uint8Array.prototype.indexOf.call(v, h, p) : Uint8Array.prototype.lastIndexOf.call(v, h, p) : T(v, [h], p, A, $);
    throw new TypeError("val must be string, number or Buffer");
  }
  function T(v, h, p, A, $) {
    let z = 1, D = v.length, Ne = h.length;
    if (A !== void 0 && (A = String(A).toLowerCase(), A === "ucs2" || A === "ucs-2" || A === "utf16le" || A === "utf-16le")) {
      if (v.length < 2 || h.length < 2)
        return -1;
      z = 2, D /= 2, Ne /= 2, p /= 2;
    }
    function et(nt, qe) {
      return z === 1 ? nt[qe] : nt.readUInt16BE(qe * z);
    }
    let Ye;
    if ($) {
      let nt = -1;
      for (Ye = p; Ye < D; Ye++)
        if (et(v, Ye) === et(h, nt === -1 ? 0 : Ye - nt)) {
          if (nt === -1 && (nt = Ye), Ye - nt + 1 === Ne) return nt * z;
        } else
          nt !== -1 && (Ye -= Ye - nt), nt = -1;
    } else
      for (p + Ne > D && (p = D - Ne), Ye = p; Ye >= 0; Ye--) {
        let nt = !0;
        for (let qe = 0; qe < Ne; qe++)
          if (et(v, Ye + qe) !== et(h, qe)) {
            nt = !1;
            break;
          }
        if (nt) return Ye;
      }
    return -1;
  }
  a.prototype.includes = function(h, p, A) {
    return this.indexOf(h, p, A) !== -1;
  }, a.prototype.indexOf = function(h, p, A) {
    return I(this, h, p, A, !0);
  }, a.prototype.lastIndexOf = function(h, p, A) {
    return I(this, h, p, A, !1);
  };
  function B(v, h, p, A) {
    p = Number(p) || 0;
    const $ = v.length - p;
    A ? (A = Number(A), A > $ && (A = $)) : A = $;
    const z = h.length;
    A > z / 2 && (A = z / 2);
    let D;
    for (D = 0; D < A; ++D) {
      const Ne = parseInt(h.substr(D * 2, 2), 16);
      if (Si(Ne)) return D;
      v[p + D] = Ne;
    }
    return D;
  }
  function C(v, h, p, A) {
    return Lo(Ho(h, v.length - p), v, p, A);
  }
  function F(v, h, p, A) {
    return Lo(Za(h), v, p, A);
  }
  function V(v, h, p, A) {
    return Lo(Xa(h), v, p, A);
  }
  function R(v, h, p, A) {
    return Lo(Ll(h, v.length - p), v, p, A);
  }
  a.prototype.write = function(h, p, A, $) {
    if (p === void 0)
      $ = "utf8", A = this.length, p = 0;
    else if (A === void 0 && typeof p == "string")
      $ = p, A = this.length, p = 0;
    else if (isFinite(p))
      p = p >>> 0, isFinite(A) ? (A = A >>> 0, $ === void 0 && ($ = "utf8")) : ($ = A, A = void 0);
    else
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    const z = this.length - p;
    if ((A === void 0 || A > z) && (A = z), h.length > 0 && (A < 0 || p < 0) || p > this.length)
      throw new RangeError("Attempt to write outside buffer bounds");
    $ || ($ = "utf8");
    let D = !1;
    for (; ; )
      switch ($) {
        case "hex":
          return B(this, h, p, A);
        case "utf8":
        case "utf-8":
          return C(this, h, p, A);
        case "ascii":
        case "latin1":
        case "binary":
          return F(this, h, p, A);
        case "base64":
          return V(this, h, p, A);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return R(this, h, p, A);
        default:
          if (D) throw new TypeError("Unknown encoding: " + $);
          $ = ("" + $).toLowerCase(), D = !0;
      }
  }, a.prototype.toJSON = function() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function G(v, h, p) {
    return h === 0 && p === v.length ? t.fromByteArray(v) : t.fromByteArray(v.slice(h, p));
  }
  function K(v, h, p) {
    p = Math.min(v.length, p);
    const A = [];
    let $ = h;
    for (; $ < p; ) {
      const z = v[$];
      let D = null, Ne = z > 239 ? 4 : z > 223 ? 3 : z > 191 ? 2 : 1;
      if ($ + Ne <= p) {
        let et, Ye, nt, qe;
        switch (Ne) {
          case 1:
            z < 128 && (D = z);
            break;
          case 2:
            et = v[$ + 1], (et & 192) === 128 && (qe = (z & 31) << 6 | et & 63, qe > 127 && (D = qe));
            break;
          case 3:
            et = v[$ + 1], Ye = v[$ + 2], (et & 192) === 128 && (Ye & 192) === 128 && (qe = (z & 15) << 12 | (et & 63) << 6 | Ye & 63, qe > 2047 && (qe < 55296 || qe > 57343) && (D = qe));
            break;
          case 4:
            et = v[$ + 1], Ye = v[$ + 2], nt = v[$ + 3], (et & 192) === 128 && (Ye & 192) === 128 && (nt & 192) === 128 && (qe = (z & 15) << 18 | (et & 63) << 12 | (Ye & 63) << 6 | nt & 63, qe > 65535 && qe < 1114112 && (D = qe));
        }
      }
      D === null ? (D = 65533, Ne = 1) : D > 65535 && (D -= 65536, A.push(D >>> 10 & 1023 | 55296), D = 56320 | D & 1023), A.push(D), $ += Ne;
    }
    return L(A);
  }
  const N = 4096;
  function L(v) {
    const h = v.length;
    if (h <= N)
      return String.fromCharCode.apply(String, v);
    let p = "", A = 0;
    for (; A < h; )
      p += String.fromCharCode.apply(
        String,
        v.slice(A, A += N)
      );
    return p;
  }
  function q(v, h, p) {
    let A = "";
    p = Math.min(v.length, p);
    for (let $ = h; $ < p; ++$)
      A += String.fromCharCode(v[$] & 127);
    return A;
  }
  function ee(v, h, p) {
    let A = "";
    p = Math.min(v.length, p);
    for (let $ = h; $ < p; ++$)
      A += String.fromCharCode(v[$]);
    return A;
  }
  function Y(v, h, p) {
    const A = v.length;
    (!h || h < 0) && (h = 0), (!p || p < 0 || p > A) && (p = A);
    let $ = "";
    for (let z = h; z < p; ++z)
      $ += zl[v[z]];
    return $;
  }
  function ae(v, h, p) {
    const A = v.slice(h, p);
    let $ = "";
    for (let z = 0; z < A.length - 1; z += 2)
      $ += String.fromCharCode(A[z] + A[z + 1] * 256);
    return $;
  }
  a.prototype.slice = function(h, p) {
    const A = this.length;
    h = ~~h, p = p === void 0 ? A : ~~p, h < 0 ? (h += A, h < 0 && (h = 0)) : h > A && (h = A), p < 0 ? (p += A, p < 0 && (p = 0)) : p > A && (p = A), p < h && (p = h);
    const $ = this.subarray(h, p);
    return Object.setPrototypeOf($, a.prototype), $;
  };
  function ie(v, h, p) {
    if (v % 1 !== 0 || v < 0) throw new RangeError("offset is not uint");
    if (v + h > p) throw new RangeError("Trying to access beyond buffer length");
  }
  a.prototype.readUintLE = a.prototype.readUIntLE = function(h, p, A) {
    h = h >>> 0, p = p >>> 0, A || ie(h, p, this.length);
    let $ = this[h], z = 1, D = 0;
    for (; ++D < p && (z *= 256); )
      $ += this[h + D] * z;
    return $;
  }, a.prototype.readUintBE = a.prototype.readUIntBE = function(h, p, A) {
    h = h >>> 0, p = p >>> 0, A || ie(h, p, this.length);
    let $ = this[h + --p], z = 1;
    for (; p > 0 && (z *= 256); )
      $ += this[h + --p] * z;
    return $;
  }, a.prototype.readUint8 = a.prototype.readUInt8 = function(h, p) {
    return h = h >>> 0, p || ie(h, 1, this.length), this[h];
  }, a.prototype.readUint16LE = a.prototype.readUInt16LE = function(h, p) {
    return h = h >>> 0, p || ie(h, 2, this.length), this[h] | this[h + 1] << 8;
  }, a.prototype.readUint16BE = a.prototype.readUInt16BE = function(h, p) {
    return h = h >>> 0, p || ie(h, 2, this.length), this[h] << 8 | this[h + 1];
  }, a.prototype.readUint32LE = a.prototype.readUInt32LE = function(h, p) {
    return h = h >>> 0, p || ie(h, 4, this.length), (this[h] | this[h + 1] << 8 | this[h + 2] << 16) + this[h + 3] * 16777216;
  }, a.prototype.readUint32BE = a.prototype.readUInt32BE = function(h, p) {
    return h = h >>> 0, p || ie(h, 4, this.length), this[h] * 16777216 + (this[h + 1] << 16 | this[h + 2] << 8 | this[h + 3]);
  }, a.prototype.readBigUInt64LE = Nr(function(h) {
    h = h >>> 0, Fe(h, "offset");
    const p = this[h], A = this[h + 7];
    (p === void 0 || A === void 0) && xt(h, this.length - 8);
    const $ = p + this[++h] * 2 ** 8 + this[++h] * 2 ** 16 + this[++h] * 2 ** 24, z = this[++h] + this[++h] * 2 ** 8 + this[++h] * 2 ** 16 + A * 2 ** 24;
    return BigInt($) + (BigInt(z) << BigInt(32));
  }), a.prototype.readBigUInt64BE = Nr(function(h) {
    h = h >>> 0, Fe(h, "offset");
    const p = this[h], A = this[h + 7];
    (p === void 0 || A === void 0) && xt(h, this.length - 8);
    const $ = p * 2 ** 24 + this[++h] * 2 ** 16 + this[++h] * 2 ** 8 + this[++h], z = this[++h] * 2 ** 24 + this[++h] * 2 ** 16 + this[++h] * 2 ** 8 + A;
    return (BigInt($) << BigInt(32)) + BigInt(z);
  }), a.prototype.readIntLE = function(h, p, A) {
    h = h >>> 0, p = p >>> 0, A || ie(h, p, this.length);
    let $ = this[h], z = 1, D = 0;
    for (; ++D < p && (z *= 256); )
      $ += this[h + D] * z;
    return z *= 128, $ >= z && ($ -= Math.pow(2, 8 * p)), $;
  }, a.prototype.readIntBE = function(h, p, A) {
    h = h >>> 0, p = p >>> 0, A || ie(h, p, this.length);
    let $ = p, z = 1, D = this[h + --$];
    for (; $ > 0 && (z *= 256); )
      D += this[h + --$] * z;
    return z *= 128, D >= z && (D -= Math.pow(2, 8 * p)), D;
  }, a.prototype.readInt8 = function(h, p) {
    return h = h >>> 0, p || ie(h, 1, this.length), this[h] & 128 ? (255 - this[h] + 1) * -1 : this[h];
  }, a.prototype.readInt16LE = function(h, p) {
    h = h >>> 0, p || ie(h, 2, this.length);
    const A = this[h] | this[h + 1] << 8;
    return A & 32768 ? A | 4294901760 : A;
  }, a.prototype.readInt16BE = function(h, p) {
    h = h >>> 0, p || ie(h, 2, this.length);
    const A = this[h + 1] | this[h] << 8;
    return A & 32768 ? A | 4294901760 : A;
  }, a.prototype.readInt32LE = function(h, p) {
    return h = h >>> 0, p || ie(h, 4, this.length), this[h] | this[h + 1] << 8 | this[h + 2] << 16 | this[h + 3] << 24;
  }, a.prototype.readInt32BE = function(h, p) {
    return h = h >>> 0, p || ie(h, 4, this.length), this[h] << 24 | this[h + 1] << 16 | this[h + 2] << 8 | this[h + 3];
  }, a.prototype.readBigInt64LE = Nr(function(h) {
    h = h >>> 0, Fe(h, "offset");
    const p = this[h], A = this[h + 7];
    (p === void 0 || A === void 0) && xt(h, this.length - 8);
    const $ = this[h + 4] + this[h + 5] * 2 ** 8 + this[h + 6] * 2 ** 16 + (A << 24);
    return (BigInt($) << BigInt(32)) + BigInt(p + this[++h] * 2 ** 8 + this[++h] * 2 ** 16 + this[++h] * 2 ** 24);
  }), a.prototype.readBigInt64BE = Nr(function(h) {
    h = h >>> 0, Fe(h, "offset");
    const p = this[h], A = this[h + 7];
    (p === void 0 || A === void 0) && xt(h, this.length - 8);
    const $ = (p << 24) + // Overflow
    this[++h] * 2 ** 16 + this[++h] * 2 ** 8 + this[++h];
    return (BigInt($) << BigInt(32)) + BigInt(this[++h] * 2 ** 24 + this[++h] * 2 ** 16 + this[++h] * 2 ** 8 + A);
  }), a.prototype.readFloatLE = function(h, p) {
    return h = h >>> 0, p || ie(h, 4, this.length), r.read(this, h, !0, 23, 4);
  }, a.prototype.readFloatBE = function(h, p) {
    return h = h >>> 0, p || ie(h, 4, this.length), r.read(this, h, !1, 23, 4);
  }, a.prototype.readDoubleLE = function(h, p) {
    return h = h >>> 0, p || ie(h, 8, this.length), r.read(this, h, !0, 52, 8);
  }, a.prototype.readDoubleBE = function(h, p) {
    return h = h >>> 0, p || ie(h, 8, this.length), r.read(this, h, !1, 52, 8);
  };
  function ve(v, h, p, A, $, z) {
    if (!a.isBuffer(v)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (h > $ || h < z) throw new RangeError('"value" argument is out of bounds');
    if (p + A > v.length) throw new RangeError("Index out of range");
  }
  a.prototype.writeUintLE = a.prototype.writeUIntLE = function(h, p, A, $) {
    if (h = +h, p = p >>> 0, A = A >>> 0, !$) {
      const Ne = Math.pow(2, 8 * A) - 1;
      ve(this, h, p, A, Ne, 0);
    }
    let z = 1, D = 0;
    for (this[p] = h & 255; ++D < A && (z *= 256); )
      this[p + D] = h / z & 255;
    return p + A;
  }, a.prototype.writeUintBE = a.prototype.writeUIntBE = function(h, p, A, $) {
    if (h = +h, p = p >>> 0, A = A >>> 0, !$) {
      const Ne = Math.pow(2, 8 * A) - 1;
      ve(this, h, p, A, Ne, 0);
    }
    let z = A - 1, D = 1;
    for (this[p + z] = h & 255; --z >= 0 && (D *= 256); )
      this[p + z] = h / D & 255;
    return p + A;
  }, a.prototype.writeUint8 = a.prototype.writeUInt8 = function(h, p, A) {
    return h = +h, p = p >>> 0, A || ve(this, h, p, 1, 255, 0), this[p] = h & 255, p + 1;
  }, a.prototype.writeUint16LE = a.prototype.writeUInt16LE = function(h, p, A) {
    return h = +h, p = p >>> 0, A || ve(this, h, p, 2, 65535, 0), this[p] = h & 255, this[p + 1] = h >>> 8, p + 2;
  }, a.prototype.writeUint16BE = a.prototype.writeUInt16BE = function(h, p, A) {
    return h = +h, p = p >>> 0, A || ve(this, h, p, 2, 65535, 0), this[p] = h >>> 8, this[p + 1] = h & 255, p + 2;
  }, a.prototype.writeUint32LE = a.prototype.writeUInt32LE = function(h, p, A) {
    return h = +h, p = p >>> 0, A || ve(this, h, p, 4, 4294967295, 0), this[p + 3] = h >>> 24, this[p + 2] = h >>> 16, this[p + 1] = h >>> 8, this[p] = h & 255, p + 4;
  }, a.prototype.writeUint32BE = a.prototype.writeUInt32BE = function(h, p, A) {
    return h = +h, p = p >>> 0, A || ve(this, h, p, 4, 4294967295, 0), this[p] = h >>> 24, this[p + 1] = h >>> 16, this[p + 2] = h >>> 8, this[p + 3] = h & 255, p + 4;
  };
  function W(v, h, p, A, $) {
    rt(h, A, $, v, p, 7);
    let z = Number(h & BigInt(4294967295));
    v[p++] = z, z = z >> 8, v[p++] = z, z = z >> 8, v[p++] = z, z = z >> 8, v[p++] = z;
    let D = Number(h >> BigInt(32) & BigInt(4294967295));
    return v[p++] = D, D = D >> 8, v[p++] = D, D = D >> 8, v[p++] = D, D = D >> 8, v[p++] = D, p;
  }
  function He(v, h, p, A, $) {
    rt(h, A, $, v, p, 7);
    let z = Number(h & BigInt(4294967295));
    v[p + 7] = z, z = z >> 8, v[p + 6] = z, z = z >> 8, v[p + 5] = z, z = z >> 8, v[p + 4] = z;
    let D = Number(h >> BigInt(32) & BigInt(4294967295));
    return v[p + 3] = D, D = D >> 8, v[p + 2] = D, D = D >> 8, v[p + 1] = D, D = D >> 8, v[p] = D, p + 8;
  }
  a.prototype.writeBigUInt64LE = Nr(function(h, p = 0) {
    return W(this, h, p, BigInt(0), BigInt("0xffffffffffffffff"));
  }), a.prototype.writeBigUInt64BE = Nr(function(h, p = 0) {
    return He(this, h, p, BigInt(0), BigInt("0xffffffffffffffff"));
  }), a.prototype.writeIntLE = function(h, p, A, $) {
    if (h = +h, p = p >>> 0, !$) {
      const et = Math.pow(2, 8 * A - 1);
      ve(this, h, p, A, et - 1, -et);
    }
    let z = 0, D = 1, Ne = 0;
    for (this[p] = h & 255; ++z < A && (D *= 256); )
      h < 0 && Ne === 0 && this[p + z - 1] !== 0 && (Ne = 1), this[p + z] = (h / D >> 0) - Ne & 255;
    return p + A;
  }, a.prototype.writeIntBE = function(h, p, A, $) {
    if (h = +h, p = p >>> 0, !$) {
      const et = Math.pow(2, 8 * A - 1);
      ve(this, h, p, A, et - 1, -et);
    }
    let z = A - 1, D = 1, Ne = 0;
    for (this[p + z] = h & 255; --z >= 0 && (D *= 256); )
      h < 0 && Ne === 0 && this[p + z + 1] !== 0 && (Ne = 1), this[p + z] = (h / D >> 0) - Ne & 255;
    return p + A;
  }, a.prototype.writeInt8 = function(h, p, A) {
    return h = +h, p = p >>> 0, A || ve(this, h, p, 1, 127, -128), h < 0 && (h = 255 + h + 1), this[p] = h & 255, p + 1;
  }, a.prototype.writeInt16LE = function(h, p, A) {
    return h = +h, p = p >>> 0, A || ve(this, h, p, 2, 32767, -32768), this[p] = h & 255, this[p + 1] = h >>> 8, p + 2;
  }, a.prototype.writeInt16BE = function(h, p, A) {
    return h = +h, p = p >>> 0, A || ve(this, h, p, 2, 32767, -32768), this[p] = h >>> 8, this[p + 1] = h & 255, p + 2;
  }, a.prototype.writeInt32LE = function(h, p, A) {
    return h = +h, p = p >>> 0, A || ve(this, h, p, 4, 2147483647, -2147483648), this[p] = h & 255, this[p + 1] = h >>> 8, this[p + 2] = h >>> 16, this[p + 3] = h >>> 24, p + 4;
  }, a.prototype.writeInt32BE = function(h, p, A) {
    return h = +h, p = p >>> 0, A || ve(this, h, p, 4, 2147483647, -2147483648), h < 0 && (h = 4294967295 + h + 1), this[p] = h >>> 24, this[p + 1] = h >>> 16, this[p + 2] = h >>> 8, this[p + 3] = h & 255, p + 4;
  }, a.prototype.writeBigInt64LE = Nr(function(h, p = 0) {
    return W(this, h, p, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  }), a.prototype.writeBigInt64BE = Nr(function(h, p = 0) {
    return He(this, h, p, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function Ge(v, h, p, A, $, z) {
    if (p + A > v.length) throw new RangeError("Index out of range");
    if (p < 0) throw new RangeError("Index out of range");
  }
  function Le(v, h, p, A, $) {
    return h = +h, p = p >>> 0, $ || Ge(v, h, p, 4), r.write(v, h, p, A, 23, 4), p + 4;
  }
  a.prototype.writeFloatLE = function(h, p, A) {
    return Le(this, h, p, !0, A);
  }, a.prototype.writeFloatBE = function(h, p, A) {
    return Le(this, h, p, !1, A);
  };
  function Et(v, h, p, A, $) {
    return h = +h, p = p >>> 0, $ || Ge(v, h, p, 8), r.write(v, h, p, A, 52, 8), p + 8;
  }
  a.prototype.writeDoubleLE = function(h, p, A) {
    return Et(this, h, p, !0, A);
  }, a.prototype.writeDoubleBE = function(h, p, A) {
    return Et(this, h, p, !1, A);
  }, a.prototype.copy = function(h, p, A, $) {
    if (!a.isBuffer(h)) throw new TypeError("argument should be a Buffer");
    if (A || (A = 0), !$ && $ !== 0 && ($ = this.length), p >= h.length && (p = h.length), p || (p = 0), $ > 0 && $ < A && ($ = A), $ === A || h.length === 0 || this.length === 0) return 0;
    if (p < 0)
      throw new RangeError("targetStart out of bounds");
    if (A < 0 || A >= this.length) throw new RangeError("Index out of range");
    if ($ < 0) throw new RangeError("sourceEnd out of bounds");
    $ > this.length && ($ = this.length), h.length - p < $ - A && ($ = h.length - p + A);
    const z = $ - A;
    return this === h && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(p, A, $) : Uint8Array.prototype.set.call(
      h,
      this.subarray(A, $),
      p
    ), z;
  }, a.prototype.fill = function(h, p, A, $) {
    if (typeof h == "string") {
      if (typeof p == "string" ? ($ = p, p = 0, A = this.length) : typeof A == "string" && ($ = A, A = this.length), $ !== void 0 && typeof $ != "string")
        throw new TypeError("encoding must be a string");
      if (typeof $ == "string" && !a.isEncoding($))
        throw new TypeError("Unknown encoding: " + $);
      if (h.length === 1) {
        const D = h.charCodeAt(0);
        ($ === "utf8" && D < 128 || $ === "latin1") && (h = D);
      }
    } else typeof h == "number" ? h = h & 255 : typeof h == "boolean" && (h = Number(h));
    if (p < 0 || this.length < p || this.length < A)
      throw new RangeError("Out of range index");
    if (A <= p)
      return this;
    p = p >>> 0, A = A === void 0 ? this.length : A >>> 0, h || (h = 0);
    let z;
    if (typeof h == "number")
      for (z = p; z < A; ++z)
        this[z] = h;
    else {
      const D = a.isBuffer(h) ? h : a.from(h, $), Ne = D.length;
      if (Ne === 0)
        throw new TypeError('The value "' + h + '" is invalid for argument "value"');
      for (z = 0; z < A - p; ++z)
        this[z + p] = D[z % Ne];
    }
    return this;
  };
  const gt = {};
  function ze(v, h, p) {
    gt[v] = class extends p {
      constructor() {
        super(), Object.defineProperty(this, "message", {
          value: h.apply(this, arguments),
          writable: !0,
          configurable: !0
        }), this.name = `${this.name} [${v}]`, this.stack, delete this.name;
      }
      get code() {
        return v;
      }
      set code($) {
        Object.defineProperty(this, "code", {
          configurable: !0,
          enumerable: !0,
          value: $,
          writable: !0
        });
      }
      toString() {
        return `${this.name} [${v}]: ${this.message}`;
      }
    };
  }
  ze(
    "ERR_BUFFER_OUT_OF_BOUNDS",
    function(v) {
      return v ? `${v} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    },
    RangeError
  ), ze(
    "ERR_INVALID_ARG_TYPE",
    function(v, h) {
      return `The "${v}" argument must be of type number. Received type ${typeof h}`;
    },
    TypeError
  ), ze(
    "ERR_OUT_OF_RANGE",
    function(v, h, p) {
      let A = `The value of "${v}" is out of range.`, $ = p;
      return Number.isInteger(p) && Math.abs(p) > 2 ** 32 ? $ = At(String(p)) : typeof p == "bigint" && ($ = String(p), (p > BigInt(2) ** BigInt(32) || p < -(BigInt(2) ** BigInt(32))) && ($ = At($)), $ += "n"), A += ` It must be ${h}. Received ${$}`, A;
    },
    RangeError
  );
  function At(v) {
    let h = "", p = v.length;
    const A = v[0] === "-" ? 1 : 0;
    for (; p >= A + 4; p -= 3)
      h = `_${v.slice(p - 3, p)}${h}`;
    return `${v.slice(0, p)}${h}`;
  }
  function zt(v, h, p) {
    Fe(h, "offset"), (v[h] === void 0 || v[h + p] === void 0) && xt(h, v.length - (p + 1));
  }
  function rt(v, h, p, A, $, z) {
    if (v > p || v < h) {
      const D = typeof h == "bigint" ? "n" : "";
      let Ne;
      throw h === 0 || h === BigInt(0) ? Ne = `>= 0${D} and < 2${D} ** ${(z + 1) * 8}${D}` : Ne = `>= -(2${D} ** ${(z + 1) * 8 - 1}${D}) and < 2 ** ${(z + 1) * 8 - 1}${D}`, new gt.ERR_OUT_OF_RANGE("value", Ne, v);
    }
    zt(A, $, z);
  }
  function Fe(v, h) {
    if (typeof v != "number")
      throw new gt.ERR_INVALID_ARG_TYPE(h, "number", v);
  }
  function xt(v, h, p) {
    throw Math.floor(v) !== v ? (Fe(v, p), new gt.ERR_OUT_OF_RANGE("offset", "an integer", v)) : h < 0 ? new gt.ERR_BUFFER_OUT_OF_BOUNDS() : new gt.ERR_OUT_OF_RANGE(
      "offset",
      `>= 0 and <= ${h}`,
      v
    );
  }
  const Qr = /[^+/0-9A-Za-z-_]/g;
  function vr(v) {
    if (v = v.split("=")[0], v = v.trim().replace(Qr, ""), v.length < 2) return "";
    for (; v.length % 4 !== 0; )
      v = v + "=";
    return v;
  }
  function Ho(v, h) {
    h = h || 1 / 0;
    let p;
    const A = v.length;
    let $ = null;
    const z = [];
    for (let D = 0; D < A; ++D) {
      if (p = v.charCodeAt(D), p > 55295 && p < 57344) {
        if (!$) {
          if (p > 56319) {
            (h -= 3) > -1 && z.push(239, 191, 189);
            continue;
          } else if (D + 1 === A) {
            (h -= 3) > -1 && z.push(239, 191, 189);
            continue;
          }
          $ = p;
          continue;
        }
        if (p < 56320) {
          (h -= 3) > -1 && z.push(239, 191, 189), $ = p;
          continue;
        }
        p = ($ - 55296 << 10 | p - 56320) + 65536;
      } else $ && (h -= 3) > -1 && z.push(239, 191, 189);
      if ($ = null, p < 128) {
        if ((h -= 1) < 0) break;
        z.push(p);
      } else if (p < 2048) {
        if ((h -= 2) < 0) break;
        z.push(
          p >> 6 | 192,
          p & 63 | 128
        );
      } else if (p < 65536) {
        if ((h -= 3) < 0) break;
        z.push(
          p >> 12 | 224,
          p >> 6 & 63 | 128,
          p & 63 | 128
        );
      } else if (p < 1114112) {
        if ((h -= 4) < 0) break;
        z.push(
          p >> 18 | 240,
          p >> 12 & 63 | 128,
          p >> 6 & 63 | 128,
          p & 63 | 128
        );
      } else
        throw new Error("Invalid code point");
    }
    return z;
  }
  function Za(v) {
    const h = [];
    for (let p = 0; p < v.length; ++p)
      h.push(v.charCodeAt(p) & 255);
    return h;
  }
  function Ll(v, h) {
    let p, A, $;
    const z = [];
    for (let D = 0; D < v.length && !((h -= 2) < 0); ++D)
      p = v.charCodeAt(D), A = p >> 8, $ = p % 256, z.push($), z.push(A);
    return z;
  }
  function Xa(v) {
    return t.toByteArray(vr(v));
  }
  function Lo(v, h, p, A) {
    let $;
    for ($ = 0; $ < A && !($ + p >= h.length || $ >= v.length); ++$)
      h[$ + p] = v[$];
    return $;
  }
  function Er(v, h) {
    return v instanceof h || v != null && v.constructor != null && v.constructor.name != null && v.constructor.name === h.name;
  }
  function Si(v) {
    return v !== v;
  }
  const zl = function() {
    const v = "0123456789abcdef", h = new Array(256);
    for (let p = 0; p < 16; ++p) {
      const A = p * 16;
      for (let $ = 0; $ < 16; ++$)
        h[A + $] = v[p] + v[$];
    }
    return h;
  }();
  function Nr(v) {
    return typeof BigInt > "u" ? Ya : v;
  }
  function Ya() {
    throw new Error("BigInt not supported");
  }
})(CU);
var HU = "accountChange";
ue({
  type: pt(HU)
});
var LU = "networkChange";
ue({
  type: pt(LU)
});
var zU = "disconnect";
ue({
  type: pt(zU)
});
async function Bl(e) {
  var r;
  const t = await (e == null ? void 0 : e()) || ((r = window.XverseProviders) == null ? void 0 : r.BitcoinProvider) || window.BitcoinProvider;
  if (!t)
    throw new Error("No Bitcoin wallet installed");
  return t;
}
var Lv = /* @__PURE__ */ ((e) => (e.Mainnet = "Mainnet", e.Testnet = "Testnet", e.Signet = "Signet", e))(Lv || {}), Rp = Wr(Al([he(), fn(), Ei()])), ur = ue({
  jsonrpc: pt("2.0"),
  method: he(),
  params: Wr(
    Al([
      Gr(kl()),
      Sv({}),
      // Note: This is to support current incorrect usage of RPC 2.0. Params need
      // to be either an array or an object when provided. Changing this now would
      // be a breaking change, so accepting null values for now. Tracking in
      // https://linear.app/xverseapp/issue/ENG-4538.
      Ei()
    ])
  ),
  id: Rp
}), Ws = /* @__PURE__ */ ((e) => (e[e.PARSE_ERROR = -32700] = "PARSE_ERROR", e[e.INVALID_REQUEST = -32600] = "INVALID_REQUEST", e[e.METHOD_NOT_FOUND = -32601] = "METHOD_NOT_FOUND", e[e.INVALID_PARAMS = -32602] = "INVALID_PARAMS", e[e.INTERNAL_ERROR = -32603] = "INTERNAL_ERROR", e[e.USER_REJECTION = -32e3] = "USER_REJECTION", e[e.METHOD_NOT_SUPPORTED = -32001] = "METHOD_NOT_SUPPORTED", e[e.ACCESS_DENIED = -32002] = "ACCESS_DENIED", e))(Ws || {}), zv = ue({
  jsonrpc: pt("2.0"),
  result: Op(kl()),
  id: Rp
}), jv = ue({
  jsonrpc: pt("2.0"),
  error: Op(kl()),
  id: Rp
});
Al([
  zv,
  jv
]);
var Nl = /* @__PURE__ */ ((e) => (e.Ordinals = "ordinals", e.Payment = "payment", e.Stacks = "stacks", e))(Nl || {}), Mv = /* @__PURE__ */ ((e) => (e.p2pkh = "p2pkh", e.p2sh = "p2sh", e.p2wpkh = "p2wpkh", e.p2wsh = "p2wsh", e.p2tr = "p2tr", e.stacks = "stacks", e))(Mv || {}), jU = ue({
  address: he(),
  publicKey: he(),
  purpose: fi(Nl),
  addressType: fi(Mv)
}), Dv = async (e) => {
  var n, o;
  const t = await Bl(e.getProvider), { purposes: r } = e.payload;
  if (!r)
    throw new Error("Address purposes are required");
  try {
    const i = wr.createUnsecuredToken(e.payload), s = await t.connect(i);
    (n = e.onFinish) == null || n.call(e, s);
  } catch (i) {
    console.error("[Connect] Error during address request", i), (o = e.onCancel) == null || o.call(e);
  }
}, MU = "stx_getAddresses", DU = xi(
  ue({
    /**
     * A message to be displayed to the user in the request prompt.
     */
    message: Wr(he())
  })
);
ue({
  ...ur.entries,
  ...ue({
    method: pt(MU),
    params: DU,
    id: he()
  }).entries
});
var FU = "stx_signTransaction", KU = ue({
  /**
   * The transaction to sign as a hex-encoded string.
   */
  transaction: he(),
  /**
   * The public key to sign the transaction with. The wallet may use any key
   * when not provided.
   */
  pubkey: Wr(he()),
  /**
   * Whether to broadcast the transaction after signing. Defaults to `true`.
   */
  broadcast: Wr(_v())
});
ue({
  ...ur.entries,
  ...ue({
    method: pt(FU),
    params: KU,
    id: he()
  }).entries
});
var VU = ["software", "ledger"], qU = Av(VU), GU = "getInfo", WU = xi(Ei());
ue({
  /**
   * Version of the wallet.
   */
  version: he(),
  /**
   * [WBIP](https://wbips.netlify.app/wbips/WBIP002) methods supported by the wallet.
   */
  methods: Wr(Gr(he())),
  /**
   * List of WBIP standards supported by the wallet. Not currently used.
   */
  supports: Gr(he())
});
ue({
  ...ur.entries,
  ...ue({
    method: pt(GU),
    params: WU,
    id: he()
  }).entries
});
var ZU = "getAddresses", XU = ue({
  /**
   * The purposes for which to generate addresses. See
   * {@linkcode AddressPurpose} for available purposes.
   */
  purposes: Gr(fi(Nl)),
  /**
   * A message to be displayed to the user in the request prompt.
   */
  message: Wr(he())
});
ue({
  ...ur.entries,
  ...ue({
    method: pt(ZU),
    params: XU,
    id: he()
  }).entries
});
var YU = "signMessage", hi = /* @__PURE__ */ ((e) => (e.ECDSA = "ECDSA", e.BIP322 = "BIP322", e))(hi || {}), JU = ue({
  /**
   * The address used for signing.
   **/
  address: he(),
  /**
   * The message to sign.
   **/
  message: he(),
  /**
   * The protocol to use for signing the message.
   */
  protocol: Wr(fi(hi))
});
ue({
  /**
   * The signature of the message.
   */
  signature: he(),
  /**
   * hash of the message.
   */
  messageHash: he(),
  /**
   * The address used for signing.
   */
  address: he(),
  /**
   * The protocol to use for signing the message.
   */
  protocol: fi(hi)
});
ue({
  ...ur.entries,
  ...ue({
    method: pt(YU),
    params: JU,
    id: he()
  }).entries
});
var QU = "getAccounts", eR = ue({
  /**
   * The purposes for which to generate addresses. See
   * {@linkcode AddressPurpose} for available purposes.
   */
  purposes: Gr(fi(Nl)),
  /**
   * A message to be displayed to the user in the request prompt.
   */
  message: Wr(he())
});
Gr(
  ue({
    ...jU.entries,
    ...ue({
      walletType: qU
    }).entries
  })
);
ue({
  ...ur.entries,
  ...ue({
    method: pt(QU),
    params: eR,
    id: he()
  }).entries
});
var tR = "getBalance";
xi(Ei());
ue({
  ...ur.entries,
  ...ue({
    method: pt(tR),
    id: he()
  }).entries
});
var rR = "wallet_requestPermissions", nR = Bp();
pt(!0);
ue({
  ...ur.entries,
  ...ue({
    method: pt(rR),
    params: nR,
    id: he()
  }).entries
});
var oR = "wallet_renouncePermissions", iR = Bp();
pt(!0);
ue({
  ...ur.entries,
  ...ue({
    method: pt(oR),
    params: iR,
    id: he()
  }).entries
});
var sR = "wallet_getWalletType";
xi(Ei());
ue({
  ...ur.entries,
  ...ue({
    method: pt(sR),
    id: he()
  }).entries
});
var aR = "runes_getBalance", cR = xi(Ei());
ue({
  balances: Gr(
    ue({
      runeName: he(),
      amount: he(),
      divisibility: fn(),
      symbol: he(),
      inscriptionId: xi(he())
    })
  )
});
ue({
  ...ur.entries,
  ...ue({
    method: pt(aR),
    params: cR,
    id: he()
  }).entries
});
var uR = "runes_transfer", lR = ue({
  recipients: Gr(
    ue({
      runeName: he(),
      amount: he(),
      address: he()
    })
  )
});
ue({
  ...ur.entries,
  ...ue({
    method: pt(uR),
    params: lR,
    id: he()
  }).entries
});
var fR = "ord_getInscriptions", dR = ue({
  offset: fn(),
  limit: fn()
});
ue({
  total: fn(),
  limit: fn(),
  offset: fn(),
  inscriptions: Gr(
    ue({
      inscriptionId: he(),
      inscriptionNumber: he(),
      address: he(),
      collectionName: Wr(he()),
      postage: he(),
      contentLength: he(),
      contentType: he(),
      timestamp: fn(),
      offset: fn(),
      genesisTransaction: he(),
      output: he()
    })
  )
});
ue({
  ...ur.entries,
  ...ue({
    method: pt(fR),
    params: dR,
    id: he()
  }).entries
});
var hR = "ord_sendInscriptions", pR = ue({
  transfers: Gr(
    ue({
      address: he(),
      inscriptionId: he()
    })
  )
});
ue({
  ...ur.entries,
  ...ue({
    method: pt(hR),
    params: pR,
    id: he()
  }).entries
});
var Tc = async (e, t, r) => {
  var i;
  let n = ((i = window.XverseProviders) == null ? void 0 : i.BitcoinProvider) || window.BitcoinProvider;
  if (!n)
    throw new Error("no wallet provider was found");
  if (!e)
    throw new Error("A wallet method is required");
  const o = await n.request(e, t);
  return Cg(jv, o) ? {
    status: "error",
    error: o.error
  } : Cg(zv, o) ? {
    status: "success",
    result: o.result
  } : {
    status: "error",
    error: {
      code: -32603,
      message: "Received unknown response from provider.",
      data: o
    }
  };
}, gR = async (e) => {
  var o, i;
  const t = await Bl(e.getProvider), { address: r, message: n } = e.payload;
  if (!r)
    throw new Error("An address is required to sign a message");
  if (!n)
    throw new Error("A message to be signed is required");
  try {
    const s = wr.createUnsecuredToken(e.payload), a = await t.signMessage(s);
    (o = e.onFinish) == null || o.call(e, a);
  } catch (s) {
    console.error("[Connect] Error during sign message request", s), (i = e.onCancel) == null || i.call(e);
  }
}, mR = (e) => e.map((t) => {
  const { address: r, amountSats: n } = t;
  return {
    address: r,
    amountSats: n.toString()
  };
}), bR = async (e) => {
  var s, a;
  const t = await Bl(e.getProvider), { recipients: r, senderAddress: n, network: o, message: i } = e.payload;
  if (!r || r.length === 0)
    throw new Error("At least one recipient is required");
  if (r.some(
    (c) => typeof c.address != "string" || typeof c.amountSats != "bigint"
  ))
    throw new Error("Incorrect recipient format");
  if (!n)
    throw new Error("The sender address is required");
  try {
    const c = mR(r), u = {
      network: o,
      senderAddress: n,
      message: i,
      recipients: c
    }, f = wr.createUnsecuredToken(u), l = await t.sendBtcTransaction(f);
    (s = e.onFinish) == null || s.call(e, l);
  } catch (c) {
    console.error("[Connect] Error during send BTC transaction request", c), (a = e.onCancel) == null || a.call(e);
  }
}, yR = async (e) => {
  var o, i;
  const t = await Bl(e.getProvider), { psbtBase64: r, inputsToSign: n } = e.payload;
  if (!r)
    throw new Error("A value for psbtBase64 representing the tx hash is required");
  if (!n)
    throw new Error("An array specifying the inputs to be signed by the wallet is required");
  try {
    const s = wr.createUnsecuredToken(e.payload), a = await t.signTransaction(s);
    (o = e.onFinish) == null || o.call(e, a);
  } catch (s) {
    console.error("[Connect] Error during sign transaction request", s), (i = e.onCancel) == null || i.call(e);
  }
};
let Gg = (e) => e, zs = {}, wo = { addEventListener() {
}, removeEventListener() {
} };
function wR() {
  try {
    return typeof localStorage < "u";
  } catch {
    return !1;
  }
}
wR() && (zs = localStorage);
let vR = {
  addEventListener(e, t, r) {
    window.addEventListener("storage", t), window.addEventListener("pageshow", r);
  },
  removeEventListener(e, t, r) {
    window.removeEventListener("storage", t), window.removeEventListener("pageshow", r);
  }
};
typeof window < "u" && (wo = vR);
function _i(e, t = {}, r = {}) {
  let n = r.encode || Gg, o = r.decode || Gg, i = Wg(), s = i.setKey, a = (l, d) => {
    typeof d > "u" ? (r.listen !== !1 && wo.perKey && wo.removeEventListener(e + l, u, f), delete zs[e + l]) : (r.listen !== !1 && wo.perKey && !(l in i.value) && wo.addEventListener(e + l, u, f), zs[e + l] = n(d));
  };
  i.setKey = (l, d) => {
    a(l, d), s(l, d);
  };
  let c = i.set;
  i.set = function(l) {
    for (let d in l)
      a(d, l[d]);
    for (let d in i.value)
      d in l || a(d, void 0);
    c(l);
  };
  function u(l) {
    l.key ? l.key.startsWith(e) && (l.newValue === null ? s(l.key.slice(e.length), void 0) : s(l.key.slice(e.length), o(l.newValue))) : c({});
  }
  function f() {
    let l = { ...t };
    for (let d in zs)
      d.startsWith(e) && (l[d.slice(e.length)] = o(zs[d]));
    for (let d in l)
      i.setKey(d, l[d]);
  }
  return f2(i, () => {
    if (f(), r.listen !== !1)
      return wo.addEventListener(e, u, f), () => {
        wo.removeEventListener(e, u, f);
        for (let l in i.value)
          wo.removeEventListener(e + l, u, f);
      };
  }), i;
}
const ER = "XVERSE_CONNECTED_WALLET_STATE";
class xR extends Yr {
  constructor() {
    super(...arguments);
    oe(this, "observer");
    oe(this, "$valueStore", _i(
      ER,
      {
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }
    ));
    oe(this, "removeSubscriber");
  }
  get library() {
    return window == null ? void 0 : window.BitcoinProvider;
  }
  get network() {
    return this.$network.get();
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of Co)
      n === "balance" && this.$store.setKey(n, BigInt(r[n])), this.$store.setKey(n, r[n]);
    this.$store.setKey(
      "accounts",
      [r.address, r.paymentAddress].filter(Boolean)
    );
  }
  watchStateChange(r, n, o) {
    vi(Do, r, o, this.$valueStore);
  }
  initialize() {
    Or(this.$store, ["provider"], (r) => {
      r.provider !== Do ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    }), typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var n, o;
      ((n = window == null ? void 0 : window.XverseProviders) == null ? void 0 : n.BitcoinProvider) && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Do]: !0
      }), (o = this.observer) == null || o.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 }));
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    const { address: n, paymentAddress: o } = this.$valueStore.get();
    try {
      if (n)
        if (n.startsWith("tb1") && vs(this.network))
          this.disconnect();
        else {
          this.restorePersistedValues(), jn(o, this.network).then((a) => {
            this.$store.setKey("balance", a);
          });
          return;
        }
      let i = Nc(this.network || Ce);
      await Dv({
        payload: {
          purposes: ["ordinals", "payment"],
          message: "Connecting with lasereyes",
          network: {
            type: i
          }
        },
        onFinish: (a) => {
          const c = vp(a.addresses), u = Ep(a.addresses);
          if (!c || !u)
            throw new Error("Could not find the addresses");
          c && u && (this.$store.setKey("address", c.address), this.$store.setKey("paymentAddress", u.address), this.$store.setKey("accounts", [
            c.address,
            u.address
          ])), this.$store.setKey(
            "publicKey",
            String(a.addresses[0].publicKey)
          ), this.$store.setKey(
            "paymentPublicKey",
            String(a.addresses[1].publicKey)
          );
        },
        onCancel: () => {
          throw new Error(`User canceled lasereyes to ${Do} wallet`);
        },
        onError: (a) => {
          throw new Error(`Can't lasereyes to ${Do} wallet`);
        }
      });
    } catch (i) {
      throw i;
    }
  }
  async getNetwork() {
    const { address: r } = this.$store.get();
    return r.slice(0, 1) === "t" && [tt, Ht, Ft, Lt].includes(this.network) ? this.network : Ce;
  }
  async sendBTC(r, n) {
    const o = await Tc("sendTransfer", {
      recipients: [
        {
          address: r,
          amount: n
        }
      ]
    });
    if (o.status === "success")
      return o.result.txid;
    throw o.error.code === Ws.USER_REJECTION ? new Error("User rejected the request") : new Error("Error sending BTC: " + o.error.message);
  }
  async signMessage(r, { toSignAddress: n, protocol: o }) {
    const i = n || this.$store.get().paymentAddress, s = await Tc("signMessage", {
      address: i,
      message: r,
      protocol: o === Ma ? hi.ECDSA : hi.BIP322
    });
    if (s.status === "success")
      return s.result.signature;
    throw s.error.code === Ws.USER_REJECTION ? new Error("User rejected the request") : new Error("Error signing message: " + s.error.message);
  }
  async signPsbt(r, n, o, i, s) {
    try {
      const a = Qe.fromBase64(String(o), {
        network: mt(this.network)
      }), c = this.$store.get().address, u = this.$store.get().paymentAddress, f = a.data.inputs;
      let l = {};
      const d = {
        [c]: []
      }, m = {
        [u]: []
      };
      let g = 0;
      for await (let k of f) {
        if (k.witnessUtxo === void 0)
          m[u].push(Number(g));
        else {
          const { script: S } = k.witnessUtxo, I = ka(
            S,
            mt(this.network)
          );
          I === u ? m[u].push(Number(g)) : I === c && d[c].push(Number(g));
        }
        g++;
      }
      d[c].length > 0 && (l = { ...l, ...d }), m[u].length > 0 && (l = { ...l, ...m });
      let y, b, E, x;
      const w = await Tc("signPsbt", {
        psbt: o,
        broadcast: !!s,
        signInputs: l
      });
      if (w.status === "success")
        x = Qe.fromBase64(w.result.psbt, {
          network: mt(this.network)
        }), y = w.result.txid;
      else
        throw w.error.code === Ws.USER_REJECTION ? new Error("User canceled the request") : new Error("Error signing psbt");
      if (!x)
        throw new Error("Error signing psbt");
      return i && !y ? (x.finalizeAllInputs(), b = x.toHex(), E = x.toBase64()) : (b = x.toHex(), E = x.toBase64()), {
        signedPsbtHex: b,
        signedPsbtBase64: E,
        txId: y
      };
    } catch (a) {
      throw console.error(a), a;
    }
  }
  async getInscriptions(r, n) {
    const s = await Tc("ord_getInscriptions", {
      offset: r || 0,
      limit: n || 10
    });
    if (s.status === "success")
      return console.log(s.result), s.result.inscriptions;
    throw console.error(s.error), new Error("Error getting inscriptions");
  }
}
class _R extends Yr {
  constructor() {
    super(...arguments);
    oe(this, "observer");
  }
  get library() {
    return window.wizz;
  }
  get network() {
    return this.$network.get();
  }
  handleNetworkChanged(r) {
    this.parent.connect(Hi);
  }
  handleAccountsChanged(r) {
    if (!r.length) {
      this.parent.disconnect();
      return;
    }
    this.$store.get().accounts[0] !== r[0] && this.$store.setKey("accounts", r);
  }
  initialize() {
    Or(this.$store, ["provider"], (r) => {
      r.provider === Hi ? this.addLibraryListeners() : this.removeLibraryListeners();
    }), typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var r;
      this.library && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Hi]: !0
      }), (r = this.observer) == null || r.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 }));
  }
  removeLibraryListeners() {
    var r, n;
    (r = this.library) == null || r.removeListener(
      "networkChanged",
      this.handleNetworkChanged.bind(this)
    ), (n = this.library) == null || n.removeListener(
      "accountsChanged",
      this.handleAccountsChanged.bind(this)
    );
  }
  addLibraryListeners() {
    var r, n;
    (r = this.library) == null || r.on("networkChanged", this.handleNetworkChanged.bind(this)), (n = this.library) == null || n.on("accountsChanged", this.handleAccountsChanged.bind(this));
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect(), this.removeLibraryListeners();
  }
  async connect() {
    if (!this.library) throw Y$;
    const r = await this.library.requestAccounts();
    if (!r) throw new Error("No accounts found");
    const n = await this.library.getPublicKey();
    if (!n) throw new Error("No public key found");
    this.$store.setKey("accounts", r), this.$store.setKey("address", r[0]), this.$store.setKey("paymentAddress", r[0]), this.$store.setKey("publicKey", n), this.$store.setKey("paymentPublicKey", n), this.$store.setKey("provider", Hi), await this.getNetwork().then((o) => {
      var i;
      o && ((i = this.config) == null ? void 0 : i.network) !== o && this.parent.switchNetwork(o);
    }), this.$store.setKey("connected", !0);
  }
  async requestAccounts() {
    return await this.library.requestAccounts();
  }
  async getNetwork() {
    var n;
    const r = await ((n = this.library) == null ? void 0 : n.getNetwork());
    return r ? og(r) : void 0;
  }
  async switchNetwork(r) {
    var o;
    if (r === Lt || r === Br)
      return await this.library.switchNetwork(Vs);
    const n = og(r);
    await ((o = this.library) == null ? void 0 : o.switchNetwork(n)), this.$network.set(r), await this.parent.getBalance();
  }
  async getPublicKey() {
    var r;
    return await ((r = this.library) == null ? void 0 : r.getPublicKey());
  }
  async getBalance() {
    return (await this.library.getBalance()).total;
  }
  async getInscriptions(r, n) {
    const o = r || 0, i = n || 10;
    return await this.library.getInscriptions(o, i);
  }
  async sendBTC(r, n) {
    var i;
    const o = await ((i = this.library) == null ? void 0 : i.sendBitcoin(r, n));
    if (o)
      return o;
    throw new Error("Error sending BTC");
  }
  async signMessage(r, n) {
    var i;
    const o = (n == null ? void 0 : n.protocol) === yp ? ml : n == null ? void 0 : n.protocol;
    return await ((i = this.library) == null ? void 0 : i.signMessage(r, o));
  }
  async signPsbt(r, n, o, i, s) {
    var f;
    const a = await ((f = this.library) == null ? void 0 : f.signPsbt(n, {
      autoFinalized: i,
      broadcast: !1
    })), c = Qe.fromHex(a);
    let u;
    return i && s && (u = await this.pushPsbt(a)), {
      signedPsbtHex: c.toHex(),
      signedPsbtBase64: c.toBase64(),
      txId: u
    };
  }
}
const SR = "OYL_CONNECTED_WALLET_STATE";
class AR extends Yr {
  constructor() {
    super(...arguments);
    oe(this, "observer");
    oe(this, "$valueStore", _i(
      SR,
      {
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }
    ));
    oe(this, "removeSubscriber");
  }
  get library() {
    return window.oyl;
  }
  get network() {
    return this.$network.get();
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of Co)
      n === "balance" && this.$store.setKey(n, BigInt(r[n])), this.$store.setKey(n, r[n]);
    this.$store.setKey(
      "accounts",
      [r.address, r.paymentAddress].filter(Boolean)
    );
  }
  watchStateChange(r, n, o) {
    vi(js, r, o, this.$valueStore);
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var n;
      (window == null ? void 0 : window.oyl) && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [js]: !0
      }), (n = this.observer) == null || n.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Or(this.$store, ["provider"], (r) => {
      r.provider !== js ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        publicKey: "",
        paymentAddress: "",
        paymentPublicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    });
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    const { address: n, paymentAddress: o } = this.$valueStore.get();
    if (n)
      if (n.startsWith("tb1") && vs(this.network))
        this.disconnect();
      else {
        this.restorePersistedValues(), jn(o, this.network).then((a) => {
          this.$store.setKey("balance", a);
        });
        return;
      }
    if (!this.library) throw new Error("Oyl isn't installed");
    if (_p(this.network))
      throw new Error(`${this.network} is not supported by Oyl`);
    const { nativeSegwit: i, taproot: s } = await this.library.getAddresses();
    if (!i || !s) throw new Error("No accounts found");
    this.$store.setKey("address", s.address), this.$store.setKey("paymentAddress", i.address), this.$store.setKey("publicKey", s.publicKey), this.$store.setKey("paymentPublicKey", i.publicKey);
  }
  async getNetwork() {
    return this.network;
  }
  async sendBTC(r, n) {
    const { psbtHex: o } = await xp(
      this.$store.get().address,
      this.$store.get().paymentAddress,
      r,
      n,
      this.$store.get().paymentPublicKey,
      this.network,
      7
    ), i = await this.signPsbt("", o, "", !0, !0);
    if (!i) throw new Error("Error sending BTC");
    return i.txId;
  }
  async signMessage(r, n) {
    const o = (n == null ? void 0 : n.toSignAddress) || this.$store.get().paymentAddress;
    return (await this.library.signMessage({
      address: o,
      message: r,
      protocol: n == null ? void 0 : n.protocol
    })).signature;
  }
  async signPsbt(r, n, o, i, s) {
    const { psbt: a, txid: c } = await this.library.signPsbt({
      psbt: n,
      finalize: i,
      broadcast: s
    }), u = Qe.fromHex(a);
    return {
      signedPsbtHex: u.toHex(),
      signedPsbtBase64: u.toBase64(),
      txId: c
    };
  }
  async pushPsbt(r) {
    return (await this.library.pushPsbt({ psbt: r })).txid;
  }
  async getPublicKey() {
    const { nativeSegwit: r, taproot: n } = await this.library.getAddresses();
    if (!r || !n) throw new Error("No accounts found");
    return this.$store.setKey("publicKey", n.publicKey), this.$store.setKey("paymentPublicKey", r.publicKey), n.publicKey;
  }
  async getBalance() {
    const { total: r } = await this.library.getBalance();
    return this.$store.setKey("balance", r), r;
  }
  async getInscriptions(r, n) {
    const o = r || 0, i = n || 10;
    return await this.library.getInscriptions(o, i);
  }
  async requestAccounts() {
    return [this.$store.get().address, this.$store.get().paymentAddress];
  }
  async switchNetwork() {
    throw Fd;
  }
}
const kR = "LEATHER_CONNECTED_WALLET_STATE";
class TR extends Yr {
  constructor() {
    super(...arguments);
    oe(this, "observer");
    oe(this, "$valueStore", _i(
      kR,
      {
        address: "",
        publicKey: "",
        paymentAddress: "",
        paymentPublicKey: "",
        balance: ""
      }
    ));
    oe(this, "removeSubscriber");
  }
  get library() {
    return window.LeatherProvider;
  }
  get network() {
    return this.$network.get();
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of Co)
      n === "balance" && this.$store.setKey(n, BigInt(r[n])), this.$store.setKey(n, r[n]);
    this.$store.setKey(
      "accounts",
      [r.address, r.paymentAddress].filter(Boolean)
    );
  }
  watchStateChange(r, n, o) {
    vi(
      Ms,
      r,
      o,
      this.$valueStore
    );
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var n;
      (window == null ? void 0 : window.LeatherProvider) && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Ms]: !0
      }), (n = this.observer) == null || n.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Or(this.$store, ["provider"], (r) => {
      r.provider !== Ms ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        publicKey: "",
        paymentAddress: "",
        paymentPublicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    });
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    var l;
    const { address: n, paymentAddress: o } = this.$valueStore.get();
    if (n)
      if (n.startsWith("tb1") && vs(this.network))
        this.disconnect();
      else {
        this.restorePersistedValues(), jn(o, this.network).then((d) => {
          this.$store.setKey("balance", d);
        });
        return;
      }
    if (!this.library) throw new Error("Leather isn't installed");
    const i = await this.library.request("getAddresses");
    if (!i) throw new Error("No accounts found");
    const a = i.result.addresses, c = a.map(
      (d) => d.address
    ), u = a.find(
      (d) => d.type === Di
    ), f = a.find(
      (d) => d.type === Vf
    );
    if (!(u != null && u.publicKey) || !(f != null && f.publicKey))
      throw new Error("No accounts found");
    if ((l = String(u == null ? void 0 : u.address)) != null && l.startsWith("tb") && this.network !== tt && this.network !== Ht && this.network !== Ft)
      throw new Error(
        `Please switch networks to ${this.network} in the wallet settings.`
      );
    this.$store.setKey("accounts", c), this.$store.setKey("address", u.address), this.$store.setKey("paymentAddress", f.address), this.$store.setKey("publicKey", u.publicKey), this.$store.setKey("paymentPublicKey", f.publicKey);
  }
  async getNetwork() {
    return this.network;
  }
  async sendBTC(r, n) {
    var i, s;
    const o = await ((i = this.library) == null ? void 0 : i.request("sendTransfer", {
      recipients: [
        {
          address: r,
          amount: n
        }
      ]
    }));
    if ((s = o == null ? void 0 : o.result) != null && s.txid)
      return o.result.txid;
    throw o.error.code === Ws.USER_REJECTION ? new Error("User rejected the request") : new Error("Error sending BTC: " + o.error.message);
  }
  async signMessage(r, n) {
    var c;
    const o = n == null ? void 0 : n.toSignAddress;
    if ((n == null ? void 0 : n.protocol) === Ma)
      throw new Error("Leather doesn't support ECDSA message signing");
    const s = o === this.$store.get().address ? Di : Vf;
    if (o !== this.$store.get().address && o !== this.$store.get().paymentAddress)
      throw new Error("Invalid address to sign message");
    const a = await this.library.request("signMessage", {
      message: r,
      paymentType: s
    });
    return (c = a == null ? void 0 : a.result) == null ? void 0 : c.signature;
  }
  async signPsbt(r, n, o, i, s) {
    const a = {
      hex: n,
      broadcast: !1,
      network: this.network
    }, f = (await this.library.request(
      "signPsbt",
      a
    )).result.hex, l = Qe.fromHex(String(f));
    if (i && s) {
      const d = l.finalizeAllInputs(), m = await this.pushPsbt(d.toHex());
      return {
        signedPsbtHex: l.toHex(),
        signedPsbtBase64: l.toBase64(),
        txId: m
      };
    } else if (i) {
      const d = l.finalizeAllInputs();
      return {
        signedPsbtHex: d.toHex(),
        signedPsbtBase64: d.toBase64(),
        txId: void 0
      };
    } else
      return {
        signedPsbtHex: l.toHex(),
        signedPsbtBase64: l.toBase64(),
        txId: void 0
      };
  }
  async getPublicKey() {
    const { result: r } = await this.library.request(
      "getAddresses"
    ), o = r.addresses.find(
      (i) => i.type === Di
    );
    if (!(o != null && o.publicKey))
      throw new Error("No accounts found");
    return o.publicKey;
  }
  async getBalance() {
    const r = await jn(
      this.$store.get().paymentAddress,
      this.network
    );
    return this.$store.setKey("balance", r), r.toString();
  }
  async requestAccounts() {
    const { result: r } = await this.library.request(
      "getAddresses"
    ), o = r.addresses.map((i) => i.address);
    return this.$store.setKey("accounts", o), o;
  }
}
var Zs = {}, Fv = {}, Jr = {}, Kv = {};
Object.defineProperty(Kv, "__esModule", { value: !0 });
(function(e) {
  var t = be && be.__createBinding || (Object.create ? function(s, a, c, u) {
    u === void 0 && (u = c);
    var f = Object.getOwnPropertyDescriptor(a, c);
    (!f || ("get" in f ? !a.__esModule : f.writable || f.configurable)) && (f = { enumerable: !0, get: function() {
      return a[c];
    } }), Object.defineProperty(s, u, f);
  } : function(s, a, c, u) {
    u === void 0 && (u = c), s[u] = a[c];
  }), r = be && be.__exportStar || function(s, a) {
    for (var c in s) c !== "default" && !Object.prototype.hasOwnProperty.call(a, c) && t(a, s, c);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.getProviderById = e.getProviders = e.getProviderOrThrow = void 0;
  async function n(s) {
    var c, u;
    if (s) {
      const f = await s();
      if (f)
        return f;
    }
    const a = window.OrangeBitcoinProvider || ((c = window.OrangecryptoProviders) == null ? void 0 : c.BitcoinProvider) || ((u = window.OrangeWalletProviders) == null ? void 0 : u.OrangeBitcoinProvider);
    if (!a)
      throw new Error("No Orange Bitcoin wallet installed");
    return a;
  }
  e.getProviderOrThrow = n;
  function o() {
    return window.btc_providers || (window.btc_providers = []), window.btc_providers;
  }
  e.getProviders = o;
  function i(s) {
    var a;
    if (Array.isArray(window.btc_providers)) {
      const c = window.btc_providers.find((u) => u.id === s);
      return (a = c == null ? void 0 : c.id) == null ? void 0 : a.split(".").reduce((u, f) => u == null ? void 0 : u[f], window);
    } else {
      console.log("window.btc_providers is not defined or not an array");
      return;
    }
  }
  e.getProviderById = i, r(Kv, e);
})(Jr);
var Vv = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.AddressType = e.AddressPurpose = void 0, function(t) {
    t.Ordinals = "ordinals", t.Payment = "payment", t.Stacks = "stacks";
  }(e.AddressPurpose || (e.AddressPurpose = {})), function(t) {
    t.p2pkh = "p2pkh", t.p2sh = "p2sh", t.p2wpkh = "p2wpkh", t.p2wsh = "p2wsh", t.p2tr = "p2tr", t.stacks = "stacks";
  }(e.AddressType || (e.AddressType = {}));
})(Vv);
(function(e) {
  var t = be && be.__createBinding || (Object.create ? function(s, a, c, u) {
    u === void 0 && (u = c);
    var f = Object.getOwnPropertyDescriptor(a, c);
    (!f || ("get" in f ? !a.__esModule : f.writable || f.configurable)) && (f = { enumerable: !0, get: function() {
      return a[c];
    } }), Object.defineProperty(s, u, f);
  } : function(s, a, c, u) {
    u === void 0 && (u = c), s[u] = a[c];
  }), r = be && be.__exportStar || function(s, a) {
    for (var c in s) c !== "default" && !Object.prototype.hasOwnProperty.call(a, c) && t(a, s, c);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.getAddress = void 0;
  const n = wr, o = Jr, i = async (s) => {
    var u, f;
    const a = await (0, o.getProviderOrThrow)(s.getProvider), { purposes: c } = s.payload;
    if (!c)
      throw new Error("Address purposes are required");
    try {
      const l = (0, n.createUnsecuredToken)(s.payload), d = await a.connect(l);
      (u = s.onFinish) == null || u.call(s, d);
    } catch (l) {
      console.error("[Connect] Error during address request", l), (f = s.onCancel) == null || f.call(s);
    }
  };
  e.getAddress = i, r(Vv, e);
})(Fv);
var qv = {}, Gv = {}, Wv = {};
Object.defineProperty(Wv, "__esModule", { value: !0 });
var Zv = {};
Object.defineProperty(Zv, "__esModule", { value: !0 });
(function(e) {
  var t = be && be.__createBinding || (Object.create ? function(n, o, i, s) {
    s === void 0 && (s = i);
    var a = Object.getOwnPropertyDescriptor(o, i);
    (!a || ("get" in a ? !o.__esModule : a.writable || a.configurable)) && (a = { enumerable: !0, get: function() {
      return o[i];
    } }), Object.defineProperty(n, s, a);
  } : function(n, o, i, s) {
    s === void 0 && (s = i), n[s] = o[i];
  }), r = be && be.__exportStar || function(n, o) {
    for (var i in n) i !== "default" && !Object.prototype.hasOwnProperty.call(o, i) && t(o, n, i);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), r(Wv, e), r(Zv, e);
})(Gv);
(function(e) {
  var t = be && be.__createBinding || (Object.create ? function(s, a, c, u) {
    u === void 0 && (u = c);
    var f = Object.getOwnPropertyDescriptor(a, c);
    (!f || ("get" in f ? !a.__esModule : f.writable || f.configurable)) && (f = { enumerable: !0, get: function() {
      return a[c];
    } }), Object.defineProperty(s, u, f);
  } : function(s, a, c, u) {
    u === void 0 && (u = c), s[u] = a[c];
  }), r = be && be.__exportStar || function(s, a) {
    for (var c in s) c !== "default" && !Object.prototype.hasOwnProperty.call(a, c) && t(a, s, c);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.request = void 0;
  const n = Jr, o = async (s, a, c) => {
    var l;
    let u = ((l = window.OrangecryptoProviders) == null ? void 0 : l.BitcoinProvider) || window.OrangeBitcoinProvider;
    if (c && (u = await (0, n.getProviderById)(c)), !u)
      throw new Error("no wallet provider was found");
    if (!s)
      throw new Error("A wallet method is required");
    const f = await u.request(s, a);
    return i(f) ? {
      status: "success",
      result: f.result
    } : {
      status: "error",
      error: f.error
    };
  };
  e.request = o;
  const i = (s) => Object.hasOwn(s, "result") && !!s.result;
  r(Gv, e);
})(qv);
var Xv = {}, Yv = {};
Object.defineProperty(Yv, "__esModule", { value: !0 });
(function(e) {
  var t = be && be.__createBinding || (Object.create ? function(a, c, u, f) {
    f === void 0 && (f = u);
    var l = Object.getOwnPropertyDescriptor(c, u);
    (!l || ("get" in l ? !c.__esModule : l.writable || l.configurable)) && (l = { enumerable: !0, get: function() {
      return c[u];
    } }), Object.defineProperty(a, f, l);
  } : function(a, c, u, f) {
    f === void 0 && (f = u), a[f] = c[u];
  }), r = be && be.__exportStar || function(a, c) {
    for (var u in a) u !== "default" && !Object.prototype.hasOwnProperty.call(c, u) && t(c, a, u);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.getCapabilities = void 0;
  const n = wr, o = Jr, i = (a, c) => {
    const u = (l) => !(!a[l] || c && !c.has(l)), f = {
      request: u("request"),
      connect: u("connect"),
      signMessage: u("signMessage"),
      signTransaction: u("signTransaction"),
      sendBtcTransaction: u("sendBtcTransaction"),
      createInscription: u("createInscription"),
      createRepeatInscriptions: u("createRepeatInscriptions"),
      signMultipleTransactions: u("signMultipleTransactions")
    };
    return Object.entries(f).reduce((l, [d, m]) => m ? [...l, d] : l, []);
  }, s = async (a) => {
    var f, l, d;
    const c = await (0, o.getProviderOrThrow)(a.getProvider), u = (0, n.createUnsecuredToken)(a.payload);
    if (c.getCapabilities)
      try {
        const m = await c.getCapabilities(u);
        (f = a.onFinish) == null || f.call(a, i(c, new Set(m)));
      } catch (m) {
        console.error("[Connect] Error during capabilities request", m);
      }
    try {
      const m = i(c);
      (l = a.onFinish) == null || l.call(a, m);
    } catch (m) {
      console.error("[Connect] Error during capabilities request", m), (d = a.onCancel) == null || d.call(a);
    }
  };
  e.getCapabilities = s, r(Yv, e);
})(Xv);
var Jv = {}, $l = {}, Wa = {};
Object.defineProperty(Wa, "__esModule", { value: !0 });
Wa.validateInscriptionPayload = void 0;
const IR = 4e5, PR = 6e4, OR = (e) => {
  const { contentType: t, content: r, payloadType: n, network: o, appFeeAddress: i, appFee: s } = e;
  if (!/^[a-z]+\/[a-z0-9\-\.\+]+(?=;.*|$)/.test(t))
    throw new Error("Invalid content type detected");
  if (!r || r.length === 0)
    throw new Error("Empty content not allowed");
  if (!n || n !== "BASE_64" && n !== "PLAIN_TEXT")
    throw new Error("Empty invalid payloadType specified");
  if (r.length > (o.type === "Mainnet" ? IR : PR))
    throw new Error("Content too large");
  if (((i == null ? void 0 : i.length) ?? 0) > 0 && (s ?? 0) <= 0)
    throw new Error("Invalid combination of app fee address and fee provided");
};
Wa.validateInscriptionPayload = OR;
Object.defineProperty($l, "__esModule", { value: !0 });
$l.createInscription = void 0;
const BR = wr, NR = Jr, $R = Wa, UR = async (e) => {
  var n, o;
  const { getProvider: t } = e, r = await (0, NR.getProviderOrThrow)(t);
  (0, $R.validateInscriptionPayload)(e.payload);
  try {
    const i = (0, BR.createUnsecuredToken)(e.payload), s = await r.createInscription(i);
    (n = e.onFinish) == null || n.call(e, s);
  } catch (i) {
    console.error("[Connect] Error during create inscription", i), (o = e.onCancel) == null || o.call(e);
  }
};
$l.createInscription = UR;
var Ul = {};
Object.defineProperty(Ul, "__esModule", { value: !0 });
Ul.createRepeatInscriptions = void 0;
const RR = Jr, CR = wr, HR = Wa, LR = async (e) => {
  var n, o;
  const { getProvider: t } = e, r = await (0, RR.getProviderOrThrow)(t);
  (0, HR.validateInscriptionPayload)(e.payload);
  try {
    const i = (0, CR.createUnsecuredToken)(e.payload), s = await r.createRepeatInscriptions(i);
    (n = e.onFinish) == null || n.call(e, s);
  } catch (i) {
    console.error("[Connect] Error during create repeat inscriptions", i), (o = e.onCancel) == null || o.call(e);
  }
};
Ul.createRepeatInscriptions = LR;
var Qv = {};
Object.defineProperty(Qv, "__esModule", { value: !0 });
(function(e) {
  var t = be && be.__createBinding || (Object.create ? function(n, o, i, s) {
    s === void 0 && (s = i);
    var a = Object.getOwnPropertyDescriptor(o, i);
    (!a || ("get" in a ? !o.__esModule : a.writable || a.configurable)) && (a = { enumerable: !0, get: function() {
      return o[i];
    } }), Object.defineProperty(n, s, a);
  } : function(n, o, i, s) {
    s === void 0 && (s = i), n[s] = o[i];
  }), r = be && be.__exportStar || function(n, o) {
    for (var i in n) i !== "default" && !Object.prototype.hasOwnProperty.call(o, i) && t(o, n, i);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), r($l, e), r(Ul, e), r(Qv, e);
})(Jv);
var e2 = {}, t2 = {};
Object.defineProperty(t2, "__esModule", { value: !0 });
(function(e) {
  var t = be && be.__createBinding || (Object.create ? function(s, a, c, u) {
    u === void 0 && (u = c);
    var f = Object.getOwnPropertyDescriptor(a, c);
    (!f || ("get" in f ? !a.__esModule : f.writable || f.configurable)) && (f = { enumerable: !0, get: function() {
      return a[c];
    } }), Object.defineProperty(s, u, f);
  } : function(s, a, c, u) {
    u === void 0 && (u = c), s[u] = a[c];
  }), r = be && be.__exportStar || function(s, a) {
    for (var c in s) c !== "default" && !Object.prototype.hasOwnProperty.call(a, c) && t(a, s, c);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.signMessage = void 0;
  const n = wr, o = Jr, i = async (s) => {
    var f, l;
    const a = await (0, o.getProviderOrThrow)(s.getProvider), { address: c, message: u } = s.payload;
    if (!c)
      throw new Error("An address is required to sign a message");
    if (!u)
      throw new Error("A message to be signed is required");
    try {
      const d = (0, n.createUnsecuredToken)(s.payload), m = await a.signMessage(d);
      (f = s.onFinish) == null || f.call(s, m);
    } catch (d) {
      console.error("[Connect] Error during sign message request", d), (l = s.onCancel) == null || l.call(s);
    }
  };
  e.signMessage = i, r(t2, e);
})(e2);
var r2 = {}, Rl = {};
Object.defineProperty(Rl, "__esModule", { value: !0 });
Rl.sendBtcTransaction = void 0;
const zR = wr, jR = Jr, MR = (e) => e.map((t) => {
  const { address: r, amountSats: n } = t;
  return {
    address: r,
    amountSats: n.toString()
  };
}), DR = async (e) => {
  var s, a;
  const t = await (0, jR.getProviderOrThrow)(e.getProvider), { recipients: r, senderAddress: n, network: o, message: i } = e.payload;
  if (!r || r.length === 0)
    throw new Error("At least one recipient is required");
  if (r.some((c) => typeof c.address != "string" || typeof c.amountSats != "bigint"))
    throw new Error("Incorrect recipient format");
  if (!n)
    throw new Error("The sender address is required");
  try {
    const c = MR(r), u = {
      network: o,
      senderAddress: n,
      message: i,
      recipients: c
    }, f = (0, zR.createUnsecuredToken)(u), l = await t.sendBtcTransaction(f);
    (s = e.onFinish) == null || s.call(e, l);
  } catch (c) {
    console.error("[Connect] Error during send BTC transaction request", c), (a = e.onCancel) == null || a.call(e);
  }
};
Rl.sendBtcTransaction = DR;
var Cl = {};
Object.defineProperty(Cl, "__esModule", { value: !0 });
Cl.signTransaction = void 0;
const FR = wr, KR = Jr, VR = async (e) => {
  var o, i;
  const t = await (0, KR.getProviderOrThrow)(e.getProvider), { psbtBase64: r, inputsToSign: n } = e.payload;
  if (!r)
    throw new Error("A value for psbtBase64 representing the tx hash is required");
  if (!n)
    throw new Error("An array specifying the inputs to be signed by the wallet is required");
  try {
    const s = (0, FR.createUnsecuredToken)(e.payload), a = await t.signTransaction(s);
    (o = e.onFinish) == null || o.call(e, a);
  } catch (s) {
    console.error("[Connect] Error during sign transaction request", s), (i = e.onCancel) == null || i.call(e);
  }
};
Cl.signTransaction = VR;
var Hl = {};
Object.defineProperty(Hl, "__esModule", { value: !0 });
Hl.signMultipleTransactions = void 0;
const qR = wr, GR = Jr, WR = async (e) => {
  var n, o;
  const t = await (0, GR.getProviderOrThrow)(e.getProvider), { psbts: r } = e.payload;
  if (!r || !r.length)
    throw new Error("psbts array is required");
  if (r.length > 100)
    throw new Error("psbts array must contain less than 100 psbts");
  try {
    const i = (0, qR.createUnsecuredToken)(e.payload), s = await t.signMultipleTransactions(i);
    (n = e.onFinish) == null || n.call(e, s);
  } catch (i) {
    console.error("[Connect] Error during sign Multiple transactions request", i), (o = e.onCancel) == null || o.call(e);
  }
};
Hl.signMultipleTransactions = WR;
var n2 = {};
Object.defineProperty(n2, "__esModule", { value: !0 });
(function(e) {
  var t = be && be.__createBinding || (Object.create ? function(n, o, i, s) {
    s === void 0 && (s = i);
    var a = Object.getOwnPropertyDescriptor(o, i);
    (!a || ("get" in a ? !o.__esModule : a.writable || a.configurable)) && (a = { enumerable: !0, get: function() {
      return o[i];
    } }), Object.defineProperty(n, s, a);
  } : function(n, o, i, s) {
    s === void 0 && (s = i), n[s] = o[i];
  }), r = be && be.__exportStar || function(n, o) {
    for (var i in n) i !== "default" && !Object.prototype.hasOwnProperty.call(o, i) && t(o, n, i);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), r(Rl, e), r(Cl, e), r(Hl, e), r(n2, e);
})(r2);
var o2 = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.RpcErrorCode = e.BitcoinNetworkType = void 0, function(t) {
    t.Mainnet = "Mainnet", t.Testnet = "Testnet";
  }(e.BitcoinNetworkType || (e.BitcoinNetworkType = {})), function(t) {
    t[t.PARSE_ERROR = -32700] = "PARSE_ERROR", t[t.INVALID_REQUEST = -32600] = "INVALID_REQUEST", t[t.METHOD_NOT_FOUND = -32601] = "METHOD_NOT_FOUND", t[t.INVALID_PARAMS = -32602] = "INVALID_PARAMS", t[t.INTERNAL_ERROR = -32603] = "INTERNAL_ERROR", t[t.USER_REJECTION = -32e3] = "USER_REJECTION", t[t.METHOD_NOT_SUPPORTED = -32001] = "METHOD_NOT_SUPPORTED";
  }(e.RpcErrorCode || (e.RpcErrorCode = {}));
})(o2);
(function(e) {
  var t = be && be.__createBinding || (Object.create ? function(n, o, i, s) {
    s === void 0 && (s = i);
    var a = Object.getOwnPropertyDescriptor(o, i);
    (!a || ("get" in a ? !o.__esModule : a.writable || a.configurable)) && (a = { enumerable: !0, get: function() {
      return o[i];
    } }), Object.defineProperty(n, s, a);
  } : function(n, o, i, s) {
    s === void 0 && (s = i), n[s] = o[i];
  }), r = be && be.__exportStar || function(n, o) {
    for (var i in n) i !== "default" && !Object.prototype.hasOwnProperty.call(o, i) && t(o, n, i);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), r(Fv, e), r(qv, e), r(Xv, e), r(Jv, e), r(e2, e), r(Jr, e), r(r2, e), r(o2, e);
})(Zs);
const ZR = /* @__PURE__ */ wE(Zs), { signMessage: XR, sendBtcTransaction: YR } = ZR, JR = "ORANGE_CONNECTED_WALLET_STATE";
class QR extends Yr {
  constructor() {
    super(...arguments);
    oe(this, "observer");
    oe(this, "$valueStore", _i(
      JR,
      {
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }
    ));
    oe(this, "removeSubscriber");
  }
  get library() {
    var r;
    return (r = window == null ? void 0 : window.OrangeWalletProviders) == null ? void 0 : r.OrangeBitcoinProvider;
  }
  get network() {
    return this.$network.get();
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of Co)
      n === "balance" && this.$store.setKey(n, BigInt(r[n])), this.$store.setKey(n, r[n]);
    this.$store.setKey(
      "accounts",
      [r.address, r.paymentAddress].filter(Boolean)
    );
  }
  watchStateChange(r, n, o) {
    vi(Ko, r, o, this.$valueStore);
  }
  initialize() {
    var r;
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var o;
      (window == null ? void 0 : window.OrangeBitcoinProvider) && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Ko]: !0
      }), (o = this.observer) == null || o.disconnect());
    }), (r = this.observer) == null || r.observe(document, { childList: !0, subtree: !0 })), Or(this.$store, ["provider"], (n) => {
      n.provider !== Ko ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    });
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    const { address: n, paymentAddress: o } = this.$valueStore.get();
    try {
      if (n) {
        this.restorePersistedValues(), jn(o, this.network).then((a) => {
          this.$store.setKey("balance", a);
        });
        return;
      }
      let i = Af(this.network || Ce);
      const s = {
        payload: {
          purposes: ["ordinals", "payment"],
          message: "Address for receiving Ordinals and payments",
          network: {
            type: i
          }
        },
        onFinish: (a) => {
          const c = vp(a.addresses), u = Ep(a.addresses);
          if (!c || !(u != null && u.address))
            throw new Error("Could not find addresses");
          c && u && (this.$store.setKey("provider", Ko), this.$store.setKey("address", c.address), this.$store.setKey("paymentAddress", u.address)), this.$store.setKey("publicKey", String(c.publicKey)), this.$store.setKey(
            "paymentPublicKey",
            String(u.publicKey)
          );
        },
        onCancel: () => {
          throw new Error(`User canceled lasereyes to ${Ko} wallet`);
        }
      };
      await Zs.getAddress(s), this.$store.setKey("connected", !0);
    } catch (i) {
      throw i;
    }
  }
  async getNetwork() {
    const { address: r } = this.$store.get();
    return r.slice(0, 1) === "t" && [tt, Ht, Ft, Lt].includes(this.network) ? this.network : Ce;
  }
  async sendBTC(r, n) {
    let o = "";
    const i = {
      payload: {
        network: {
          type: Af(this.network)
        },
        recipients: [
          {
            address: r,
            amountSats: BigInt(n)
          }
        ],
        senderAddress: this.$store.get().paymentAddress
      },
      onFinish: (s) => {
        o = s;
      },
      onCancel: () => {
        throw new Error("User canceled the request");
      }
    };
    return await YR(i), o;
  }
  async signMessage(r, n) {
    let o = "";
    const i = (n == null ? void 0 : n.toSignAddress) || this.$store.get().paymentAddress, s = {
      payload: {
        network: {
          type: Af(this.network)
        },
        address: i,
        message: r
      },
      onFinish: (a) => {
        o = a;
      },
      onCancel: () => {
        throw new Error("User canceled the request");
      }
    };
    return await XR(s), o;
  }
  async signPsbt(r, n, o, i, s) {
    try {
      const a = Qe.fromBase64(String(o), {
        network: mt(this.network)
      }), c = this.$store.get().address, u = this.$store.get().paymentAddress, f = a.data.inputs;
      let l = {};
      const d = {
        [c]: []
      }, m = {
        [u]: []
      };
      let g = 0;
      for await (let k of f) {
        if (k.witnessUtxo === void 0)
          m[u].push(Number(g));
        else {
          const { script: S } = k.witnessUtxo, I = ka(
            S,
            mt(this.network)
          );
          I === u ? m[u].push(Number(g)) : I === c && d[c].push(Number(g));
        }
        g++;
      }
      d[c].length > 0 && (l = { ...l, ...d }), m[u].length > 0 && (l = { ...l, ...m });
      let y, b, E, x;
      const w = await Zs.request("signPsbt", {
        psbt: o,
        broadcast: !!s,
        signInputs: l
      });
      if (w.status === "success")
        x = Qe.fromBase64(w.result.psbt, {
          network: mt(this.network)
        }), y = w.result.txid;
      else
        throw w.error.code === Zs.RpcErrorCode.USER_REJECTION ? new Error("User canceled the request") : new Error("Error signing psbt");
      if (!x)
        throw new Error("Error signing psbt");
      return i && !y ? (x.finalizeAllInputs(), b = x.toHex(), E = x.toBase64()) : (b = x.toHex(), E = x.toBase64()), {
        signedPsbtHex: b,
        signedPsbtBase64: E,
        txId: y
      };
    } catch (a) {
      throw console.error(a), a;
    }
  }
}
const e7 = "OKX_CONNECTED_WALLET_STATE";
class t7 extends Yr {
  constructor() {
    super(...arguments);
    oe(this, "observer");
    oe(this, "$valueStore", _i(
      e7,
      {
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }
    ));
    oe(this, "removeSubscriber");
  }
  get library() {
    var n, o;
    let r;
    return this.network === tt || this.network === Ht || this.network === Ft || this.network === Lt ? r = (n = window == null ? void 0 : window.okxwallet) == null ? void 0 : n.bitcoinTestnet : (this.network === Ce || this.network === Br) && (r = (o = window == null ? void 0 : window.okxwallet) == null ? void 0 : o.bitcoin), r;
  }
  get network() {
    return this.$network.get();
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of Co)
      n === "balance" && this.$store.setKey(n, BigInt(r[n])), this.$store.setKey(n, r[n]);
    this.$store.setKey(
      "accounts",
      [r.address, r.paymentAddress].filter(Boolean)
    );
  }
  watchStateChange(r, n, o) {
    vi(Ds, r, o, this.$valueStore);
  }
  initialize() {
    var r;
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var o;
      this.library && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Ds]: !0
      }), (o = this.observer) == null || o.disconnect());
    }), (r = this.observer) == null || r.observe(document, { childList: !0, subtree: !0 })), Or(this.$store, ["provider"], (n) => {
      n.provider !== Ds ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    });
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    const { address: n, paymentAddress: o } = this.$valueStore.get();
    if (n)
      if (n.startsWith("tb1") && vs(this.network))
        this.disconnect();
      else {
        this.restorePersistedValues(), jn(o, this.network).then((i) => {
          this.$store.setKey("balance", i);
        });
        return;
      }
    try {
      const i = await this.library.connect();
      if (!i) throw new Error("No accounts found");
      this.$store.setKey("address", i.address), this.$store.setKey("paymentAddress", i.address), this.$store.setKey("publicKey", i.publicKey), this.$store.setKey("paymentPublicKey", i.publicKey), this.$store.setKey("accounts", [i]);
    } catch (i) {
      throw i;
    }
  }
  async requestAccounts() {
    const r = this.library, n = this.network;
    return n === tt || n === Ht || n === Lt ? await r.connect() : await r.requestAccounts();
  }
  async getNetwork() {
    const { address: r } = this.$store.get(), n = this.network;
    if (r.slice(0, 1) === "t")
      return n === tt ? tt : n === Ht ? Ht : n === Ft ? Ft : n === Lt ? Lt : tt;
    const o = await this.library.getNetwork();
    return C5(o);
  }
  async getPublicKey() {
    const r = this.library;
    return await (r == null ? void 0 : r.getPublicKey());
  }
  async getInscriptions(r, n) {
    return await this.library.getInscriptions(r, n);
  }
  async sendBTC(r, n) {
    const i = await this.library.sendBitcoin(r, n);
    if (!i) throw new Error("Transaction failed");
    return i;
  }
  async signMessage(r, n) {
    const o = this.library, i = (n == null ? void 0 : n.protocol) === Ma ? ml : n == null ? void 0 : n.protocol;
    return await (o == null ? void 0 : o.signMessage(r, i));
  }
  async signPsbt(r, n, o, i, s) {
    const c = await this.library.signPsbt(n, {
      autoFinalized: i
    }), u = Qe.fromHex(c);
    if (i && s) {
      const f = await this.pushPsbt(c);
      return {
        signedPsbtHex: u.toHex(),
        signedPsbtBase64: u.toBase64(),
        txId: f
      };
    }
    return {
      signedPsbtHex: u.toHex(),
      signedPsbtBase64: u.toBase64(),
      txId: void 0
    };
  }
}
const r7 = "MAGIC_EDEN_CONNECTED_WALLET_STATE";
class n7 extends Yr {
  constructor() {
    super(...arguments);
    oe(this, "observer");
    oe(this, "$valueStore", _i(
      r7,
      {
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }
    ));
    oe(this, "removeSubscriber");
  }
  get library() {
    var r;
    return (r = window == null ? void 0 : window.magicEden) == null ? void 0 : r.bitcoin;
  }
  get network() {
    return this.$network.get();
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of Co) {
      if (n === "balance") {
        this.$store.setKey(n, BigInt(r[n]));
        continue;
      }
      this.$store.setKey(n, r[n]);
    }
    this.$store.setKey(
      "accounts",
      [r.address, r.paymentAddress].filter(Boolean)
    );
  }
  watchStateChange(r, n, o) {
    vi(
      vo,
      r,
      o,
      this.$valueStore
    );
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var n, o;
      ((n = window == null ? void 0 : window.magicEden) == null ? void 0 : n.bitcoin) && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [vo]: !0
      }), (o = this.observer) == null || o.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Or(this.$store, ["provider"], (r) => {
      r.provider !== vo ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    });
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    const { address: n, paymentAddress: o } = this.$valueStore.get();
    try {
      if (n)
        if (n.startsWith("tb1") && vs(this.network))
          this.disconnect();
        else {
          jn(o, this.network).then((a) => {
            this.$store.setKey("balance", a);
          }), this.restorePersistedValues();
          return;
        }
      if (_p(this.network))
        throw new Error(`${this.network} is not supported by ${vo}`);
      let i = Nc(this.network || Ce);
      await Dv({
        getProvider: async () => this.library,
        payload: {
          purposes: ["ordinals", "payment"],
          message: "Connecting with lasereyes",
          network: {
            type: i
          }
        },
        onFinish: (a) => {
          const c = vp(a.addresses), u = Ep(a.addresses);
          if (!c || !u)
            throw new Error("No address found");
          c && u && (this.$store.setKey("address", c.address), this.$store.setKey("paymentAddress", u.address), this.$store.setKey("accounts", [
            c.address,
            u.address
          ])), this.$store.setKey(
            "publicKey",
            String(a.addresses[0].publicKey)
          ), this.$store.setKey(
            "paymentPublicKey",
            String(a.addresses[1].publicKey)
          );
        },
        onCancel: () => {
          throw new Error(`User canceled lasereyes to ${vo} wallet`);
        },
        onError: (a) => {
          throw new Error(`Can't lasereyes to ${vo} wallet`);
        }
      });
    } catch (i) {
      throw i;
    }
  }
  async sendBTC(r, n) {
    let o;
    if (await bR({
      getProvider: async () => this.library,
      payload: {
        network: {
          type: Nc(this.network)
        },
        recipients: [
          {
            address: r,
            amountSats: BigInt(n)
          }
        ],
        senderAddress: this.$store.get().paymentAddress
      },
      onFinish: (i) => {
        o = i;
      },
      onCancel: () => {
        throw console.error("Request canceled"), new Error("User canceled the request");
      }
    }), !o) throw new Error("Error sending BTC");
    return o.txid;
  }
  async signMessage(r, n) {
    try {
      const o = (n == null ? void 0 : n.toSignAddress) || this.$store.get().paymentAddress;
      let i = "";
      return await gR({
        getProvider: async () => this.library,
        payload: {
          network: {
            type: Lv.Mainnet
          },
          address: o,
          message: r,
          protocol: (n == null ? void 0 : n.protocol) === Ma ? hi.ECDSA : hi.BIP322
        },
        onFinish: (s) => {
          i = s;
        },
        onCancel: () => {
          throw console.error("Request canceled"), new Error("User canceled the request");
        }
      }), i;
    } catch (o) {
      throw o;
    }
  }
  async signPsbt(r, n, o, i, s) {
    console.log("signPsbt", o, i, s);
    const { address: a, paymentAddress: c } = this.$store.get(), u = Qe.fromBase64(String(o), {
      network: mt(this.network)
    }), f = u.data.inputs, l = [], d = {
      address: a,
      signingIndexes: []
    }, m = {
      address: c,
      signingIndexes: []
    };
    let g = 0;
    for await (let S of f) {
      const { script: I } = S.witnessUtxo, T = ka(
        I,
        mt(this.network)
      );
      T === c ? (m.signingIndexes.push(Number(g)), S.sighashType && (console.log("Updating sigHash for paymentsAddressData"), m.sigHash = S.sighashType)) : T === a && (d.signingIndexes.push(Number(g)), S.sighashType && (console.log("Updating sigHash for ordinalAddressData"), d.sigHash = S.sighashType)), g++;
    }
    d.signingIndexes.length > 0 && l.push(d), m.signingIndexes.length > 0 && l.push(m);
    let y, b, E, x;
    const w = Nc(this.network), k = {
      getProvider: async () => this.library,
      payload: {
        network: {
          type: w
        },
        message: "Sign Transaction",
        psbtBase64: u.toBase64(),
        broadcast: s,
        inputsToSign: l
      },
      onFinish: async (S) => {
        S.psbtBase64 && (x = Qe.fromBase64(String(S.psbtBase64), {
          network: mt(this.network)
        }), b = x.toHex(), E = x.toBase64());
      },
      onCancel: () => {
        throw console.log("Canceled"), new Error("User canceled the request");
      },
      onError: (S) => {
        throw console.log("error", S), S;
      }
    };
    if (await yR(k), !x)
      throw new Error("signature failed");
    return i || s ? (x.finalizeAllInputs(), {
      signedPsbtHex: x.toHex(),
      signedPsbtBase64: E,
      txId: y
    }) : {
      signedPsbtHex: b,
      signedPsbtBase64: E,
      txId: y
    };
  }
}
class o7 extends Yr {
  constructor() {
    super(...arguments);
    oe(this, "observer");
  }
  get library() {
    var r;
    return (r = window == null ? void 0 : window.phantom) == null ? void 0 : r.bitcoin;
  }
  get network() {
    return this.$network.get();
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var r;
      this.library && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Fo]: !0
      }), (r = this.observer) == null || r.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Or(this.$store, ["provider"], (r) => {
      r.provider === Fo && this.library.requestAccounts().then((n) => {
        this.handleAccountsChanged(n);
      });
    });
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  handleAccountsChanged(r) {
    if (!r.length) {
      this.parent.disconnect();
      return;
    }
    this.$store.get().accounts[0] !== r[0] && (this.$store.setKey("accounts", r), r.length > 0 ? this.parent.connect(Fo) : this.parent.disconnect());
  }
  async connect(r) {
    if (!this.library) throw new Error("Phantom isn't installed");
    if (_p(this.network))
      throw new Error(`${this.network} is not supported by ${Fo}`);
    const n = await this.library.requestAccounts();
    if (!n) throw new Error("No accounts found");
    this.$store.setKey("accounts", n);
    const o = n.find(
      (s) => s.purpose === "ordinals"
    ), i = n.find(
      (s) => s.purpose === "payment"
    );
    this.$store.setKey("address", o.address), this.$store.setKey("paymentAddress", i.address), this.$store.setKey("publicKey", o.publicKey), this.$store.setKey("paymentPublicKey", i.publicKey), this.$store.setKey("provider", Fo), this.$store.setKey("connected", !0);
  }
  async getNetwork() {
    return this.$store.get().address.slice(0, 1) === "t" ? tt : Ce;
  }
  async sendBTC(r, n) {
    const { psbtHex: o } = await xp(
      this.$store.get().address,
      this.$store.get().paymentAddress,
      r,
      n,
      this.$store.get().paymentPublicKey,
      this.network,
      7
    ), i = await this.signPsbt("", o, "", !0, !0);
    if (!i) throw new Error("Error sending BTC");
    return i.txId;
  }
  async signMessage(r, n) {
    var u;
    if ((n == null ? void 0 : n.protocol) === Ma)
      throw new Error("ECDSA signing is not supported by Phantom");
    const o = new TextEncoder().encode(r), i = new Uint8Array(o), s = (n == null ? void 0 : n.toSignAddress) || this.$store.get().paymentAddress, a = await ((u = this.library) == null ? void 0 : u.signMessage(s, i)), c = String.fromCharCode(...a.signature);
    return btoa(c);
  }
  async signPsbt(r, n, o, i, s) {
    const { address: a, paymentAddress: c } = this.$store.get(), f = Qe.fromHex(String(n), {
      network: mt(this.network)
    }).data.inputs, l = [], d = {
      address: a,
      signingIndexes: []
    }, m = {
      address: c,
      signingIndexes: []
    };
    let g = 0;
    for await (let E of f) {
      const { script: x } = E.witnessUtxo, w = ka(
        x,
        mt(this.network)
      );
      w === c ? m.signingIndexes.push(Number(g)) : w === a && d.signingIndexes.push(Number(g)), g++;
    }
    d.signingIndexes.length > 0 && l.push(d), m.signingIndexes.length > 0 && l.push(m);
    const y = await this.library.signPSBT(
      eU(n),
      {
        inputsToSign: l
      }
    ), b = Qe.fromBuffer(y);
    if (i && l.forEach((E) => {
      E.signingIndexes.forEach((x) => {
        b.finalizeInput(x);
      });
    }), s) {
      const E = await this.pushPsbt(b.toHex());
      return {
        signedPsbtHex: b.toHex(),
        signedPsbtBase64: b.toBase64(),
        txId: E
      };
    }
    return {
      signedPsbtHex: b.toHex(),
      signedPsbtBase64: b.toBase64(),
      txId: void 0
    };
  }
  async requestAccounts() {
    return await this.library.requestAccounts();
  }
}
class i7 extends Yr {
  constructor() {
    super(...arguments);
    oe(this, "observer");
  }
  get library() {
    return window == null ? void 0 : window.opnet;
  }
  get network() {
    return this.$network.get();
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var r;
      this.library && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Vo]: !0
      }), (r = this.observer) == null || r.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Or(this.$store, ["provider"], (r) => {
      if (r.provider !== Vo) {
        this.removeListeners();
        return;
      }
      this.library.getAccounts().then((n) => {
        this.handleAccountsChanged(n);
      }), this.addListeners();
    });
  }
  addListeners() {
    this.library.on("accountsChanged", this.handleAccountsChanged.bind(this)), this.library.on("networkChanged", this.handleNetworkChanged.bind(this));
  }
  removeListeners() {
    var r, n;
    this.library && ((r = this.library) == null || r.removeListener(
      "accountsChanged",
      this.handleAccountsChanged.bind(this)
    ), (n = this.library) == null || n.removeListener(
      "networkChanged",
      this.handleNetworkChanged.bind(this)
    ));
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect(), this.removeListeners();
  }
  handleAccountsChanged(r) {
    if (!r.length) {
      this.parent.disconnect();
      return;
    }
    this.$store.get().accounts[0] !== r[0] && (this.$store.setKey("accounts", r), r.length > 0 ? this.parent.connect(Vo) : this.parent.disconnect());
  }
  handleNetworkChanged(r) {
    const n = vu(r);
    this.network !== n && this.switchNetwork(n), this.parent.connect(Vo);
  }
  async connect(r) {
    if (!this.library) throw new Error("OP_NET isn't installed");
    const n = await this.library.requestAccounts();
    if (!n) throw new Error("No accounts found");
    const o = await this.library.getPublicKey();
    if (!o) throw new Error("No public key found");
    this.$store.setKey("accounts", n), this.$store.setKey("address", n[0]), this.$store.setKey("paymentAddress", n[0]), this.$store.setKey("publicKey", o), this.$store.setKey("paymentPublicKey", o), this.$store.setKey("provider", Vo), await this.getNetwork().then((i) => {
      var s;
      ((s = this.config) == null ? void 0 : s.network) !== i && this.switchNetwork(i);
    }), this.$store.setKey("connected", !0);
  }
  async getNetwork() {
    var n;
    const r = await ((n = this.library) == null ? void 0 : n.getChain());
    return r ? vu(r.enum) : this.network;
  }
  async sendBTC(r, n) {
    var i;
    const o = await ((i = this.library) == null ? void 0 : i.sendBitcoin(r, n));
    if (!o) throw new Error("Transaction failed");
    return o;
  }
  async signMessage(r, n) {
    var i;
    const o = (n == null ? void 0 : n.protocol) === yp ? ml : n == null ? void 0 : n.protocol;
    return await ((i = this.library) == null ? void 0 : i.signMessage(r, o));
  }
  async signPsbt(r, n, o, i, s) {
    var u;
    const a = await ((u = this.library) == null ? void 0 : u.signPsbt(n, {
      autoFinalized: i
    })), c = Qe.fromHex(a);
    if (i && s) {
      const f = await this.pushPsbt(a);
      return {
        signedPsbtHex: c.toHex(),
        signedPsbtBase64: c.toBase64(),
        txId: f
      };
    }
    return {
      signedPsbtHex: c.toHex(),
      signedPsbtBase64: c.toBase64(),
      txId: void 0
    };
  }
  async getPublicKey() {
    var r;
    return await ((r = this.library) == null ? void 0 : r.getPublicKey());
  }
  async getBalance() {
    return (await this.library.getBalance()).total;
  }
  async getInscriptions(r, n) {
    return await this.library.getInscriptions(r, n);
  }
  async requestAccounts() {
    return await this.library.requestAccounts();
  }
  async switchNetwork(r) {
    var o;
    const n = e1(r);
    await ((o = this.library) == null ? void 0 : o.switchChain(n)), this.$network.set(r);
  }
}
const Ic = {};
function Hs(e) {
  if (Ic[e])
    return console.warn(`Multiple requests for "${e}" detected`), Ic[e];
  const t = new Promise((r) => {
    const n = console.log;
    console.log = (...o) => {
      o.length > 0 && typeof o[0] == "string" && (console.log = n, Ic[e] = void 0, r(o[0]));
    }, n(
      `Please log a value for "${e}" using 
 console.log('<your-value>') 
 to continue.`
    );
  });
  return Ic[e] = t, t;
}
class s7 {
  async requestAccounts() {
    const t = await Hs("address");
    if (!t) throw new Error("No address provided");
    const r = await Hs("paymentAddress");
    if (!r) throw new Error("No payment address provided");
    return [t, r];
  }
  async signMessage(t) {
    return console.log("sign this message in sparrow wallet:"), console.log(""), console.log(`${t}`), console.log(""), await Hs("message to sign");
  }
  async signPsbt(t) {
    return console.log("sign this in sparrow wallet:"), console.log(""), console.log(`${t}`), console.log(""), await Hs("signed psbt hex");
  }
  async getPublicKey() {
    const t = await Hs("publicKey");
    if (!t) throw new Error("No public key provided");
    return t;
  }
  // TODO: Implement network switching between mainnet and testnet
  async getNetwork() {
    return "mainnet";
  }
  async switchNetwork(t) {
  }
}
const a7 = "SPARROW_CONNECTED_WALLET_STATE";
class c7 extends Yr {
  constructor() {
    super(...arguments);
    oe(this, "observer");
    oe(this, "$valueStore", _i(
      a7,
      {
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }
    ));
    oe(this, "removeSubscriber");
  }
  get library() {
    return window == null ? void 0 : window.SparrowWalletProvider;
  }
  get network() {
    return this.$network.get();
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var r;
      this.library || (window.SparrowWalletProvider = new s7()), this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Li]: !0
      }), (r = this.observer) == null || r.disconnect();
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Or(this.$store, ["provider"], (r) => {
      r.provider !== Li ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    });
  }
  watchStateChange(r, n, o) {
    vi(
      Li,
      r,
      o,
      this.$valueStore
    );
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of Co)
      n === "balance" && this.$store.setKey(n, BigInt(r[n])), this.$store.setKey(n, r[n]);
    this.$store.setKey(
      "accounts",
      [r.address, r.paymentAddress].filter(Boolean)
    );
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    try {
      const { address: n, paymentAddress: o } = this.$valueStore.get();
      if (n && o)
        if (n.startsWith("tb1") && vs(this.network))
          this.disconnect();
        else {
          this.restorePersistedValues();
          return;
        }
      if (!this.library) throw new Error("Sparrow wallet isn't supported");
      const i = await this.library.requestAccounts();
      if (!i) throw new Error("No accounts found");
      await this.getNetwork().then((a) => {
        this.network !== a && this.switchNetwork(this.network);
      });
      const s = await this.library.getPublicKey();
      if (!s) throw new Error("No public key found");
      this.$store.setKey("accounts", i), this.$store.setKey("address", i[0]), this.$store.setKey("paymentAddress", i[1]), this.$store.setKey("publicKey", s), this.$store.setKey("paymentPublicKey", s);
    } catch (n) {
      throw console.error("Error during sparrow connect:", n), n;
    }
  }
  async getNetwork() {
    return this.network;
  }
  async sendBTC(r, n) {
    const { psbtBase64: o } = await xp(
      this.$store.get().address,
      this.$store.get().paymentAddress,
      r,
      n,
      this.$store.get().paymentPublicKey,
      this.network,
      7
    ), i = await this.library.signPsbt(o);
    if (!i) throw new Error("No signed PSBT provided");
    const s = await this.pushPsbt(i);
    if (!s) throw new Error("send failed, no txid returned");
    return s;
  }
  async signMessage(r) {
    return await this.library.signMessage(r);
  }
  async signPsbt(r, n, o, i, s) {
    const a = Qe.fromBase64(o), c = await this.library.signPsbt(o);
    if (i && s) {
      const u = await this.pushPsbt(c);
      return {
        signedPsbtHex: c,
        signedPsbtBase64: a.toBase64(),
        txId: u
      };
    }
    return {
      signedPsbtHex: c,
      signedPsbtBase64: a.toBase64(),
      txId: void 0
    };
  }
  async getPublicKey() {
    const r = await this.library.getPublicKey();
    return this.$store.setKey("publicKey", r), r;
  }
  async getBalance() {
    const r = await jn(
      this.$store.get().paymentAddress,
      this.network
    );
    return this.$store.setKey("balance", r), r.toString();
  }
  async requestAccounts() {
    return await this.connect(Li), this.$store.get().accounts;
  }
}
class RC {
  constructor(t, r) {
    oe(this, "$store");
    oe(this, "$network");
    oe(this, "$providerMap");
    oe(this, "disposed", !1);
    this.config = r, this.$store = t.$store, this.$network = t.$network, d2(this.$store), this.$providerMap = {
      [Ms]: new TR(t, this, r),
      [vo]: new n7(t, this, r),
      [Ds]: new t7(t, this, r),
      [Vo]: new i7(t, this, r),
      [Ko]: new QR(t, this, r),
      [js]: new AR(t, this, r),
      [Fo]: new o7(t, this, r),
      [Li]: new c7(t, this, r),
      [Ci]: new J$(t, this, r),
      [Do]: new xR(t, this, r),
      [Hi]: new _R(t, this, r)
    };
  }
  dispose() {
    this.disposed = !0, Object.values(this.$providerMap).forEach((t) => t == null ? void 0 : t.dispose());
  }
  initialize() {
    this.$network.listen(this.watchNetworkChange.bind(this)), Or(this.$store, ["isInitializing"], (t, r) => {
      if (!this.disposed && t.isInitializing !== r.isInitializing)
        return this.handleIsInitializingChanged(t.isInitializing);
    }), this.config && this.config.network && (this.$network.set(this.config.network), this.getNetwork().then((t) => {
      try {
        this.config.network !== t && this.switchNetwork(this.config.network);
      } catch {
        this.disconnect();
      }
    })), Q$(() => this.$store.setKey("isInitializing", !1));
  }
  handleIsInitializingChanged(t) {
    if (typeof window < "u" && typeof localStorage < "u" && !t) {
      const r = localStorage == null ? void 0 : localStorage.getItem(
        Ml
      );
      r && this.connect(r);
    }
  }
  async connect(t) {
    if (this.disposed) {
      console.warn("Client disposed, cannot connect");
      return;
    }
    this.$store.setKey("isConnecting", !0);
    try {
      if (localStorage == null || localStorage.setItem(Ml, t), !this.$providerMap[t])
        throw new Error("Unsupported wallet provider");
      const r = this.$providerMap[t];
      await (r == null ? void 0 : r.connect(t)), this.$store.setKey("connected", !0), this.$store.setKey("provider", t);
    } catch (r) {
      throw console.error("Error during connect:", r), this.$store.setKey("isConnecting", !1), this.disconnect(), r;
    } finally {
      this.$store.setKey("isConnecting", !1);
    }
  }
  async requestAccounts() {
    var t;
    if (!this.$store.get().provider)
      throw new Error("No wallet provider connected");
    try {
      return await ((t = this.$providerMap[this.$store.get().provider]) == null ? void 0 : t.requestAccounts());
    } catch (r) {
      throw r instanceof Error && r.message.toLowerCase().includes("not implemented") ? new Error("The connected wallet doesn't support this method") : r;
    }
  }
  disconnect() {
    this.$store.set({
      provider: void 0,
      address: "",
      paymentAddress: "",
      publicKey: "",
      paymentPublicKey: "",
      balance: void 0,
      accounts: [],
      connected: !1,
      isConnecting: !1,
      isInitializing: !1,
      hasProvider: this.$store.get().hasProvider
    }), localStorage == null || localStorage.removeItem(Ml);
  }
  async switchNetwork(t) {
    var r;
    try {
      this.$store.get().provider && await ((r = this.$providerMap[this.$store.get().provider]) == null ? void 0 : r.switchNetwork(
        t
      ));
    } catch (n) {
      throw n instanceof Error && n.message.toLowerCase().includes("not implemented") ? (this.disconnect(), new Error(
        "The connected wallet doesn't support programmatic network changes.."
      )) : n;
    }
  }
  watchNetworkChange() {
    this.$store.setKey("balance", void 0);
  }
  async getNetwork() {
    var t;
    return this.$store.get().provider && this.$providerMap[this.$store.get().provider] ? await ((t = this.$providerMap[this.$store.get().provider]) == null ? void 0 : t.getNetwork()) : this.$network.get();
  }
  async sendBTC(t, r) {
    var n;
    if (r <= 0) throw new Error("Amount must be greater than 0");
    if (!Number.isInteger(r)) throw new Error("Amount must be an integer");
    if (!this.$store.get().provider) throw new Error("No wallet connected");
    if (this.$providerMap[this.$store.get().provider])
      try {
        return await ((n = this.$providerMap[this.$store.get().provider]) == null ? void 0 : n.sendBTC(
          t,
          r
        ));
      } catch (o) {
        throw o instanceof Error && o.message.toLowerCase().includes("not implemented") ? new Error(
          "The connected wallet doesn't support sending BTC..."
        ) : o;
      }
  }
  async signMessage(t, r) {
    var o;
    let n = {};
    if (typeof r == "string" ? n = { toSignAddress: r } : r && (n = r), !!this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((o = this.$providerMap[this.$store.get().provider]) == null ? void 0 : o.signMessage(t, n));
      } catch (i) {
        throw i instanceof Error && i.message.toLowerCase().includes("not implemented") ? new Error(
          "The connected wallet doesn't support message signing..."
        ) : i;
      }
  }
  async signPsbt(t, r = !1, n = !1) {
    var s;
    let o, i;
    if (!t) throw new Error("No PSBT provided");
    if (M$(t))
      i = Qe.fromHex(t).toBase64(), o = t;
    else if (j$(t))
      i = t, o = Qe.fromBase64(t).toHex();
    else
      throw new Error("Invalid PSBT format");
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((s = this.$providerMap[this.$store.get().provider]) == null ? void 0 : s.signPsbt(t, o, i, r, n));
      } catch (a) {
        throw a instanceof Error && a.message.toLowerCase().includes("not implemented") ? new Error(
          "The connected wallet doesn't support PSBT signing..."
        ) : a;
      }
    else
      throw new Error("No wallet provider connected");
  }
  async pushPsbt(t) {
    var r;
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((r = this.$providerMap[this.$store.get().provider]) == null ? void 0 : r.pushPsbt(
          t
        ));
      } catch (n) {
        throw n instanceof Error && n.message.toLowerCase().includes("not implemented") ? new Error(
          "The connected wallet doesn't support PSBT signing..."
        ) : n;
      }
  }
  async inscribe(t, r) {
    var n;
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((n = this.$providerMap[this.$store.get().provider]) == null ? void 0 : n.inscribe(
          t,
          r
        ));
      } catch (o) {
        throw o instanceof Error && o.message.toLowerCase().includes("not implemented") ? new Error(
          "The connected wallet doesn't support inscribing..."
        ) : o;
      }
  }
  async send(t, r) {
    var n;
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((n = this.$providerMap[this.$store.get().provider]) == null ? void 0 : n.send(
          t,
          r
        ));
      } catch (o) {
        throw o instanceof Error && o.message.toLowerCase().includes("not implemented") ? new Error(
          "The connected wallet doesn't support sending stuff..."
        ) : o;
      }
  }
  async getPublicKey() {
    var t;
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((t = this.$providerMap[this.$store.get().provider]) == null ? void 0 : t.getPublicKey());
      } catch (r) {
        throw r instanceof Error && r.message.toLowerCase().includes("not implemented") ? new Error("The connected wallet doesn't support getPublicKey") : r;
      }
  }
  async getBalance() {
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        const t = await this.$providerMap[this.$store.get().provider].getBalance();
        return this.$store.setKey("balance", BigInt(t)), t;
      } catch (t) {
        throw t instanceof Error && t.message.toLowerCase().includes("not implemented") ? new Error("The connected wallet doesn't support getBalance") : t;
      }
  }
  async getMetaBalances(t) {
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        if (!t)
          throw new Error("No protocol provided");
        return await this.$providerMap[this.$store.get().provider].getMetaBalances(
          t
        );
      } catch (r) {
        throw r instanceof Error && r.message.toLowerCase().includes("not implemented") ? new Error("The connected wallet doesn't support getBalance") : r;
      }
  }
  async getInscriptions(t, r) {
    var n;
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((n = this.$providerMap[this.$store.get().provider]) == null ? void 0 : n.getInscriptions(t, r));
      } catch (o) {
        throw o instanceof Error && o.message.toLowerCase().includes("not implemented") ? new Error("The connected wallet doesn't support this method") : o;
      }
  }
}
export {
  BC as ALKANES,
  pC as APPLICATION_ATOM_XML,
  gC as APPLICATION_FORM_URLENCODED,
  fC as APPLICATION_GZIP,
  aC as APPLICATION_JAVASCRIPT,
  sC as APPLICATION_JSON,
  mC as APPLICATION_OCTET_STREAM,
  uC as APPLICATION_PDF,
  hC as APPLICATION_RSS_XML,
  dC as APPLICATION_XHTML_XML,
  cC as APPLICATION_XML,
  lC as APPLICATION_ZIP,
  kC as AUDIO_MP3,
  IC as AUDIO_OGG,
  TC as AUDIO_WAV,
  yp as BIP322,
  ml as BIP322_SIMPLE,
  OC as BRC20,
  Sg as BTC,
  mc as CMDRUID_MAINNET,
  U5 as CMDRUID_SIGNET,
  ng as CMDRUID_TESTNET,
  Ma as ECDSA,
  Br as FRACTAL_MAINNET,
  Lt as FRACTAL_TESTNET,
  wC as IMAGE_GIF,
  xC as IMAGE_ICON,
  bC as IMAGE_JPEG,
  yC as IMAGE_PNG,
  vC as IMAGE_SVG_XML,
  EC as IMAGE_WEBP,
  Ms as LEATHER,
  Bd as LEATHER_MAINNET,
  Qw as LEATHER_TESTNET,
  Ml as LOCAL_STORAGE_DEFAULT_WALLET,
  RC as LaserEyesClient,
  vo as MAGIC_EDEN,
  Ce as MAINNET,
  PC as MULTIPART_FORM_DATA,
  Ds as OKX,
  N5 as OKX_MAINNET,
  $5 as OKX_TESTNET,
  Vo as OP_NET,
  Z7 as OP_WALLET_MAINNET,
  X7 as OP_WALLET_TESTNET,
  Ko as ORANGE,
  gc as ORANGE_MAINNET,
  Sf as ORANGE_TESTNET,
  js as OYL,
  h2 as P2PKH,
  f7 as P2PSH,
  qd as P2SH,
  p2 as P2SH_P2WPKH,
  Di as P2TR,
  Vf as P2WPKH,
  g2 as P2WSH,
  Fo as PHANTOM,
  Y7 as REGTEST,
  Ag as RUNES,
  Ft as SIGNET,
  Li as SPARROW,
  d7 as SUPPORTED_WALLETS,
  tt as TESTNET,
  Ht as TESTNET4,
  nC as TEXT_CSS,
  rC as TEXT_HTML,
  oC as TEXT_JAVASCRIPT,
  iC as TEXT_MARKDOWN,
  m$ as TEXT_PLAIN,
  Ci as UNISAT,
  Zw as UNISAT_FRACTAL_MAINNET,
  Xw as UNISAT_FRACTAL_TESTNET,
  Id as UNISAT_MAINNET,
  Ww as UNISAT_SIGNET,
  qw as UNISAT_TESTNET,
  Gw as UNISAT_TESTNET4,
  Fd as UNSUPPORTED_PROVIDER_METHOD_ERROR,
  _C as VIDEO_MP4,
  AC as VIDEO_OGG,
  SC as VIDEO_WEBM,
  Y$ as WALLET_NOT_INSTALLED_ERROR,
  Hi as WIZZ,
  Vs as WIZZ_MAINNET,
  Jw as WIZZ_SIGNET,
  Od as WIZZ_TESTNET,
  Yw as WIZZ_TESTNET4,
  Yr as WalletProvider,
  Do as XVERSE,
  Ls as XVERSE_MAINNET,
  W7 as XVERSE_NETWORK,
  B5 as XVERSE_SIGNET,
  Pd as XVERSE_TESTNET,
  $C as createConfig,
  NC as createStores,
  R5 as getCmDruidNetwork,
  J7 as getLeatherNetwork,
  tC as getNetworkForLeather,
  C5 as getNetworkForOkx,
  vu as getNetworkForUnisat,
  og as getNetworkForWizz,
  eC as getNetworkForXverse,
  Af as getOrangeNetwork,
  Nc as getSatsConnectNetwork,
  e1 as getUnisatNetwork,
  Q7 as getWizzNetwork
};
