"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mintMethane: function() { return /* binding */ mintMethane; }\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\nn // src/lib/api.ts\n;\nconst API_URL = \"http://localhost:3001\" || 0;\nasync function mintMethane(feeRate, userAddress) {\n    try {\n        // Step 1: Call backend to create PSBT\n        const response = await fetch(\"\".concat(API_URL, \"/api/create-mint-psbt\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                feeRate,\n                mintData: \"2,1,77\",\n                userAddress\n            })\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(\"Server error: \".concat(errorData.error || response.statusText));\n        }\n        const data = await response.json();\n        if (!data.success || !data.psbt) {\n            throw new Error(\"Server did not return a valid PSBT\");\n        }\n        // Step 2: Sign the PSBT with the wallet\n        if (!window.oyl || !window.oyl.bitcoin || typeof window.oyl.bitcoin.signPsbt !== \"function\") {\n            throw new Error(\"OYL wallet does not support PSBT signing. Please update your wallet.\");\n        }\n        // Convert PSBT from hex to base64 if needed\n        let psbtToSign = data.psbt;\n        if (data.format === \"hex\") {\n            console.log(\"Converting PSBT from hex to base64...\");\n            try {\n                // Create a Buffer from the hex string, then convert to base64\n                psbtToSign = Buffer.from(data.psbt, \"hex\").toString(\"base64\");\n                console.log(\"PSBT converted to base64 format\");\n            } catch (conversionError) {\n                console.error(\"Error converting PSBT format:\", conversionError);\n                throw new Error(\"Failed to convert PSBT format: \" + (conversionError instanceof Error ? conversionError.message : \"Format conversion error\"));\n            }\n        }\n        console.log(\"Requesting wallet to sign PSBT...\");\n        let signedPsbt;\n        try {\n            signedPsbt = await window.oyl.bitcoin.signPsbt(psbtToSign);\n            console.log(\"PSBT signed successfully\");\n        } catch (signError) {\n            console.error(\"Error signing PSBT:\", signError);\n            throw new Error(\"Failed to sign transaction: \" + (signError instanceof Error ? signError.message : \"User rejected or wallet error\"));\n        }\n        // Step 3: Broadcast the signed PSBT\n        if (!window.oyl.bitcoin || typeof window.oyl.bitcoin.pushPsbt !== \"function\") {\n            throw new Error(\"OYL wallet does not support transaction broadcasting. Please update your wallet.\");\n        }\n        console.log(\"Broadcasting signed transaction...\");\n        let txId;\n        try {\n            txId = await window.oyl.bitcoin.pushPsbt(signedPsbt);\n            console.log(\"Transaction broadcast successfully:\", txId);\n        } catch (broadcastError) {\n            console.error(\"Error broadcasting transaction:\", broadcastError);\n            throw new Error(\"Failed to broadcast transaction: \" + (broadcastError instanceof Error ? broadcastError.message : \"Network error\"));\n        }\n        return {\n            txId,\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error in mintMethane:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0lBQ0YsRUFBRSxPQUFPSCxPQUFPO1FBQ2RXLFFBQVFYLEtBQUssQ0FBQyx5QkFBeUJBO1FBQ3ZDLE1BQU1BO0lBQ1I7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvbGliL2FwaS50cz8yZmFiIl0sInNvdXJjZXNDb250ZW50IjpbIm4vLyBzcmMvbGliL2FwaS50c1xuY29uc3QgQVBJX1VSTCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtaW50TWV0aGFuZShmZWVSYXRlOiBudW1iZXIsIHVzZXJBZGRyZXNzOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICAvLyBTdGVwIDE6IENhbGwgYmFja2VuZCB0byBjcmVhdGUgUFNCVFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX1VSTH0vYXBpL2NyZWF0ZS1taW50LXBzYnRgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZmVlUmF0ZSxcbiAgICAgICAgbWludERhdGE6ICcyLDEsNzcnLFxuICAgICAgICB1c2VyQWRkcmVzc1xuICAgICAgfSlcbiAgICB9KTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2VydmVyIGVycm9yOiAke2Vycm9yRGF0YS5lcnJvciB8fCByZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgXG4gICAgaWYgKCFkYXRhLnN1Y2Nlc3MgfHwgIWRhdGEucHNidCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2VydmVyIGRpZCBub3QgcmV0dXJuIGEgdmFsaWQgUFNCVFwiKTtcbiAgICB9XG5cbiAgICAvLyBTdGVwIDI6IFNpZ24gdGhlIFBTQlQgd2l0aCB0aGUgd2FsbGV0XG4gICAgaWYgKCF3aW5kb3cub3lsIHx8ICF3aW5kb3cub3lsLmJpdGNvaW4gfHwgdHlwZW9mIHdpbmRvdy5veWwuYml0Y29pbi5zaWduUHNidCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT1lMIHdhbGxldCBkb2VzIG5vdCBzdXBwb3J0IFBTQlQgc2lnbmluZy4gUGxlYXNlIHVwZGF0ZSB5b3VyIHdhbGxldC5cIik7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCBQU0JUIGZyb20gaGV4IHRvIGJhc2U2NCBpZiBuZWVkZWRcbiAgICBsZXQgcHNidFRvU2lnbiA9IGRhdGEucHNidDtcbiAgICBpZiAoZGF0YS5mb3JtYXQgPT09IFwiaGV4XCIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiQ29udmVydGluZyBQU0JUIGZyb20gaGV4IHRvIGJhc2U2NC4uLlwiKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIEJ1ZmZlciBmcm9tIHRoZSBoZXggc3RyaW5nLCB0aGVuIGNvbnZlcnQgdG8gYmFzZTY0XG4gICAgICAgIHBzYnRUb1NpZ24gPSBCdWZmZXIuZnJvbShkYXRhLnBzYnQsICdoZXgnKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUFNCVCBjb252ZXJ0ZWQgdG8gYmFzZTY0IGZvcm1hdFwiKTtcbiAgICAgIH0gY2F0Y2ggKGNvbnZlcnNpb25FcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY29udmVydGluZyBQU0JUIGZvcm1hdDpcIiwgY29udmVyc2lvbkVycm9yKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGNvbnZlcnQgUFNCVCBmb3JtYXQ6IFwiICsgKGNvbnZlcnNpb25FcnJvciBpbnN0YW5jZW9mIEVycm9yID8gY29udmVyc2lvbkVycm9yLm1lc3NhZ2UgOiBcIkZvcm1hdCBjb252ZXJzaW9uIGVycm9yXCIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhcIlJlcXVlc3Rpbmcgd2FsbGV0IHRvIHNpZ24gUFNCVC4uLlwiKTtcbiAgICBsZXQgc2lnbmVkUHNidDtcbiAgICB0cnkge1xuICAgICAgc2lnbmVkUHNidCA9IGF3YWl0IHdpbmRvdy5veWwuYml0Y29pbi5zaWduUHNidChwc2J0VG9TaWduKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiUFNCVCBzaWduZWQgc3VjY2Vzc2Z1bGx5XCIpO1xuICAgIH0gY2F0Y2ggKHNpZ25FcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNpZ25pbmcgUFNCVDpcIiwgc2lnbkVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBzaWduIHRyYW5zYWN0aW9uOiBcIiArIChzaWduRXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IHNpZ25FcnJvci5tZXNzYWdlIDogXCJVc2VyIHJlamVjdGVkIG9yIHdhbGxldCBlcnJvclwiKSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFN0ZXAgMzogQnJvYWRjYXN0IHRoZSBzaWduZWQgUFNCVFxuICAgIGlmICghd2luZG93Lm95bC5iaXRjb2luIHx8IHR5cGVvZiB3aW5kb3cub3lsLmJpdGNvaW4ucHVzaFBzYnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9ZTCB3YWxsZXQgZG9lcyBub3Qgc3VwcG9ydCB0cmFuc2FjdGlvbiBicm9hZGNhc3RpbmcuIFBsZWFzZSB1cGRhdGUgeW91ciB3YWxsZXQuXCIpO1xuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZyhcIkJyb2FkY2FzdGluZyBzaWduZWQgdHJhbnNhY3Rpb24uLi5cIik7XG4gICAgbGV0IHR4SWQ7XG4gICAgdHJ5IHtcbiAgICAgIHR4SWQgPSBhd2FpdCB3aW5kb3cub3lsLmJpdGNvaW4ucHVzaFBzYnQoc2lnbmVkUHNidCk7XG4gICAgICBjb25zb2xlLmxvZyhcIlRyYW5zYWN0aW9uIGJyb2FkY2FzdCBzdWNjZXNzZnVsbHk6XCIsIHR4SWQpO1xuICAgIH0gY2F0Y2ggKGJyb2FkY2FzdEVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYnJvYWRjYXN0aW5nIHRyYW5zYWN0aW9uOlwiLCBicm9hZGNhc3RFcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gYnJvYWRjYXN0IHRyYW5zYWN0aW9uOiBcIiArIChicm9hZGNhc3RFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gYnJvYWRjYXN0RXJyb3IubWVzc2FnZSA6IFwiTmV0d29yayBlcnJvclwiKSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICB0eElkLFxuICAgICAgc3VjY2VzczogdHJ1ZVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIG1pbnRNZXRoYW5lOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJuIiwiQVBJX1VSTCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BUElfVVJMIiwibWludE1ldGhhbmUiLCJmZWVSYXRlIiwidXNlckFkZHJlc3MiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwibWludERhdGEiLCJvayIsImVycm9yRGF0YSIsImpzb24iLCJFcnJvciIsImVycm9yIiwic3RhdHVzVGV4dCIsImRhdGEiLCJzdWNjZXNzIiwicHNidCIsIndpbmRvdyIsIm95bCIsImJpdGNvaW4iLCJzaWduUHNidCIsInBzYnRUb1NpZ24iLCJmb3JtYXQiLCJjb25zb2xlIiwibG9nIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwiY29udmVyc2lvbkVycm9yIiwibWVzc2FnZSIsInNpZ25lZFBzYnQiLCJzaWduRXJyb3IiLCJwdXNoUHNidCIsInR4SWQiLCJicm9hZGNhc3RFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});